<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Test_AT_Response\Test_AT_Response.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Test_AT_Response\Test_AT_Response.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Sep 20 20:18:00 2021
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Write_Read_Pub &rArr; ftoa &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[16]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[17]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[18]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[19]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[31]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[35]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[36]">DMA2_Stream1_IRQHandler</a> from stm32f4xx_hal_uart_emul.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[37]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_hal_uart_emul.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[38]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[39]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3d]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1e]">EXTI9_5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[41]">FPU_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[27]">I2C1_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[26]">I2C1_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[29]">I2C2_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[28]">I2C2_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[40]">I2C3_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3f]">I2C3_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3a]">OTG_FS_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[32]">SDIO_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[42]">SPI4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xc.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[22]">TIM1_CC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[21]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[20]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[23]">TIM2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[24]">TIM3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[25]">TIM4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[33]">TIM5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[47]">UART_Emul_DMAError</a> from stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMAError) referenced from stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Receive_DMA)
 <LI><a href="#[47]">UART_Emul_DMAError</a> from stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMAError) referenced from stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Transmit_DMA)
 <LI><a href="#[46]">UART_Emul_DMAReceiveCplt</a> from stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMAReceiveCplt) referenced from stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Receive_DMA)
 <LI><a href="#[48]">UART_Emul_DMATransmitCplt</a> from stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMATransmitCplt) referenced from stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Transmit_DMA)
 <LI><a href="#[2c]">USART1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2d]">USART2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3e]">USART6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[45]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xc.o(.text)
 <LI><a href="#[49]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[43]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[45]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ae]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fb]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fc]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fd]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ec]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ff]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[4b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[100]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[5f]"></a>Blynk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lte.o(i.Blynk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Blynk &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>Check_Baud_LTE</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lte.o(i.Check_Baud_LTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Check_Baud_LTE &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Check_CPIN_LTE</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lte.o(i.Check_CPIN_LTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Check_CPIN_LTE &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>Check_Detect_Sim</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lte.o(i.Check_Detect_Sim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Check_Detect_Sim &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SIM
</UL>

<P><STRONG><a name="[6a]"></a>Check_MQTT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft_uart.o(i.Check_MQTT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_MQTT &rArr; Compare_Str
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
</UL>

<P><STRONG><a name="[6b]"></a>Check_New_Msg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, soft_uart.o(i.Check_New_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_New_Msg &rArr; Get_Paragraph
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
</UL>

<P><STRONG><a name="[69]"></a>Compare_Str</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, soft_uart.o(i.Compare_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Compare_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm_OK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_New_Msg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_MQTT
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Confirm_OK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft_uart.o(i.Confirm_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Confirm_OK &rArr; Compare_Str
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
</UL>

<P><STRONG><a name="[36]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 1998 bytes, Stack size 8 bytes, stm32f4xx_hal_uart_emul.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; UART_Emul_DMAError &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMAError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 2048 bytes, Stack size 8 bytes, stm32f4xx_hal_uart_emul.o(i.DMA2_Stream2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DMA2_Stream2_IRQHandler &rArr; UART_Emul_DMAError &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMAError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>Delete_Memory_SMS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lte.o(i.Delete_Memory_SMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Delete_Memory_SMS &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Disable_LTE</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lte.o(i.Disable_LTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disable_LTE
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; UART_Emul_ReceiveFormatFrame &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>Enable_LTE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lte.o(i.Enable_LTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable_LTE
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Enable_SIM</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lte.o(i.Enable_SIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Enable_SIM &rArr; Check_Detect_Sim &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Error_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Error_Handler &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[74]"></a>Get_Data_Msg</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, soft_uart.o(i.Get_Data_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Data_Msg &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Get_ID_Msg</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, soft_uart.o(i.Get_ID_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Get_ID_Msg &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>Get_Paragraph</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, soft_uart.o(i.Get_Paragraph))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Paragraph
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data_Msg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_New_Msg
</UL>

<P><STRONG><a name="[77]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMATx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMARx
</UL>

<P><STRONG><a name="[61]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Baud_LTE_4800
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Text_Mode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_ME_Memory
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Session
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ignore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ciphersuite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Certificate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Recv_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SIM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Memory_SMS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CPIN_LTE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Baud_LTE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blynk
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init_115200
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_115200
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data_Continue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>

<P><STRONG><a name="[7b]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart_emul.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; UART_Emul_ReceiveFormatFrame &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_ReceiveFrame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_ReceiveFormatFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; UART_Emul_ReceiveFormatFrame &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_MspInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[60]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blynk
</UL>

<P><STRONG><a name="[6f]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_LTE
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_LTE
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMATx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteByte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read_UniqID
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read_StatusReg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadSomeBytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>

<P><STRONG><a name="[78]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data_Continue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[c9]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7e]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMATx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMARx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_MspInit
</UL>

<P><STRONG><a name="[83]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMATx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMARx
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_MspInit
</UL>

<P><STRONG><a name="[7f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[88]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[87]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8c]"></a>HAL_SPI_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_SPI_Receive</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadSomeBytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
</UL>

<P><STRONG><a name="[93]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
</UL>

<P><STRONG><a name="[91]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
</UL>

<P><STRONG><a name="[82]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_UART_Emul_ErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, soft_uart.o(i.HAL_UART_Emul_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_ReceiveFormatFrame
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMAError
</UL>

<P><STRONG><a name="[9e]"></a>HAL_UART_Emul_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init_115200
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_UART_Emul_MspInit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_Emul_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Emul_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Emul_Receive_DMA</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_Emul_Receive_DMA &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data_Continue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data
</UL>

<P><STRONG><a name="[cc]"></a>HAL_UART_Emul_RxCpltCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft_uart.o(i.HAL_UART_Emul_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Emul_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMAReceiveCplt
</UL>

<P><STRONG><a name="[a4]"></a>HAL_UART_Emul_Transmit_DMA</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Emul_Transmit_DMA &rArr; UART_Emul_TransmitFormatFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_TransmitFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_TransmitFormatFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_115200
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_Emul_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMATransmitCplt
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_Transmit</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>Log_Info</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal_uart_emul.o(i.Log_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Baud_LTE_4800
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Text_Mode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_ME_Memory
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Session
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ignore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ciphersuite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Certificate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Recv_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Memory_SMS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CPIN_LTE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Baud_LTE
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_115200
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data_Continue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_ErrorCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ID_Msg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data_Msg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteByte
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
</UL>

<P><STRONG><a name="[ac]"></a>MQTT_Check_Connect</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lte.o(i.MQTT_Check_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MQTT_Check_Connect &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>MQTT_Connect</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lte.o(i.MQTT_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MQTT_Connect &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open_Connect
</UL>

<P><STRONG><a name="[af]"></a>MQTT_Open</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lte.o(i.MQTT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MQTT_Open &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open_Connect
</UL>

<P><STRONG><a name="[b0]"></a>MQTT_Open_Connect</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, main.o(i.MQTT_Open_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MQTT_Open_Connect &rArr; MQTT_Connect &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>MQTT_Publish</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, lte.o(i.MQTT_Publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MQTT_Publish &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>

<P><STRONG><a name="[b2]"></a>MQTT_Recv_Mode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lte.o(i.MQTT_Recv_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MQTT_Recv_Mode &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>MQTT_SSL_Certificate</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, lte.o(i.MQTT_SSL_Certificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MQTT_SSL_Certificate &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>MQTT_SSL_Ciphersuite</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lte.o(i.MQTT_SSL_Ciphersuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_SSL_Ciphersuite &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>MQTT_SSL_Ignore</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lte.o(i.MQTT_SSL_Ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_SSL_Ignore &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>MQTT_SSL_Level</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lte.o(i.MQTT_SSL_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_SSL_Level &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>MQTT_SSL_Mode</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lte.o(i.MQTT_SSL_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MQTT_SSL_Mode &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>MQTT_SSL_Version</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lte.o(i.MQTT_SSL_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_SSL_Version &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>MQTT_Session</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lte.o(i.MQTT_Session))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MQTT_Session &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>PWRCRL_OFF_LTE</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lte.o(i.PWRCRL_OFF_LTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PWRCRL_OFF_LTE &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Paragraph
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>Recv_Data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, soft_uart.o(i.Recv_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Recv_Data &rArr; HAL_UART_Emul_Receive_DMA &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
</UL>

<P><STRONG><a name="[c1]"></a>Recv_Data_Continue</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, soft_uart.o(i.Recv_Data_Continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Recv_Data_Continue &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
</UL>

<P><STRONG><a name="[64]"></a>Recv_Response</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, soft_uart.o(i.Recv_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Recv_Response &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm_OK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_New_Msg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_MQTT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Text_Mode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_ME_Memory
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Session
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ignore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ciphersuite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Certificate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Recv_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SIM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Memory_SMS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CPIN_LTE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Baud_LTE
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>Recv_Response_Continue</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, soft_uart.o(i.Recv_Response_Continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Recv_Response_Continue &rArr; Recv_Data_Continue &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data_Continue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm_OK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_New_Msg
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_MQTT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Baud_LTE_4800
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>Select_ME_Memory</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lte.o(i.Select_ME_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Select_ME_Memory &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>Select_Text_Mode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lte.o(i.Select_Text_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Select_Text_Mode &rArr; Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>Set_Baud_LTE_4800</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lte.o(i.Set_Baud_LTE_4800))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Set_Baud_LTE_4800 &rArr; Recv_Response_Continue &rArr; Recv_Data_Continue &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_115200
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>SystemClock_Config</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[a3]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Transmit_DMA
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Receive_DMA
</UL>

<P><STRONG><a name="[99]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[63]"></a>Trans_Data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, soft_uart.o(i.Trans_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Trans_Data &rArr; UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Text_Mode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_ME_Memory
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Session
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ignore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ciphersuite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Certificate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Recv_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SIM
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Memory_SMS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Detect_Sim
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CPIN_LTE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Baud_LTE
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Trans_Data_115200</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, soft_uart.o(i.Trans_Data_115200))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Trans_Data_115200 &rArr; UartEmul_Init_115200 &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartEmul_Init_115200
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Baud_LTE_4800
</UL>

<P><STRONG><a name="[c2]"></a>UartEmul_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, soft_uart.o(i.UartEmul_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UartEmul_Init &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Data_Continue
</UL>

<P><STRONG><a name="[cb]"></a>UartEmul_Init_115200</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, soft_uart.o(i.UartEmul_Init_115200))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UartEmul_Init_115200 &rArr; HAL_UART_Emul_Init &rArr; UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data_115200
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>W25Q16_Enable_Write</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w25q16.o(i.W25Q16_Enable_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25Q16_Enable_Write &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteByte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
</UL>

<P><STRONG><a name="[d2]"></a>W25Q16_Erase_Chip</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, w25q16.o(i.W25Q16_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25Q16_Erase_Chip &rArr; W25Q16_Wait_EndBusy &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>W25Q16_Erase_Sector</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, w25q16.o(i.W25Q16_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25Q16_Erase_Sector &rArr; W25Q16_Wait_EndBusy &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>

<P><STRONG><a name="[d5]"></a>W25Q16_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, w25q16.o(i.W25Q16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25Q16_Init &rArr; W25Q16_Read_StatusReg &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read_UniqID
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read_StatusReg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>W25Q16_ReadByte</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, w25q16.o(i.W25Q16_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = W25Q16_ReadByte &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>W25Q16_ReadSomeBytes</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, w25q16.o(i.W25Q16_ReadSomeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Q16_ReadSomeBytes &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>

<P><STRONG><a name="[d7]"></a>W25Q16_Read_StatusReg</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, w25q16.o(i.W25Q16_Read_StatusReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25Q16_Read_StatusReg &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
</UL>

<P><STRONG><a name="[d6]"></a>W25Q16_Read_UniqID</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, w25q16.o(i.W25Q16_Read_UniqID))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25Q16_Read_UniqID &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
</UL>

<P><STRONG><a name="[d1]"></a>W25Q16_Trans_Recv</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, w25q16.o(i.W25Q16_Trans_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteByte
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read_UniqID
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Read_StatusReg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadSomeBytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>

<P><STRONG><a name="[d3]"></a>W25Q16_Wait_EndBusy</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, w25q16.o(i.W25Q16_Wait_EndBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25Q16_Wait_EndBusy &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteByte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadSomeBytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
</UL>

<P><STRONG><a name="[da]"></a>W25Q16_WriteByte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, w25q16.o(i.W25Q16_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = W25Q16_WriteByte &rArr; W25Q16_Wait_EndBusy &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>W25Q16_WritePage</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, w25q16.o(i.W25Q16_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = W25Q16_WritePage &rArr; W25Q16_Wait_EndBusy &rArr; W25Q16_Trans_Recv &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Wait_EndBusy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Trans_Recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Enable_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>

<P><STRONG><a name="[dc]"></a>Write_Read_Pub</STRONG> (Thumb, 770 bytes, Stack size 24 bytes, main.o(i.Write_Read_Pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Write_Read_Pub &rArr; ftoa &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_to_String
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadSomeBytes
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Sector
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[75]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Session
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ignore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ciphersuite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Certificate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Recv_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Connect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data_Msg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
</UL>

<P><STRONG><a name="[ed]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e1]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[ea]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e4]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e2]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e8]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e5]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e9]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e7]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[dd]"></a>ftoa</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, w25q16.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ftoa &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>

<P><STRONG><a name="[f0]"></a>intToStr</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, w25q16.o(i.intToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intToStr &rArr; reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[43]"></a>main</STRONG> (Thumb, 712 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; Write_Read_Pub &rArr; ftoa &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Baud_LTE_4800
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Text_Mode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_ME_Memory
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCRL_OFF_LTE
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Session
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Version
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Mode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Level
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ignore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Ciphersuite
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_SSL_Certificate
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Recv_Mode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Publish
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Check_Connect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SIM
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_LTE
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_LTE
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Memory_SMS
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_CPIN_LTE
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Baud_LTE
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blynk
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trans_Data
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response_Continue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_Response
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ID_Msg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Data_Msg
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare_Str
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_Info
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_Open_Connect
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WritePage
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_WriteByte
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadSomeBytes
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_ReadByte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q16_Erase_Chip
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f1]"></a>reverse</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, w25q16.o(i.reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
</UL>

<P><STRONG><a name="[e6]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[de]"></a>u16_to_String</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w25q16.o(i.u16_to_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u16_to_String
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Read_Pub
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[47]"></a>UART_Emul_DMAError</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Emul_DMAError &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Receive_DMA)
<LI> stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Transmit_DMA)
</UL>
<P><STRONG><a name="[46]"></a>UART_Emul_DMAReceiveCplt</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Emul_DMAReceiveCplt &rArr; UART_Emul_ReceiveFormatFrame &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_RxCpltCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_ReceiveFormatFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Receive_DMA)
</UL>
<P><STRONG><a name="[48]"></a>UART_Emul_DMATransmitCplt</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Emul_DMATransmitCplt &rArr; UART_Emul_TransmitFormatFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_TxCpltCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_TransmitFrame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_TransmitFormatFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart_emul.o(i.HAL_UART_Emul_Transmit_DMA)
</UL>
<P><STRONG><a name="[7d]"></a>UART_Emul_ReceiveFormatFrame</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_ReceiveFormatFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_Emul_ReceiveFormatFrame &rArr; HAL_UART_Emul_ErrorCallback &rArr; Log_Info &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMAReceiveCplt
</UL>

<P><STRONG><a name="[7c]"></a>UART_Emul_ReceiveFrame</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_ReceiveFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Emul_ReceiveFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[a0]"></a>UART_Emul_SetConfig</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_Emul_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMATx
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig_DMARx
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Init
</UL>

<P><STRONG><a name="[cf]"></a>UART_Emul_SetConfig_DMARx</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_SetConfig_DMARx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Emul_SetConfig_DMARx &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig
</UL>

<P><STRONG><a name="[ce]"></a>UART_Emul_SetConfig_DMATx</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_SetConfig_DMATx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Emul_SetConfig_DMATx &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_SetConfig
</UL>

<P><STRONG><a name="[a5]"></a>UART_Emul_TransmitFormatFrame</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_TransmitFormatFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Emul_TransmitFormatFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Transmit_DMA
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMATransmitCplt
</UL>

<P><STRONG><a name="[a6]"></a>UART_Emul_TransmitFrame</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32f4xx_hal_uart_emul.o(i.UART_Emul_TransmitFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Emul_TransmitFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Emul_Transmit_DMA
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Emul_DMATransmitCplt
</UL>

<P><STRONG><a name="[ba]"></a>MX_GPIO_Init</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>MX_SPI2_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>MX_TIM1_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[94]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[c4]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[7a]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[79]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[84]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[85]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[9b]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[9a]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[9c]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a9]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[e0]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[ef]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ee]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[49]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
