
LowPowerMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002390  08002390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002398  08002398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080023ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080023ac  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078a1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001592  00000000  00000000  000278dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  00029518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb0c  00000000  00000000  00029b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007517  00000000  00000000  00049654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1340  00000000  00000000  00050b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111eab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a2c  00000000  00000000  00111f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002360 	.word	0x08002360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002360 	.word	0x08002360

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char *str = {0};
uint8_t Rxdata;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f9e0 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f806 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f88c 	bl	80005fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f860 	bl	80005a8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x14>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f001 ff28 	bl	8002350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <SystemClock_Config+0xb4>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <SystemClock_Config+0xb4>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <SystemClock_Config+0xb4>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <SystemClock_Config+0xb8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <SystemClock_Config+0xb8>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <SystemClock_Config+0xb8>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000548:	2302      	movs	r3, #2
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000550:	2310      	movs	r3, #16
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000554:	2300      	movs	r3, #0
 8000556:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fd69 	bl	8001034 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000568:	f000 f8aa 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f000 ffcc 	bl	8001524 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000592:	f000 f895 	bl	80006c0 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3750      	adds	r7, #80	; 0x50
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40023800 	.word	0x40023800
 80005a4:	40007000 	.word	0x40007000

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART2_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART2_UART_Init+0x4c>)
 80005e0:	f001 f970 	bl	80018c4 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ea:	f000 f869 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	40004400 	.word	0x40004400

080005fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <MX_GPIO_Init+0xb4>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_GPIO_Init+0xb4>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_GPIO_Init+0xb4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <MX_GPIO_Init+0xb8>)
 800066e:	f000 fcc7 	bl	8001000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000672:	2301      	movs	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_GPIO_Init+0xbc>)
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4619      	mov	r1, r3
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_GPIO_Init+0xc0>)
 8000686:	f000 fb1f 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	4619      	mov	r1, r3
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_GPIO_Init+0xb8>)
 80006a4:	f000 fb10 	bl	8000cc8 <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020c00 	.word	0x40020c00
 80006b8:	10110000 	.word	0x10110000
 80006bc:	40020000 	.word	0x40020000

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <HAL_MspInit+0x4c>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <HAL_MspInit+0x4c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x4c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x4c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <HAL_UART_MspInit+0x94>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d133      	bne.n	80007a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <HAL_UART_MspInit+0x98>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_UART_MspInit+0x98>)
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
 800074e:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <HAL_UART_MspInit+0x98>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_UART_MspInit+0x98>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <HAL_UART_MspInit+0x98>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_UART_MspInit+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000776:	230c      	movs	r3, #12
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000786:	2307      	movs	r3, #7
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <HAL_UART_MspInit+0x9c>)
 8000792:	f000 fa99 	bl	8000cc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2100      	movs	r1, #0
 800079a:	2026      	movs	r0, #38	; 0x26
 800079c:	f000 f9cb 	bl	8000b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007a0:	2026      	movs	r0, #38	; 0x26
 80007a2:	f000 f9e4 	bl	8000b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007a6:	bf00      	nop
 80007a8:	3728      	adds	r7, #40	; 0x28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40004400 	.word	0x40004400
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f89a 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <USART2_IRQHandler+0x10>)
 8000816:	f001 f8a3 	bl	8001960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000002c 	.word	0x2000002c

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800084e:	490e      	ldr	r1, [pc, #56]	; (8000888 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000864:	4c0b      	ldr	r4, [pc, #44]	; (8000894 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000872:	f7ff ffd7 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f001 fd47 	bl	8002308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe2b 	bl	80004d4 <main>
  bx  lr    
 800087e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800088c:	080023a0 	.word	0x080023a0
  ldr r2, =_sbss
 8000890:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000894:	20000074 	.word	0x20000074

08000898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f92b 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fefc 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f943 	bl	8000b8a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f90b 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20000070 	.word	0x20000070

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000070 	.word	0x20000070

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff29 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff3e 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff31 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffa2 	bl	8000adc <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff feda 	bl	8000968 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d008      	beq.n	8000bd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e052      	b.n	8000c7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0216 	bic.w	r2, r2, #22
 8000be2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d103      	bne.n	8000c04 <HAL_DMA_Abort+0x62>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0208 	bic.w	r2, r2, #8
 8000c12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0201 	bic.w	r2, r2, #1
 8000c22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c24:	e013      	b.n	8000c4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c26:	f7ff fe9f 	bl	8000968 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b05      	cmp	r3, #5
 8000c32:	d90c      	bls.n	8000c4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2220      	movs	r2, #32
 8000c38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2203      	movs	r2, #3
 8000c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e015      	b.n	8000c7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1e4      	bne.n	8000c26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c60:	223f      	movs	r2, #63	; 0x3f
 8000c62:	409a      	lsls	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2201      	movs	r2, #1
 8000c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d004      	beq.n	8000ca0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e00c      	b.n	8000cba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2205      	movs	r2, #5
 8000ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e16b      	b.n	8000fbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 815a 	bne.w	8000fb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d017      	beq.n	8000db8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80b4 	beq.w	8000fb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b60      	ldr	r3, [pc, #384]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a5f      	ldr	r2, [pc, #380]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b5d      	ldr	r3, [pc, #372]	; (8000fd4 <HAL_GPIO_Init+0x30c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6a:	4a5b      	ldr	r2, [pc, #364]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a52      	ldr	r2, [pc, #328]	; (8000fdc <HAL_GPIO_Init+0x314>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d02b      	beq.n	8000eee <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_GPIO_Init+0x318>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x31c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x320>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x324>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x328>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x32c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x20e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4b      	ldr	r2, [pc, #300]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x20a>
 8000ece:	2307      	movs	r3, #7
 8000ed0:	e00e      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	e00c      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e00a      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x228>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f00:	4935      	ldr	r1, [pc, #212]	; (8000fd8 <HAL_GPIO_Init+0x310>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0e:	4b3b      	ldr	r3, [pc, #236]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f32:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5c:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	f67f ae90 	bls.w	8000ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40021400 	.word	0x40021400
 8000ff4:	40021800 	.word	0x40021800
 8000ff8:	40021c00 	.word	0x40021c00
 8000ffc:	40013c00 	.word	0x40013c00

08001000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
 800100c:	4613      	mov	r3, r2
 800100e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800101c:	e003      	b.n	8001026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	041a      	lsls	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e264      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d075      	beq.n	800113e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001052:	4ba3      	ldr	r3, [pc, #652]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b04      	cmp	r3, #4
 800105c:	d00c      	beq.n	8001078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105e:	4ba0      	ldr	r3, [pc, #640]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001066:	2b08      	cmp	r3, #8
 8001068:	d112      	bne.n	8001090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106a:	4b9d      	ldr	r3, [pc, #628]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001076:	d10b      	bne.n	8001090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	4b99      	ldr	r3, [pc, #612]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d05b      	beq.n	800113c <HAL_RCC_OscConfig+0x108>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d157      	bne.n	800113c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e23f      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d106      	bne.n	80010a8 <HAL_RCC_OscConfig+0x74>
 800109a:	4b91      	ldr	r3, [pc, #580]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a90      	ldr	r2, [pc, #576]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xb0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x98>
 80010b2:	4b8b      	ldr	r3, [pc, #556]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a8a      	ldr	r2, [pc, #552]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a87      	ldr	r2, [pc, #540]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xb0>
 80010cc:	4b84      	ldr	r3, [pc, #528]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a83      	ldr	r2, [pc, #524]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b81      	ldr	r3, [pc, #516]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a80      	ldr	r2, [pc, #512]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc3c 	bl	8000968 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fc38 	bl	8000968 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e204      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xc0>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fc28 	bl	8000968 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fc24 	bl	8000968 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1f0      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	4b6c      	ldr	r3, [pc, #432]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0xe8>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d063      	beq.n	8001212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114a:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115e:	2b08      	cmp	r3, #8
 8001160:	d11c      	bne.n	800119c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d116      	bne.n	800119c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_RCC_OscConfig+0x152>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d001      	beq.n	8001186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e1c4      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4952      	ldr	r1, [pc, #328]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	e03a      	b.n	8001212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x2b0>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fbdd 	bl	8000968 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fbd9 	bl	8000968 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1a5      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4940      	ldr	r1, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <HAL_RCC_OscConfig+0x2b0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fbbc 	bl	8000968 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fbb8 	bl	8000968 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e184      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d030      	beq.n	8001280 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d016      	beq.n	8001254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_RCC_OscConfig+0x2b4>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff fb9c 	bl	8000968 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fb98 	bl	8000968 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e164      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x200>
 8001252:	e015      	b.n	8001280 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_RCC_OscConfig+0x2b4>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb85 	bl	8000968 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fb81 	bl	8000968 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e14d      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a0 	beq.w	80013ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_OscConfig+0x2b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d121      	bne.n	800130e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_RCC_OscConfig+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_RCC_OscConfig+0x2b8>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fb47 	bl	8000968 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	e011      	b.n	8001302 <HAL_RCC_OscConfig+0x2ce>
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	42470000 	.word	0x42470000
 80012e8:	42470e80 	.word	0x42470e80
 80012ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f0:	f7ff fb3a 	bl	8000968 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e106      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x4e4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x2f0>
 8001316:	4b81      	ldr	r3, [pc, #516]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a80      	ldr	r2, [pc, #512]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
 8001322:	e01c      	b.n	800135e <HAL_RCC_OscConfig+0x32a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x312>
 800132c:	4b7b      	ldr	r3, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a7a      	ldr	r2, [pc, #488]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
 8001338:	4b78      	ldr	r3, [pc, #480]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a77      	ldr	r2, [pc, #476]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x32a>
 8001346:	4b75      	ldr	r3, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a74      	ldr	r2, [pc, #464]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	4b72      	ldr	r3, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a71      	ldr	r2, [pc, #452]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d015      	beq.n	8001392 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff faff 	bl	8000968 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fafb 	bl	8000968 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0c5      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	4b65      	ldr	r3, [pc, #404]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ee      	beq.n	800136e <HAL_RCC_OscConfig+0x33a>
 8001390:	e014      	b.n	80013bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fae9 	bl	8000968 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fae5 	bl	8000968 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0af      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	4b5a      	ldr	r3, [pc, #360]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ee      	bne.n	800139a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 809b 	beq.w	800150e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d05c      	beq.n	800149e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d141      	bne.n	8001470 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x4ec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fab9 	bl	8000968 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fab5 	bl	8000968 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e081      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	019b      	lsls	r3, r3, #6
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	3b01      	subs	r3, #1
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	4937      	ldr	r1, [pc, #220]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_RCC_OscConfig+0x4ec>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fa8e 	bl	8000968 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fa8a 	bl	8000968 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e056      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x41c>
 800146e:	e04e      	b.n	800150e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_RCC_OscConfig+0x4ec>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fa77 	bl	8000968 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fa73 	bl	8000968 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e03f      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x44a>
 800149c:	e037      	b.n	800150e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e032      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d028      	beq.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d121      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d11a      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d111      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d107      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40007000 	.word	0x40007000
 800151c:	40023800 	.word	0x40023800
 8001520:	42470060 	.word	0x42470060

08001524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0cc      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d90c      	bls.n	8001560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b65      	ldr	r3, [pc, #404]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0b8      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	494d      	ldr	r1, [pc, #308]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d044      	beq.n	8001644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d119      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e067      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4934      	ldr	r1, [pc, #208]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001614:	f7ff f9a8 	bl	8000968 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	e00a      	b.n	8001632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161c:	f7ff f9a4 	bl	8000968 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e04f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 020c 	and.w	r2, r3, #12
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	429a      	cmp	r2, r3
 8001642:	d1eb      	bne.n	800161c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d20c      	bcs.n	800166c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e032      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4916      	ldr	r1, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016aa:	f000 f821 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	490a      	ldr	r1, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	5ccb      	ldrb	r3, [r1, r3]
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f908 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00
 80016e0:	40023800 	.word	0x40023800
 80016e4:	08002378 	.word	0x08002378
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016f6:	2100      	movs	r1, #0
 80016f8:	6079      	str	r1, [r7, #4]
 80016fa:	2100      	movs	r1, #0
 80016fc:	60f9      	str	r1, [r7, #12]
 80016fe:	2100      	movs	r1, #0
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001702:	2100      	movs	r1, #0
 8001704:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001706:	4952      	ldr	r1, [pc, #328]	; (8001850 <HAL_RCC_GetSysClockFreq+0x160>)
 8001708:	6889      	ldr	r1, [r1, #8]
 800170a:	f001 010c 	and.w	r1, r1, #12
 800170e:	2908      	cmp	r1, #8
 8001710:	d00d      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x3e>
 8001712:	2908      	cmp	r1, #8
 8001714:	f200 8094 	bhi.w	8001840 <HAL_RCC_GetSysClockFreq+0x150>
 8001718:	2900      	cmp	r1, #0
 800171a:	d002      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x32>
 800171c:	2904      	cmp	r1, #4
 800171e:	d003      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x38>
 8001720:	e08e      	b.n	8001840 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001722:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <HAL_RCC_GetSysClockFreq+0x164>)
 8001724:	60bb      	str	r3, [r7, #8]
       break;
 8001726:	e08e      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001728:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <HAL_RCC_GetSysClockFreq+0x168>)
 800172a:	60bb      	str	r3, [r7, #8]
      break;
 800172c:	e08b      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172e:	4948      	ldr	r1, [pc, #288]	; (8001850 <HAL_RCC_GetSysClockFreq+0x160>)
 8001730:	6849      	ldr	r1, [r1, #4]
 8001732:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001736:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001738:	4945      	ldr	r1, [pc, #276]	; (8001850 <HAL_RCC_GetSysClockFreq+0x160>)
 800173a:	6849      	ldr	r1, [r1, #4]
 800173c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001740:	2900      	cmp	r1, #0
 8001742:	d024      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001744:	4942      	ldr	r1, [pc, #264]	; (8001850 <HAL_RCC_GetSysClockFreq+0x160>)
 8001746:	6849      	ldr	r1, [r1, #4]
 8001748:	0989      	lsrs	r1, r1, #6
 800174a:	4608      	mov	r0, r1
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001754:	f04f 0500 	mov.w	r5, #0
 8001758:	ea00 0204 	and.w	r2, r0, r4
 800175c:	ea01 0305 	and.w	r3, r1, r5
 8001760:	493d      	ldr	r1, [pc, #244]	; (8001858 <HAL_RCC_GetSysClockFreq+0x168>)
 8001762:	fb01 f003 	mul.w	r0, r1, r3
 8001766:	2100      	movs	r1, #0
 8001768:	fb01 f102 	mul.w	r1, r1, r2
 800176c:	1844      	adds	r4, r0, r1
 800176e:	493a      	ldr	r1, [pc, #232]	; (8001858 <HAL_RCC_GetSysClockFreq+0x168>)
 8001770:	fba2 0101 	umull	r0, r1, r2, r1
 8001774:	1863      	adds	r3, r4, r1
 8001776:	4619      	mov	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	461a      	mov	r2, r3
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	f7fe fd22 	bl	80001c8 <__aeabi_uldivmod>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4613      	mov	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e04a      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_RCC_GetSysClockFreq+0x160>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	461a      	mov	r2, r3
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800179e:	f04f 0100 	mov.w	r1, #0
 80017a2:	ea02 0400 	and.w	r4, r2, r0
 80017a6:	ea03 0501 	and.w	r5, r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	014b      	lsls	r3, r1, #5
 80017b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017bc:	0142      	lsls	r2, r0, #5
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	1b00      	subs	r0, r0, r4
 80017c4:	eb61 0105 	sbc.w	r1, r1, r5
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	018b      	lsls	r3, r1, #6
 80017d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017d6:	0182      	lsls	r2, r0, #6
 80017d8:	1a12      	subs	r2, r2, r0
 80017da:	eb63 0301 	sbc.w	r3, r3, r1
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	00d9      	lsls	r1, r3, #3
 80017e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017ec:	00d0      	lsls	r0, r2, #3
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	1912      	adds	r2, r2, r4
 80017f4:	eb45 0303 	adc.w	r3, r5, r3
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	0299      	lsls	r1, r3, #10
 8001802:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001806:	0290      	lsls	r0, r2, #10
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	461a      	mov	r2, r3
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	f7fe fcd6 	bl	80001c8 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_GetSysClockFreq+0x160>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	60bb      	str	r3, [r7, #8]
      break;
 800183e:	e002      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_RCC_GetSysClockFreq+0x164>)
 8001842:	60bb      	str	r3, [r7, #8]
      break;
 8001844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001846:	68bb      	ldr	r3, [r7, #8]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	00f42400 	.word	0x00f42400
 8001858:	017d7840 	.word	0x017d7840

0800185c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_GetHCLKFreq+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001878:	f7ff fff0 	bl	800185c <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0a9b      	lsrs	r3, r3, #10
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	08002388 	.word	0x08002388

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff ffdc 	bl	800185c <HAL_RCC_GetHCLKFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0b5b      	lsrs	r3, r3, #13
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4903      	ldr	r1, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	08002388 	.word	0x08002388

080018c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e03f      	b.n	8001956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe ff16 	bl	800071c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2224      	movs	r2, #36	; 0x24
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fb35 	bl	8001f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800191c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800192c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800193c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_UART_IRQHandler+0x52>
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fa4d 	bl	8001e4a <UART_Receive_IT>
      return;
 80019b0:	e17c      	b.n	8001cac <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80b1 	beq.w	8001b1c <HAL_UART_IRQHandler+0x1bc>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_UART_IRQHandler+0x70>
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80a6 	beq.w	8001b1c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <HAL_UART_IRQHandler+0x90>
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f043 0201 	orr.w	r2, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_UART_IRQHandler+0xb0>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0202 	orr.w	r2, r3, #2
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00a      	beq.n	8001a30 <HAL_UART_IRQHandler+0xd0>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0204 	orr.w	r2, r3, #4
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00f      	beq.n	8001a5a <HAL_UART_IRQHandler+0xfa>
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d104      	bne.n	8001a4e <HAL_UART_IRQHandler+0xee>
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f043 0208 	orr.w	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 811f 	beq.w	8001ca2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	f003 0320 	and.w	r3, r3, #32
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_UART_IRQHandler+0x11e>
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f9e6 	bl	8001e4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a88:	2b40      	cmp	r3, #64	; 0x40
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <HAL_UART_IRQHandler+0x146>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d031      	beq.n	8001b0a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f926 	bl	8001cf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	2b40      	cmp	r3, #64	; 0x40
 8001ab8:	d123      	bne.n	8001b02 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d013      	beq.n	8001afa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad6:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_UART_IRQHandler+0x354>)
 8001ad8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f8cf 	bl	8000c82 <HAL_DMA_Abort_IT>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001af4:	4610      	mov	r0, r2
 8001af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001af8:	e00e      	b.n	8001b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8e6 	bl	8001ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b00:	e00a      	b.n	8001b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8e2 	bl	8001ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b08:	e006      	b.n	8001b18 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8de 	bl	8001ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001b16:	e0c4      	b.n	8001ca2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b18:	bf00      	nop
    return;
 8001b1a:	e0c2      	b.n	8001ca2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	f040 80a2 	bne.w	8001c6a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 809c 	beq.w	8001c6a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8096 	beq.w	8001c6a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5e:	2b40      	cmp	r3, #64	; 0x40
 8001b60:	d14f      	bne.n	8001c02 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001b6c:	8a3b      	ldrh	r3, [r7, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8099 	beq.w	8001ca6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b78:	8a3a      	ldrh	r2, [r7, #16]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	f080 8093 	bcs.w	8001ca6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	8a3a      	ldrh	r2, [r7, #16]
 8001b84:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b90:	d02b      	beq.n	8001bea <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695a      	ldr	r2, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0210 	bic.w	r2, r2, #16
 8001bde:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe ffdc 	bl	8000ba2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f870 	bl	8001ce0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c00:	e051      	b.n	8001ca6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d047      	beq.n	8001caa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8001c1a:	8a7b      	ldrh	r3, [r7, #18]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d044      	beq.n	8001caa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c2e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0210 	bic.w	r2, r2, #16
 8001c5c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c5e:	8a7b      	ldrh	r3, [r7, #18]
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f83c 	bl	8001ce0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001c68:	e01f      	b.n	8001caa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_UART_IRQHandler+0x326>
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f87b 	bl	8001d7a <UART_Transmit_IT>
    return;
 8001c84:	e012      	b.n	8001cac <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <HAL_UART_IRQHandler+0x34c>
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8bd 	bl	8001e1a <UART_EndTransmit_IT>
    return;
 8001ca0:	e004      	b.n	8001cac <HAL_UART_IRQHandler+0x34c>
    return;
 8001ca2:	bf00      	nop
 8001ca4:	e002      	b.n	8001cac <HAL_UART_IRQHandler+0x34c>
      return;
 8001ca6:	bf00      	nop
 8001ca8:	e000      	b.n	8001cac <HAL_UART_IRQHandler+0x34c>
      return;
 8001caa:	bf00      	nop
  }
}
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08001d53 	.word	0x08001d53

08001cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d0e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0210 	bic.w	r2, r2, #16
 8001d36:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff ffad 	bl	8001ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b21      	cmp	r3, #33	; 0x21
 8001d8c:	d13e      	bne.n	8001e0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d96:	d114      	bne.n	8001dc2 <UART_Transmit_IT+0x48>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d110      	bne.n	8001dc2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	1c9a      	adds	r2, r3, #2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	621a      	str	r2, [r3, #32]
 8001dc0:	e008      	b.n	8001dd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	1c59      	adds	r1, r3, #1
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6211      	str	r1, [r2, #32]
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4619      	mov	r1, r3
 8001de2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10f      	bne.n	8001e08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff3c 	bl	8001cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b22      	cmp	r3, #34	; 0x22
 8001e5c:	f040 8087 	bne.w	8001f6e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e68:	d117      	bne.n	8001e9a <UART_Receive_IT+0x50>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	1c9a      	adds	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
 8001e98:	e026      	b.n	8001ee8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eac:	d007      	beq.n	8001ebe <UART_Receive_IT+0x74>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <UART_Receive_IT+0x82>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e008      	b.n	8001ede <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d136      	bne.n	8001f6a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0220 	bic.w	r2, r2, #32
 8001f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0201 	bic.w	r2, r2, #1
 8001f2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10e      	bne.n	8001f5a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0210 	bic.w	r2, r2, #16
 8001f4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f50:	4619      	mov	r1, r3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fec4 	bl	8001ce0 <HAL_UARTEx_RxEventCallback>
 8001f58:	e002      	b.n	8001f60 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fab0 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e002      	b.n	8001f70 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f7c:	b09f      	sub	sp, #124	; 0x7c
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f8e:	68d9      	ldr	r1, [r3, #12]
 8001f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	ea40 0301 	orr.w	r3, r0, r1
 8001f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fbc:	f021 010c 	bic.w	r1, r1, #12
 8001fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fd6:	6999      	ldr	r1, [r3, #24]
 8001fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	ea40 0301 	orr.w	r3, r0, r1
 8001fe0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4bc5      	ldr	r3, [pc, #788]	; (80022fc <UART_SetConfig+0x384>)
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d004      	beq.n	8001ff6 <UART_SetConfig+0x7e>
 8001fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4bc3      	ldr	r3, [pc, #780]	; (8002300 <UART_SetConfig+0x388>)
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d103      	bne.n	8001ffe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff6:	f7ff fc51 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 8001ffa:	6778      	str	r0, [r7, #116]	; 0x74
 8001ffc:	e002      	b.n	8002004 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ffe:	f7ff fc39 	bl	8001874 <HAL_RCC_GetPCLK1Freq>
 8002002:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800200c:	f040 80b6 	bne.w	800217c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002012:	461c      	mov	r4, r3
 8002014:	f04f 0500 	mov.w	r5, #0
 8002018:	4622      	mov	r2, r4
 800201a:	462b      	mov	r3, r5
 800201c:	1891      	adds	r1, r2, r2
 800201e:	6439      	str	r1, [r7, #64]	; 0x40
 8002020:	415b      	adcs	r3, r3
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
 8002024:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002028:	1912      	adds	r2, r2, r4
 800202a:	eb45 0303 	adc.w	r3, r5, r3
 800202e:	f04f 0000 	mov.w	r0, #0
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	00d9      	lsls	r1, r3, #3
 8002038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800203c:	00d0      	lsls	r0, r2, #3
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	1911      	adds	r1, r2, r4
 8002044:	6639      	str	r1, [r7, #96]	; 0x60
 8002046:	416b      	adcs	r3, r5
 8002048:	667b      	str	r3, [r7, #100]	; 0x64
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	461a      	mov	r2, r3
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	1891      	adds	r1, r2, r2
 8002056:	63b9      	str	r1, [r7, #56]	; 0x38
 8002058:	415b      	adcs	r3, r3
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002060:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002064:	f7fe f8b0 	bl	80001c8 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4ba5      	ldr	r3, [pc, #660]	; (8002304 <UART_SetConfig+0x38c>)
 800206e:	fba3 2302 	umull	r2, r3, r3, r2
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	011e      	lsls	r6, r3, #4
 8002076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002078:	461c      	mov	r4, r3
 800207a:	f04f 0500 	mov.w	r5, #0
 800207e:	4622      	mov	r2, r4
 8002080:	462b      	mov	r3, r5
 8002082:	1891      	adds	r1, r2, r2
 8002084:	6339      	str	r1, [r7, #48]	; 0x30
 8002086:	415b      	adcs	r3, r3
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
 800208a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800208e:	1912      	adds	r2, r2, r4
 8002090:	eb45 0303 	adc.w	r3, r5, r3
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	00d9      	lsls	r1, r3, #3
 800209e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a2:	00d0      	lsls	r0, r2, #3
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	1911      	adds	r1, r2, r4
 80020aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80020ac:	416b      	adcs	r3, r5
 80020ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	461a      	mov	r2, r3
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	1891      	adds	r1, r2, r2
 80020bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80020be:	415b      	adcs	r3, r3
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020ca:	f7fe f87d 	bl	80001c8 <__aeabi_uldivmod>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <UART_SetConfig+0x38c>)
 80020d4:	fba3 1302 	umull	r1, r3, r3, r2
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	2164      	movs	r1, #100	; 0x64
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	3332      	adds	r3, #50	; 0x32
 80020e6:	4a87      	ldr	r2, [pc, #540]	; (8002304 <UART_SetConfig+0x38c>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020f4:	441e      	add	r6, r3
 80020f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f8:	4618      	mov	r0, r3
 80020fa:	f04f 0100 	mov.w	r1, #0
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	1894      	adds	r4, r2, r2
 8002104:	623c      	str	r4, [r7, #32]
 8002106:	415b      	adcs	r3, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800210e:	1812      	adds	r2, r2, r0
 8002110:	eb41 0303 	adc.w	r3, r1, r3
 8002114:	f04f 0400 	mov.w	r4, #0
 8002118:	f04f 0500 	mov.w	r5, #0
 800211c:	00dd      	lsls	r5, r3, #3
 800211e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002122:	00d4      	lsls	r4, r2, #3
 8002124:	4622      	mov	r2, r4
 8002126:	462b      	mov	r3, r5
 8002128:	1814      	adds	r4, r2, r0
 800212a:	653c      	str	r4, [r7, #80]	; 0x50
 800212c:	414b      	adcs	r3, r1
 800212e:	657b      	str	r3, [r7, #84]	; 0x54
 8002130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	461a      	mov	r2, r3
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	1891      	adds	r1, r2, r2
 800213c:	61b9      	str	r1, [r7, #24]
 800213e:	415b      	adcs	r3, r3
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002146:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800214a:	f7fe f83d 	bl	80001c8 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <UART_SetConfig+0x38c>)
 8002154:	fba3 1302 	umull	r1, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	2164      	movs	r1, #100	; 0x64
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	3332      	adds	r3, #50	; 0x32
 8002166:	4a67      	ldr	r2, [pc, #412]	; (8002304 <UART_SetConfig+0x38c>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	f003 0207 	and.w	r2, r3, #7
 8002172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4432      	add	r2, r6
 8002178:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800217a:	e0b9      	b.n	80022f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800217c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800217e:	461c      	mov	r4, r3
 8002180:	f04f 0500 	mov.w	r5, #0
 8002184:	4622      	mov	r2, r4
 8002186:	462b      	mov	r3, r5
 8002188:	1891      	adds	r1, r2, r2
 800218a:	6139      	str	r1, [r7, #16]
 800218c:	415b      	adcs	r3, r3
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002194:	1912      	adds	r2, r2, r4
 8002196:	eb45 0303 	adc.w	r3, r5, r3
 800219a:	f04f 0000 	mov.w	r0, #0
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	00d9      	lsls	r1, r3, #3
 80021a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021a8:	00d0      	lsls	r0, r2, #3
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	eb12 0804 	adds.w	r8, r2, r4
 80021b2:	eb43 0905 	adc.w	r9, r3, r5
 80021b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	008b      	lsls	r3, r1, #2
 80021ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80021ce:	0082      	lsls	r2, r0, #2
 80021d0:	4640      	mov	r0, r8
 80021d2:	4649      	mov	r1, r9
 80021d4:	f7fd fff8 	bl	80001c8 <__aeabi_uldivmod>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4b49      	ldr	r3, [pc, #292]	; (8002304 <UART_SetConfig+0x38c>)
 80021de:	fba3 2302 	umull	r2, r3, r3, r2
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	011e      	lsls	r6, r3, #4
 80021e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e8:	4618      	mov	r0, r3
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	1894      	adds	r4, r2, r2
 80021f4:	60bc      	str	r4, [r7, #8]
 80021f6:	415b      	adcs	r3, r3
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021fe:	1812      	adds	r2, r2, r0
 8002200:	eb41 0303 	adc.w	r3, r1, r3
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	f04f 0500 	mov.w	r5, #0
 800220c:	00dd      	lsls	r5, r3, #3
 800220e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002212:	00d4      	lsls	r4, r2, #3
 8002214:	4622      	mov	r2, r4
 8002216:	462b      	mov	r3, r5
 8002218:	1814      	adds	r4, r2, r0
 800221a:	64bc      	str	r4, [r7, #72]	; 0x48
 800221c:	414b      	adcs	r3, r1
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	f04f 0100 	mov.w	r1, #0
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	008b      	lsls	r3, r1, #2
 8002234:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002238:	0082      	lsls	r2, r0, #2
 800223a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800223e:	f7fd ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <UART_SetConfig+0x38c>)
 8002248:	fba3 1302 	umull	r1, r3, r3, r2
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	2164      	movs	r1, #100	; 0x64
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	3332      	adds	r3, #50	; 0x32
 800225a:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <UART_SetConfig+0x38c>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002266:	441e      	add	r6, r3
 8002268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800226a:	4618      	mov	r0, r3
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	1894      	adds	r4, r2, r2
 8002276:	603c      	str	r4, [r7, #0]
 8002278:	415b      	adcs	r3, r3
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002280:	1812      	adds	r2, r2, r0
 8002282:	eb41 0303 	adc.w	r3, r1, r3
 8002286:	f04f 0400 	mov.w	r4, #0
 800228a:	f04f 0500 	mov.w	r5, #0
 800228e:	00dd      	lsls	r5, r3, #3
 8002290:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002294:	00d4      	lsls	r4, r2, #3
 8002296:	4622      	mov	r2, r4
 8002298:	462b      	mov	r3, r5
 800229a:	eb12 0a00 	adds.w	sl, r2, r0
 800229e:	eb43 0b01 	adc.w	fp, r3, r1
 80022a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	008b      	lsls	r3, r1, #2
 80022b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80022ba:	0082      	lsls	r2, r0, #2
 80022bc:	4650      	mov	r0, sl
 80022be:	4659      	mov	r1, fp
 80022c0:	f7fd ff82 	bl	80001c8 <__aeabi_uldivmod>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <UART_SetConfig+0x38c>)
 80022ca:	fba3 1302 	umull	r1, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2164      	movs	r1, #100	; 0x64
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <UART_SetConfig+0x38c>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4432      	add	r2, r6
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	377c      	adds	r7, #124	; 0x7c
 80022f4:	46bd      	mov	sp, r7
 80022f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022fa:	bf00      	nop
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	51eb851f 	.word	0x51eb851f

08002308 <__libc_init_array>:
 8002308:	b570      	push	{r4, r5, r6, lr}
 800230a:	4d0d      	ldr	r5, [pc, #52]	; (8002340 <__libc_init_array+0x38>)
 800230c:	4c0d      	ldr	r4, [pc, #52]	; (8002344 <__libc_init_array+0x3c>)
 800230e:	1b64      	subs	r4, r4, r5
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	2600      	movs	r6, #0
 8002314:	42a6      	cmp	r6, r4
 8002316:	d109      	bne.n	800232c <__libc_init_array+0x24>
 8002318:	4d0b      	ldr	r5, [pc, #44]	; (8002348 <__libc_init_array+0x40>)
 800231a:	4c0c      	ldr	r4, [pc, #48]	; (800234c <__libc_init_array+0x44>)
 800231c:	f000 f820 	bl	8002360 <_init>
 8002320:	1b64      	subs	r4, r4, r5
 8002322:	10a4      	asrs	r4, r4, #2
 8002324:	2600      	movs	r6, #0
 8002326:	42a6      	cmp	r6, r4
 8002328:	d105      	bne.n	8002336 <__libc_init_array+0x2e>
 800232a:	bd70      	pop	{r4, r5, r6, pc}
 800232c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002330:	4798      	blx	r3
 8002332:	3601      	adds	r6, #1
 8002334:	e7ee      	b.n	8002314 <__libc_init_array+0xc>
 8002336:	f855 3b04 	ldr.w	r3, [r5], #4
 800233a:	4798      	blx	r3
 800233c:	3601      	adds	r6, #1
 800233e:	e7f2      	b.n	8002326 <__libc_init_array+0x1e>
 8002340:	08002398 	.word	0x08002398
 8002344:	08002398 	.word	0x08002398
 8002348:	08002398 	.word	0x08002398
 800234c:	0800239c 	.word	0x0800239c

08002350 <memset>:
 8002350:	4402      	add	r2, r0
 8002352:	4603      	mov	r3, r0
 8002354:	4293      	cmp	r3, r2
 8002356:	d100      	bne.n	800235a <memset+0xa>
 8002358:	4770      	bx	lr
 800235a:	f803 1b01 	strb.w	r1, [r3], #1
 800235e:	e7f9      	b.n	8002354 <memset+0x4>

08002360 <_init>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	bf00      	nop
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr

0800236c <_fini>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr
