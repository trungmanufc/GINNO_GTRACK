
G_TRACK_I2C_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  0800deb8  0800deb8  0001deb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec30  0800ec30  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec30  0800ec30  0001ec30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec38  0800ec38  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec38  0800ec38  0001ec38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec3c  0800ec3c  0001ec3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ec40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  200001e0  0800ee20  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015f0  0800ee20  000215f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed76  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a33  00000000  00000000  0003ef86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  000429c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f8  00000000  00000000  00044040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aa85  00000000  00000000  00045538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ad3  00000000  00000000  0005ffbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000947ae  00000000  00000000  00073a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010823e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe8  00000000  00000000  001082bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dea0 	.word	0x0800dea0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800dea0 	.word	0x0800dea0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main_process>:


#include"MainProcess.h"

void main_process(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
		/* Initialize some peripherals conneted externally to the system */
	    System_Initialization();
 8000efc:	f008 ff8c 	bl	8009e18 <System_Initialization>
	    /* LTE module Init */
	    LTE_Init();
	#endif

	    /* Enter Stop Mode */
	    if (!g_bIsMotion)
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <main_process+0x44>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <main_process+0x1a>
	    {
	    	Stop_Callback();
 8000f0e:	f008 ff17 	bl	8009d40 <Stop_Callback>
	    }

	    /* If motion is detected, reconfig the system */
	    Wakeup_CallBack();
 8000f12:	f008 fed9 	bl	8009cc8 <Wakeup_CallBack>

		/* Print log to indicate that we initialize the program */
		printf("************GTRACK STM32 PROGRAM*************\r\n");
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main_process+0x48>)
 8000f18:	f009 fca4 	bl	800a864 <puts>

	    	/* USER CODE BEGIN 3 */
		#if (TEST_GPS == 1)

			/* Check whether the inmotion state lasts 5 minutes or not */
			if ((HAL_GetTick() - g_u32CurrentTime) > TIME_5MINUTE)
 8000f1c:	f004 fb18 	bl	8005550 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <main_process+0x4c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <main_process+0x50>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d903      	bls.n	8000f36 <main_process+0x3e>
			{
				/* If the motion is not detected over 5 minutes, the system will enter stop mode */
				Stop_Callback();
 8000f2e:	f008 ff07 	bl	8009d40 <Stop_Callback>

				/* Wake up the system if the motion is detected */
				Wakeup_CallBack();
 8000f32:	f008 fec9 	bl	8009cc8 <Wakeup_CallBack>
			}
			Data_Process();
 8000f36:	f008 ff29 	bl	8009d8c <Data_Process>
			if ((HAL_GetTick() - g_u32CurrentTime) > TIME_5MINUTE)
 8000f3a:	e7ef      	b.n	8000f1c <main_process+0x24>
 8000f3c:	200003c5 	.word	0x200003c5
 8000f40:	0800deb8 	.word	0x0800deb8
 8000f44:	200003c8 	.word	0x200003c8
 8000f48:	000186a0 	.word	0x000186a0

08000f4c <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNU__C */

PUTCHAR_PROTOTYPE
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <__io_putchar+0x20>)
 8000f5e:	f007 fc90 	bl	8008882 <HAL_UART_Transmit>

	return ch;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000151c 	.word	0x2000151c

08000f70 <main>:


int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f74:	f004 fa86 	bl	8005484 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f78:	f000 f812 	bl	8000fa0 <SystemClock_Config>
  	/* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000f7c:	f000 f980 	bl	8001280 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000f80:	f000 f878 	bl	8001074 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000f84:	f000 f952 	bl	800122c <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000f88:	f000 f926 	bl	80011d8 <MX_USART1_UART_Init>
    MX_SPI2_Init();
 8000f8c:	f000 f8a0 	bl	80010d0 <MX_SPI2_Init>
    MX_TIM3_Init();
 8000f90:	f000 f8d4 	bl	800113c <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */

    /* Run the main process */
    main_process();
 8000f94:	f7ff ffb0 	bl	8000ef8 <main_process>
 8000f98:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2230      	movs	r2, #48	; 0x30
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f008 ff80 	bl	8009eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <SystemClock_Config+0xcc>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a27      	ldr	r2, [pc, #156]	; (800106c <SystemClock_Config+0xcc>)
 8000fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <SystemClock_Config+0xcc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <SystemClock_Config+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fec:	4a20      	ldr	r2, [pc, #128]	; (8001070 <SystemClock_Config+0xd0>)
 8000fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <SystemClock_Config+0xd0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001014:	2308      	movs	r3, #8
 8001016:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001018:	2354      	movs	r3, #84	; 0x54
 800101a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	4618      	mov	r0, r3
 800102a:	f005 ffbd 	bl	8006fa8 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001034:	f000 f9de 	bl	80013f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2102      	movs	r1, #2
 8001054:	4618      	mov	r0, r3
 8001056:	f006 fa17 	bl	8007488 <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001060:	f000 f9c8 	bl	80013f4 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3750      	adds	r7, #80	; 0x50
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_I2C1_Init+0x50>)
 800107a:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <MX_I2C1_Init+0x54>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_I2C1_Init+0x50>)
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_I2C1_Init+0x58>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_I2C1_Init+0x50>)
 8001092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_I2C1_Init+0x50>)
 80010b2:	f004 ffc3 	bl	800603c <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010bc:	f000 f99a 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20001488 	.word	0x20001488
 80010c8:	40005400 	.word	0x40005400
 80010cc:	00061a80 	.word	0x00061a80

080010d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_SPI2_Init+0x64>)
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MX_SPI2_Init+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_SPI2_Init+0x64>)
 80010dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_SPI2_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_SPI2_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_SPI2_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_SPI2_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_SPI2_Init+0x64>)
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_SPI2_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_SPI2_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_SPI2_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_SPI2_Init+0x64>)
 8001116:	2200      	movs	r2, #0
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_SPI2_Init+0x64>)
 800111c:	220a      	movs	r2, #10
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_SPI2_Init+0x64>)
 8001122:	f006 fb7d 	bl	8007820 <HAL_SPI_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800112c:	f000 f962 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20001430 	.word	0x20001430
 8001138:	40003800 	.word	0x40003800

0800113c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM3_Init+0x94>)
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <MX_TIM3_Init+0x98>)
 800115c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_TIM3_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_TIM3_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM3_Init+0x94>)
 800116c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001170:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_TIM3_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM3_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_TIM3_Init+0x94>)
 8001180:	f007 f8a2 	bl	80082c8 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 f933 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_TIM3_Init+0x94>)
 800119c:	f007 f8bf 	bl	800831e <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 f925 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM3_Init+0x94>)
 80011b8:	f007 faa8 	bl	800870c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011c2:	f000 f917 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200014dc 	.word	0x200014dc
 80011d4:	40000400 	.word	0x40000400

080011d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART1_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001210:	f007 faea 	bl	80087e8 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f8eb 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000151c 	.word	0x2000151c
 8001228:	40011000 	.word	0x40011000

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f007 fac0 	bl	80087e8 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f8c1 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000158c 	.word	0x2000158c
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <MX_GPIO_Init+0x13c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a47      	ldr	r2, [pc, #284]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b41      	ldr	r3, [pc, #260]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a40      	ldr	r2, [pc, #256]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a39      	ldr	r2, [pc, #228]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b37      	ldr	r3, [pc, #220]	; (80013bc <MX_GPIO_Init+0x13c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2190      	movs	r1, #144	; 0x90
 80012ee:	4834      	ldr	r0, [pc, #208]	; (80013c0 <MX_GPIO_Init+0x140>)
 80012f0:	f004 fe72 	bl	8005fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|WAKEUP_CTRL_Pin|RESET_CTRL_Pin|PWRKEY_CTRL_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f241 0138 	movw	r1, #4152	; 0x1038
 80012fa:	4832      	ldr	r0, [pc, #200]	; (80013c4 <MX_GPIO_Init+0x144>)
 80012fc:	f004 fe6c 	bl	8005fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001306:	4830      	ldr	r0, [pc, #192]	; (80013c8 <MX_GPIO_Init+0x148>)
 8001308:	f004 fe66 	bl	8005fd8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001312:	482d      	ldr	r0, [pc, #180]	; (80013c8 <MX_GPIO_Init+0x148>)
 8001314:	f004 fe60 	bl	8005fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <MX_GPIO_Init+0x14c>)
 800131e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4825      	ldr	r0, [pc, #148]	; (80013c0 <MX_GPIO_Init+0x140>)
 800132c:	f004 fbf0 	bl	8005b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001330:	2390      	movs	r3, #144	; 0x90
 8001332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <MX_GPIO_Init+0x140>)
 8001348:	f004 fbe2 	bl	8005b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|WAKEUP_CTRL_Pin|PWRKEY_CTRL_Pin;
 800134c:	f241 0328 	movw	r3, #4136	; 0x1028
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4817      	ldr	r0, [pc, #92]	; (80013c4 <MX_GPIO_Init+0x144>)
 8001366:	f004 fbd3 	bl	8005b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800136a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800136e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	4619      	mov	r1, r3
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <MX_GPIO_Init+0x148>)
 8001384:	f004 fbc4 	bl	8005b10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_CTRL_Pin */
  GPIO_InitStruct.Pin = RESET_CTRL_Pin;
 8001388:	2310      	movs	r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800138c:	2311      	movs	r3, #17
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4619      	mov	r1, r3
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <MX_GPIO_Init+0x144>)
 80013a0:	f004 fbb6 	bl	8005b10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2006      	movs	r0, #6
 80013aa:	f004 f9fa 	bl	80057a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f004 fa13 	bl	80057da <HAL_NVIC_EnableIRQ>

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40020800 	.word	0x40020800
 80013cc:	10210000 	.word	0x10210000

080013d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 80013d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <HAL_UART_RxCpltCallback+0x1c>)
 80013de:	4804      	ldr	r0, [pc, #16]	; (80013f0 <HAL_UART_RxCpltCallback+0x20>)
 80013e0:	f007 fb8e 	bl	8008b00 <HAL_UART_Receive_IT>

}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000858 	.word	0x20000858
 80013f0:	2000158c 	.word	0x2000158c

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_MspInit+0x4c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_MspInit+0x4c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_MspInit+0x4c>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x4c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <HAL_I2C_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12b      	bne.n	80014ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_I2C_MspInit+0x88>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_I2C_MspInit+0x88>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_I2C_MspInit+0x88>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001492:	23c0      	movs	r3, #192	; 0xc0
 8001494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001496:	2312      	movs	r3, #18
 8001498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a2:	2304      	movs	r3, #4
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <HAL_I2C_MspInit+0x8c>)
 80014ae:	f004 fb2f 	bl	8005b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_I2C_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_I2C_MspInit+0x88>)
 80014bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_I2C_MspInit+0x88>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40005400 	.word	0x40005400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020400 	.word	0x40020400

080014e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a19      	ldr	r2, [pc, #100]	; (8001568 <HAL_SPI_MspInit+0x84>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d12c      	bne.n	8001560 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_SPI_MspInit+0x88>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_SPI_MspInit+0x88>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_SPI_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_SPI_MspInit+0x88>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <HAL_SPI_MspInit+0x88>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_SPI_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800153e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001550:	2305      	movs	r3, #5
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_SPI_MspInit+0x8c>)
 800155c:	f004 fad8 	bl	8005b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40003800 	.word	0x40003800
 800156c:	40023800 	.word	0x40023800
 8001570:	40020400 	.word	0x40020400

08001574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10d      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_TIM_Base_MspInit+0x40>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_TIM_Base_MspInit+0x40>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_TIM_Base_MspInit+0x40>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <HAL_UART_MspInit+0xf8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12d      	bne.n	8001636 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a34      	ldr	r2, [pc, #208]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 80015e4:	f043 0310 	orr.w	r3, r3, #16
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001624:	2307      	movs	r3, #7
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <HAL_UART_MspInit+0x100>)
 8001630:	f004 fa6e 	bl	8005b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001634:	e038      	b.n	80016a8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_UART_MspInit+0x104>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d133      	bne.n	80016a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 800164a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6313      	str	r3, [r2, #48]	; 0x30
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_UART_MspInit+0xfc>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001678:	230c      	movs	r3, #12
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001688:	2307      	movs	r3, #7
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <HAL_UART_MspInit+0x100>)
 8001694:	f004 fa3c 	bl	8005b10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2026      	movs	r0, #38	; 0x26
 800169e:	f004 f880 	bl	80057a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a2:	2026      	movs	r0, #38	; 0x26
 80016a4:	f004 f899 	bl	80057da <HAL_NVIC_EnableIRQ>
}
 80016a8:	bf00      	nop
 80016aa:	3730      	adds	r7, #48	; 0x30
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40004400 	.word	0x40004400

080016c0 <HAL_UART_Emul_MspInit>:
 *           - Pin Tx and Rx
  * @param  htim: UART Emulation handle pointer
  * @retval None
  */
void HAL_UART_Emul_MspInit(UART_Emul_HandleTypeDef *huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #######################*/
  /* Enable clock for UART Emul */
  __UART_EMUL_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6453      	str	r3, [r2, #68]	; 0x44
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 80016ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIO TX/RX clock */
  UART_EMUL_TX_GPIO_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
  UART_EMUL_RX_GPIO_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6313      	str	r3, [r2, #48]	; 0x30
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_UART_Emul_MspInit+0xe0>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]

  /* Initialize UART Emulation port name */
  UartEmulHandle.TxPortName = UART_EMUL_TX_PORT;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_UART_Emul_MspInit+0xe4>)
 800173a:	4a1b      	ldr	r2, [pc, #108]	; (80017a8 <HAL_UART_Emul_MspInit+0xe8>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
  UartEmulHandle.RxPortName = UART_EMUL_RX_PORT;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_UART_Emul_MspInit+0xe4>)
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_UART_Emul_MspInit+0xe8>)
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

  /*Initialize UART Emulation pin number for Tx */
  UartEmulHandle.Init.RxPinNumber = UART_EMUL_RX_PIN;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_UART_Emul_MspInit+0xe4>)
 8001746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800174a:	821a      	strh	r2, [r3, #16]
  UartEmulHandle.Init.TxPinNumber = UART_EMUL_TX_PIN;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_UART_Emul_MspInit+0xe4>)
 800174e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001752:	825a      	strh	r2, [r3, #18]

  /* Configure GPIOE for UART Emulation Tx */
  GPIO_InitStruct.Pin    = UART_EMUL_TX_PIN;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(UART_EMUL_TX_PORT, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	480e      	ldr	r0, [pc, #56]	; (80017a8 <HAL_UART_Emul_MspInit+0xe8>)
 800176e:	f004 f9cf 	bl	8005b10 <HAL_GPIO_Init>

  /* Configure GPIOC for UART Emulation Rx */
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_UART_Emul_MspInit+0xec>)
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin  = UART_EMUL_RX_PIN;
 8001776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800177a:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(UART_EMUL_RX_PORT, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <HAL_UART_Emul_MspInit+0xe8>)
 8001784:	f004 f9c4 	bl	8005b10 <HAL_GPIO_Init>

  /*##-2- Enable NVIC for line Rx  #################################*/
  /* Enable and set EXTI Line Interrupt to the highest priority */
  HAL_NVIC_SetPriority(UART_EMUL_EXTI_IRQ, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2028      	movs	r0, #40	; 0x28
 800178e:	f004 f808 	bl	80057a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART_EMUL_EXTI_IRQ);
 8001792:	2028      	movs	r0, #40	; 0x28
 8001794:	f004 f821 	bl	80057da <HAL_NVIC_EnableIRQ>
}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	2000155c 	.word	0x2000155c
 80017a8:	40020000 	.word	0x40020000
 80017ac:	10210000 	.word	0x10210000

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f003 fe90 	bl	8005528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001810:	2001      	movs	r0, #1
 8001812:	f004 fbfb 	bl	800600c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  printf("MOTION DETECTED !!\r\n");
 8001816:	4802      	ldr	r0, [pc, #8]	; (8001820 <EXTI0_IRQHandler+0x14>)
 8001818:	f009 f824 	bl	800a864 <puts>
  /* USER CODE END EXTI0_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	0800dee8 	.word	0x0800dee8

08001824 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <USART2_IRQHandler+0x10>)
 800182a:	f007 f9bf 	bl	8008bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000158c 	.word	0x2000158c

08001838 <EXTI15_10_IRQHandler>:
* @brief  This function handles EXTI interrupt Rx Line.
* @param  None
* @retval None
*/
void UART_EMUL_EXTI_IRQHandler (void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(UART_EMUL_RX_PIN);
 800183c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001840:	f004 fbe4 	bl	800600c <HAL_GPIO_EXTI_IRQHandler>
  //printf("Detected SOFTUART!!!\r\n");
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
	}

return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e009      	b.n	80018a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	60ba      	str	r2, [r7, #8]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb55 	bl	8000f4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbf1      	blt.n	8001894 <_write+0x12>
	}
	return len;
 80018b0:	687b      	ldr	r3, [r7, #4]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_close>:

int _close(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return -1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e2:	605a      	str	r2, [r3, #4]
	return 0;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_isatty>:

int _isatty(int file)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	return 1;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f008 fa84 	bl	8009e60 <__errno>
 8001958:	4602      	mov	r2, r0
 800195a:	230c      	movs	r3, #12
 800195c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20010000 	.word	0x20010000
 8001984:	00000400 	.word	0x00000400
 8001988:	200001fc 	.word	0x200001fc
 800198c:	200015f0 	.word	0x200015f0

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <SystemInit+0x28>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <SystemInit+0x28>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SystemInit+0x28>)
 80019a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019aa:	609a      	str	r2, [r3, #8]
#endif
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr  r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019e6:	f7ff ffd3 	bl	8001990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f008 fa3f 	bl	8009e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fabf 	bl	8000f70 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80019f8:	0800ec40 	.word	0x0800ec40
  ldr  r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a00:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001a04:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001a08:	200015f0 	.word	0x200015f0

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <Log_Info>:
  * @param  sizeStr  Amount of data elements to be sent
  * @param  inputStr pointer to data elements to be sent
  * @retval none
  */
void Log_Info(uint8_t* inputStr,  uint8_t sizeStr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
		if(inputStr != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <Log_Info+0x24>
		{
		    HAL_UART_Transmit(&UART_LOG, inputStr, sizeStr, 1000);
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <Log_Info+0x3c>)
 8001a2e:	f006 ff28 	bl	8008882 <HAL_UART_Transmit>
		}
		else
		{
				HAL_UART_Transmit(&UART_LOG, (uint8_t*)"Data Log NULL\r\n", 15, 1000);
		}
}
 8001a32:	e006      	b.n	8001a42 <Log_Info+0x32>
				HAL_UART_Transmit(&UART_LOG, (uint8_t*)"Data Log NULL\r\n", 15, 1000);
 8001a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a38:	220f      	movs	r2, #15
 8001a3a:	4905      	ldr	r1, [pc, #20]	; (8001a50 <Log_Info+0x40>)
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <Log_Info+0x3c>)
 8001a3e:	f006 ff20 	bl	8008882 <HAL_UART_Transmit>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000151c 	.word	0x2000151c
 8001a50:	0800defc 	.word	0x0800defc

08001a54 <W25Q16_Trans_Recv>:
 *
 *
 * @param[in] data: value to be sent
 */
uint8_t W25Q16_Trans_Recv(uint8_t data)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
		uint8_t retValue = 0;	//local variable to return
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_TransmitReceive(&W25Q16_SPI, &data, &retValue, 1, 100);
 8001a62:	f107 020f 	add.w	r2, r7, #15
 8001a66:	1df9      	adds	r1, r7, #7
 8001a68:	2364      	movs	r3, #100	; 0x64
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	4804      	ldr	r0, [pc, #16]	; (8001a80 <W25Q16_Trans_Recv+0x2c>)
 8001a70:	f006 f977 	bl	8007d62 <HAL_SPI_TransmitReceive>
		return retValue;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20001430 	.word	0x20001430

08001a84 <W25Q16_Read_UniqID>:
 * This function reads Unique ID of W25Q16
 *
 * @param[in] none
 */
void W25Q16_Read_UniqID(void)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
		3. Send 4 dummy bytes
		4. Send 8 dummy byes and receive 8byte uniqueID
		5. Disable SPI
		******************************************************************************
		*/
		W25Q16_CS_EN; //Enable SPI
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a90:	4816      	ldr	r0, [pc, #88]	; (8001aec <W25Q16_Read_UniqID+0x68>)
 8001a92:	f004 faa1 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(READ_UNIQUE_ID); //Send READ_UNIQUE_ID Instruction
 8001a96:	204b      	movs	r0, #75	; 0x4b
 8001a98:	f7ff ffdc 	bl	8001a54 <W25Q16_Trans_Recv>
		for(uint8_t i = 0; i < 4; i++) //Send 4 dummy bytes
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	71fb      	strb	r3, [r7, #7]
 8001aa0:	e005      	b.n	8001aae <W25Q16_Read_UniqID+0x2a>
		{
				W25Q16_Trans_Recv(DUMMY_BYTE);
 8001aa2:	20a5      	movs	r0, #165	; 0xa5
 8001aa4:	f7ff ffd6 	bl	8001a54 <W25Q16_Trans_Recv>
		for(uint8_t i = 0; i < 4; i++) //Send 4 dummy bytes
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d9f6      	bls.n	8001aa2 <W25Q16_Read_UniqID+0x1e>
		}
		for(uint8_t i = 0; i < 8; i++) //Send 8 dummy byes and receive 8byte uniqueID
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	71bb      	strb	r3, [r7, #6]
 8001ab8:	e00a      	b.n	8001ad0 <W25Q16_Read_UniqID+0x4c>
		{
			myDevice.uniqID[i] = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001aba:	79bc      	ldrb	r4, [r7, #6]
 8001abc:	20a5      	movs	r0, #165	; 0xa5
 8001abe:	f7ff ffc9 	bl	8001a54 <W25Q16_Trans_Recv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <W25Q16_Read_UniqID+0x6c>)
 8001ac8:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < 8; i++) //Send 8 dummy byes and receive 8byte uniqueID
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	3301      	adds	r3, #1
 8001ace:	71bb      	strb	r3, [r7, #6]
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d9f1      	bls.n	8001aba <W25Q16_Read_UniqID+0x36>
		}
		W25Q16_CS_DIS; //Disable SPI
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <W25Q16_Read_UniqID+0x68>)
 8001ade:	f004 fa7b 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020400 	.word	0x40020400
 8001af0:	200015cc 	.word	0x200015cc

08001af4 <W25Q16_Enable_Write>:
 * @brief enable write operation with W25Q16
 *
 * @param[in] none
 */
void W25Q16_Enable_Write(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
		1. Enable SPI
		2. Send WRITE_ENABLE Instruction
		3. Disable SPI
		******************************************************************************
		*/
		W25Q16_CS_EN;
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <W25Q16_Enable_Write+0x2c>)
 8001b00:	f004 fa6a 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(WRITE_ENABLE);
 8001b04:	2006      	movs	r0, #6
 8001b06:	f7ff ffa5 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_CS_DIS;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <W25Q16_Enable_Write+0x2c>)
 8001b12:	f004 fa61 	bl	8005fd8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001b16:	2064      	movs	r0, #100	; 0x64
 8001b18:	f003 fd26 	bl	8005568 <HAL_Delay>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40020400 	.word	0x40020400

08001b24 <W25Q16_Read_StatusReg>:
 * @brief read status register of W25Q16
 *
 * @param[in] regID: 1 or 2 or 3 corresponding to id register
 */
uint8_t W25Q16_Read_StatusReg(uint8_t regID)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
		2. Check ID of Register
		3. Send READ_STATUS_REG corresponding
		4. Disable SPI
		******************************************************************************
		*/
		uint8_t retValue = 0;	//local variable to return
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
		W25Q16_CS_EN;
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <W25Q16_Read_StatusReg+0x84>)
 8001b3a:	f004 fa4d 	bl	8005fd8 <HAL_GPIO_WritePin>
		switch(regID)
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d002      	beq.n	8001b4a <W25Q16_Read_StatusReg+0x26>
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d00c      	beq.n	8001b62 <W25Q16_Read_StatusReg+0x3e>
 8001b48:	e017      	b.n	8001b7a <W25Q16_Read_StatusReg+0x56>
		{
				case 1:
				{
						W25Q16_Trans_Recv(READ_STATUS_REG1);
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f7ff ff82 	bl	8001a54 <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001b50:	20a5      	movs	r0, #165	; 0xa5
 8001b52:	f7ff ff7f 	bl	8001a54 <W25Q16_Trans_Recv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg1 = retValue;
 8001b5a:	4a14      	ldr	r2, [pc, #80]	; (8001bac <W25Q16_Read_StatusReg+0x88>)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	7593      	strb	r3, [r2, #22]
						break;
 8001b60:	e017      	b.n	8001b92 <W25Q16_Read_StatusReg+0x6e>
				}
				case 2:
				{
						W25Q16_Trans_Recv(READ_STATUS_REG2);
 8001b62:	2035      	movs	r0, #53	; 0x35
 8001b64:	f7ff ff76 	bl	8001a54 <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001b68:	20a5      	movs	r0, #165	; 0xa5
 8001b6a:	f7ff ff73 	bl	8001a54 <W25Q16_Trans_Recv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg2 = retValue;
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <W25Q16_Read_StatusReg+0x88>)
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	75d3      	strb	r3, [r2, #23]
						break;
 8001b78:	e00b      	b.n	8001b92 <W25Q16_Read_StatusReg+0x6e>
				}
				default:
						W25Q16_Trans_Recv(READ_STATUS_REG3);
 8001b7a:	2015      	movs	r0, #21
 8001b7c:	f7ff ff6a 	bl	8001a54 <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001b80:	20a5      	movs	r0, #165	; 0xa5
 8001b82:	f7ff ff67 	bl	8001a54 <W25Q16_Trans_Recv>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg3 = retValue;
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <W25Q16_Read_StatusReg+0x88>)
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	7613      	strb	r3, [r2, #24]
						break;
 8001b90:	bf00      	nop
		} //end switch
		W25Q16_CS_DIS; //disable SPI
 8001b92:	2201      	movs	r2, #1
 8001b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <W25Q16_Read_StatusReg+0x84>)
 8001b9a:	f004 fa1d 	bl	8005fd8 <HAL_GPIO_WritePin>

		return retValue;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	200015cc 	.word	0x200015cc

08001bb0 <W25Q16_Wait_EndBusy>:
 * @brief wait for end busy
 *
 * @param[in] none
 */
void W25Q16_Wait_EndBusy(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
		2. Send READ_STATUS_REG1
		3. Wait until MSB bit of status register 1 != 1
		4. Disable SPI
		******************************************************************************
		*/
		HAL_Delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f003 fcd7 	bl	8005568 <HAL_Delay>
		W25Q16_CS_EN;	//Enable SPI
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc0:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <W25Q16_Wait_EndBusy+0x48>)
 8001bc2:	f004 fa09 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(READ_STATUS_REG1); //Send READ_STATUS_REG1
 8001bc6:	2005      	movs	r0, #5
 8001bc8:	f7ff ff44 	bl	8001a54 <W25Q16_Trans_Recv>
		do //Wait until MSB bit of status register 1 != 1
		{
				myDevice.statusReg1 = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001bcc:	20a5      	movs	r0, #165	; 0xa5
 8001bce:	f7ff ff41 	bl	8001a54 <W25Q16_Trans_Recv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <W25Q16_Wait_EndBusy+0x4c>)
 8001bd8:	759a      	strb	r2, [r3, #22]
		}while((myDevice.statusReg1 & 0x01) == 0x01);
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <W25Q16_Wait_EndBusy+0x4c>)
 8001bdc:	7d9b      	ldrb	r3, [r3, #22]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f2      	bne.n	8001bcc <W25Q16_Wait_EndBusy+0x1c>
		W25Q16_CS_DIS; //Disable SPI
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <W25Q16_Wait_EndBusy+0x48>)
 8001bee:	f004 f9f3 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	200015cc 	.word	0x200015cc

08001c00 <W25Q16_Init>:
 * This function initializes the IC
 *
 * @param[in] none
 */
bool W25Q16_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
		6. Set idle status for device
		******************************************************************************
		*/
		char buffer_to_log[20];	//buffer for data to log via uart

		myDevice.isBusy = BUSY; //Set busy status for device
 8001c06:	4b42      	ldr	r3, [pc, #264]	; (8001d10 <W25Q16_Init+0x110>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	765a      	strb	r2, [r3, #25]
		W25Q16_CS_DIS; //Disable SPI
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c12:	4840      	ldr	r0, [pc, #256]	; (8001d14 <W25Q16_Init+0x114>)
 8001c14:	f004 f9e0 	bl	8005fd8 <HAL_GPIO_WritePin>

		/*Config parameters of Device*/
		myDevice.numBlock   = NUM_BLOCK;
 8001c18:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <W25Q16_Init+0x110>)
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	829a      	strh	r2, [r3, #20]
		myDevice.numSector  = NUM_SECTOR;
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <W25Q16_Init+0x110>)
 8001c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c24:	81da      	strh	r2, [r3, #14]
		myDevice.numPage		= NUM_PAGE;
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <W25Q16_Init+0x110>)
 8001c28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2c:	815a      	strh	r2, [r3, #10]
		myDevice.sizePage   = SIZE_PAGE;
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <W25Q16_Init+0x110>)
 8001c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c34:	811a      	strh	r2, [r3, #8]
		myDevice.sizeSector = SIZE_SECTOR;
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <W25Q16_Init+0x110>)
 8001c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c3c:	819a      	strh	r2, [r3, #12]
		myDevice.sizeBlock  = SIZE_BLOCK;
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <W25Q16_Init+0x110>)
 8001c40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c44:	611a      	str	r2, [r3, #16]

		W25Q16_Read_UniqID();
 8001c46:	f7ff ff1d 	bl	8001a84 <W25Q16_Read_UniqID>
		W25Q16_Read_StatusReg(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff ff6a 	bl	8001b24 <W25Q16_Read_StatusReg>
		W25Q16_Read_StatusReg(2);
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff ff67 	bl	8001b24 <W25Q16_Read_StatusReg>
		W25Q16_Read_StatusReg(3);
 8001c56:	2003      	movs	r0, #3
 8001c58:	f7ff ff64 	bl	8001b24 <W25Q16_Read_StatusReg>


		/*Log informations of device*/
		Log_Info((uint8_t*)"Initialize\n", 12);
 8001c5c:	210c      	movs	r1, #12
 8001c5e:	482e      	ldr	r0, [pc, #184]	; (8001d18 <W25Q16_Init+0x118>)
 8001c60:	f7ff fed6 	bl	8001a10 <Log_Info>
		sprintf((char*)buffer_to_log, "NumBlock = %d\r\n", myDevice.numBlock);
 8001c64:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <W25Q16_Init+0x110>)
 8001c66:	8a9b      	ldrh	r3, [r3, #20]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	492b      	ldr	r1, [pc, #172]	; (8001d1c <W25Q16_Init+0x11c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 fe00 	bl	800a874 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2110      	movs	r1, #16
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fec9 	bl	8001a10 <Log_Info>
		sprintf((char*)buffer_to_log, "NumSector = %d\r\n", myDevice.numSector);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <W25Q16_Init+0x110>)
 8001c80:	89db      	ldrh	r3, [r3, #14]
 8001c82:	461a      	mov	r2, r3
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4926      	ldr	r1, [pc, #152]	; (8001d20 <W25Q16_Init+0x120>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f008 fdf3 	bl	800a874 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 17);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2111      	movs	r1, #17
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff febc 	bl	8001a10 <Log_Info>
		sprintf((char*)buffer_to_log, "NumPage = %d\r\n", myDevice.numPage);
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <W25Q16_Init+0x110>)
 8001c9a:	895b      	ldrh	r3, [r3, #10]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4920      	ldr	r1, [pc, #128]	; (8001d24 <W25Q16_Init+0x124>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f008 fde6 	bl	800a874 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2110      	movs	r1, #16
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff feaf 	bl	8001a10 <Log_Info>
		sprintf((char*)buffer_to_log, "SizePage = %d\r\n", myDevice.sizePage);
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <W25Q16_Init+0x110>)
 8001cb4:	891b      	ldrh	r3, [r3, #8]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	491b      	ldr	r1, [pc, #108]	; (8001d28 <W25Q16_Init+0x128>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f008 fdd9 	bl	800a874 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fea2 	bl	8001a10 <Log_Info>
		sprintf((char*)buffer_to_log, "SizeSector = %d\r\n", myDevice.sizeSector);
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <W25Q16_Init+0x110>)
 8001cce:	899b      	ldrh	r3, [r3, #12]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4915      	ldr	r1, [pc, #84]	; (8001d2c <W25Q16_Init+0x12c>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f008 fdcc 	bl	800a874 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 19);
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2113      	movs	r1, #19
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fe95 	bl	8001a10 <Log_Info>
		sprintf((char*)buffer_to_log, "SizeBlock = %ld\r\n", myDevice.sizeBlock);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <W25Q16_Init+0x110>)
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4910      	ldr	r1, [pc, #64]	; (8001d30 <W25Q16_Init+0x130>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f008 fdc0 	bl	800a874 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 19);
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2113      	movs	r1, #19
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe89 	bl	8001a10 <Log_Info>

		myDevice.isBusy = IDLE; //Set idle status for device
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <W25Q16_Init+0x110>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	765a      	strb	r2, [r3, #25]

		return true;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200015cc 	.word	0x200015cc
 8001d14:	40020400 	.word	0x40020400
 8001d18:	0800df0c 	.word	0x0800df0c
 8001d1c:	0800df18 	.word	0x0800df18
 8001d20:	0800df28 	.word	0x0800df28
 8001d24:	0800df3c 	.word	0x0800df3c
 8001d28:	0800df4c 	.word	0x0800df4c
 8001d2c:	0800df5c 	.word	0x0800df5c
 8001d30:	0800df70 	.word	0x0800df70

08001d34 <W25Q16_Erase_Chip>:
 * @brief erase full chip
 *
 * @param[in] none
 */
void W25Q16_Erase_Chip(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
		6. Disable SPI
		7. Wait for end operation
		8. Set idle status for device
		******************************************************************************
		*/
		while(myDevice.isBusy == BUSY); //Wait end busy status
 8001d38:	bf00      	nop
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <W25Q16_Erase_Chip+0x54>)
 8001d3c:	7e5b      	ldrb	r3, [r3, #25]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d0fb      	beq.n	8001d3a <W25Q16_Erase_Chip+0x6>
		myDevice.isBusy  = BUSY;	//Set busy status for device
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <W25Q16_Erase_Chip+0x54>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	765a      	strb	r2, [r3, #25]
		W25Q16_Enable_Write();	//Write enable
 8001d48:	f7ff fed4 	bl	8001af4 <W25Q16_Enable_Write>
		W25Q16_CS_EN; //Enable SPI
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d52:	480e      	ldr	r0, [pc, #56]	; (8001d8c <W25Q16_Erase_Chip+0x58>)
 8001d54:	f004 f940 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(CHIP_ERASE); //Send CHIP_ERASE instruction
 8001d58:	20c7      	movs	r0, #199	; 0xc7
 8001d5a:	f7ff fe7b 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_CS_DIS; //Disable SPI
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <W25Q16_Erase_Chip+0x58>)
 8001d66:	f004 f937 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy(); //Wait for end operation
 8001d6a:	f7ff ff21 	bl	8001bb0 <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Erase chip success!!\r\n", 22);
 8001d6e:	2116      	movs	r1, #22
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <W25Q16_Erase_Chip+0x5c>)
 8001d72:	f7ff fe4d 	bl	8001a10 <Log_Info>
		HAL_Delay(10);
 8001d76:	200a      	movs	r0, #10
 8001d78:	f003 fbf6 	bl	8005568 <HAL_Delay>

		myDevice.isBusy = IDLE; //Set idle status for device
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <W25Q16_Erase_Chip+0x54>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	765a      	strb	r2, [r3, #25]
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200015cc 	.word	0x200015cc
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	0800df84 	.word	0x0800df84

08001d94 <W25Q16_Erase_Sector>:
 * @brief erase sector
 *
 * @param[in] idSector: id of sector to erase (0,1,...511)
 */
void W25Q16_Erase_Sector(uint16_t idSector)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
		8. Disable SPI
		9. Wait for end operation
		10. Set idle status for device
		******************************************************************************
		*/
		uint32_t addrSector = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]

		while(myDevice.isBusy == BUSY);
 8001da2:	bf00      	nop
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <W25Q16_Erase_Sector+0x94>)
 8001da6:	7e5b      	ldrb	r3, [r3, #25]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d0fb      	beq.n	8001da4 <W25Q16_Erase_Sector+0x10>
		myDevice.isBusy = BUSY;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <W25Q16_Erase_Sector+0x94>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	765a      	strb	r2, [r3, #25]
		W25Q16_Wait_EndBusy();
 8001db2:	f7ff fefd 	bl	8001bb0 <W25Q16_Wait_EndBusy>
		addrSector = idSector * myDevice.sizeSector;
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <W25Q16_Erase_Sector+0x94>)
 8001dba:	8992      	ldrh	r2, [r2, #12]
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
		W25Q16_Enable_Write();	//Write enable
 8001dc2:	f7ff fe97 	bl	8001af4 <W25Q16_Enable_Write>
		W25Q16_CS_EN;
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dcc:	4817      	ldr	r0, [pc, #92]	; (8001e2c <W25Q16_Erase_Sector+0x98>)
 8001dce:	f004 f903 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(SECTOR_ERASE);
 8001dd2:	2020      	movs	r0, #32
 8001dd4:	f7ff fe3e 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrSector  & 0xFF0000) >> 16);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	0c1b      	lsrs	r3, r3, #16
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe38 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrSector  & 0xFF00) >> 8);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe32 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrSector  & 0xFF) >> 0);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fe2d 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_CS_DIS;
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e00:	480a      	ldr	r0, [pc, #40]	; (8001e2c <W25Q16_Erase_Sector+0x98>)
 8001e02:	f004 f8e9 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy();
 8001e06:	f7ff fed3 	bl	8001bb0 <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Erase sector success!!\r\n", 24);
 8001e0a:	2118      	movs	r1, #24
 8001e0c:	4808      	ldr	r0, [pc, #32]	; (8001e30 <W25Q16_Erase_Sector+0x9c>)
 8001e0e:	f7ff fdff 	bl	8001a10 <Log_Info>
		HAL_Delay(1);
 8001e12:	2001      	movs	r0, #1
 8001e14:	f003 fba8 	bl	8005568 <HAL_Delay>

		myDevice.isBusy = IDLE;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <W25Q16_Erase_Sector+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	765a      	strb	r2, [r3, #25]
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200015cc 	.word	0x200015cc
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	0800df9c 	.word	0x0800df9c

08001e34 <W25Q16_WritePage>:
 * @param[in] number: number of datas to write
 * @param[in] offSet: offset value of start address (byte)
 */
void W25Q16_WritePage(uint8_t* pData,
											uint16_t idPage, uint8_t offSet, uint8_t number)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	807b      	strh	r3, [r7, #2]
 8001e46:	460b      	mov	r3, r1
 8001e48:	707b      	strb	r3, [r7, #1]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	703b      	strb	r3, [r7, #0]
		7. Disable SPI
		8. Wait for end operation
		9. Set idle status for device
		******************************************************************************
		*/
		uint32_t addrPage = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
		while(myDevice.isBusy == BUSY);
 8001e52:	bf00      	nop
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <W25Q16_WritePage+0xc8>)
 8001e56:	7e5b      	ldrb	r3, [r3, #25]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d0fb      	beq.n	8001e54 <W25Q16_WritePage+0x20>
		myDevice.isBusy  = BUSY;
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <W25Q16_WritePage+0xc8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	765a      	strb	r2, [r3, #25]
		if((number + offSet) > myDevice.sizePage) number = myDevice.sizePage - offSet;
 8001e62:	783a      	ldrb	r2, [r7, #0]
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <W25Q16_WritePage+0xc8>)
 8001e6a:	8912      	ldrh	r2, [r2, #8]
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	dd05      	ble.n	8001e7c <W25Q16_WritePage+0x48>
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <W25Q16_WritePage+0xc8>)
 8001e72:	891b      	ldrh	r3, [r3, #8]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	787b      	ldrb	r3, [r7, #1]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	703b      	strb	r3, [r7, #0]

		W25Q16_Wait_EndBusy();
 8001e7c:	f7ff fe98 	bl	8001bb0 <W25Q16_Wait_EndBusy>
		addrPage = (idPage * myDevice.sizePage) + offSet;
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <W25Q16_WritePage+0xc8>)
 8001e84:	8912      	ldrh	r2, [r2, #8]
 8001e86:	fb02 f203 	mul.w	r2, r2, r3
 8001e8a:	787b      	ldrb	r3, [r7, #1]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
		W25Q16_Enable_Write();	//Write enable
 8001e90:	f7ff fe30 	bl	8001af4 <W25Q16_Enable_Write>
		W25Q16_CS_EN;
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9a:	4819      	ldr	r0, [pc, #100]	; (8001f00 <W25Q16_WritePage+0xcc>)
 8001e9c:	f004 f89c 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(PAGE_PROGRAM);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f7ff fdd7 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF0000) >> 16);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fdd1 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF00) >> 8);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fdcb 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF) >> 0);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fdc6 	bl	8001a54 <W25Q16_Trans_Recv>
		HAL_SPI_Transmit(&W25Q16_SPI, pData, number, 100);
 8001ec8:	783b      	ldrb	r3, [r7, #0]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2364      	movs	r3, #100	; 0x64
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <W25Q16_WritePage+0xd0>)
 8001ed2:	f005 fd09 	bl	80078e8 <HAL_SPI_Transmit>
		W25Q16_CS_DIS;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <W25Q16_WritePage+0xcc>)
 8001ede:	f004 f87b 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy();
 8001ee2:	f7ff fe65 	bl	8001bb0 <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Write page SUCCESS\r\n", 22);
 8001ee6:	2116      	movs	r1, #22
 8001ee8:	4807      	ldr	r0, [pc, #28]	; (8001f08 <W25Q16_WritePage+0xd4>)
 8001eea:	f7ff fd91 	bl	8001a10 <Log_Info>
		myDevice.isBusy = IDLE;
 8001eee:	4b03      	ldr	r3, [pc, #12]	; (8001efc <W25Q16_WritePage+0xc8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	765a      	strb	r2, [r3, #25]
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200015cc 	.word	0x200015cc
 8001f00:	40020400 	.word	0x40020400
 8001f04:	20001430 	.word	0x20001430
 8001f08:	0800dfe8 	.word	0x0800dfe8

08001f0c <W25Q16_ReadSomeBytes>:
 * @param[in] addrToRead: address of byte to write
 * @param[in] number: number of bytes to read
 */
void W25Q16_ReadSomeBytes(uint8_t* pBuffer,
													uint32_t addrToRead, uint32_t number)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
		8. Wait for end operation
		9. Set idle status for device
		******************************************************************************
		*/
		//char buffer_to_log[30];
		while(myDevice.isBusy == BUSY);
 8001f18:	bf00      	nop
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <W25Q16_ReadSomeBytes+0x84>)
 8001f1c:	7e5b      	ldrb	r3, [r3, #25]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d0fb      	beq.n	8001f1a <W25Q16_ReadSomeBytes+0xe>
		myDevice.isBusy  = BUSY;
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <W25Q16_ReadSomeBytes+0x84>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	765a      	strb	r2, [r3, #25]
		W25Q16_Wait_EndBusy();
 8001f28:	f7ff fe42 	bl	8001bb0 <W25Q16_Wait_EndBusy>
		W25Q16_CS_EN;
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f32:	4818      	ldr	r0, [pc, #96]	; (8001f94 <W25Q16_ReadSomeBytes+0x88>)
 8001f34:	f004 f850 	bl	8005fd8 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(FAST_READ);
 8001f38:	200b      	movs	r0, #11
 8001f3a:	f7ff fd8b 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF0000) >> 16);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fd85 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF00) >> 8);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fd7f 	bl	8001a54 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF) >> 0);
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fd7a 	bl	8001a54 <W25Q16_Trans_Recv>
		//W25Q16_Trans_Recv(DUMMY_BYTE);
		W25Q16_Trans_Recv(0);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff fd77 	bl	8001a54 <W25Q16_Trans_Recv>
		HAL_SPI_Receive(&W25Q16_SPI, pBuffer, number, 1000);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <W25Q16_ReadSomeBytes+0x8c>)
 8001f72:	f005 fded 	bl	8007b50 <HAL_SPI_Receive>

		W25Q16_CS_DIS;
 8001f76:	2201      	movs	r2, #1
 8001f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <W25Q16_ReadSomeBytes+0x88>)
 8001f7e:	f004 f82b 	bl	8005fd8 <HAL_GPIO_WritePin>
				sprintf(buffer_to_log, "Read a byte %02x\r\n", pBuffer[i]);
				Log_Info((uint8_t*)buffer_to_log, 16);
		}
		#endif

		myDevice.isBusy = IDLE;
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <W25Q16_ReadSomeBytes+0x84>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	765a      	strb	r2, [r3, #25]
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200015cc 	.word	0x200015cc
 8001f94:	40020400 	.word	0x40020400
 8001f98:	20001430 	.word	0x20001430

08001f9c <LTE_PWRCRL_OFF>:
		HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_SET);
		HAL_Delay(550);
		HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_RESET);
}
void LTE_PWRCRL_OFF(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	/* keep Power Key at high level */
	HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <LTE_PWRCRL_OFF+0x48>)
 8001fa6:	f004 f817 	bl	8005fd8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fae:	f003 fadb 	bl	8005568 <HAL_Delay>
	Trans_Data(&UartEmulHandle, (uint8_t*)"0AT+QPOWD\r", 10);
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <LTE_PWRCRL_OFF+0x4c>)
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <LTE_PWRCRL_OFF+0x50>)
 8001fb8:	f000 fc90 	bl	80028dc <Trans_Data>
	if(Recv_Response(&UartEmulHandle, 2000) == RESPONSE_OK) Log_Info((uint8_t*)"RES_OK\n", 7);
 8001fbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <LTE_PWRCRL_OFF+0x50>)
 8001fc2:	f000 fd3d 	bl	8002a40 <Recv_Response>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d104      	bne.n	8001fd6 <LTE_PWRCRL_OFF+0x3a>
 8001fcc:	2107      	movs	r1, #7
 8001fce:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <LTE_PWRCRL_OFF+0x54>)
 8001fd0:	f7ff fd1e 	bl	8001a10 <Log_Info>
	else Log_Info((uint8_t*)"RES_ERR\n", 8);
}
 8001fd4:	e003      	b.n	8001fde <LTE_PWRCRL_OFF+0x42>
	else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8001fd6:	2108      	movs	r1, #8
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <LTE_PWRCRL_OFF+0x58>)
 8001fda:	f7ff fd19 	bl	8001a10 <Log_Info>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	0800e014 	.word	0x0800e014
 8001fec:	2000155c 	.word	0x2000155c
 8001ff0:	0800e020 	.word	0x0800e020
 8001ff4:	0800e028 	.word	0x0800e028

08001ff8 <Enable_LTE>:
void Enable_LTE(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(PWR_EN_PORT, PWR_EN_PIN, GPIO_PIN_RESET);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	4802      	ldr	r0, [pc, #8]	; (800200c <Enable_LTE+0x14>)
 8002004:	f003 ffe8 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020800 	.word	0x40020800

08002010 <MQTT_Recv_Mode>:
	* @param  msgLenEnabe:  Whether length of MQTT message received from server will be contained in URC (0 or 1)
  * @retval OK or ERR
  */
response_t MQTT_Recv_Mode(uint8_t clientIndex,
													uint8_t msgRecvMode, uint8_t msgLenEnabe)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af02      	add	r7, sp, #8
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
 800201a:	460b      	mov	r3, r1
 800201c:	71bb      	strb	r3, [r7, #6]
 800201e:	4613      	mov	r3, r2
 8002020:	717b      	strb	r3, [r7, #5]
		HAL_Delay(1000);
 8002022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002026:	f003 fa9f 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=recv/mode,%d,%d,%d\r", clientIndex, msgRecvMode, msgLenEnabe);
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	79b9      	ldrb	r1, [r7, #6]
 800202e:	797b      	ldrb	r3, [r7, #5]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	460b      	mov	r3, r1
 8002034:	490f      	ldr	r1, [pc, #60]	; (8002074 <MQTT_Recv_Mode+0x64>)
 8002036:	4810      	ldr	r0, [pc, #64]	; (8002078 <MQTT_Recv_Mode+0x68>)
 8002038:	f008 fc1c 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 27);
 800203c:	221b      	movs	r2, #27
 800203e:	490e      	ldr	r1, [pc, #56]	; (8002078 <MQTT_Recv_Mode+0x68>)
 8002040:	480e      	ldr	r0, [pc, #56]	; (800207c <MQTT_Recv_Mode+0x6c>)
 8002042:	f000 fc4b 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8002046:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <MQTT_Recv_Mode+0x6c>)
 800204c:	f000 fcf8 	bl	8002a40 <Recv_Response>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <MQTT_Recv_Mode+0x52>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8002056:	2107      	movs	r1, #7
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <MQTT_Recv_Mode+0x70>)
 800205a:	f7ff fcd9 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 800205e:	2301      	movs	r3, #1
 8002060:	e004      	b.n	800206c <MQTT_Recv_Mode+0x5c>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8002062:	2108      	movs	r1, #8
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <MQTT_Recv_Mode+0x74>)
 8002066:	f7ff fcd3 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0800e0a4 	.word	0x0800e0a4
 8002078:	20000744 	.word	0x20000744
 800207c:	2000155c 	.word	0x2000155c
 8002080:	0800e020 	.word	0x0800e020
 8002084:	0800e028 	.word	0x0800e028

08002088 <MQTT_Session>:
	* @param  sessionMode: Configure the session type (0 or 1)
  * @retval OK or ERR
  */
response_t MQTT_Session(uint8_t clientIndex,
												uint8_t sessionMode)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	460a      	mov	r2, r1
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	4613      	mov	r3, r2
 8002096:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 8002098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800209c:	f003 fa64 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=session,%d,%d\r", clientIndex, sessionMode);
 80020a0:	79fa      	ldrb	r2, [r7, #7]
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	490f      	ldr	r1, [pc, #60]	; (80020e4 <MQTT_Session+0x5c>)
 80020a6:	4810      	ldr	r0, [pc, #64]	; (80020e8 <MQTT_Session+0x60>)
 80020a8:	f008 fbe4 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 23);
 80020ac:	2217      	movs	r2, #23
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <MQTT_Session+0x60>)
 80020b0:	480e      	ldr	r0, [pc, #56]	; (80020ec <MQTT_Session+0x64>)
 80020b2:	f000 fc13 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80020b6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80020ba:	480c      	ldr	r0, [pc, #48]	; (80020ec <MQTT_Session+0x64>)
 80020bc:	f000 fcc0 	bl	8002a40 <Recv_Response>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <MQTT_Session+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80020c6:	2107      	movs	r1, #7
 80020c8:	4809      	ldr	r0, [pc, #36]	; (80020f0 <MQTT_Session+0x68>)
 80020ca:	f7ff fca1 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e004      	b.n	80020dc <MQTT_Session+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80020d2:	2108      	movs	r1, #8
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MQTT_Session+0x6c>)
 80020d6:	f7ff fc9b 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	0800e0c4 	.word	0x0800e0c4
 80020e8:	20000744 	.word	0x20000744
 80020ec:	2000155c 	.word	0x2000155c
 80020f0:	0800e020 	.word	0x0800e020
 80020f4:	0800e028 	.word	0x0800e028

080020f8 <MQTT_Open>:
	* @param  port: port id (4 digits)
  * @retval OK or ERR
  */
response_t MQTT_Open(uint8_t clientIndex,
										 uint8_t* hostName, uint16_t port)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	4613      	mov	r3, r2
 8002106:	80bb      	strh	r3, [r7, #4]
		HAL_Delay(1000);
 8002108:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800210c:	f003 fa2c 	bl	8005568 <HAL_Delay>
//		uint8_t lenBuffTrans = 20+lenHostName;	
		uint8_t lenBuffTrans = 20 + strlen((char*)hostName);
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f7fe f865 	bl	80001e0 <strlen>
 8002116:	4603      	mov	r3, r0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3314      	adds	r3, #20
 800211c:	73fb      	strb	r3, [r7, #15]
		sprintf((char*) g_buff_temp, "0AT+QMTOPEN=%d,%s,%d\r", clientIndex, hostName, port);
 800211e:	79fa      	ldrb	r2, [r7, #7]
 8002120:	88bb      	ldrh	r3, [r7, #4]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4924      	ldr	r1, [pc, #144]	; (80021b8 <MQTT_Open+0xc0>)
 8002128:	4824      	ldr	r0, [pc, #144]	; (80021bc <MQTT_Open+0xc4>)
 800212a:	f008 fba3 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	b29b      	uxth	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	4921      	ldr	r1, [pc, #132]	; (80021bc <MQTT_Open+0xc4>)
 8002136:	4822      	ldr	r0, [pc, #136]	; (80021c0 <MQTT_Open+0xc8>)
 8002138:	f000 fbd0 	bl	80028dc <Trans_Data>
		/*wait response of +QMTOPEN*/
		Recv_Response(&UartEmulHandle, WAIT_OPEN);
 800213c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002140:	481f      	ldr	r0, [pc, #124]	; (80021c0 <MQTT_Open+0xc8>)
 8002142:	f000 fc7d 	bl	8002a40 <Recv_Response>
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <MQTT_Open+0xcc>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3b03      	subs	r3, #3
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <MQTT_Open+0xcc>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	3b03      	subs	r3, #3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	491c      	ldr	r1, [pc, #112]	; (80021c8 <MQTT_Open+0xd0>)
 8002158:	4818      	ldr	r0, [pc, #96]	; (80021bc <MQTT_Open+0xc4>)
 800215a:	f000 fccb 	bl	8002af4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 800215e:	2201      	movs	r2, #1
 8002160:	491a      	ldr	r1, [pc, #104]	; (80021cc <MQTT_Open+0xd4>)
 8002162:	4816      	ldr	r0, [pc, #88]	; (80021bc <MQTT_Open+0xc4>)
 8002164:	f000 fc1e 	bl	80029a4 <Compare_Str>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <MQTT_Open+0x8a>
		{
				Log_Info((uint8_t*)"Open Success!\n", 14);
 800216e:	210e      	movs	r1, #14
 8002170:	4817      	ldr	r0, [pc, #92]	; (80021d0 <MQTT_Open+0xd8>)
 8002172:	f7ff fc4d 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8002176:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800217a:	f003 f9f5 	bl	8005568 <HAL_Delay>
				return RESPONSE_OK;
 800217e:	2301      	movs	r3, #1
 8002180:	e016      	b.n	80021b0 <MQTT_Open+0xb8>
		}
		if(Compare_Str(g_buff_temp, (uint8_t*)"2", 1))
 8002182:	2201      	movs	r2, #1
 8002184:	4913      	ldr	r1, [pc, #76]	; (80021d4 <MQTT_Open+0xdc>)
 8002186:	480d      	ldr	r0, [pc, #52]	; (80021bc <MQTT_Open+0xc4>)
 8002188:	f000 fc0c 	bl	80029a4 <Compare_Str>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <MQTT_Open+0xae>
		{
				Log_Info((uint8_t*)"Open Before!\n", 13);
 8002192:	210d      	movs	r1, #13
 8002194:	4810      	ldr	r0, [pc, #64]	; (80021d8 <MQTT_Open+0xe0>)
 8002196:	f7ff fc3b 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 800219a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800219e:	f003 f9e3 	bl	8005568 <HAL_Delay>
				return RESPONSE_MQTT_EXIST;
 80021a2:	2304      	movs	r3, #4
 80021a4:	e004      	b.n	80021b0 <MQTT_Open+0xb8>
		}
		HAL_Delay(MAX_WAIT_TIME);
 80021a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021aa:	f003 f9dd 	bl	8005568 <HAL_Delay>
		return RESPONSE_ERR;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	0800e0e0 	.word	0x0800e0e0
 80021bc:	20000744 	.word	0x20000744
 80021c0:	2000155c 	.word	0x2000155c
 80021c4:	20000641 	.word	0x20000641
 80021c8:	20000644 	.word	0x20000644
 80021cc:	0800e0f8 	.word	0x0800e0f8
 80021d0:	0800e0fc 	.word	0x0800e0fc
 80021d4:	0800e10c 	.word	0x0800e10c
 80021d8:	0800e110 	.word	0x0800e110

080021dc <MQTT_Close>:
  * @brief  Close a Network for MQTT Client
    * @param  clientIndex: MQTT client identifier (0-5)
  * @retval OK or ERR
  */
response_t MQTT_Close(uint8_t clientIndex)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(1000);
 80021e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ea:	f003 f9bd 	bl	8005568 <HAL_Delay>

        uint8_t lenBuffTrans = 15;
 80021ee:	230f      	movs	r3, #15
 80021f0:	73fb      	strb	r3, [r7, #15]
        sprintf((char*) g_buff_temp, "0AT+QMTCLOSE=%d\r", clientIndex);
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	461a      	mov	r2, r3
 80021f6:	491b      	ldr	r1, [pc, #108]	; (8002264 <MQTT_Close+0x88>)
 80021f8:	481b      	ldr	r0, [pc, #108]	; (8002268 <MQTT_Close+0x8c>)
 80021fa:	f008 fb3b 	bl	800a874 <siprintf>
        Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	4918      	ldr	r1, [pc, #96]	; (8002268 <MQTT_Close+0x8c>)
 8002206:	4819      	ldr	r0, [pc, #100]	; (800226c <MQTT_Close+0x90>)
 8002208:	f000 fb68 	bl	80028dc <Trans_Data>
        /*wait response of + QMTCLOSE*/
        Recv_Response(&UartEmulHandle, WAIT_OPEN);
 800220c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002210:	4816      	ldr	r0, [pc, #88]	; (800226c <MQTT_Close+0x90>)
 8002212:	f000 fc15 	bl	8002a40 <Recv_Response>
        Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <MQTT_Close+0x94>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	3b03      	subs	r3, #3
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <MQTT_Close+0x94>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3b03      	subs	r3, #3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4913      	ldr	r1, [pc, #76]	; (8002274 <MQTT_Close+0x98>)
 8002228:	480f      	ldr	r0, [pc, #60]	; (8002268 <MQTT_Close+0x8c>)
 800222a:	f000 fc63 	bl	8002af4 <Get_Paragraph>
        if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 800222e:	2201      	movs	r2, #1
 8002230:	4911      	ldr	r1, [pc, #68]	; (8002278 <MQTT_Close+0x9c>)
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <MQTT_Close+0x8c>)
 8002234:	f000 fbb6 	bl	80029a4 <Compare_Str>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <MQTT_Close+0x76>
        {
                Log_Info((uint8_t*)"Close Success!\n", 14);
 800223e:	210e      	movs	r1, #14
 8002240:	480e      	ldr	r0, [pc, #56]	; (800227c <MQTT_Close+0xa0>)
 8002242:	f7ff fbe5 	bl	8001a10 <Log_Info>
                HAL_Delay(MAX_WAIT_TIME);
 8002246:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800224a:	f003 f98d 	bl	8005568 <HAL_Delay>
                return RESPONSE_OK;
 800224e:	2301      	movs	r3, #1
 8002250:	e004      	b.n	800225c <MQTT_Close+0x80>
        }
        HAL_Delay(MAX_WAIT_TIME);
 8002252:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002256:	f003 f987 	bl	8005568 <HAL_Delay>
        return RESPONSE_ERR;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	0800e120 	.word	0x0800e120
 8002268:	20000744 	.word	0x20000744
 800226c:	2000155c 	.word	0x2000155c
 8002270:	20000641 	.word	0x20000641
 8002274:	20000644 	.word	0x20000644
 8002278:	0800e0f8 	.word	0x0800e0f8
 800227c:	0800e134 	.word	0x0800e134

08002280 <MQTT_Connect>:
	* @param  passWord: password corresponding to the user name of the client
  * @retval OK or ERR
  */
response_t MQTT_Connect(uint8_t clientIndex,
												uint8_t* clientID, uint8_t* userName, uint8_t* passWord)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(MAX_WAIT_TIME);
 8002290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002294:	f003 f968 	bl	8005568 <HAL_Delay>
//		uint8_t lenBuffTrans = 18 + lenUser + lenPass;
		uint8_t lenBuffTrans = 17 + strlen((char*)clientID) + strlen((char*)userName) + strlen((char*)passWord);
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f7fd ffa1 	bl	80001e0 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	b2dc      	uxtb	r4, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fd ff9c 	bl	80001e0 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4423      	add	r3, r4
 80022ae:	b2dc      	uxtb	r4, r3
 80022b0:	6838      	ldr	r0, [r7, #0]
 80022b2:	f7fd ff95 	bl	80001e0 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4423      	add	r3, r4
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3311      	adds	r3, #17
 80022c0:	75fb      	strb	r3, [r7, #23]
		sprintf((char*) g_buff_temp, "0AT+QMTCONN=%d,%s,%s,%s\r", clientIndex, clientID, userName, passWord);
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4922      	ldr	r1, [pc, #136]	; (8002358 <MQTT_Connect+0xd8>)
 80022d0:	4822      	ldr	r0, [pc, #136]	; (800235c <MQTT_Connect+0xdc>)
 80022d2:	f008 facf 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	491f      	ldr	r1, [pc, #124]	; (800235c <MQTT_Connect+0xdc>)
 80022de:	4820      	ldr	r0, [pc, #128]	; (8002360 <MQTT_Connect+0xe0>)
 80022e0:	f000 fafc 	bl	80028dc <Trans_Data>
		/*wait response of +QMTCONN*/
		if(Recv_Response(&UartEmulHandle, WAIT_CONNECT) == RESPONSE_MQTT_CLOSE) 
 80022e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80022e8:	481d      	ldr	r0, [pc, #116]	; (8002360 <MQTT_Connect+0xe0>)
 80022ea:	f000 fba9 	bl	8002a40 <Recv_Response>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d109      	bne.n	8002308 <MQTT_Connect+0x88>
		{
				Log_Info((uint8_t*)"CONNECT-CLOSE\n", 14);
 80022f4:	210e      	movs	r1, #14
 80022f6:	481b      	ldr	r0, [pc, #108]	; (8002364 <MQTT_Connect+0xe4>)
 80022f8:	f7ff fb8a 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80022fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002300:	f003 f932 	bl	8005568 <HAL_Delay>
				return RESPONSE_MQTT_CLOSE;
 8002304:	2303      	movs	r3, #3
 8002306:	e022      	b.n	800234e <MQTT_Connect+0xce>
		}
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MQTT_Connect+0xe8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	3b03      	subs	r3, #3
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MQTT_Connect+0xe8>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	3b03      	subs	r3, #3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4914      	ldr	r1, [pc, #80]	; (800236c <MQTT_Connect+0xec>)
 800231a:	4810      	ldr	r0, [pc, #64]	; (800235c <MQTT_Connect+0xdc>)
 800231c:	f000 fbea 	bl	8002af4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8002320:	2201      	movs	r2, #1
 8002322:	4913      	ldr	r1, [pc, #76]	; (8002370 <MQTT_Connect+0xf0>)
 8002324:	480d      	ldr	r0, [pc, #52]	; (800235c <MQTT_Connect+0xdc>)
 8002326:	f000 fb3d 	bl	80029a4 <Compare_Str>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <MQTT_Connect+0xc4>
		{
				Log_Info((uint8_t*)"Connect Success!\n", 17);
 8002330:	2111      	movs	r1, #17
 8002332:	4810      	ldr	r0, [pc, #64]	; (8002374 <MQTT_Connect+0xf4>)
 8002334:	f7ff fb6c 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8002338:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800233c:	f003 f914 	bl	8005568 <HAL_Delay>
				return RESPONSE_OK;
 8002340:	2301      	movs	r3, #1
 8002342:	e004      	b.n	800234e <MQTT_Connect+0xce>
		}
		HAL_Delay(MAX_WAIT_TIME);
 8002344:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002348:	f003 f90e 	bl	8005568 <HAL_Delay>
		return RESPONSE_ERR;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	0800e144 	.word	0x0800e144
 800235c:	20000744 	.word	0x20000744
 8002360:	2000155c 	.word	0x2000155c
 8002364:	0800e160 	.word	0x0800e160
 8002368:	20000641 	.word	0x20000641
 800236c:	20000644 	.word	0x20000644
 8002370:	0800e0f8 	.word	0x0800e0f8
 8002374:	0800e170 	.word	0x0800e170

08002378 <MQTT_Check_Connect>:
/**
  * @brief  Check MQTT Connect
  * @retval OK or ERR
  */
response_t MQTT_Check_Connect(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
		Trans_Data(&UartEmulHandle, (uint8_t*)"0AT+QMTCONN?\r", 13);
 800237c:	220d      	movs	r2, #13
 800237e:	4919      	ldr	r1, [pc, #100]	; (80023e4 <MQTT_Check_Connect+0x6c>)
 8002380:	4819      	ldr	r0, [pc, #100]	; (80023e8 <MQTT_Check_Connect+0x70>)
 8002382:	f000 faab 	bl	80028dc <Trans_Data>
		Recv_Response(&UartEmulHandle, 300);
 8002386:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800238a:	4817      	ldr	r0, [pc, #92]	; (80023e8 <MQTT_Check_Connect+0x70>)
 800238c:	f000 fb58 	bl	8002a40 <Recv_Response>
		if(g_count_temp < 20)
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <MQTT_Check_Connect+0x74>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b13      	cmp	r3, #19
 8002396:	d809      	bhi.n	80023ac <MQTT_Check_Connect+0x34>
		{
				Log_Info((uint8_t*)"Not connect!\n", 13);
 8002398:	210d      	movs	r1, #13
 800239a:	4815      	ldr	r0, [pc, #84]	; (80023f0 <MQTT_Check_Connect+0x78>)
 800239c:	f7ff fb38 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80023a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023a4:	f003 f8e0 	bl	8005568 <HAL_Delay>
				return RESPONSE_ERR; //not connect
 80023a8:	2300      	movs	r3, #0
 80023aa:	e018      	b.n	80023de <MQTT_Check_Connect+0x66>
		}
		Get_Paragraph(g_buff_temp, g_recv_buff, 26, 26);
 80023ac:	231a      	movs	r3, #26
 80023ae:	221a      	movs	r2, #26
 80023b0:	4910      	ldr	r1, [pc, #64]	; (80023f4 <MQTT_Check_Connect+0x7c>)
 80023b2:	4811      	ldr	r0, [pc, #68]	; (80023f8 <MQTT_Check_Connect+0x80>)
 80023b4:	f000 fb9e 	bl	8002af4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"3", 1))
 80023b8:	2201      	movs	r2, #1
 80023ba:	4910      	ldr	r1, [pc, #64]	; (80023fc <MQTT_Check_Connect+0x84>)
 80023bc:	480e      	ldr	r0, [pc, #56]	; (80023f8 <MQTT_Check_Connect+0x80>)
 80023be:	f000 faf1 	bl	80029a4 <Compare_Str>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <MQTT_Check_Connect+0x64>
		{
				Log_Info((uint8_t*)"Connect Exist!\n", 15);
 80023c8:	210f      	movs	r1, #15
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <MQTT_Check_Connect+0x88>)
 80023cc:	f7ff fb20 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80023d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023d4:	f003 f8c8 	bl	8005568 <HAL_Delay>
				return RESPONSE_OK;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <MQTT_Check_Connect+0x66>
		}
		return RESPONSE_ERR; //not connect
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800e184 	.word	0x0800e184
 80023e8:	2000155c 	.word	0x2000155c
 80023ec:	20000641 	.word	0x20000641
 80023f0:	0800e194 	.word	0x0800e194
 80023f4:	20000644 	.word	0x20000644
 80023f8:	20000744 	.word	0x20000744
 80023fc:	0800e1a4 	.word	0x0800e1a4
 8002400:	0800e1a8 	.word	0x0800e1a8

08002404 <MQTT_Publish>:
  * @retval OK or ERR
  */
response_t MQTT_Publish(uint8_t clientIndex,
												uint8_t msgId, uint8_t QoS, uint8_t retain, 
												uint8_t* topic, uint8_t lenData, uint8_t* pData)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af04      	add	r7, sp, #16
 800240a:	4604      	mov	r4, r0
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	4603      	mov	r3, r0
 8002418:	71bb      	strb	r3, [r7, #6]
 800241a:	460b      	mov	r3, r1
 800241c:	717b      	strb	r3, [r7, #5]
 800241e:	4613      	mov	r3, r2
 8002420:	713b      	strb	r3, [r7, #4]
		HAL_Delay(MAX_WAIT_TIME);
 8002422:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002426:	f003 f89f 	bl	8005568 <HAL_Delay>
		uint8_t lenOfLenData;
		if(lenData <= 9 ) lenOfLenData = 1;
 800242a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800242e:	2b09      	cmp	r3, #9
 8002430:	d802      	bhi.n	8002438 <MQTT_Publish+0x34>
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e010      	b.n	800245a <MQTT_Publish+0x56>
		else if(lenData > 9 && lenData < 100) lenOfLenData = 2;
 8002438:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800243c:	2b09      	cmp	r3, #9
 800243e:	d906      	bls.n	800244e <MQTT_Publish+0x4a>
 8002440:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002444:	2b63      	cmp	r3, #99	; 0x63
 8002446:	d802      	bhi.n	800244e <MQTT_Publish+0x4a>
 8002448:	2302      	movs	r3, #2
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e005      	b.n	800245a <MQTT_Publish+0x56>
		else if(lenData >= 100) lenOfLenData = 3;
 800244e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002452:	2b63      	cmp	r3, #99	; 0x63
 8002454:	d901      	bls.n	800245a <MQTT_Publish+0x56>
 8002456:	2303      	movs	r3, #3
 8002458:	73fb      	strb	r3, [r7, #15]
		uint8_t lenBuffTrans = 23 + strlen((char*)topic) + lenOfLenData;
 800245a:	6a38      	ldr	r0, [r7, #32]
 800245c:	f7fd fec0 	bl	80001e0 <strlen>
 8002460:	4603      	mov	r3, r0
 8002462:	b2da      	uxtb	r2, r3
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	4413      	add	r3, r2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3317      	adds	r3, #23
 800246c:	73bb      	strb	r3, [r7, #14]
		sprintf((char*) g_buff_temp, "0AT+QMTPUBEX=%d,%d,%d,%d,%s,%d\r", clientIndex, msgId, QoS, retain, topic, lenData);
 800246e:	79f8      	ldrb	r0, [r7, #7]
 8002470:	79bc      	ldrb	r4, [r7, #6]
 8002472:	797b      	ldrb	r3, [r7, #5]
 8002474:	793a      	ldrb	r2, [r7, #4]
 8002476:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800247a:	9103      	str	r1, [sp, #12]
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	9102      	str	r1, [sp, #8]
 8002480:	9201      	str	r2, [sp, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4623      	mov	r3, r4
 8002486:	4602      	mov	r2, r0
 8002488:	4923      	ldr	r1, [pc, #140]	; (8002518 <MQTT_Publish+0x114>)
 800248a:	4824      	ldr	r0, [pc, #144]	; (800251c <MQTT_Publish+0x118>)
 800248c:	f008 f9f2 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8002490:	7bbb      	ldrb	r3, [r7, #14]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4921      	ldr	r1, [pc, #132]	; (800251c <MQTT_Publish+0x118>)
 8002498:	4821      	ldr	r0, [pc, #132]	; (8002520 <MQTT_Publish+0x11c>)
 800249a:	f000 fa1f 	bl	80028dc <Trans_Data>
		Recv_Response(&UartEmulHandle, 200);
 800249e:	21c8      	movs	r1, #200	; 0xc8
 80024a0:	481f      	ldr	r0, [pc, #124]	; (8002520 <MQTT_Publish+0x11c>)
 80024a2:	f000 facd 	bl	8002a40 <Recv_Response>
	
		/*transmit data buffer*/
		Trans_Data(&UartEmulHandle, pData, lenData);
 80024a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b0:	481b      	ldr	r0, [pc, #108]	; (8002520 <MQTT_Publish+0x11c>)
 80024b2:	f000 fa13 	bl	80028dc <Trans_Data>
		/*wait response of +QMTCONN*/
		Recv_Response(&UartEmulHandle, MAX_WAIT_TIME);
 80024b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024ba:	4819      	ldr	r0, [pc, #100]	; (8002520 <MQTT_Publish+0x11c>)
 80024bc:	f000 fac0 	bl	8002a40 <Recv_Response>
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MQTT_Publish+0x120>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3b03      	subs	r3, #3
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MQTT_Publish+0x120>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4915      	ldr	r1, [pc, #84]	; (8002528 <MQTT_Publish+0x124>)
 80024d2:	4812      	ldr	r0, [pc, #72]	; (800251c <MQTT_Publish+0x118>)
 80024d4:	f000 fb0e 	bl	8002af4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 80024d8:	2201      	movs	r2, #1
 80024da:	4914      	ldr	r1, [pc, #80]	; (800252c <MQTT_Publish+0x128>)
 80024dc:	480f      	ldr	r0, [pc, #60]	; (800251c <MQTT_Publish+0x118>)
 80024de:	f000 fa61 	bl	80029a4 <Compare_Str>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <MQTT_Publish+0xf8>
		{
				Log_Info((uint8_t*)"Publish Success!\n", 17);
 80024e8:	2111      	movs	r1, #17
 80024ea:	4811      	ldr	r0, [pc, #68]	; (8002530 <MQTT_Publish+0x12c>)
 80024ec:	f7ff fa90 	bl	8001a10 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80024f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024f4:	f003 f838 	bl	8005568 <HAL_Delay>
				return RESPONSE_OK;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e008      	b.n	800250e <MQTT_Publish+0x10a>
		}
		else
		{
			Log_Info((uint8_t*)"Publish not Success!\n", 21);
 80024fc:	2115      	movs	r1, #21
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <MQTT_Publish+0x130>)
 8002500:	f7ff fa86 	bl	8001a10 <Log_Info>
		}
		HAL_Delay(MAX_WAIT_TIME);
 8002504:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002508:	f003 f82e 	bl	8005568 <HAL_Delay>
		return RESPONSE_ERR;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	0800e1b8 	.word	0x0800e1b8
 800251c:	20000744 	.word	0x20000744
 8002520:	2000155c 	.word	0x2000155c
 8002524:	20000641 	.word	0x20000641
 8002528:	20000644 	.word	0x20000644
 800252c:	0800e0f8 	.word	0x0800e0f8
 8002530:	0800e1d8 	.word	0x0800e1d8
 8002534:	0800e1ec 	.word	0x0800e1ec

08002538 <MQTT_SSL_Mode>:
  * @param  sslIndex: SSL context index (0-5)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Mode(uint8_t clientIndex,
												 uint8_t mode, uint8_t sslIndex)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af02      	add	r7, sp, #8
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
 8002542:	460b      	mov	r3, r1
 8002544:	71bb      	strb	r3, [r7, #6]
 8002546:	4613      	mov	r3, r2
 8002548:	717b      	strb	r3, [r7, #5]
		HAL_Delay(1000);
 800254a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800254e:	f003 f80b 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=ssl,%d,%d,%d\r", clientIndex, mode, sslIndex);
 8002552:	79fa      	ldrb	r2, [r7, #7]
 8002554:	79b9      	ldrb	r1, [r7, #6]
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	460b      	mov	r3, r1
 800255c:	490f      	ldr	r1, [pc, #60]	; (800259c <MQTT_SSL_Mode+0x64>)
 800255e:	4810      	ldr	r0, [pc, #64]	; (80025a0 <MQTT_SSL_Mode+0x68>)
 8002560:	f008 f988 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 21);
 8002564:	2215      	movs	r2, #21
 8002566:	490e      	ldr	r1, [pc, #56]	; (80025a0 <MQTT_SSL_Mode+0x68>)
 8002568:	480e      	ldr	r0, [pc, #56]	; (80025a4 <MQTT_SSL_Mode+0x6c>)
 800256a:	f000 f9b7 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 800256e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002572:	480c      	ldr	r0, [pc, #48]	; (80025a4 <MQTT_SSL_Mode+0x6c>)
 8002574:	f000 fa64 	bl	8002a40 <Recv_Response>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <MQTT_SSL_Mode+0x52>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 800257e:	2107      	movs	r1, #7
 8002580:	4809      	ldr	r0, [pc, #36]	; (80025a8 <MQTT_SSL_Mode+0x70>)
 8002582:	f7ff fa45 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 8002586:	2301      	movs	r3, #1
 8002588:	e004      	b.n	8002594 <MQTT_SSL_Mode+0x5c>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800258a:	2108      	movs	r1, #8
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <MQTT_SSL_Mode+0x74>)
 800258e:	f7ff fa3f 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	0800e204 	.word	0x0800e204
 80025a0:	20000744 	.word	0x20000744
 80025a4:	2000155c 	.word	0x2000155c
 80025a8:	0800e020 	.word	0x0800e020
 80025ac:	0800e028 	.word	0x0800e028

080025b0 <MQTT_SSL_Certificate>:
  * @brief  Config Certificates of SSL from file in UFS
	* @param  sslIndex: SSL context index (0-5)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Certificate(uint8_t sslIndex)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80025ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025be:	f002 ffd3 	bl	8005568 <HAL_Delay>
		/*Send CA*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=cacert,%d,cacert.pem\r", sslIndex);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4929      	ldr	r1, [pc, #164]	; (800266c <MQTT_SSL_Certificate+0xbc>)
 80025c8:	4829      	ldr	r0, [pc, #164]	; (8002670 <MQTT_SSL_Certificate+0xc0>)
 80025ca:	f008 f953 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 33);
 80025ce:	2221      	movs	r2, #33	; 0x21
 80025d0:	4927      	ldr	r1, [pc, #156]	; (8002670 <MQTT_SSL_Certificate+0xc0>)
 80025d2:	4828      	ldr	r0, [pc, #160]	; (8002674 <MQTT_SSL_Certificate+0xc4>)
 80025d4:	f000 f982 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK) 
 80025d8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80025dc:	4825      	ldr	r0, [pc, #148]	; (8002674 <MQTT_SSL_Certificate+0xc4>)
 80025de:	f000 fa2f 	bl	8002a40 <Recv_Response>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d005      	beq.n	80025f4 <MQTT_SSL_Certificate+0x44>
		{
				Log_Info((uint8_t*)"CA_ERR\n", 7);
 80025e8:	2107      	movs	r1, #7
 80025ea:	4823      	ldr	r0, [pc, #140]	; (8002678 <MQTT_SSL_Certificate+0xc8>)
 80025ec:	f7ff fa10 	bl	8001a10 <Log_Info>
				return RESPONSE_ERR;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e036      	b.n	8002662 <MQTT_SSL_Certificate+0xb2>
		}
		
		/*Send CC*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=clientcert,%d,client.pem\r", sslIndex);
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4920      	ldr	r1, [pc, #128]	; (800267c <MQTT_SSL_Certificate+0xcc>)
 80025fa:	481d      	ldr	r0, [pc, #116]	; (8002670 <MQTT_SSL_Certificate+0xc0>)
 80025fc:	f008 f93a 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 36);
 8002600:	2224      	movs	r2, #36	; 0x24
 8002602:	491b      	ldr	r1, [pc, #108]	; (8002670 <MQTT_SSL_Certificate+0xc0>)
 8002604:	481b      	ldr	r0, [pc, #108]	; (8002674 <MQTT_SSL_Certificate+0xc4>)
 8002606:	f000 f969 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK) 
 800260a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800260e:	4819      	ldr	r0, [pc, #100]	; (8002674 <MQTT_SSL_Certificate+0xc4>)
 8002610:	f000 fa16 	bl	8002a40 <Recv_Response>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <MQTT_SSL_Certificate+0x76>
		{
				Log_Info((uint8_t*)"CC_ERR\n", 7);
 800261a:	2107      	movs	r1, #7
 800261c:	4818      	ldr	r0, [pc, #96]	; (8002680 <MQTT_SSL_Certificate+0xd0>)
 800261e:	f7ff f9f7 	bl	8001a10 <Log_Info>
				return RESPONSE_ERR;
 8002622:	2300      	movs	r3, #0
 8002624:	e01d      	b.n	8002662 <MQTT_SSL_Certificate+0xb2>
		}
		
		/*Send CK*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=clientkey,%d,user_key.pem\r", sslIndex);
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	461a      	mov	r2, r3
 800262a:	4916      	ldr	r1, [pc, #88]	; (8002684 <MQTT_SSL_Certificate+0xd4>)
 800262c:	4810      	ldr	r0, [pc, #64]	; (8002670 <MQTT_SSL_Certificate+0xc0>)
 800262e:	f008 f921 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 37);
 8002632:	2225      	movs	r2, #37	; 0x25
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <MQTT_SSL_Certificate+0xc0>)
 8002636:	480f      	ldr	r0, [pc, #60]	; (8002674 <MQTT_SSL_Certificate+0xc4>)
 8002638:	f000 f950 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK)
 800263c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <MQTT_SSL_Certificate+0xc4>)
 8002642:	f000 f9fd 	bl	8002a40 <Recv_Response>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d005      	beq.n	8002658 <MQTT_SSL_Certificate+0xa8>
		{
				Log_Info((uint8_t*)"CK_ERR\n", 7);
 800264c:	2107      	movs	r1, #7
 800264e:	480e      	ldr	r0, [pc, #56]	; (8002688 <MQTT_SSL_Certificate+0xd8>)
 8002650:	f7ff f9de 	bl	8001a10 <Log_Info>
				return RESPONSE_ERR;
 8002654:	2300      	movs	r3, #0
 8002656:	e004      	b.n	8002662 <MQTT_SSL_Certificate+0xb2>
		}
		else Log_Info((uint8_t*)"RES_OK\n", 7);
 8002658:	2107      	movs	r1, #7
 800265a:	480c      	ldr	r0, [pc, #48]	; (800268c <MQTT_SSL_Certificate+0xdc>)
 800265c:	f7ff f9d8 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	0800e220 	.word	0x0800e220
 8002670:	20000744 	.word	0x20000744
 8002674:	2000155c 	.word	0x2000155c
 8002678:	0800e244 	.word	0x0800e244
 800267c:	0800e24c 	.word	0x0800e24c
 8002680:	0800e274 	.word	0x0800e274
 8002684:	0800e27c 	.word	0x0800e27c
 8002688:	0800e2a4 	.word	0x0800e2a4
 800268c:	0800e020 	.word	0x0800e020

08002690 <MQTT_SSL_Level>:
  * @param  level: SSL level (0-2)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Level(uint8_t sslIndex,
												  uint8_t level)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	460a      	mov	r2, r1
 800269a:	71fb      	strb	r3, [r7, #7]
 800269c:	4613      	mov	r3, r2
 800269e:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 80026a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026a4:	f002 ff60 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=seclevel,%d,%d\r", sslIndex, level);
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	490f      	ldr	r1, [pc, #60]	; (80026ec <MQTT_SSL_Level+0x5c>)
 80026ae:	4810      	ldr	r0, [pc, #64]	; (80026f0 <MQTT_SSL_Level+0x60>)
 80026b0:	f008 f8e0 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 25);
 80026b4:	2219      	movs	r2, #25
 80026b6:	490e      	ldr	r1, [pc, #56]	; (80026f0 <MQTT_SSL_Level+0x60>)
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <MQTT_SSL_Level+0x64>)
 80026ba:	f000 f90f 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80026be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80026c2:	480c      	ldr	r0, [pc, #48]	; (80026f4 <MQTT_SSL_Level+0x64>)
 80026c4:	f000 f9bc 	bl	8002a40 <Recv_Response>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d105      	bne.n	80026da <MQTT_SSL_Level+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80026ce:	2107      	movs	r1, #7
 80026d0:	4809      	ldr	r0, [pc, #36]	; (80026f8 <MQTT_SSL_Level+0x68>)
 80026d2:	f7ff f99d 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e004      	b.n	80026e4 <MQTT_SSL_Level+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80026da:	2108      	movs	r1, #8
 80026dc:	4807      	ldr	r0, [pc, #28]	; (80026fc <MQTT_SSL_Level+0x6c>)
 80026de:	f7ff f997 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	0800e2ac 	.word	0x0800e2ac
 80026f0:	20000744 	.word	0x20000744
 80026f4:	2000155c 	.word	0x2000155c
 80026f8:	0800e020 	.word	0x0800e020
 80026fc:	0800e028 	.word	0x0800e028

08002700 <MQTT_SSL_Version>:
  * @param  version: SSL version (0-4)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Version(uint8_t sslIndex,
												    uint8_t version)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	460a      	mov	r2, r1
 800270a:	71fb      	strb	r3, [r7, #7]
 800270c:	4613      	mov	r3, r2
 800270e:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 8002710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002714:	f002 ff28 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=sslversion,%d,%d\r", sslIndex, version);
 8002718:	79fa      	ldrb	r2, [r7, #7]
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	490f      	ldr	r1, [pc, #60]	; (800275c <MQTT_SSL_Version+0x5c>)
 800271e:	4810      	ldr	r0, [pc, #64]	; (8002760 <MQTT_SSL_Version+0x60>)
 8002720:	f008 f8a8 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 27);
 8002724:	221b      	movs	r2, #27
 8002726:	490e      	ldr	r1, [pc, #56]	; (8002760 <MQTT_SSL_Version+0x60>)
 8002728:	480e      	ldr	r0, [pc, #56]	; (8002764 <MQTT_SSL_Version+0x64>)
 800272a:	f000 f8d7 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 800272e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002732:	480c      	ldr	r0, [pc, #48]	; (8002764 <MQTT_SSL_Version+0x64>)
 8002734:	f000 f984 	bl	8002a40 <Recv_Response>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d105      	bne.n	800274a <MQTT_SSL_Version+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 800273e:	2107      	movs	r1, #7
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <MQTT_SSL_Version+0x68>)
 8002742:	f7ff f965 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 8002746:	2301      	movs	r3, #1
 8002748:	e004      	b.n	8002754 <MQTT_SSL_Version+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800274a:	2108      	movs	r1, #8
 800274c:	4807      	ldr	r0, [pc, #28]	; (800276c <MQTT_SSL_Version+0x6c>)
 800274e:	f7ff f95f 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	0800e2c8 	.word	0x0800e2c8
 8002760:	20000744 	.word	0x20000744
 8002764:	2000155c 	.word	0x2000155c
 8002768:	0800e020 	.word	0x0800e020
 800276c:	0800e028 	.word	0x0800e028

08002770 <MQTT_SSL_Ciphersuite>:
  * @param  cipherSuite: string type format 0xYYYY
  * @retval OK or ERR
  */
response_t MQTT_SSL_Ciphersuite(uint8_t sslIndex,
																uint8_t* cipherSuite)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800277c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002780:	f002 fef2 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=ciphersuite,%d,%s\r", sslIndex, cipherSuite);
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	490f      	ldr	r1, [pc, #60]	; (80027c8 <MQTT_SSL_Ciphersuite+0x58>)
 800278a:	4810      	ldr	r0, [pc, #64]	; (80027cc <MQTT_SSL_Ciphersuite+0x5c>)
 800278c:	f008 f872 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 33);
 8002790:	2221      	movs	r2, #33	; 0x21
 8002792:	490e      	ldr	r1, [pc, #56]	; (80027cc <MQTT_SSL_Ciphersuite+0x5c>)
 8002794:	480e      	ldr	r0, [pc, #56]	; (80027d0 <MQTT_SSL_Ciphersuite+0x60>)
 8002796:	f000 f8a1 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 800279a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800279e:	480c      	ldr	r0, [pc, #48]	; (80027d0 <MQTT_SSL_Ciphersuite+0x60>)
 80027a0:	f000 f94e 	bl	8002a40 <Recv_Response>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <MQTT_SSL_Ciphersuite+0x46>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80027aa:	2107      	movs	r1, #7
 80027ac:	4809      	ldr	r0, [pc, #36]	; (80027d4 <MQTT_SSL_Ciphersuite+0x64>)
 80027ae:	f7ff f92f 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e004      	b.n	80027c0 <MQTT_SSL_Ciphersuite+0x50>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80027b6:	2108      	movs	r1, #8
 80027b8:	4807      	ldr	r0, [pc, #28]	; (80027d8 <MQTT_SSL_Ciphersuite+0x68>)
 80027ba:	f7ff f929 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	0800e2e8 	.word	0x0800e2e8
 80027cc:	20000744 	.word	0x20000744
 80027d0:	2000155c 	.word	0x2000155c
 80027d4:	0800e020 	.word	0x0800e020
 80027d8:	0800e028 	.word	0x0800e028

080027dc <MQTT_SSL_Ignore>:
  * @param  ignoreltime: 0 (care about validity check for certificate) or 1 (ignore)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Ignore(uint8_t sslIndex,
													 uint8_t ignoreltime)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	460a      	mov	r2, r1
 80027e6:	71fb      	strb	r3, [r7, #7]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 80027ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027f0:	f002 feba 	bl	8005568 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=ignorelocaltime,%d,%d\r", sslIndex, ignoreltime);
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	79bb      	ldrb	r3, [r7, #6]
 80027f8:	490f      	ldr	r1, [pc, #60]	; (8002838 <MQTT_SSL_Ignore+0x5c>)
 80027fa:	4810      	ldr	r0, [pc, #64]	; (800283c <MQTT_SSL_Ignore+0x60>)
 80027fc:	f008 f83a 	bl	800a874 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 32);
 8002800:	2220      	movs	r2, #32
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <MQTT_SSL_Ignore+0x60>)
 8002804:	480e      	ldr	r0, [pc, #56]	; (8002840 <MQTT_SSL_Ignore+0x64>)
 8002806:	f000 f869 	bl	80028dc <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 800280a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800280e:	480c      	ldr	r0, [pc, #48]	; (8002840 <MQTT_SSL_Ignore+0x64>)
 8002810:	f000 f916 	bl	8002a40 <Recv_Response>
 8002814:	4603      	mov	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <MQTT_SSL_Ignore+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 800281a:	2107      	movs	r1, #7
 800281c:	4809      	ldr	r0, [pc, #36]	; (8002844 <MQTT_SSL_Ignore+0x68>)
 800281e:	f7ff f8f7 	bl	8001a10 <Log_Info>
				return RESPONSE_OK;
 8002822:	2301      	movs	r3, #1
 8002824:	e004      	b.n	8002830 <MQTT_SSL_Ignore+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8002826:	2108      	movs	r1, #8
 8002828:	4807      	ldr	r0, [pc, #28]	; (8002848 <MQTT_SSL_Ignore+0x6c>)
 800282a:	f7ff f8f1 	bl	8001a10 <Log_Info>
		return RESPONSE_ERR;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	0800e308 	.word	0x0800e308
 800283c:	20000744 	.word	0x20000744
 8002840:	2000155c 	.word	0x2000155c
 8002844:	0800e020 	.word	0x0800e020
 8002848:	0800e028 	.word	0x0800e028

0800284c <UartEmul_Init>:
  * @brief  Initializes the UART Emulation 
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void UartEmul_Init(UART_Emul_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
		huart->Init.Mode        = UART_EMUL_MODE_TX_RX;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	711a      	strb	r2, [r3, #4]
		huart->Init.BaudRate    = 4800; //9600; //115200;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002860:	609a      	str	r2, [r3, #8]
		huart->Init.StopBits    = UART_EMUL_STOPBITS_1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	735a      	strb	r2, [r3, #13]
		huart->Init.Parity      = UART_EMUL_PARITY_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	739a      	strb	r2, [r3, #14]
		huart->Init.WordLength  = UART_EMUL_WORDLENGTH_8B;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2208      	movs	r2, #8
 8002872:	731a      	strb	r2, [r3, #12]
		
		if (HAL_UART_Emul_Init(huart) != HAL_OK)
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f987 	bl	8002b88 <HAL_UART_Emul_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <UartEmul_Init+0x3c>
		{
				HAL_Delay(500);
 8002880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002884:	f002 fe70 	bl	8005568 <HAL_Delay>
		}
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_UART_Emul_RxCpltCallback>:
  * @brief  Receive data complete callback
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void HAL_UART_Emul_RxCpltCallback(UART_Emul_HandleTypeDef *huart)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
		g_recv_buff[g_count++] = g_recv_byte;
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_UART_Emul_RxCpltCallback+0x2c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	b2d1      	uxtb	r1, r2
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <HAL_UART_Emul_RxCpltCallback+0x2c>)
 80028a2:	7011      	strb	r1, [r2, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_UART_Emul_RxCpltCallback+0x30>)
 80028a8:	7819      	ldrb	r1, [r3, #0]
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_UART_Emul_RxCpltCallback+0x34>)
 80028ac:	5499      	strb	r1, [r3, r2]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000640 	.word	0x20000640
 80028c0:	2000063f 	.word	0x2000063f
 80028c4:	20000644 	.word	0x20000644

080028c8 <HAL_UART_Emul_ErrorCallback>:
  * @brief  UART Emul error callback
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void HAL_UART_Emul_ErrorCallback(UART_Emul_HandleTypeDef *UartEmulHandle)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
		//Log_Info((uint8_t*)"BUG\n", 4);
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <Trans_Data>:
	* @param  pData: pointer to data string
	* @param  Size: size of data
  * @retval None
  */
void Trans_Data(UART_Emul_HandleTypeDef * huart, uint8_t *pData, uint16_t Size)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
		UartEmul_Init(huart);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff ffae 	bl	800284c <UartEmul_Init>
		HAL_Delay(10);
 80028f0:	200a      	movs	r0, #10
 80028f2:	f002 fe39 	bl	8005568 <HAL_Delay>
		UartEmul_Init(huart);
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff ffa8 	bl	800284c <UartEmul_Init>
		HAL_Delay(10);
 80028fc:	200a      	movs	r0, #10
 80028fe:	f002 fe33 	bl	8005568 <HAL_Delay>
		if (HAL_UART_Emul_Transmit_DMA(huart, pData, Size) != HAL_OK)
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	461a      	mov	r2, r3
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f969 	bl	8002be0 <HAL_UART_Emul_Transmit_DMA>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <Trans_Data+0x40>
		{
				Log_Info((uint8_t*)"Error_Handler\n", 14);
 8002914:	210e      	movs	r1, #14
 8002916:	4807      	ldr	r0, [pc, #28]	; (8002934 <Trans_Data+0x58>)
 8002918:	f7ff f87a 	bl	8001a10 <Log_Info>
		}
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_TC) != SET){};
 800291c:	bf00      	nop
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b02      	cmp	r3, #2
 800292a:	d1f8      	bne.n	800291e <Trans_Data+0x42>
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	0800e420 	.word	0x0800e420

08002938 <Recv_Data>:
	* @param  timeNow: tick value of moment call this function
	* @param  timeOut: time to wait response
  * @retval none
  */
void Recv_Data(UART_Emul_HandleTypeDef * huart, uint32_t timeNow, uint32_t timeOut)
{		
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
//		UartEmul_Init(huart);
		if (HAL_UART_Emul_Receive_DMA(huart, &g_recv_byte, 1) != HAL_OK)
 8002944:	2201      	movs	r2, #1
 8002946:	4915      	ldr	r1, [pc, #84]	; (800299c <Recv_Data+0x64>)
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f9c3 	bl	8002cd4 <HAL_UART_Emul_Receive_DMA>
		{
//				HAL_Delay(500);
//				Log_Info((uint8_t*)"Error_Handler\n", 14);
		}
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_RC) != SET)
 800294e:	e012      	b.n	8002976 <Recv_Data+0x3e>
		{
				if ((HAL_GetTick() - timeNow) > timeOut)
 8002950:	f002 fdfe 	bl	8005550 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	d20a      	bcs.n	8002976 <Recv_Data+0x3e>
				{
						__HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_RC);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	701a      	strb	r2, [r3, #0]
						g_isDone = RX_TRUE;	
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <Recv_Data+0x68>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_RC) != SET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d1e5      	bne.n	8002950 <Recv_Data+0x18>
				}
		}
		__HAL_UART_EMUL_CLEAR_FLAG(huart, UART_EMUL_FLAG_RC);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	701a      	strb	r2, [r3, #0]
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	2000063f 	.word	0x2000063f
 80029a0:	20000642 	.word	0x20000642

080029a4 <Compare_Str>:
  * @param  str1, str2: pointer to 2 addresses of strings
	* @param  len: length of datas to compare
  * @retval true(1) or false(0)
  */
uint8_t Compare_Str(uint8_t* str1, uint8_t* str2, uint8_t len)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	71fb      	strb	r3, [r7, #7]
		while(len)
 80029b2:	e00e      	b.n	80029d2 <Compare_Str+0x2e>
		{
				if(*str1++ != *str2++)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	60fa      	str	r2, [r7, #12]
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1c59      	adds	r1, r3, #1
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <Compare_Str+0x28>
				{
						return 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e006      	b.n	80029da <Compare_Str+0x36>
				}
				len--;
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	71fb      	strb	r3, [r7, #7]
		while(len)
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ed      	bne.n	80029b4 <Compare_Str+0x10>
		}
		return 1;
 80029d8:	2301      	movs	r3, #1
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <Confirm_OK>:
  * @brief  Compare string with "\r\nOK\r\n" 
  * @param  inputStr: pointer to addres of string input
  * @retval true(1) or false(0)
  */
uint8_t Confirm_OK(uint8_t* inputStr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
		if(Compare_Str(inputStr, (uint8_t*)"\r\nOK\r\n", 6)) return 1;
 80029f0:	2206      	movs	r2, #6
 80029f2:	4907      	ldr	r1, [pc, #28]	; (8002a10 <Confirm_OK+0x28>)
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffd5 	bl	80029a4 <Compare_Str>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <Confirm_OK+0x1c>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <Confirm_OK+0x1e>
		return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800e430 	.word	0x0800e430

08002a14 <Check_MQTT>:
  * @brief  Check response from UART, if MQTT Status is close
	* @param  inputStr: pointer to input string
  * @retval true(1) or false(0)
  */
uint8_t Check_MQTT(uint8_t* inputStr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
		if(Compare_Str(inputStr, (uint8_t*)"\r\n+QMTSTAT: 0,1\r\n", 17)) return 1;
 8002a1c:	2211      	movs	r2, #17
 8002a1e:	4907      	ldr	r1, [pc, #28]	; (8002a3c <Check_MQTT+0x28>)
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ffbf 	bl	80029a4 <Compare_Str>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <Check_MQTT+0x1c>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <Check_MQTT+0x1e>
		return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800e438 	.word	0x0800e438

08002a40 <Recv_Response>:
  * @param  huart: UART Emulation Handle
	* @param  timeOut: time to wait response
  * @retval RESPONSE_OK, RESPONSE_ERR or RESPONSE_NEW_MSG
  */
response_t Recv_Response(UART_Emul_HandleTypeDef *huart, uint32_t timeOut)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
			response_t retValue = RESPONSE_ERR;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
			while(!g_isDone)
 8002a4e:	e00b      	b.n	8002a68 <Recv_Response+0x28>
			{		
					g_timeNow = HAL_GetTick();		
 8002a50:	f002 fd7e 	bl	8005550 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <Recv_Response+0xa0>)
 8002a58:	601a      	str	r2, [r3, #0]
					Recv_Data(huart, g_timeNow, timeOut);
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <Recv_Response+0xa0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ff68 	bl	8002938 <Recv_Data>
			while(!g_isDone)
 8002a68:	4b1e      	ldr	r3, [pc, #120]	; (8002ae4 <Recv_Response+0xa4>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ef      	beq.n	8002a50 <Recv_Response+0x10>
			}
			Log_Info(g_recv_buff, g_count);
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <Recv_Response+0xa8>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	481d      	ldr	r0, [pc, #116]	; (8002aec <Recv_Response+0xac>)
 8002a78:	f7fe ffca 	bl	8001a10 <Log_Info>
			g_isDone = RX_FALSE;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <Recv_Response+0xa4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
			
			if(Confirm_OK(&g_recv_buff[g_count-6])) //if response stop by "\r\nOK\r\n"
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <Recv_Response+0xa8>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3b06      	subs	r3, #6
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <Recv_Response+0xac>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ffab 	bl	80029e8 <Confirm_OK>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <Recv_Response+0x5c>
			{
				retValue = RESPONSE_OK;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
			}
			if(Check_New_Msg(g_recv_buff))	//if response start by "\r\n+CTMI"
 8002a9c:	4813      	ldr	r0, [pc, #76]	; (8002aec <Recv_Response+0xac>)
 8002a9e:	f000 f855 	bl	8002b4c <Check_New_Msg>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <Recv_Response+0x6c>
			{
				retValue = RESPONSE_NEW_MSG;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	73fb      	strb	r3, [r7, #15]
			}
			if(Check_MQTT(&g_recv_buff[g_count-17]))
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <Recv_Response+0xa8>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	3b11      	subs	r3, #17
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <Recv_Response+0xac>)
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ffac 	bl	8002a14 <Check_MQTT>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <Recv_Response+0x86>
			{
					retValue = RESPONSE_MQTT_CLOSE;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	73fb      	strb	r3, [r7, #15]
			}
			g_count_temp = g_count;	//pass value of 'g_count' into 'g_count_temp' to use in user file
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <Recv_Response+0xa8>)
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <Recv_Response+0xb0>)
 8002acc:	701a      	strb	r2, [r3, #0]
			g_count = 0;
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <Recv_Response+0xa8>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
			return retValue;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000848 	.word	0x20000848
 8002ae4:	20000642 	.word	0x20000642
 8002ae8:	20000640 	.word	0x20000640
 8002aec:	20000644 	.word	0x20000644
 8002af0:	20000641 	.word	0x20000641

08002af4 <Get_Paragraph>:
	* @param  idStartSource: id start copy of source str
	* @param  idStopSource: id stop copy of source str
  * @retval none
  */
void Get_Paragraph(uint8_t* strTarget, uint8_t* strSource, uint8_t idStartSource, uint8_t idStopSource)
{	
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	460b      	mov	r3, r1
 8002b04:	71fb      	strb	r3, [r7, #7]
 8002b06:	4613      	mov	r3, r2
 8002b08:	71bb      	strb	r3, [r7, #6]
		uint8_t number = idStopSource - idStartSource + 1;
 8002b0a:	79ba      	ldrb	r2, [r7, #6]
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 0; i < number; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
 8002b1a:	e00c      	b.n	8002b36 <Get_Paragraph+0x42>
		{
				*(strTarget + i) = *(strSource + idStartSource + i);
 8002b1c:	79fa      	ldrb	r2, [r7, #7]
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	4413      	add	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	441a      	add	r2, r3
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	440b      	add	r3, r1
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < number; i++)
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	3301      	adds	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
 8002b36:	7dfa      	ldrb	r2, [r7, #23]
 8002b38:	7dbb      	ldrb	r3, [r7, #22]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3ee      	bcc.n	8002b1c <Get_Paragraph+0x28>
		}
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <Check_New_Msg>:
  * @brief  Check response from UART, is a new message or not
	* @param  inputStr: pointer to input string
  * @retval true(1) or false(0)
  */
uint8_t Check_New_Msg(uint8_t* inputStr)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    Get_Paragraph(g_buff_temp, inputStr, 0, 6);
 8002b54:	2306      	movs	r3, #6
 8002b56:	2200      	movs	r2, #0
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4809      	ldr	r0, [pc, #36]	; (8002b80 <Check_New_Msg+0x34>)
 8002b5c:	f7ff ffca 	bl	8002af4 <Get_Paragraph>
    if(Compare_Str(g_buff_temp, (uint8_t*)"\r\n+CMTI", 7)) return 1;
 8002b60:	2207      	movs	r2, #7
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <Check_New_Msg+0x38>)
 8002b64:	4806      	ldr	r0, [pc, #24]	; (8002b80 <Check_New_Msg+0x34>)
 8002b66:	f7ff ff1d 	bl	80029a4 <Compare_Str>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <Check_New_Msg+0x28>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <Check_New_Msg+0x2a>
        else return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000744 	.word	0x20000744
 8002b84:	0800e44c 	.word	0x0800e44c

08002b88 <HAL_UART_Emul_Init>:
  *         the UART_Emul_InitTypeDef and create the associated handle.
  * @param  huart: UART Emulation handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Emul_Init(UART_Emul_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Emul_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e01b      	b.n	8002bd2 <HAL_UART_Emul_Init+0x4a>
  }

  if (huart->State == HAL_UART_EMUL_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_UART_Emul_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_Emul_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fd8a 	bl	80016c0 <HAL_UART_Emul_MspInit>
  }

  /* Get Structure for uart emul Handle */
  huart_emul = huart;
 8002bac:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_UART_Emul_Init+0x54>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Set the TIM state */
  huart->State = HAL_UART_EMUL_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the UART Emulation Communication parameters */
  UART_Emul_SetConfig(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f001 face 	bl	800415c <UART_Emul_SetConfig>

  /* Initialize the UART Emulation state */
  huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  huart->State = HAL_UART_EMUL_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000300 	.word	0x20000300

08002be0 <HAL_UART_Emul_Transmit_DMA>:
 * @param  pData: Pointer to data buffer
 * @param  Size: Amount of data to be sent
 * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Emul_Transmit_DMA(UART_Emul_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]

  tmp = huart->State;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  if ((tmp == HAL_UART_EMUL_STATE_READY) || (tmp == HAL_UART_EMUL_STATE_BUSY_RX))
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d002      	beq.n	8002c08 <HAL_UART_Emul_Transmit_DMA+0x28>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d154      	bne.n	8002cb2 <HAL_UART_Emul_Transmit_DMA+0xd2>
  {
    if ((pData == NULL ) || (Size == 0))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Emul_Transmit_DMA+0x34>
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_UART_Emul_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e04d      	b.n	8002cb4 <HAL_UART_Emul_Transmit_DMA+0xd4>
    }

    huart->TxXferSize = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	831a      	strh	r2, [r3, #24]
    huart->pTxBuffPtr = pData;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	615a      	str	r2, [r3, #20]
    huart->TxXferCount = 1;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	835a      	strh	r2, [r3, #26]
    huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a receive process is ongoing or not */
    if (huart->State == HAL_UART_EMUL_STATE_BUSY_RX)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d104      	bne.n	8002c48 <HAL_UART_Emul_Transmit_DMA+0x68>
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX_RX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2210      	movs	r2, #16
 8002c42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002c46:	e003      	b.n	8002c50 <HAL_UART_Emul_Transmit_DMA+0x70>
    }
    else
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Set the UART Emulation DMA transfer complete callback */
    TimHandle.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = UART_Emul_DMATransmitCplt;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_UART_Emul_Transmit_DMA+0xdc>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <HAL_UART_Emul_Transmit_DMA+0xe0>)
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    TimHandle.hdma[TIM_DMA_ID_CC1]->XferErrorCallback = UART_Emul_DMAError;
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_UART_Emul_Transmit_DMA+0xdc>)
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_UART_Emul_Transmit_DMA+0xe4>)
 8002c5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Format first Frame to be sent */
    if (huart->TxXferCount == FIRST_BYTE)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8b5b      	ldrh	r3, [r3, #26]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10e      	bne.n	8002c86 <HAL_UART_Emul_Transmit_DMA+0xa6>
    {
      /* Format Frame to be sent */
      UART_Emul_TransmitFormatFrame(huart, *(pData), (uint32_t*)pFirstBuffer_Tx);
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4a16      	ldr	r2, [pc, #88]	; (8002cc8 <HAL_UART_Emul_Transmit_DMA+0xe8>)
 8002c6e:	4619      	mov	r1, r3
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f001 fc43 	bl	80044fc <UART_Emul_TransmitFormatFrame>

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002c76:	2201      	movs	r2, #1
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4814      	ldr	r0, [pc, #80]	; (8002ccc <HAL_UART_Emul_Transmit_DMA+0xec>)
 8002c7c:	f005 fd20 	bl	80086c0 <TIM_CCxChannelCmd>

      /* Send Frames */
      UART_Emul_TransmitFrame(huart);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f001 fcf3 	bl	800466c <UART_Emul_TransmitFrame>
    }

    if ((huart->TxXferCount == FIRST_BYTE) && (huart->TxXferCount < Size))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8b5b      	ldrh	r3, [r3, #26]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d10f      	bne.n	8002cae <HAL_UART_Emul_Transmit_DMA+0xce>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8b5b      	ldrh	r3, [r3, #26]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d90a      	bls.n	8002cae <HAL_UART_Emul_Transmit_DMA+0xce>
    { 
      /* Format Second Frame to be sent */
      UART_Emul_TransmitFormatFrame(huart, *(pData + huart->TxXferCount), (uint32_t*)pSecondBuffer_Tx);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8b5b      	ldrh	r3, [r3, #26]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_UART_Emul_Transmit_DMA+0xf0>)
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f001 fc27 	bl	80044fc <UART_Emul_TransmitFormatFrame>
    }

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Emul_Transmit_DMA+0xd4>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200002c0 	.word	0x200002c0
 8002cc0:	08004741 	.word	0x08004741
 8002cc4:	08004851 	.word	0x08004851
 8002cc8:	20000364 	.word	0x20000364
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	20000394 	.word	0x20000394

08002cd4 <HAL_UART_Emul_Receive_DMA>:
 * @param  Size: Amount of data to be received
 * @retval HAL status
*/

HAL_StatusTypeDef HAL_UART_Emul_Receive_DMA(UART_Emul_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

  tmp = huart->State;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	617b      	str	r3, [r7, #20]
//	sprintf((char*)log_buff, "State = %x\n", huart->State);
//	Log_Info((uint8_t*)log_buff, 11);
//	sprintf((char*)log_buff, "SR = %x\n", huart->Instance.SR);
//	Log_Info((uint8_t*)log_buff, 7);
  if ((tmp == HAL_UART_EMUL_STATE_READY) || (tmp == HAL_UART_EMUL_STATE_BUSY_TX))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d002      	beq.n	8002cfc <HAL_UART_Emul_Receive_DMA+0x28>
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d132      	bne.n	8002d62 <HAL_UART_Emul_Receive_DMA+0x8e>
  {
    if ((pData == NULL ) || (Size == 0))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Emul_Receive_DMA+0x34>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Emul_Receive_DMA+0x38>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e02b      	b.n	8002d64 <HAL_UART_Emul_Receive_DMA+0x90>
    }

    huart->pRxBuffPtr = pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	61da      	str	r2, [r3, #28]
    huart->RxXferSize = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	841a      	strh	r2, [r3, #32]
    huart->RxXferCount = 1;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	845a      	strh	r2, [r3, #34]	; 0x22

    huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a transmit process is ongoing or not */
    if (huart->State == HAL_UART_EMUL_STATE_BUSY_TX)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d104      	bne.n	8002d3c <HAL_UART_Emul_Receive_DMA+0x68>
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2210      	movs	r2, #16
 8002d36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002d3a:	e003      	b.n	8002d44 <HAL_UART_Emul_Receive_DMA+0x70>
    }
    else
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_RX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2208      	movs	r2, #8
 8002d40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }
//		sprintf((char*)log_buff, "State = %x\n", huart->State);
//		Log_Info((uint8_t*)log_buff, 11);
    /* Set the UART Emulation DMA transfer complete callback */
    TimHandle.hdma[TIM_DMA_ID_CC2]->XferCpltCallback = UART_Emul_DMAReceiveCplt;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_UART_Emul_Receive_DMA+0x98>)
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_UART_Emul_Receive_DMA+0x9c>)
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    TimHandle.hdma[TIM_DMA_ID_CC2]->XferErrorCallback = UART_Emul_DMAError;
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <HAL_UART_Emul_Receive_DMA+0x98>)
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <HAL_UART_Emul_Receive_DMA+0xa0>)
 8002d52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d54:	2201      	movs	r2, #1
 8002d56:	2104      	movs	r1, #4
 8002d58:	4807      	ldr	r0, [pc, #28]	; (8002d78 <HAL_UART_Emul_Receive_DMA+0xa4>)
 8002d5a:	f005 fcb1 	bl	80086c0 <TIM_CCxChannelCmd>
//		sprintf((char*)log_buff, "SR = %x\n", huart->Instance.SR);
//		Log_Info((uint8_t*)log_buff, 7);
    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_UART_Emul_Receive_DMA+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200002c0 	.word	0x200002c0
 8002d70:	08003f75 	.word	0x08003f75
 8002d74:	08004851 	.word	0x08004851
 8002d78:	40010000 	.word	0x40010000

08002d7c <DMA2_Stream2_IRQHandler>:
* @brief  This function handles DMA interrupt request for TC.
* @param  None
* @retval None
*/
void UART_EMUL_RX_DMA_IRQHandler(void)
{ 
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Increment Counter of Frame */
  huart_emul->RxXferCount ++;
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <DMA2_Stream2_IRQHandler+0x20c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002d86:	3201      	adds	r2, #1
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	845a      	strh	r2, [r3, #34]	; 0x22

  /* Enable External interrupt for next Frame */
  EXTI->IMR |= huart_emul->Init.RxPinNumber;
 8002d8c:	4b7f      	ldr	r3, [pc, #508]	; (8002f8c <DMA2_Stream2_IRQHandler+0x210>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a7d      	ldr	r2, [pc, #500]	; (8002f88 <DMA2_Stream2_IRQHandler+0x20c>)
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	8a12      	ldrh	r2, [r2, #16]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4a7c      	ldr	r2, [pc, #496]	; (8002f8c <DMA2_Stream2_IRQHandler+0x210>)
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	6013      	str	r3, [r2, #0]

  if (__HAL_DMA_GET_FLAG(TimHandle.hdma[TIM_DMA_ID_CC2], __HAL_DMA_GET_TE_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC2])) != RESET)
 8002d9e:	4b7c      	ldr	r3, [pc, #496]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <DMA2_Stream2_IRQHandler+0x218>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d972      	bls.n	8002e92 <DMA2_Stream2_IRQHandler+0x116>
 8002dac:	4b7a      	ldr	r3, [pc, #488]	; (8002f98 <DMA2_Stream2_IRQHandler+0x21c>)
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	4b77      	ldr	r3, [pc, #476]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4979      	ldr	r1, [pc, #484]	; (8002f9c <DMA2_Stream2_IRQHandler+0x220>)
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d062      	beq.n	8002e82 <DMA2_Stream2_IRQHandler+0x106>
 8002dbc:	4b74      	ldr	r3, [pc, #464]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4977      	ldr	r1, [pc, #476]	; (8002fa0 <DMA2_Stream2_IRQHandler+0x224>)
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	d05a      	beq.n	8002e7e <DMA2_Stream2_IRQHandler+0x102>
 8002dc8:	4b71      	ldr	r3, [pc, #452]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4975      	ldr	r1, [pc, #468]	; (8002fa4 <DMA2_Stream2_IRQHandler+0x228>)
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	d052      	beq.n	8002e7a <DMA2_Stream2_IRQHandler+0xfe>
 8002dd4:	4b6e      	ldr	r3, [pc, #440]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4973      	ldr	r1, [pc, #460]	; (8002fa8 <DMA2_Stream2_IRQHandler+0x22c>)
 8002ddc:	428b      	cmp	r3, r1
 8002dde:	d04a      	beq.n	8002e76 <DMA2_Stream2_IRQHandler+0xfa>
 8002de0:	4b6b      	ldr	r3, [pc, #428]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4971      	ldr	r1, [pc, #452]	; (8002fac <DMA2_Stream2_IRQHandler+0x230>)
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d041      	beq.n	8002e70 <DMA2_Stream2_IRQHandler+0xf4>
 8002dec:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	496f      	ldr	r1, [pc, #444]	; (8002fb0 <DMA2_Stream2_IRQHandler+0x234>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d038      	beq.n	8002e6a <DMA2_Stream2_IRQHandler+0xee>
 8002df8:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	496d      	ldr	r1, [pc, #436]	; (8002fb4 <DMA2_Stream2_IRQHandler+0x238>)
 8002e00:	428b      	cmp	r3, r1
 8002e02:	d02f      	beq.n	8002e64 <DMA2_Stream2_IRQHandler+0xe8>
 8002e04:	4b62      	ldr	r3, [pc, #392]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	496b      	ldr	r1, [pc, #428]	; (8002fb8 <DMA2_Stream2_IRQHandler+0x23c>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d026      	beq.n	8002e5e <DMA2_Stream2_IRQHandler+0xe2>
 8002e10:	4b5f      	ldr	r3, [pc, #380]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4969      	ldr	r1, [pc, #420]	; (8002fbc <DMA2_Stream2_IRQHandler+0x240>)
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	d01d      	beq.n	8002e58 <DMA2_Stream2_IRQHandler+0xdc>
 8002e1c:	4b5c      	ldr	r3, [pc, #368]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4967      	ldr	r1, [pc, #412]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x244>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d014      	beq.n	8002e52 <DMA2_Stream2_IRQHandler+0xd6>
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4965      	ldr	r1, [pc, #404]	; (8002fc4 <DMA2_Stream2_IRQHandler+0x248>)
 8002e30:	428b      	cmp	r3, r1
 8002e32:	d00b      	beq.n	8002e4c <DMA2_Stream2_IRQHandler+0xd0>
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4963      	ldr	r1, [pc, #396]	; (8002fc8 <DMA2_Stream2_IRQHandler+0x24c>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d102      	bne.n	8002e46 <DMA2_Stream2_IRQHandler+0xca>
 8002e40:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e44:	e01e      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e4a:	e01b      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e50:	e018      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e56:	e015      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e5c:	e012      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e62:	e00f      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e68:	e00c      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e6e:	e009      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e74:	e006      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e76:	2308      	movs	r3, #8
 8002e78:	e004      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	e002      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	e000      	b.n	8002e84 <DMA2_Stream2_IRQHandler+0x108>
 8002e82:	2308      	movs	r3, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e1a9      	b.n	80031e6 <DMA2_Stream2_IRQHandler+0x46a>
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <DMA2_Stream2_IRQHandler+0x250>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f240 8097 	bls.w	8002fd0 <DMA2_Stream2_IRQHandler+0x254>
 8002ea2:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <DMA2_Stream2_IRQHandler+0x21c>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	493b      	ldr	r1, [pc, #236]	; (8002f9c <DMA2_Stream2_IRQHandler+0x220>)
 8002eae:	428b      	cmp	r3, r1
 8002eb0:	d062      	beq.n	8002f78 <DMA2_Stream2_IRQHandler+0x1fc>
 8002eb2:	4b37      	ldr	r3, [pc, #220]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4939      	ldr	r1, [pc, #228]	; (8002fa0 <DMA2_Stream2_IRQHandler+0x224>)
 8002eba:	428b      	cmp	r3, r1
 8002ebc:	d05a      	beq.n	8002f74 <DMA2_Stream2_IRQHandler+0x1f8>
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4937      	ldr	r1, [pc, #220]	; (8002fa4 <DMA2_Stream2_IRQHandler+0x228>)
 8002ec6:	428b      	cmp	r3, r1
 8002ec8:	d052      	beq.n	8002f70 <DMA2_Stream2_IRQHandler+0x1f4>
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4935      	ldr	r1, [pc, #212]	; (8002fa8 <DMA2_Stream2_IRQHandler+0x22c>)
 8002ed2:	428b      	cmp	r3, r1
 8002ed4:	d04a      	beq.n	8002f6c <DMA2_Stream2_IRQHandler+0x1f0>
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4933      	ldr	r1, [pc, #204]	; (8002fac <DMA2_Stream2_IRQHandler+0x230>)
 8002ede:	428b      	cmp	r3, r1
 8002ee0:	d041      	beq.n	8002f66 <DMA2_Stream2_IRQHandler+0x1ea>
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4931      	ldr	r1, [pc, #196]	; (8002fb0 <DMA2_Stream2_IRQHandler+0x234>)
 8002eea:	428b      	cmp	r3, r1
 8002eec:	d038      	beq.n	8002f60 <DMA2_Stream2_IRQHandler+0x1e4>
 8002eee:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	492f      	ldr	r1, [pc, #188]	; (8002fb4 <DMA2_Stream2_IRQHandler+0x238>)
 8002ef6:	428b      	cmp	r3, r1
 8002ef8:	d02f      	beq.n	8002f5a <DMA2_Stream2_IRQHandler+0x1de>
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	492d      	ldr	r1, [pc, #180]	; (8002fb8 <DMA2_Stream2_IRQHandler+0x23c>)
 8002f02:	428b      	cmp	r3, r1
 8002f04:	d026      	beq.n	8002f54 <DMA2_Stream2_IRQHandler+0x1d8>
 8002f06:	4b22      	ldr	r3, [pc, #136]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	492b      	ldr	r1, [pc, #172]	; (8002fbc <DMA2_Stream2_IRQHandler+0x240>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d01d      	beq.n	8002f4e <DMA2_Stream2_IRQHandler+0x1d2>
 8002f12:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4929      	ldr	r1, [pc, #164]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x244>)
 8002f1a:	428b      	cmp	r3, r1
 8002f1c:	d014      	beq.n	8002f48 <DMA2_Stream2_IRQHandler+0x1cc>
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4927      	ldr	r1, [pc, #156]	; (8002fc4 <DMA2_Stream2_IRQHandler+0x248>)
 8002f26:	428b      	cmp	r3, r1
 8002f28:	d00b      	beq.n	8002f42 <DMA2_Stream2_IRQHandler+0x1c6>
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <DMA2_Stream2_IRQHandler+0x214>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4925      	ldr	r1, [pc, #148]	; (8002fc8 <DMA2_Stream2_IRQHandler+0x24c>)
 8002f32:	428b      	cmp	r3, r1
 8002f34:	d102      	bne.n	8002f3c <DMA2_Stream2_IRQHandler+0x1c0>
 8002f36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f3a:	e01e      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f40:	e01b      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f46:	e018      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f4c:	e015      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f52:	e012      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f58:	e00f      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5e:	e00c      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f64:	e009      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6a:	e006      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	e004      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f70:	2308      	movs	r3, #8
 8002f72:	e002      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f74:	2308      	movs	r3, #8
 8002f76:	e000      	b.n	8002f7a <DMA2_Stream2_IRQHandler+0x1fe>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e12e      	b.n	80031e6 <DMA2_Stream2_IRQHandler+0x46a>
 8002f88:	20000300 	.word	0x20000300
 8002f8c:	40013c00 	.word	0x40013c00
 8002f90:	200002c0 	.word	0x200002c0
 8002f94:	40026458 	.word	0x40026458
 8002f98:	40026400 	.word	0x40026400
 8002f9c:	40026010 	.word	0x40026010
 8002fa0:	40026410 	.word	0x40026410
 8002fa4:	40026070 	.word	0x40026070
 8002fa8:	40026470 	.word	0x40026470
 8002fac:	40026028 	.word	0x40026028
 8002fb0:	40026428 	.word	0x40026428
 8002fb4:	40026088 	.word	0x40026088
 8002fb8:	40026488 	.word	0x40026488
 8002fbc:	40026040 	.word	0x40026040
 8002fc0:	40026440 	.word	0x40026440
 8002fc4:	400260a0 	.word	0x400260a0
 8002fc8:	400264a0 	.word	0x400264a0
 8002fcc:	400260b8 	.word	0x400260b8
 8002fd0:	4b72      	ldr	r3, [pc, #456]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <DMA2_Stream2_IRQHandler+0x424>)
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d972      	bls.n	80030c4 <DMA2_Stream2_IRQHandler+0x348>
 8002fde:	4b71      	ldr	r3, [pc, #452]	; (80031a4 <DMA2_Stream2_IRQHandler+0x428>)
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	4b6e      	ldr	r3, [pc, #440]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	496f      	ldr	r1, [pc, #444]	; (80031a8 <DMA2_Stream2_IRQHandler+0x42c>)
 8002fea:	428b      	cmp	r3, r1
 8002fec:	d062      	beq.n	80030b4 <DMA2_Stream2_IRQHandler+0x338>
 8002fee:	4b6b      	ldr	r3, [pc, #428]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	496d      	ldr	r1, [pc, #436]	; (80031ac <DMA2_Stream2_IRQHandler+0x430>)
 8002ff6:	428b      	cmp	r3, r1
 8002ff8:	d05a      	beq.n	80030b0 <DMA2_Stream2_IRQHandler+0x334>
 8002ffa:	4b68      	ldr	r3, [pc, #416]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	496b      	ldr	r1, [pc, #428]	; (80031b0 <DMA2_Stream2_IRQHandler+0x434>)
 8003002:	428b      	cmp	r3, r1
 8003004:	d052      	beq.n	80030ac <DMA2_Stream2_IRQHandler+0x330>
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4969      	ldr	r1, [pc, #420]	; (80031b4 <DMA2_Stream2_IRQHandler+0x438>)
 800300e:	428b      	cmp	r3, r1
 8003010:	d04a      	beq.n	80030a8 <DMA2_Stream2_IRQHandler+0x32c>
 8003012:	4b62      	ldr	r3, [pc, #392]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4967      	ldr	r1, [pc, #412]	; (80031b8 <DMA2_Stream2_IRQHandler+0x43c>)
 800301a:	428b      	cmp	r3, r1
 800301c:	d041      	beq.n	80030a2 <DMA2_Stream2_IRQHandler+0x326>
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4965      	ldr	r1, [pc, #404]	; (80031bc <DMA2_Stream2_IRQHandler+0x440>)
 8003026:	428b      	cmp	r3, r1
 8003028:	d038      	beq.n	800309c <DMA2_Stream2_IRQHandler+0x320>
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4963      	ldr	r1, [pc, #396]	; (80031c0 <DMA2_Stream2_IRQHandler+0x444>)
 8003032:	428b      	cmp	r3, r1
 8003034:	d02f      	beq.n	8003096 <DMA2_Stream2_IRQHandler+0x31a>
 8003036:	4b59      	ldr	r3, [pc, #356]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4961      	ldr	r1, [pc, #388]	; (80031c4 <DMA2_Stream2_IRQHandler+0x448>)
 800303e:	428b      	cmp	r3, r1
 8003040:	d026      	beq.n	8003090 <DMA2_Stream2_IRQHandler+0x314>
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	495f      	ldr	r1, [pc, #380]	; (80031c8 <DMA2_Stream2_IRQHandler+0x44c>)
 800304a:	428b      	cmp	r3, r1
 800304c:	d01d      	beq.n	800308a <DMA2_Stream2_IRQHandler+0x30e>
 800304e:	4b53      	ldr	r3, [pc, #332]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	495d      	ldr	r1, [pc, #372]	; (80031cc <DMA2_Stream2_IRQHandler+0x450>)
 8003056:	428b      	cmp	r3, r1
 8003058:	d014      	beq.n	8003084 <DMA2_Stream2_IRQHandler+0x308>
 800305a:	4b50      	ldr	r3, [pc, #320]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	495b      	ldr	r1, [pc, #364]	; (80031d0 <DMA2_Stream2_IRQHandler+0x454>)
 8003062:	428b      	cmp	r3, r1
 8003064:	d00b      	beq.n	800307e <DMA2_Stream2_IRQHandler+0x302>
 8003066:	4b4d      	ldr	r3, [pc, #308]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4959      	ldr	r1, [pc, #356]	; (80031d4 <DMA2_Stream2_IRQHandler+0x458>)
 800306e:	428b      	cmp	r3, r1
 8003070:	d102      	bne.n	8003078 <DMA2_Stream2_IRQHandler+0x2fc>
 8003072:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003076:	e01e      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 8003078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307c:	e01b      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 800307e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003082:	e018      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 8003084:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003088:	e015      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 800308a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800308e:	e012      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 8003090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003094:	e00f      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 8003096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800309a:	e00c      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 800309c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a0:	e009      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 80030a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a6:	e006      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 80030a8:	2308      	movs	r3, #8
 80030aa:	e004      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 80030ac:	2308      	movs	r3, #8
 80030ae:	e002      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 80030b0:	2308      	movs	r3, #8
 80030b2:	e000      	b.n	80030b6 <DMA2_Stream2_IRQHandler+0x33a>
 80030b4:	2308      	movs	r3, #8
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf14      	ite	ne
 80030bc:	2301      	movne	r3, #1
 80030be:	2300      	moveq	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e090      	b.n	80031e6 <DMA2_Stream2_IRQHandler+0x46a>
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <DMA2_Stream2_IRQHandler+0x428>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b34      	ldr	r3, [pc, #208]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4936      	ldr	r1, [pc, #216]	; (80031a8 <DMA2_Stream2_IRQHandler+0x42c>)
 80030d0:	428b      	cmp	r3, r1
 80030d2:	f000 8081 	beq.w	80031d8 <DMA2_Stream2_IRQHandler+0x45c>
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4933      	ldr	r1, [pc, #204]	; (80031ac <DMA2_Stream2_IRQHandler+0x430>)
 80030de:	428b      	cmp	r3, r1
 80030e0:	d05a      	beq.n	8003198 <DMA2_Stream2_IRQHandler+0x41c>
 80030e2:	4b2e      	ldr	r3, [pc, #184]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4931      	ldr	r1, [pc, #196]	; (80031b0 <DMA2_Stream2_IRQHandler+0x434>)
 80030ea:	428b      	cmp	r3, r1
 80030ec:	d052      	beq.n	8003194 <DMA2_Stream2_IRQHandler+0x418>
 80030ee:	4b2b      	ldr	r3, [pc, #172]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	492f      	ldr	r1, [pc, #188]	; (80031b4 <DMA2_Stream2_IRQHandler+0x438>)
 80030f6:	428b      	cmp	r3, r1
 80030f8:	d04a      	beq.n	8003190 <DMA2_Stream2_IRQHandler+0x414>
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	492d      	ldr	r1, [pc, #180]	; (80031b8 <DMA2_Stream2_IRQHandler+0x43c>)
 8003102:	428b      	cmp	r3, r1
 8003104:	d041      	beq.n	800318a <DMA2_Stream2_IRQHandler+0x40e>
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	492b      	ldr	r1, [pc, #172]	; (80031bc <DMA2_Stream2_IRQHandler+0x440>)
 800310e:	428b      	cmp	r3, r1
 8003110:	d038      	beq.n	8003184 <DMA2_Stream2_IRQHandler+0x408>
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4929      	ldr	r1, [pc, #164]	; (80031c0 <DMA2_Stream2_IRQHandler+0x444>)
 800311a:	428b      	cmp	r3, r1
 800311c:	d02f      	beq.n	800317e <DMA2_Stream2_IRQHandler+0x402>
 800311e:	4b1f      	ldr	r3, [pc, #124]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4927      	ldr	r1, [pc, #156]	; (80031c4 <DMA2_Stream2_IRQHandler+0x448>)
 8003126:	428b      	cmp	r3, r1
 8003128:	d026      	beq.n	8003178 <DMA2_Stream2_IRQHandler+0x3fc>
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4925      	ldr	r1, [pc, #148]	; (80031c8 <DMA2_Stream2_IRQHandler+0x44c>)
 8003132:	428b      	cmp	r3, r1
 8003134:	d01d      	beq.n	8003172 <DMA2_Stream2_IRQHandler+0x3f6>
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4923      	ldr	r1, [pc, #140]	; (80031cc <DMA2_Stream2_IRQHandler+0x450>)
 800313e:	428b      	cmp	r3, r1
 8003140:	d014      	beq.n	800316c <DMA2_Stream2_IRQHandler+0x3f0>
 8003142:	4b16      	ldr	r3, [pc, #88]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4921      	ldr	r1, [pc, #132]	; (80031d0 <DMA2_Stream2_IRQHandler+0x454>)
 800314a:	428b      	cmp	r3, r1
 800314c:	d00b      	beq.n	8003166 <DMA2_Stream2_IRQHandler+0x3ea>
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <DMA2_Stream2_IRQHandler+0x420>)
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	491f      	ldr	r1, [pc, #124]	; (80031d4 <DMA2_Stream2_IRQHandler+0x458>)
 8003156:	428b      	cmp	r3, r1
 8003158:	d102      	bne.n	8003160 <DMA2_Stream2_IRQHandler+0x3e4>
 800315a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800315e:	e03c      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003160:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003164:	e039      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003166:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800316a:	e036      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 800316c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003170:	e033      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003172:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003176:	e030      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800317c:	e02d      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 800317e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003182:	e02a      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003188:	e027      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 800318a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318e:	e024      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003190:	2308      	movs	r3, #8
 8003192:	e022      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003194:	2308      	movs	r3, #8
 8003196:	e020      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 8003198:	2308      	movs	r3, #8
 800319a:	e01e      	b.n	80031da <DMA2_Stream2_IRQHandler+0x45e>
 800319c:	200002c0 	.word	0x200002c0
 80031a0:	40026058 	.word	0x40026058
 80031a4:	40026000 	.word	0x40026000
 80031a8:	40026010 	.word	0x40026010
 80031ac:	40026410 	.word	0x40026410
 80031b0:	40026070 	.word	0x40026070
 80031b4:	40026470 	.word	0x40026470
 80031b8:	40026028 	.word	0x40026028
 80031bc:	40026428 	.word	0x40026428
 80031c0:	40026088 	.word	0x40026088
 80031c4:	40026488 	.word	0x40026488
 80031c8:	40026040 	.word	0x40026040
 80031cc:	40026440 	.word	0x40026440
 80031d0:	400260a0 	.word	0x400260a0
 80031d4:	400264a0 	.word	0x400264a0
 80031d8:	2308      	movs	r3, #8
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <DMA2_Stream2_IRQHandler+0x474>
  {
    UART_Emul_DMAError(&hdma_rx);
 80031ea:	4876      	ldr	r0, [pc, #472]	; (80033c4 <DMA2_Stream2_IRQHandler+0x648>)
 80031ec:	f001 fb30 	bl	8004850 <UART_Emul_DMAError>
  }

  /* Clear the transfer complete flag */
  __HAL_DMA_CLEAR_FLAG(TimHandle.hdma[TIM_DMA_ID_CC2], __HAL_DMA_GET_TC_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC2]));
 80031f0:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b74      	ldr	r3, [pc, #464]	; (80033cc <DMA2_Stream2_IRQHandler+0x650>)
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d96c      	bls.n	80032d8 <DMA2_Stream2_IRQHandler+0x55c>
 80031fe:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a72      	ldr	r2, [pc, #456]	; (80033d0 <DMA2_Stream2_IRQHandler+0x654>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d062      	beq.n	80032d0 <DMA2_Stream2_IRQHandler+0x554>
 800320a:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a70      	ldr	r2, [pc, #448]	; (80033d4 <DMA2_Stream2_IRQHandler+0x658>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d05a      	beq.n	80032cc <DMA2_Stream2_IRQHandler+0x550>
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a6e      	ldr	r2, [pc, #440]	; (80033d8 <DMA2_Stream2_IRQHandler+0x65c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d052      	beq.n	80032c8 <DMA2_Stream2_IRQHandler+0x54c>
 8003222:	4b69      	ldr	r3, [pc, #420]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <DMA2_Stream2_IRQHandler+0x660>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d04a      	beq.n	80032c4 <DMA2_Stream2_IRQHandler+0x548>
 800322e:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6a      	ldr	r2, [pc, #424]	; (80033e0 <DMA2_Stream2_IRQHandler+0x664>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d041      	beq.n	80032be <DMA2_Stream2_IRQHandler+0x542>
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a68      	ldr	r2, [pc, #416]	; (80033e4 <DMA2_Stream2_IRQHandler+0x668>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d038      	beq.n	80032b8 <DMA2_Stream2_IRQHandler+0x53c>
 8003246:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a66      	ldr	r2, [pc, #408]	; (80033e8 <DMA2_Stream2_IRQHandler+0x66c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02f      	beq.n	80032b2 <DMA2_Stream2_IRQHandler+0x536>
 8003252:	4b5d      	ldr	r3, [pc, #372]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a64      	ldr	r2, [pc, #400]	; (80033ec <DMA2_Stream2_IRQHandler+0x670>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d026      	beq.n	80032ac <DMA2_Stream2_IRQHandler+0x530>
 800325e:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a62      	ldr	r2, [pc, #392]	; (80033f0 <DMA2_Stream2_IRQHandler+0x674>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <DMA2_Stream2_IRQHandler+0x52a>
 800326a:	4b57      	ldr	r3, [pc, #348]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a60      	ldr	r2, [pc, #384]	; (80033f4 <DMA2_Stream2_IRQHandler+0x678>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d014      	beq.n	80032a0 <DMA2_Stream2_IRQHandler+0x524>
 8003276:	4b54      	ldr	r3, [pc, #336]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5e      	ldr	r2, [pc, #376]	; (80033f8 <DMA2_Stream2_IRQHandler+0x67c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00b      	beq.n	800329a <DMA2_Stream2_IRQHandler+0x51e>
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5c      	ldr	r2, [pc, #368]	; (80033fc <DMA2_Stream2_IRQHandler+0x680>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d102      	bne.n	8003294 <DMA2_Stream2_IRQHandler+0x518>
 800328e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003292:	e01e      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 8003294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003298:	e01b      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 800329a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800329e:	e018      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032a4:	e015      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032aa:	e012      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032b0:	e00f      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032b6:	e00c      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032bc:	e009      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032c2:	e006      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032c4:	2320      	movs	r3, #32
 80032c6:	e004      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032c8:	2320      	movs	r3, #32
 80032ca:	e002      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032cc:	2320      	movs	r3, #32
 80032ce:	e000      	b.n	80032d2 <DMA2_Stream2_IRQHandler+0x556>
 80032d0:	2320      	movs	r3, #32
 80032d2:	4a4b      	ldr	r2, [pc, #300]	; (8003400 <DMA2_Stream2_IRQHandler+0x684>)
 80032d4:	60d3      	str	r3, [r2, #12]
 80032d6:	e177      	b.n	80035c8 <DMA2_Stream2_IRQHandler+0x84c>
 80032d8:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	4b48      	ldr	r3, [pc, #288]	; (8003404 <DMA2_Stream2_IRQHandler+0x688>)
 80032e2:	429a      	cmp	r2, r3
 80032e4:	f240 8090 	bls.w	8003408 <DMA2_Stream2_IRQHandler+0x68c>
 80032e8:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a38      	ldr	r2, [pc, #224]	; (80033d0 <DMA2_Stream2_IRQHandler+0x654>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d062      	beq.n	80033ba <DMA2_Stream2_IRQHandler+0x63e>
 80032f4:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a36      	ldr	r2, [pc, #216]	; (80033d4 <DMA2_Stream2_IRQHandler+0x658>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d05a      	beq.n	80033b6 <DMA2_Stream2_IRQHandler+0x63a>
 8003300:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <DMA2_Stream2_IRQHandler+0x65c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d052      	beq.n	80033b2 <DMA2_Stream2_IRQHandler+0x636>
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <DMA2_Stream2_IRQHandler+0x660>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <DMA2_Stream2_IRQHandler+0x632>
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <DMA2_Stream2_IRQHandler+0x664>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d041      	beq.n	80033a8 <DMA2_Stream2_IRQHandler+0x62c>
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2e      	ldr	r2, [pc, #184]	; (80033e4 <DMA2_Stream2_IRQHandler+0x668>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d038      	beq.n	80033a2 <DMA2_Stream2_IRQHandler+0x626>
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a2c      	ldr	r2, [pc, #176]	; (80033e8 <DMA2_Stream2_IRQHandler+0x66c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d02f      	beq.n	800339c <DMA2_Stream2_IRQHandler+0x620>
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <DMA2_Stream2_IRQHandler+0x670>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d026      	beq.n	8003396 <DMA2_Stream2_IRQHandler+0x61a>
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <DMA2_Stream2_IRQHandler+0x674>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d01d      	beq.n	8003390 <DMA2_Stream2_IRQHandler+0x614>
 8003354:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <DMA2_Stream2_IRQHandler+0x678>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d014      	beq.n	800338a <DMA2_Stream2_IRQHandler+0x60e>
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a24      	ldr	r2, [pc, #144]	; (80033f8 <DMA2_Stream2_IRQHandler+0x67c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00b      	beq.n	8003384 <DMA2_Stream2_IRQHandler+0x608>
 800336c:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <DMA2_Stream2_IRQHandler+0x64c>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a22      	ldr	r2, [pc, #136]	; (80033fc <DMA2_Stream2_IRQHandler+0x680>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d102      	bne.n	800337e <DMA2_Stream2_IRQHandler+0x602>
 8003378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800337c:	e01e      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 800337e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003382:	e01b      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 8003384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003388:	e018      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 800338a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800338e:	e015      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 8003390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003394:	e012      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 8003396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800339a:	e00f      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 800339c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033a0:	e00c      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 80033a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033a6:	e009      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 80033a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033ac:	e006      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 80033ae:	2320      	movs	r3, #32
 80033b0:	e004      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 80033b2:	2320      	movs	r3, #32
 80033b4:	e002      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 80033b6:	2320      	movs	r3, #32
 80033b8:	e000      	b.n	80033bc <DMA2_Stream2_IRQHandler+0x640>
 80033ba:	2320      	movs	r3, #32
 80033bc:	4a10      	ldr	r2, [pc, #64]	; (8003400 <DMA2_Stream2_IRQHandler+0x684>)
 80033be:	6093      	str	r3, [r2, #8]
 80033c0:	e102      	b.n	80035c8 <DMA2_Stream2_IRQHandler+0x84c>
 80033c2:	bf00      	nop
 80033c4:	20000260 	.word	0x20000260
 80033c8:	200002c0 	.word	0x200002c0
 80033cc:	40026458 	.word	0x40026458
 80033d0:	40026010 	.word	0x40026010
 80033d4:	40026410 	.word	0x40026410
 80033d8:	40026070 	.word	0x40026070
 80033dc:	40026470 	.word	0x40026470
 80033e0:	40026028 	.word	0x40026028
 80033e4:	40026428 	.word	0x40026428
 80033e8:	40026088 	.word	0x40026088
 80033ec:	40026488 	.word	0x40026488
 80033f0:	40026040 	.word	0x40026040
 80033f4:	40026440 	.word	0x40026440
 80033f8:	400260a0 	.word	0x400260a0
 80033fc:	400264a0 	.word	0x400264a0
 8003400:	40026400 	.word	0x40026400
 8003404:	400260b8 	.word	0x400260b8
 8003408:	4b74      	ldr	r3, [pc, #464]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <DMA2_Stream2_IRQHandler+0x864>)
 8003412:	429a      	cmp	r2, r3
 8003414:	d96c      	bls.n	80034f0 <DMA2_Stream2_IRQHandler+0x774>
 8003416:	4b71      	ldr	r3, [pc, #452]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a71      	ldr	r2, [pc, #452]	; (80035e4 <DMA2_Stream2_IRQHandler+0x868>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d062      	beq.n	80034e8 <DMA2_Stream2_IRQHandler+0x76c>
 8003422:	4b6e      	ldr	r3, [pc, #440]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <DMA2_Stream2_IRQHandler+0x86c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d05a      	beq.n	80034e4 <DMA2_Stream2_IRQHandler+0x768>
 800342e:	4b6b      	ldr	r3, [pc, #428]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6d      	ldr	r2, [pc, #436]	; (80035ec <DMA2_Stream2_IRQHandler+0x870>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d052      	beq.n	80034e0 <DMA2_Stream2_IRQHandler+0x764>
 800343a:	4b68      	ldr	r3, [pc, #416]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6b      	ldr	r2, [pc, #428]	; (80035f0 <DMA2_Stream2_IRQHandler+0x874>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d04a      	beq.n	80034dc <DMA2_Stream2_IRQHandler+0x760>
 8003446:	4b65      	ldr	r3, [pc, #404]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a69      	ldr	r2, [pc, #420]	; (80035f4 <DMA2_Stream2_IRQHandler+0x878>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d041      	beq.n	80034d6 <DMA2_Stream2_IRQHandler+0x75a>
 8003452:	4b62      	ldr	r3, [pc, #392]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <DMA2_Stream2_IRQHandler+0x87c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d038      	beq.n	80034d0 <DMA2_Stream2_IRQHandler+0x754>
 800345e:	4b5f      	ldr	r3, [pc, #380]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a65      	ldr	r2, [pc, #404]	; (80035fc <DMA2_Stream2_IRQHandler+0x880>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02f      	beq.n	80034ca <DMA2_Stream2_IRQHandler+0x74e>
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a63      	ldr	r2, [pc, #396]	; (8003600 <DMA2_Stream2_IRQHandler+0x884>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d026      	beq.n	80034c4 <DMA2_Stream2_IRQHandler+0x748>
 8003476:	4b59      	ldr	r3, [pc, #356]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a61      	ldr	r2, [pc, #388]	; (8003604 <DMA2_Stream2_IRQHandler+0x888>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01d      	beq.n	80034be <DMA2_Stream2_IRQHandler+0x742>
 8003482:	4b56      	ldr	r3, [pc, #344]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5f      	ldr	r2, [pc, #380]	; (8003608 <DMA2_Stream2_IRQHandler+0x88c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d014      	beq.n	80034b8 <DMA2_Stream2_IRQHandler+0x73c>
 800348e:	4b53      	ldr	r3, [pc, #332]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5d      	ldr	r2, [pc, #372]	; (800360c <DMA2_Stream2_IRQHandler+0x890>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <DMA2_Stream2_IRQHandler+0x736>
 800349a:	4b50      	ldr	r3, [pc, #320]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <DMA2_Stream2_IRQHandler+0x894>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d102      	bne.n	80034ac <DMA2_Stream2_IRQHandler+0x730>
 80034a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034aa:	e01e      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034b0:	e01b      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034b6:	e018      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034bc:	e015      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034c2:	e012      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c8:	e00f      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034ce:	e00c      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d4:	e009      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034da:	e006      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034dc:	2320      	movs	r3, #32
 80034de:	e004      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034e0:	2320      	movs	r3, #32
 80034e2:	e002      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034e4:	2320      	movs	r3, #32
 80034e6:	e000      	b.n	80034ea <DMA2_Stream2_IRQHandler+0x76e>
 80034e8:	2320      	movs	r3, #32
 80034ea:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <DMA2_Stream2_IRQHandler+0x898>)
 80034ec:	60d3      	str	r3, [r2, #12]
 80034ee:	e06b      	b.n	80035c8 <DMA2_Stream2_IRQHandler+0x84c>
 80034f0:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3b      	ldr	r2, [pc, #236]	; (80035e4 <DMA2_Stream2_IRQHandler+0x868>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d062      	beq.n	80035c2 <DMA2_Stream2_IRQHandler+0x846>
 80034fc:	4b37      	ldr	r3, [pc, #220]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a39      	ldr	r2, [pc, #228]	; (80035e8 <DMA2_Stream2_IRQHandler+0x86c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d05a      	beq.n	80035be <DMA2_Stream2_IRQHandler+0x842>
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a37      	ldr	r2, [pc, #220]	; (80035ec <DMA2_Stream2_IRQHandler+0x870>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d052      	beq.n	80035ba <DMA2_Stream2_IRQHandler+0x83e>
 8003514:	4b31      	ldr	r3, [pc, #196]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <DMA2_Stream2_IRQHandler+0x874>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d04a      	beq.n	80035b6 <DMA2_Stream2_IRQHandler+0x83a>
 8003520:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <DMA2_Stream2_IRQHandler+0x878>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d041      	beq.n	80035b0 <DMA2_Stream2_IRQHandler+0x834>
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a31      	ldr	r2, [pc, #196]	; (80035f8 <DMA2_Stream2_IRQHandler+0x87c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d038      	beq.n	80035aa <DMA2_Stream2_IRQHandler+0x82e>
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <DMA2_Stream2_IRQHandler+0x880>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02f      	beq.n	80035a4 <DMA2_Stream2_IRQHandler+0x828>
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <DMA2_Stream2_IRQHandler+0x884>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d026      	beq.n	800359e <DMA2_Stream2_IRQHandler+0x822>
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <DMA2_Stream2_IRQHandler+0x888>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d01d      	beq.n	8003598 <DMA2_Stream2_IRQHandler+0x81c>
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a29      	ldr	r2, [pc, #164]	; (8003608 <DMA2_Stream2_IRQHandler+0x88c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d014      	beq.n	8003592 <DMA2_Stream2_IRQHandler+0x816>
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a27      	ldr	r2, [pc, #156]	; (800360c <DMA2_Stream2_IRQHandler+0x890>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00b      	beq.n	800358c <DMA2_Stream2_IRQHandler+0x810>
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a25      	ldr	r2, [pc, #148]	; (8003610 <DMA2_Stream2_IRQHandler+0x894>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d102      	bne.n	8003586 <DMA2_Stream2_IRQHandler+0x80a>
 8003580:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003584:	e01e      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 8003586:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800358a:	e01b      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 800358c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003590:	e018      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 8003592:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003596:	e015      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 8003598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800359c:	e012      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 800359e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035a2:	e00f      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035a8:	e00c      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ae:	e009      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035b4:	e006      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035b6:	2320      	movs	r3, #32
 80035b8:	e004      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035ba:	2320      	movs	r3, #32
 80035bc:	e002      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035be:	2320      	movs	r3, #32
 80035c0:	e000      	b.n	80035c4 <DMA2_Stream2_IRQHandler+0x848>
 80035c2:	2320      	movs	r3, #32
 80035c4:	4a13      	ldr	r2, [pc, #76]	; (8003614 <DMA2_Stream2_IRQHandler+0x898>)
 80035c6:	6093      	str	r3, [r2, #8]
 
  /* Transfer complete callback */
  TimHandle.hdma[TIM_DMA_ID_CC2]->XferCpltCallback(TimHandle.hdma[TIM_DMA_ID_CC2]);
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	4a03      	ldr	r2, [pc, #12]	; (80035dc <DMA2_Stream2_IRQHandler+0x860>)
 80035d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035d2:	4610      	mov	r0, r2
 80035d4:	4798      	blx	r3
}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	200002c0 	.word	0x200002c0
 80035e0:	40026058 	.word	0x40026058
 80035e4:	40026010 	.word	0x40026010
 80035e8:	40026410 	.word	0x40026410
 80035ec:	40026070 	.word	0x40026070
 80035f0:	40026470 	.word	0x40026470
 80035f4:	40026028 	.word	0x40026028
 80035f8:	40026428 	.word	0x40026428
 80035fc:	40026088 	.word	0x40026088
 8003600:	40026488 	.word	0x40026488
 8003604:	40026040 	.word	0x40026040
 8003608:	40026440 	.word	0x40026440
 800360c:	400260a0 	.word	0x400260a0
 8003610:	400264a0 	.word	0x400264a0
 8003614:	40026000 	.word	0x40026000

08003618 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void UART_EMUL_EXTI_RX(uint16_t GPIO_Pin)
{ 	
 8003618:	b5b0      	push	{r4, r5, r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
	  uint32_t tmpreceive = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
	  uint32_t tmpformat = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
	  uint32_t tmpdata = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]

   //TRUNG's callback function
	   //Prevent unused argument(s) compilation warning
		if (GPIO_Pin == GPIO_PIN_0)
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d111      	bne.n	8003658 <HAL_GPIO_EXTI_Callback+0x40>
		{
			g_u8StatusInt1++;
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_GPIO_EXTI_Callback+0xc4>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b27      	ldr	r3, [pc, #156]	; (80036dc <HAL_GPIO_EXTI_Callback+0xc4>)
 800363e:	701a      	strb	r2, [r3, #0]
			g_u32CurrentTime = HAL_GetTick();
 8003640:	f001 ff86 	bl	8005550 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	4b26      	ldr	r3, [pc, #152]	; (80036e0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003648:	601a      	str	r2, [r3, #0]
			g_bIsMotion = true;
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_GPIO_EXTI_Callback+0xcc>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
			g_bIsSetGPS = true;
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
			  {
			  // Format frame
				*(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
			  }
		}
}
 8003656:	e03c      	b.n	80036d2 <HAL_GPIO_EXTI_Callback+0xba>
		else if (GPIO_Pin == UART_EMUL_RX_PIN)
 8003658:	88fb      	ldrh	r3, [r7, #6]
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365e:	d138      	bne.n	80036d2 <HAL_GPIO_EXTI_Callback+0xba>
			  EXTI->IMR &= ~huart_emul->Init.RxPinNumber;
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <HAL_GPIO_EXTI_Callback+0xd4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	8a12      	ldrh	r2, [r2, #16]
 800366a:	43d2      	mvns	r2, r2
 800366c:	4611      	mov	r1, r2
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_GPIO_EXTI_Callback+0xd4>)
 8003670:	400b      	ands	r3, r1
 8003672:	6013      	str	r3, [r2, #0]
			  if ((huart_emul->RxXferCount % 2) != 0)
 8003674:	4b1e      	ldr	r3, [pc, #120]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_GPIO_EXTI_Callback+0x76>
				tmpreceive = (uint32_t)pFirstBuffer_Rx;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003686:	617b      	str	r3, [r7, #20]
				tmpformat = (uint32_t)pSecondBuffer_Rx;
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e003      	b.n	8003696 <HAL_GPIO_EXTI_Callback+0x7e>
				tmpreceive = (uint32_t)pSecondBuffer_Rx;
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8003690:	617b      	str	r3, [r7, #20]
				tmpformat = (uint32_t)pFirstBuffer_Rx;
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003694:	613b      	str	r3, [r7, #16]
			  UART_Emul_ReceiveFrame(huart_emul, (uint32_t*)tmpreceive);
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fce0 	bl	8004064 <UART_Emul_ReceiveFrame>
			  if (huart_emul->RxXferCount > 1)
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d911      	bls.n	80036d2 <HAL_GPIO_EXTI_Callback+0xba>
				*(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	6939      	ldr	r1, [r7, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	b2dd      	uxtb	r5, r3
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036c4:	3b02      	subs	r3, #2
 80036c6:	18d4      	adds	r4, r2, r3
 80036c8:	462a      	mov	r2, r5
 80036ca:	f000 fe4f 	bl	800436c <UART_Emul_ReceiveFormatFrame>
 80036ce:	4603      	mov	r3, r0
 80036d0:	7023      	strb	r3, [r4, #0]
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bdb0      	pop	{r4, r5, r7, pc}
 80036da:	bf00      	nop
 80036dc:	200003c4 	.word	0x200003c4
 80036e0:	200003c8 	.word	0x200003c8
 80036e4:	200003c5 	.word	0x200003c5
 80036e8:	200003c6 	.word	0x200003c6
 80036ec:	40013c00 	.word	0x40013c00
 80036f0:	20000300 	.word	0x20000300
 80036f4:	20000304 	.word	0x20000304
 80036f8:	20000334 	.word	0x20000334

080036fc <DMA2_Stream1_IRQHandler>:
* @brief  This function handles DMA interrupt request for TC.
* @param  None
* @retval None
*/
void UART_EMUL_TX_DMA_IRQHandler(void)
{ 
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  if (__HAL_DMA_GET_FLAG(TimHandle.hdma[TIM_DMA_ID_CC1], __HAL_DMA_GET_TE_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC1])) != RESET)
 8003700:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	4b79      	ldr	r3, [pc, #484]	; (80038f0 <DMA2_Stream1_IRQHandler+0x1f4>)
 800370a:	429a      	cmp	r2, r3
 800370c:	d972      	bls.n	80037f4 <DMA2_Stream1_IRQHandler+0xf8>
 800370e:	4b79      	ldr	r3, [pc, #484]	; (80038f4 <DMA2_Stream1_IRQHandler+0x1f8>)
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4977      	ldr	r1, [pc, #476]	; (80038f8 <DMA2_Stream1_IRQHandler+0x1fc>)
 800371a:	428b      	cmp	r3, r1
 800371c:	d062      	beq.n	80037e4 <DMA2_Stream1_IRQHandler+0xe8>
 800371e:	4b73      	ldr	r3, [pc, #460]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4975      	ldr	r1, [pc, #468]	; (80038fc <DMA2_Stream1_IRQHandler+0x200>)
 8003726:	428b      	cmp	r3, r1
 8003728:	d05a      	beq.n	80037e0 <DMA2_Stream1_IRQHandler+0xe4>
 800372a:	4b70      	ldr	r3, [pc, #448]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4973      	ldr	r1, [pc, #460]	; (8003900 <DMA2_Stream1_IRQHandler+0x204>)
 8003732:	428b      	cmp	r3, r1
 8003734:	d052      	beq.n	80037dc <DMA2_Stream1_IRQHandler+0xe0>
 8003736:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4971      	ldr	r1, [pc, #452]	; (8003904 <DMA2_Stream1_IRQHandler+0x208>)
 800373e:	428b      	cmp	r3, r1
 8003740:	d04a      	beq.n	80037d8 <DMA2_Stream1_IRQHandler+0xdc>
 8003742:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	496f      	ldr	r1, [pc, #444]	; (8003908 <DMA2_Stream1_IRQHandler+0x20c>)
 800374a:	428b      	cmp	r3, r1
 800374c:	d041      	beq.n	80037d2 <DMA2_Stream1_IRQHandler+0xd6>
 800374e:	4b67      	ldr	r3, [pc, #412]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	496d      	ldr	r1, [pc, #436]	; (800390c <DMA2_Stream1_IRQHandler+0x210>)
 8003756:	428b      	cmp	r3, r1
 8003758:	d038      	beq.n	80037cc <DMA2_Stream1_IRQHandler+0xd0>
 800375a:	4b64      	ldr	r3, [pc, #400]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	496b      	ldr	r1, [pc, #428]	; (8003910 <DMA2_Stream1_IRQHandler+0x214>)
 8003762:	428b      	cmp	r3, r1
 8003764:	d02f      	beq.n	80037c6 <DMA2_Stream1_IRQHandler+0xca>
 8003766:	4b61      	ldr	r3, [pc, #388]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4969      	ldr	r1, [pc, #420]	; (8003914 <DMA2_Stream1_IRQHandler+0x218>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d026      	beq.n	80037c0 <DMA2_Stream1_IRQHandler+0xc4>
 8003772:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4967      	ldr	r1, [pc, #412]	; (8003918 <DMA2_Stream1_IRQHandler+0x21c>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d01d      	beq.n	80037ba <DMA2_Stream1_IRQHandler+0xbe>
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4965      	ldr	r1, [pc, #404]	; (800391c <DMA2_Stream1_IRQHandler+0x220>)
 8003786:	428b      	cmp	r3, r1
 8003788:	d014      	beq.n	80037b4 <DMA2_Stream1_IRQHandler+0xb8>
 800378a:	4b58      	ldr	r3, [pc, #352]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4963      	ldr	r1, [pc, #396]	; (8003920 <DMA2_Stream1_IRQHandler+0x224>)
 8003792:	428b      	cmp	r3, r1
 8003794:	d00b      	beq.n	80037ae <DMA2_Stream1_IRQHandler+0xb2>
 8003796:	4b55      	ldr	r3, [pc, #340]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4961      	ldr	r1, [pc, #388]	; (8003924 <DMA2_Stream1_IRQHandler+0x228>)
 800379e:	428b      	cmp	r3, r1
 80037a0:	d102      	bne.n	80037a8 <DMA2_Stream1_IRQHandler+0xac>
 80037a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037a6:	e01e      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ac:	e01b      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037b2:	e018      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037b8:	e015      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037be:	e012      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c4:	e00f      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ca:	e00c      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d0:	e009      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037d6:	e006      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037d8:	2308      	movs	r3, #8
 80037da:	e004      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037dc:	2308      	movs	r3, #8
 80037de:	e002      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037e0:	2308      	movs	r3, #8
 80037e2:	e000      	b.n	80037e6 <DMA2_Stream1_IRQHandler+0xea>
 80037e4:	2308      	movs	r3, #8
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e1a6      	b.n	8003b42 <DMA2_Stream1_IRQHandler+0x446>
 80037f4:	4b3d      	ldr	r3, [pc, #244]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <DMA2_Stream1_IRQHandler+0x22c>)
 80037fe:	429a      	cmp	r2, r3
 8003800:	f240 8094 	bls.w	800392c <DMA2_Stream1_IRQHandler+0x230>
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <DMA2_Stream1_IRQHandler+0x1f8>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b38      	ldr	r3, [pc, #224]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	493a      	ldr	r1, [pc, #232]	; (80038f8 <DMA2_Stream1_IRQHandler+0x1fc>)
 8003810:	428b      	cmp	r3, r1
 8003812:	d062      	beq.n	80038da <DMA2_Stream1_IRQHandler+0x1de>
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4938      	ldr	r1, [pc, #224]	; (80038fc <DMA2_Stream1_IRQHandler+0x200>)
 800381c:	428b      	cmp	r3, r1
 800381e:	d05a      	beq.n	80038d6 <DMA2_Stream1_IRQHandler+0x1da>
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4936      	ldr	r1, [pc, #216]	; (8003900 <DMA2_Stream1_IRQHandler+0x204>)
 8003828:	428b      	cmp	r3, r1
 800382a:	d052      	beq.n	80038d2 <DMA2_Stream1_IRQHandler+0x1d6>
 800382c:	4b2f      	ldr	r3, [pc, #188]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <DMA2_Stream1_IRQHandler+0x208>)
 8003834:	428b      	cmp	r3, r1
 8003836:	d04a      	beq.n	80038ce <DMA2_Stream1_IRQHandler+0x1d2>
 8003838:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4932      	ldr	r1, [pc, #200]	; (8003908 <DMA2_Stream1_IRQHandler+0x20c>)
 8003840:	428b      	cmp	r3, r1
 8003842:	d041      	beq.n	80038c8 <DMA2_Stream1_IRQHandler+0x1cc>
 8003844:	4b29      	ldr	r3, [pc, #164]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4930      	ldr	r1, [pc, #192]	; (800390c <DMA2_Stream1_IRQHandler+0x210>)
 800384c:	428b      	cmp	r3, r1
 800384e:	d038      	beq.n	80038c2 <DMA2_Stream1_IRQHandler+0x1c6>
 8003850:	4b26      	ldr	r3, [pc, #152]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	492e      	ldr	r1, [pc, #184]	; (8003910 <DMA2_Stream1_IRQHandler+0x214>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d02f      	beq.n	80038bc <DMA2_Stream1_IRQHandler+0x1c0>
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	492c      	ldr	r1, [pc, #176]	; (8003914 <DMA2_Stream1_IRQHandler+0x218>)
 8003864:	428b      	cmp	r3, r1
 8003866:	d026      	beq.n	80038b6 <DMA2_Stream1_IRQHandler+0x1ba>
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	492a      	ldr	r1, [pc, #168]	; (8003918 <DMA2_Stream1_IRQHandler+0x21c>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d01d      	beq.n	80038b0 <DMA2_Stream1_IRQHandler+0x1b4>
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4928      	ldr	r1, [pc, #160]	; (800391c <DMA2_Stream1_IRQHandler+0x220>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d014      	beq.n	80038aa <DMA2_Stream1_IRQHandler+0x1ae>
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4926      	ldr	r1, [pc, #152]	; (8003920 <DMA2_Stream1_IRQHandler+0x224>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d00b      	beq.n	80038a4 <DMA2_Stream1_IRQHandler+0x1a8>
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <DMA2_Stream1_IRQHandler+0x1f0>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4924      	ldr	r1, [pc, #144]	; (8003924 <DMA2_Stream1_IRQHandler+0x228>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d102      	bne.n	800389e <DMA2_Stream1_IRQHandler+0x1a2>
 8003898:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800389c:	e01e      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 800389e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a2:	e01b      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038a8:	e018      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038ae:	e015      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038b4:	e012      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ba:	e00f      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c0:	e00c      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c6:	e009      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038cc:	e006      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038ce:	2308      	movs	r3, #8
 80038d0:	e004      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038d2:	2308      	movs	r3, #8
 80038d4:	e002      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038d6:	2308      	movs	r3, #8
 80038d8:	e000      	b.n	80038dc <DMA2_Stream1_IRQHandler+0x1e0>
 80038da:	2308      	movs	r3, #8
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e12b      	b.n	8003b42 <DMA2_Stream1_IRQHandler+0x446>
 80038ea:	bf00      	nop
 80038ec:	200002c0 	.word	0x200002c0
 80038f0:	40026458 	.word	0x40026458
 80038f4:	40026400 	.word	0x40026400
 80038f8:	40026010 	.word	0x40026010
 80038fc:	40026410 	.word	0x40026410
 8003900:	40026070 	.word	0x40026070
 8003904:	40026470 	.word	0x40026470
 8003908:	40026028 	.word	0x40026028
 800390c:	40026428 	.word	0x40026428
 8003910:	40026088 	.word	0x40026088
 8003914:	40026488 	.word	0x40026488
 8003918:	40026040 	.word	0x40026040
 800391c:	40026440 	.word	0x40026440
 8003920:	400260a0 	.word	0x400260a0
 8003924:	400264a0 	.word	0x400264a0
 8003928:	400260b8 	.word	0x400260b8
 800392c:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	4b71      	ldr	r3, [pc, #452]	; (8003afc <DMA2_Stream1_IRQHandler+0x400>)
 8003936:	429a      	cmp	r2, r3
 8003938:	d972      	bls.n	8003a20 <DMA2_Stream1_IRQHandler+0x324>
 800393a:	4b71      	ldr	r3, [pc, #452]	; (8003b00 <DMA2_Stream1_IRQHandler+0x404>)
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4b6e      	ldr	r3, [pc, #440]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	496f      	ldr	r1, [pc, #444]	; (8003b04 <DMA2_Stream1_IRQHandler+0x408>)
 8003946:	428b      	cmp	r3, r1
 8003948:	d062      	beq.n	8003a10 <DMA2_Stream1_IRQHandler+0x314>
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	496d      	ldr	r1, [pc, #436]	; (8003b08 <DMA2_Stream1_IRQHandler+0x40c>)
 8003952:	428b      	cmp	r3, r1
 8003954:	d05a      	beq.n	8003a0c <DMA2_Stream1_IRQHandler+0x310>
 8003956:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	496b      	ldr	r1, [pc, #428]	; (8003b0c <DMA2_Stream1_IRQHandler+0x410>)
 800395e:	428b      	cmp	r3, r1
 8003960:	d052      	beq.n	8003a08 <DMA2_Stream1_IRQHandler+0x30c>
 8003962:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4969      	ldr	r1, [pc, #420]	; (8003b10 <DMA2_Stream1_IRQHandler+0x414>)
 800396a:	428b      	cmp	r3, r1
 800396c:	d04a      	beq.n	8003a04 <DMA2_Stream1_IRQHandler+0x308>
 800396e:	4b62      	ldr	r3, [pc, #392]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4967      	ldr	r1, [pc, #412]	; (8003b14 <DMA2_Stream1_IRQHandler+0x418>)
 8003976:	428b      	cmp	r3, r1
 8003978:	d041      	beq.n	80039fe <DMA2_Stream1_IRQHandler+0x302>
 800397a:	4b5f      	ldr	r3, [pc, #380]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4965      	ldr	r1, [pc, #404]	; (8003b18 <DMA2_Stream1_IRQHandler+0x41c>)
 8003982:	428b      	cmp	r3, r1
 8003984:	d038      	beq.n	80039f8 <DMA2_Stream1_IRQHandler+0x2fc>
 8003986:	4b5c      	ldr	r3, [pc, #368]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4963      	ldr	r1, [pc, #396]	; (8003b1c <DMA2_Stream1_IRQHandler+0x420>)
 800398e:	428b      	cmp	r3, r1
 8003990:	d02f      	beq.n	80039f2 <DMA2_Stream1_IRQHandler+0x2f6>
 8003992:	4b59      	ldr	r3, [pc, #356]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4961      	ldr	r1, [pc, #388]	; (8003b20 <DMA2_Stream1_IRQHandler+0x424>)
 800399a:	428b      	cmp	r3, r1
 800399c:	d026      	beq.n	80039ec <DMA2_Stream1_IRQHandler+0x2f0>
 800399e:	4b56      	ldr	r3, [pc, #344]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	495f      	ldr	r1, [pc, #380]	; (8003b24 <DMA2_Stream1_IRQHandler+0x428>)
 80039a6:	428b      	cmp	r3, r1
 80039a8:	d01d      	beq.n	80039e6 <DMA2_Stream1_IRQHandler+0x2ea>
 80039aa:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	495d      	ldr	r1, [pc, #372]	; (8003b28 <DMA2_Stream1_IRQHandler+0x42c>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d014      	beq.n	80039e0 <DMA2_Stream1_IRQHandler+0x2e4>
 80039b6:	4b50      	ldr	r3, [pc, #320]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	495b      	ldr	r1, [pc, #364]	; (8003b2c <DMA2_Stream1_IRQHandler+0x430>)
 80039be:	428b      	cmp	r3, r1
 80039c0:	d00b      	beq.n	80039da <DMA2_Stream1_IRQHandler+0x2de>
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4959      	ldr	r1, [pc, #356]	; (8003b30 <DMA2_Stream1_IRQHandler+0x434>)
 80039ca:	428b      	cmp	r3, r1
 80039cc:	d102      	bne.n	80039d4 <DMA2_Stream1_IRQHandler+0x2d8>
 80039ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039d2:	e01e      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039d8:	e01b      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039de:	e018      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039e4:	e015      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039e6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039ea:	e012      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f0:	e00f      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f6:	e00c      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fc:	e009      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 80039fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a02:	e006      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 8003a04:	2308      	movs	r3, #8
 8003a06:	e004      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	e002      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	e000      	b.n	8003a12 <DMA2_Stream1_IRQHandler+0x316>
 8003a10:	2308      	movs	r3, #8
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e090      	b.n	8003b42 <DMA2_Stream1_IRQHandler+0x446>
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <DMA2_Stream1_IRQHandler+0x404>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4936      	ldr	r1, [pc, #216]	; (8003b04 <DMA2_Stream1_IRQHandler+0x408>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	f000 8081 	beq.w	8003b34 <DMA2_Stream1_IRQHandler+0x438>
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4933      	ldr	r1, [pc, #204]	; (8003b08 <DMA2_Stream1_IRQHandler+0x40c>)
 8003a3a:	428b      	cmp	r3, r1
 8003a3c:	d05a      	beq.n	8003af4 <DMA2_Stream1_IRQHandler+0x3f8>
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4931      	ldr	r1, [pc, #196]	; (8003b0c <DMA2_Stream1_IRQHandler+0x410>)
 8003a46:	428b      	cmp	r3, r1
 8003a48:	d052      	beq.n	8003af0 <DMA2_Stream1_IRQHandler+0x3f4>
 8003a4a:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	492f      	ldr	r1, [pc, #188]	; (8003b10 <DMA2_Stream1_IRQHandler+0x414>)
 8003a52:	428b      	cmp	r3, r1
 8003a54:	d04a      	beq.n	8003aec <DMA2_Stream1_IRQHandler+0x3f0>
 8003a56:	4b28      	ldr	r3, [pc, #160]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	492d      	ldr	r1, [pc, #180]	; (8003b14 <DMA2_Stream1_IRQHandler+0x418>)
 8003a5e:	428b      	cmp	r3, r1
 8003a60:	d041      	beq.n	8003ae6 <DMA2_Stream1_IRQHandler+0x3ea>
 8003a62:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	492b      	ldr	r1, [pc, #172]	; (8003b18 <DMA2_Stream1_IRQHandler+0x41c>)
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	d038      	beq.n	8003ae0 <DMA2_Stream1_IRQHandler+0x3e4>
 8003a6e:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4929      	ldr	r1, [pc, #164]	; (8003b1c <DMA2_Stream1_IRQHandler+0x420>)
 8003a76:	428b      	cmp	r3, r1
 8003a78:	d02f      	beq.n	8003ada <DMA2_Stream1_IRQHandler+0x3de>
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4927      	ldr	r1, [pc, #156]	; (8003b20 <DMA2_Stream1_IRQHandler+0x424>)
 8003a82:	428b      	cmp	r3, r1
 8003a84:	d026      	beq.n	8003ad4 <DMA2_Stream1_IRQHandler+0x3d8>
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4925      	ldr	r1, [pc, #148]	; (8003b24 <DMA2_Stream1_IRQHandler+0x428>)
 8003a8e:	428b      	cmp	r3, r1
 8003a90:	d01d      	beq.n	8003ace <DMA2_Stream1_IRQHandler+0x3d2>
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4923      	ldr	r1, [pc, #140]	; (8003b28 <DMA2_Stream1_IRQHandler+0x42c>)
 8003a9a:	428b      	cmp	r3, r1
 8003a9c:	d014      	beq.n	8003ac8 <DMA2_Stream1_IRQHandler+0x3cc>
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4921      	ldr	r1, [pc, #132]	; (8003b2c <DMA2_Stream1_IRQHandler+0x430>)
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d00b      	beq.n	8003ac2 <DMA2_Stream1_IRQHandler+0x3c6>
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	491f      	ldr	r1, [pc, #124]	; (8003b30 <DMA2_Stream1_IRQHandler+0x434>)
 8003ab2:	428b      	cmp	r3, r1
 8003ab4:	d102      	bne.n	8003abc <DMA2_Stream1_IRQHandler+0x3c0>
 8003ab6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003aba:	e03c      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac0:	e039      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ac2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ac6:	e036      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ac8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003acc:	e033      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ace:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ad2:	e030      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad8:	e02d      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ade:	e02a      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae4:	e027      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aea:	e024      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003aec:	2308      	movs	r3, #8
 8003aee:	e022      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003af0:	2308      	movs	r3, #8
 8003af2:	e020      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003af4:	2308      	movs	r3, #8
 8003af6:	e01e      	b.n	8003b36 <DMA2_Stream1_IRQHandler+0x43a>
 8003af8:	200002c0 	.word	0x200002c0
 8003afc:	40026058 	.word	0x40026058
 8003b00:	40026000 	.word	0x40026000
 8003b04:	40026010 	.word	0x40026010
 8003b08:	40026410 	.word	0x40026410
 8003b0c:	40026070 	.word	0x40026070
 8003b10:	40026470 	.word	0x40026470
 8003b14:	40026028 	.word	0x40026028
 8003b18:	40026428 	.word	0x40026428
 8003b1c:	40026088 	.word	0x40026088
 8003b20:	40026488 	.word	0x40026488
 8003b24:	40026040 	.word	0x40026040
 8003b28:	40026440 	.word	0x40026440
 8003b2c:	400260a0 	.word	0x400260a0
 8003b30:	400264a0 	.word	0x400264a0
 8003b34:	2308      	movs	r3, #8
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <DMA2_Stream1_IRQHandler+0x450>
  {
    UART_Emul_DMAError(&hdma_tx);
 8003b46:	4876      	ldr	r0, [pc, #472]	; (8003d20 <DMA2_Stream1_IRQHandler+0x624>)
 8003b48:	f000 fe82 	bl	8004850 <UART_Emul_DMAError>
  }

  /* Clear the transfer complete flag */
  __HAL_DMA_CLEAR_FLAG(TimHandle.hdma[TIM_DMA_ID_CC1], __HAL_DMA_GET_TC_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC1]));
 8003b4c:	4b75      	ldr	r3, [pc, #468]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <DMA2_Stream1_IRQHandler+0x62c>)
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d96c      	bls.n	8003c34 <DMA2_Stream1_IRQHandler+0x538>
 8003b5a:	4b72      	ldr	r3, [pc, #456]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a72      	ldr	r2, [pc, #456]	; (8003d2c <DMA2_Stream1_IRQHandler+0x630>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d062      	beq.n	8003c2c <DMA2_Stream1_IRQHandler+0x530>
 8003b66:	4b6f      	ldr	r3, [pc, #444]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a70      	ldr	r2, [pc, #448]	; (8003d30 <DMA2_Stream1_IRQHandler+0x634>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d05a      	beq.n	8003c28 <DMA2_Stream1_IRQHandler+0x52c>
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a6e      	ldr	r2, [pc, #440]	; (8003d34 <DMA2_Stream1_IRQHandler+0x638>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d052      	beq.n	8003c24 <DMA2_Stream1_IRQHandler+0x528>
 8003b7e:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6c      	ldr	r2, [pc, #432]	; (8003d38 <DMA2_Stream1_IRQHandler+0x63c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d04a      	beq.n	8003c20 <DMA2_Stream1_IRQHandler+0x524>
 8003b8a:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6a      	ldr	r2, [pc, #424]	; (8003d3c <DMA2_Stream1_IRQHandler+0x640>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d041      	beq.n	8003c1a <DMA2_Stream1_IRQHandler+0x51e>
 8003b96:	4b63      	ldr	r3, [pc, #396]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a68      	ldr	r2, [pc, #416]	; (8003d40 <DMA2_Stream1_IRQHandler+0x644>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d038      	beq.n	8003c14 <DMA2_Stream1_IRQHandler+0x518>
 8003ba2:	4b60      	ldr	r3, [pc, #384]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a66      	ldr	r2, [pc, #408]	; (8003d44 <DMA2_Stream1_IRQHandler+0x648>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02f      	beq.n	8003c0e <DMA2_Stream1_IRQHandler+0x512>
 8003bae:	4b5d      	ldr	r3, [pc, #372]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a64      	ldr	r2, [pc, #400]	; (8003d48 <DMA2_Stream1_IRQHandler+0x64c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d026      	beq.n	8003c08 <DMA2_Stream1_IRQHandler+0x50c>
 8003bba:	4b5a      	ldr	r3, [pc, #360]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a62      	ldr	r2, [pc, #392]	; (8003d4c <DMA2_Stream1_IRQHandler+0x650>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <DMA2_Stream1_IRQHandler+0x506>
 8003bc6:	4b57      	ldr	r3, [pc, #348]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a60      	ldr	r2, [pc, #384]	; (8003d50 <DMA2_Stream1_IRQHandler+0x654>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d014      	beq.n	8003bfc <DMA2_Stream1_IRQHandler+0x500>
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a5e      	ldr	r2, [pc, #376]	; (8003d54 <DMA2_Stream1_IRQHandler+0x658>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <DMA2_Stream1_IRQHandler+0x4fa>
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5c      	ldr	r2, [pc, #368]	; (8003d58 <DMA2_Stream1_IRQHandler+0x65c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d102      	bne.n	8003bf0 <DMA2_Stream1_IRQHandler+0x4f4>
 8003bea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bee:	e01e      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bf4:	e01b      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003bf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bfa:	e018      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003bfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c00:	e015      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c06:	e012      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c0c:	e00f      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c12:	e00c      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c18:	e009      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c1e:	e006      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c20:	2320      	movs	r3, #32
 8003c22:	e004      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c24:	2320      	movs	r3, #32
 8003c26:	e002      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c28:	2320      	movs	r3, #32
 8003c2a:	e000      	b.n	8003c2e <DMA2_Stream1_IRQHandler+0x532>
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <DMA2_Stream1_IRQHandler+0x660>)
 8003c30:	60d3      	str	r3, [r2, #12]
 8003c32:	e177      	b.n	8003f24 <DMA2_Stream1_IRQHandler+0x828>
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b48      	ldr	r3, [pc, #288]	; (8003d60 <DMA2_Stream1_IRQHandler+0x664>)
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	f240 8090 	bls.w	8003d64 <DMA2_Stream1_IRQHandler+0x668>
 8003c44:	4b37      	ldr	r3, [pc, #220]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <DMA2_Stream1_IRQHandler+0x630>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d062      	beq.n	8003d16 <DMA2_Stream1_IRQHandler+0x61a>
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a36      	ldr	r2, [pc, #216]	; (8003d30 <DMA2_Stream1_IRQHandler+0x634>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d05a      	beq.n	8003d12 <DMA2_Stream1_IRQHandler+0x616>
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a34      	ldr	r2, [pc, #208]	; (8003d34 <DMA2_Stream1_IRQHandler+0x638>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d052      	beq.n	8003d0e <DMA2_Stream1_IRQHandler+0x612>
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a32      	ldr	r2, [pc, #200]	; (8003d38 <DMA2_Stream1_IRQHandler+0x63c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04a      	beq.n	8003d0a <DMA2_Stream1_IRQHandler+0x60e>
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a30      	ldr	r2, [pc, #192]	; (8003d3c <DMA2_Stream1_IRQHandler+0x640>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d041      	beq.n	8003d04 <DMA2_Stream1_IRQHandler+0x608>
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2e      	ldr	r2, [pc, #184]	; (8003d40 <DMA2_Stream1_IRQHandler+0x644>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d038      	beq.n	8003cfe <DMA2_Stream1_IRQHandler+0x602>
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <DMA2_Stream1_IRQHandler+0x648>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d02f      	beq.n	8003cf8 <DMA2_Stream1_IRQHandler+0x5fc>
 8003c98:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <DMA2_Stream1_IRQHandler+0x64c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d026      	beq.n	8003cf2 <DMA2_Stream1_IRQHandler+0x5f6>
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <DMA2_Stream1_IRQHandler+0x650>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <DMA2_Stream1_IRQHandler+0x5f0>
 8003cb0:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <DMA2_Stream1_IRQHandler+0x654>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d014      	beq.n	8003ce6 <DMA2_Stream1_IRQHandler+0x5ea>
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <DMA2_Stream1_IRQHandler+0x658>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <DMA2_Stream1_IRQHandler+0x5e4>
 8003cc8:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <DMA2_Stream1_IRQHandler+0x628>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <DMA2_Stream1_IRQHandler+0x65c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d102      	bne.n	8003cda <DMA2_Stream1_IRQHandler+0x5de>
 8003cd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cd8:	e01e      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003cda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cde:	e01b      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003ce0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ce4:	e018      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003ce6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cea:	e015      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003cec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cf0:	e012      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cf6:	e00f      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003cf8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cfc:	e00c      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d02:	e009      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d08:	e006      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	e004      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003d0e:	2320      	movs	r3, #32
 8003d10:	e002      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003d12:	2320      	movs	r3, #32
 8003d14:	e000      	b.n	8003d18 <DMA2_Stream1_IRQHandler+0x61c>
 8003d16:	2320      	movs	r3, #32
 8003d18:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <DMA2_Stream1_IRQHandler+0x660>)
 8003d1a:	6093      	str	r3, [r2, #8]
 8003d1c:	e102      	b.n	8003f24 <DMA2_Stream1_IRQHandler+0x828>
 8003d1e:	bf00      	nop
 8003d20:	20000200 	.word	0x20000200
 8003d24:	200002c0 	.word	0x200002c0
 8003d28:	40026458 	.word	0x40026458
 8003d2c:	40026010 	.word	0x40026010
 8003d30:	40026410 	.word	0x40026410
 8003d34:	40026070 	.word	0x40026070
 8003d38:	40026470 	.word	0x40026470
 8003d3c:	40026028 	.word	0x40026028
 8003d40:	40026428 	.word	0x40026428
 8003d44:	40026088 	.word	0x40026088
 8003d48:	40026488 	.word	0x40026488
 8003d4c:	40026040 	.word	0x40026040
 8003d50:	40026440 	.word	0x40026440
 8003d54:	400260a0 	.word	0x400260a0
 8003d58:	400264a0 	.word	0x400264a0
 8003d5c:	40026400 	.word	0x40026400
 8003d60:	400260b8 	.word	0x400260b8
 8003d64:	4b74      	ldr	r3, [pc, #464]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	4b73      	ldr	r3, [pc, #460]	; (8003f3c <DMA2_Stream1_IRQHandler+0x840>)
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d96c      	bls.n	8003e4c <DMA2_Stream1_IRQHandler+0x750>
 8003d72:	4b71      	ldr	r3, [pc, #452]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a71      	ldr	r2, [pc, #452]	; (8003f40 <DMA2_Stream1_IRQHandler+0x844>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d062      	beq.n	8003e44 <DMA2_Stream1_IRQHandler+0x748>
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a6f      	ldr	r2, [pc, #444]	; (8003f44 <DMA2_Stream1_IRQHandler+0x848>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d05a      	beq.n	8003e40 <DMA2_Stream1_IRQHandler+0x744>
 8003d8a:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6d      	ldr	r2, [pc, #436]	; (8003f48 <DMA2_Stream1_IRQHandler+0x84c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d052      	beq.n	8003e3c <DMA2_Stream1_IRQHandler+0x740>
 8003d96:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	; (8003f4c <DMA2_Stream1_IRQHandler+0x850>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d04a      	beq.n	8003e38 <DMA2_Stream1_IRQHandler+0x73c>
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a69      	ldr	r2, [pc, #420]	; (8003f50 <DMA2_Stream1_IRQHandler+0x854>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d041      	beq.n	8003e32 <DMA2_Stream1_IRQHandler+0x736>
 8003dae:	4b62      	ldr	r3, [pc, #392]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <DMA2_Stream1_IRQHandler+0x858>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d038      	beq.n	8003e2c <DMA2_Stream1_IRQHandler+0x730>
 8003dba:	4b5f      	ldr	r3, [pc, #380]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	; (8003f58 <DMA2_Stream1_IRQHandler+0x85c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02f      	beq.n	8003e26 <DMA2_Stream1_IRQHandler+0x72a>
 8003dc6:	4b5c      	ldr	r3, [pc, #368]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a63      	ldr	r2, [pc, #396]	; (8003f5c <DMA2_Stream1_IRQHandler+0x860>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d026      	beq.n	8003e20 <DMA2_Stream1_IRQHandler+0x724>
 8003dd2:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a61      	ldr	r2, [pc, #388]	; (8003f60 <DMA2_Stream1_IRQHandler+0x864>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <DMA2_Stream1_IRQHandler+0x71e>
 8003dde:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5f      	ldr	r2, [pc, #380]	; (8003f64 <DMA2_Stream1_IRQHandler+0x868>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d014      	beq.n	8003e14 <DMA2_Stream1_IRQHandler+0x718>
 8003dea:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <DMA2_Stream1_IRQHandler+0x86c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <DMA2_Stream1_IRQHandler+0x712>
 8003df6:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a5b      	ldr	r2, [pc, #364]	; (8003f6c <DMA2_Stream1_IRQHandler+0x870>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d102      	bne.n	8003e08 <DMA2_Stream1_IRQHandler+0x70c>
 8003e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e06:	e01e      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e0c:	e01b      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e12:	e018      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e18:	e015      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e1e:	e012      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e24:	e00f      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e2a:	e00c      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e30:	e009      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e36:	e006      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e38:	2320      	movs	r3, #32
 8003e3a:	e004      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	e002      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e40:	2320      	movs	r3, #32
 8003e42:	e000      	b.n	8003e46 <DMA2_Stream1_IRQHandler+0x74a>
 8003e44:	2320      	movs	r3, #32
 8003e46:	4a4a      	ldr	r2, [pc, #296]	; (8003f70 <DMA2_Stream1_IRQHandler+0x874>)
 8003e48:	60d3      	str	r3, [r2, #12]
 8003e4a:	e06b      	b.n	8003f24 <DMA2_Stream1_IRQHandler+0x828>
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <DMA2_Stream1_IRQHandler+0x844>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d062      	beq.n	8003f1e <DMA2_Stream1_IRQHandler+0x822>
 8003e58:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <DMA2_Stream1_IRQHandler+0x848>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d05a      	beq.n	8003f1a <DMA2_Stream1_IRQHandler+0x81e>
 8003e64:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <DMA2_Stream1_IRQHandler+0x84c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d052      	beq.n	8003f16 <DMA2_Stream1_IRQHandler+0x81a>
 8003e70:	4b31      	ldr	r3, [pc, #196]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <DMA2_Stream1_IRQHandler+0x850>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d04a      	beq.n	8003f12 <DMA2_Stream1_IRQHandler+0x816>
 8003e7c:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a33      	ldr	r2, [pc, #204]	; (8003f50 <DMA2_Stream1_IRQHandler+0x854>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d041      	beq.n	8003f0c <DMA2_Stream1_IRQHandler+0x810>
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <DMA2_Stream1_IRQHandler+0x858>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d038      	beq.n	8003f06 <DMA2_Stream1_IRQHandler+0x80a>
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <DMA2_Stream1_IRQHandler+0x85c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d02f      	beq.n	8003f00 <DMA2_Stream1_IRQHandler+0x804>
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <DMA2_Stream1_IRQHandler+0x860>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d026      	beq.n	8003efa <DMA2_Stream1_IRQHandler+0x7fe>
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <DMA2_Stream1_IRQHandler+0x864>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <DMA2_Stream1_IRQHandler+0x7f8>
 8003eb8:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <DMA2_Stream1_IRQHandler+0x868>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d014      	beq.n	8003eee <DMA2_Stream1_IRQHandler+0x7f2>
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <DMA2_Stream1_IRQHandler+0x86c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <DMA2_Stream1_IRQHandler+0x7ec>
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <DMA2_Stream1_IRQHandler+0x870>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d102      	bne.n	8003ee2 <DMA2_Stream1_IRQHandler+0x7e6>
 8003edc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ee0:	e01e      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003ee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ee6:	e01b      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003eec:	e018      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003eee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ef2:	e015      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003ef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ef8:	e012      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003efe:	e00f      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f04:	e00c      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f0a:	e009      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f10:	e006      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f12:	2320      	movs	r3, #32
 8003f14:	e004      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f16:	2320      	movs	r3, #32
 8003f18:	e002      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	e000      	b.n	8003f20 <DMA2_Stream1_IRQHandler+0x824>
 8003f1e:	2320      	movs	r3, #32
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <DMA2_Stream1_IRQHandler+0x874>)
 8003f22:	6093      	str	r3, [r2, #8]
   
  /* Transfer complete callback */
  TimHandle.hdma[TIM_DMA_ID_CC1]->XferCpltCallback(TimHandle.hdma[TIM_DMA_ID_CC1]);
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <DMA2_Stream1_IRQHandler+0x83c>)
 8003f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4798      	blx	r3
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	200002c0 	.word	0x200002c0
 8003f3c:	40026058 	.word	0x40026058
 8003f40:	40026010 	.word	0x40026010
 8003f44:	40026410 	.word	0x40026410
 8003f48:	40026070 	.word	0x40026070
 8003f4c:	40026470 	.word	0x40026470
 8003f50:	40026028 	.word	0x40026028
 8003f54:	40026428 	.word	0x40026428
 8003f58:	40026088 	.word	0x40026088
 8003f5c:	40026488 	.word	0x40026488
 8003f60:	40026040 	.word	0x40026040
 8003f64:	40026440 	.word	0x40026440
 8003f68:	400260a0 	.word	0x400260a0
 8003f6c:	400264a0 	.word	0x400264a0
 8003f70:	40026000 	.word	0x40026000

08003f74 <UART_Emul_DMAReceiveCplt>:
  * @brief  This function is executed in case of Receive Complete for last frame.
  * @param  None
  * @retval None
  */
static void UART_Emul_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f74:	b5b0      	push	{r4, r5, r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpformat = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpdata = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
//	Log_Info((uint8_t*)"x",1);
  if (huart_emul->RxXferCount > huart_emul->RxXferSize)
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	8c1b      	ldrh	r3, [r3, #32]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d958      	bls.n	8004046 <UART_Emul_DMAReceiveCplt+0xd2>
  {
    /*Disable EXTI line Rx  */
//    EXTI->IMR &= ~huart_emul->Init.RxPinNumber;
    /* Disable the Peripheral */
    __HAL_DMA_DISABLE(&hdma_rx);
 8003f94:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <UART_Emul_DMAReceiveCplt+0xe0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <UART_Emul_DMAReceiveCplt+0xe0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(&TimHandle, TIM_DMA_CC2);
 8003fa4:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <UART_Emul_DMAReceiveCplt+0xe4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <UART_Emul_DMAReceiveCplt+0xe4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb2:	60da      	str	r2, [r3, #12]
    if ((huart_emul->RxXferCount % 2) == 0)
 8003fb4:	4b26      	ldr	r3, [pc, #152]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <UART_Emul_DMAReceiveCplt+0x56>
    {
      tmpformat = (uint32_t)pFirstBuffer_Rx;
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <UART_Emul_DMAReceiveCplt+0xe8>)
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e001      	b.n	8003fce <UART_Emul_DMAReceiveCplt+0x5a>
    }
    else
    {
      tmpformat = (uint32_t)pSecondBuffer_Rx;
 8003fca:	4b25      	ldr	r3, [pc, #148]	; (8004060 <UART_Emul_DMAReceiveCplt+0xec>)
 8003fcc:	60fb      	str	r3, [r7, #12]
    }
 
    /* Formatted Last Frame */
    *(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	b2dd      	uxtb	r5, r3
 8003fd8:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003fe4:	3b02      	subs	r3, #2
 8003fe6:	18d4      	adds	r4, r2, r3
 8003fe8:	462a      	mov	r2, r5
 8003fea:	f000 f9bf 	bl	800436c <UART_Emul_ReceiveFormatFrame>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	7023      	strb	r3, [r4, #0]

    /* Set RC falg receiver complete */
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_RC);
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* De_Initialize counter frame for Rx */
    huart_emul->RxXferCount = 0;
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Initialize the UART Emulation  state */
    huart_emul->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a transmit process is ongoing or not */
    if (huart_emul->State == HAL_UART_EMUL_STATE_BUSY_TX_RX)
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b10      	cmp	r3, #16
 8004024:	d105      	bne.n	8004032 <UART_Emul_DMAReceiveCplt+0xbe>
    {
      huart_emul->State = HAL_UART_EMUL_STATE_BUSY_TX;
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2204      	movs	r2, #4
 800402c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004030:	e004      	b.n	800403c <UART_Emul_DMAReceiveCplt+0xc8>
    }
    else
    {
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
 8004032:	4b07      	ldr	r3, [pc, #28]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Handle for UART Emulation Receive Complete */
//		Log_Info((uint8_t*)"y",1);
    HAL_UART_Emul_RxCpltCallback(huart_emul);
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <UART_Emul_DMAReceiveCplt+0xdc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fc25 	bl	8002890 <HAL_UART_Emul_RxCpltCallback>
//		Log_Info((uint8_t*)"z",1);
  }
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bdb0      	pop	{r4, r5, r7, pc}
 800404e:	bf00      	nop
 8004050:	20000300 	.word	0x20000300
 8004054:	20000260 	.word	0x20000260
 8004058:	200002c0 	.word	0x200002c0
 800405c:	20000304 	.word	0x20000304
 8004060:	20000334 	.word	0x20000334

08004064 <UART_Emul_ReceiveFrame>:
 * @param  huart: UART Emulation handle
 * @param  pData: Frame to be Received
 * @retval None
*/
static void UART_Emul_ReceiveFrame(UART_Emul_HandleTypeDef *huart, uint32_t *pData)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_sr =0;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ds =0;
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
  uint32_t tmp_size =0;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_arr =0;
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]

	tmp_arr = TIM1->ARR;
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <UART_Emul_ReceiveFrame+0xe8>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	60bb      	str	r3, [r7, #8]
  tmp_ds = (uint32_t)pData;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	613b      	str	r3, [r7, #16]
  tmp_sr = (uint32_t) & (huart->RxPortName->IDR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	3310      	adds	r3, #16
 800408e:	617b      	str	r3, [r7, #20]
  tmp_size =  __HAL_UART_EMUL_FRAME_LENGTH(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7b1b      	ldrb	r3, [r3, #12]
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7b5b      	ldrb	r3, [r3, #13]
 800409a:	b29b      	uxth	r3, r3
 800409c:	4413      	add	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_rx, DMA_IT_TC);
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b28      	ldr	r3, [pc, #160]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0210 	orr.w	r2, r2, #16
 80040b4:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_rx, DMA_IT_TE);
 80040b6:	4b26      	ldr	r3, [pc, #152]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b24      	ldr	r3, [pc, #144]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0204 	orr.w	r2, r2, #4
 80040c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma_rx.Instance->NDTR = tmp_size;
 80040c6:	4b22      	ldr	r3, [pc, #136]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Stream source address */
  hdma_rx.Instance->PAR = tmp_sr;
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	609a      	str	r2, [r3, #8]

  /* Configure DMA Stream destination address */
  hdma_rx.Instance->M0AR = tmp_ds;
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(&hdma_rx);
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <UART_Emul_ReceiveFrame+0xec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

  if ((huart_emul->RxXferCount == 1)||(huart->State != HAL_UART_EMUL_STATE_BUSY_TX_RX))
 80040ee:	4b19      	ldr	r3, [pc, #100]	; (8004154 <UART_Emul_ReceiveFrame+0xf0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d005      	beq.n	8004104 <UART_Emul_ReceiveFrame+0xa0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b10      	cmp	r3, #16
 8004102:	d00d      	beq.n	8004120 <UART_Emul_ReceiveFrame+0xbc>
  {
    TIM1->CCR2 = ((TIM1->CNT + (tmp_arr / 2)) % tmp_arr);
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <UART_Emul_ReceiveFrame+0xe8>)
 8004106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	4413      	add	r3, r2
 800410e:	480f      	ldr	r0, [pc, #60]	; (800414c <UART_Emul_ReceiveFrame+0xe8>)
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	fbb3 f2f2 	udiv	r2, r3, r2
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	fb01 f202 	mul.w	r2, r1, r2
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(&TimHandle, TIM_DMA_CC2);
 8004120:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <UART_Emul_ReceiveFrame+0xf4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <UART_Emul_ReceiveFrame+0xf4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412e:	60da      	str	r2, [r3, #12]

  /* Enable Timer */
  __HAL_TIM_ENABLE(&TimHandle);
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <UART_Emul_ReceiveFrame+0xf4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <UART_Emul_ReceiveFrame+0xf4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40010000 	.word	0x40010000
 8004150:	20000260 	.word	0x20000260
 8004154:	20000300 	.word	0x20000300
 8004158:	200002c0 	.word	0x200002c0

0800415c <UART_Emul_SetConfig>:
             + DMA2 Configuration channel, Stream, Mode,...
  * @param  huart: UART Emulation handle
  * @retval None
  */
static void UART_Emul_SetConfig (UART_Emul_HandleTypeDef *huart)
{
 800415c:	b5b0      	push	{r4, r5, r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t bit_time = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_EMUL_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_EMUL_MODE(huart->Init.Mode));
  assert_param(IS_UART_EMUL_MODE(huart->Init.Parity));

  /* Init Bit Time */
if((HAL_RCC_GetSysClockFreq()/HAL_RCC_GetPCLK2Freq()== 1) | (HAL_RCC_GetSysClockFreq()/HAL_RCC_GetPCLK2Freq()== 2))
 8004168:	f003 fa74 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 800416c:	4604      	mov	r4, r0
 800416e:	f003 fb43 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 8004172:	4603      	mov	r3, r0
 8004174:	fbb4 f3f3 	udiv	r3, r4, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2dc      	uxtb	r4, r3
 8004182:	f003 fa67 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 8004186:	4605      	mov	r5, r0
 8004188:	f003 fb36 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800418c:	4603      	mov	r3, r0
 800418e:	fbb5 f3f3 	udiv	r3, r5, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4323      	orrs	r3, r4
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <UART_Emul_SetConfig+0x5c>
{
  bit_time = ((uint32_t) ((HAL_RCC_GetSysClockFreq()/huart->Init.BaudRate) - 1));	
 80041a4:	f003 fa56 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e009      	b.n	80041cc <UART_Emul_SetConfig+0x70>
}
else
{
  bit_time = ((uint32_t) (((HAL_RCC_GetPCLK2Freq()*2)/huart->Init.BaudRate) - 1));
 80041b8:	f003 fb1e 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 80041bc:	4603      	mov	r3, r0
 80041be:	005a      	lsls	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
  + Period = TimerPeriod 
  + Prescaler = 0
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Instance            = TIM1;
 80041cc:	4b13      	ldr	r3, [pc, #76]	; (800421c <UART_Emul_SetConfig+0xc0>)
 80041ce:	4a14      	ldr	r2, [pc, #80]	; (8004220 <UART_Emul_SetConfig+0xc4>)
 80041d0:	601a      	str	r2, [r3, #0]
  TimHandle.Init.Period         = bit_time;
 80041d2:	4a12      	ldr	r2, [pc, #72]	; (800421c <UART_Emul_SetConfig+0xc0>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	60d3      	str	r3, [r2, #12]
  TimHandle.Init.Prescaler      = 0;
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <UART_Emul_SetConfig+0xc0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision  = 0;
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <UART_Emul_SetConfig+0xc0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode    = TIM_COUNTERMODE_UP;
 80041e4:	4b0d      	ldr	r3, [pc, #52]	; (800421c <UART_Emul_SetConfig+0xc0>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Init(&TimHandle);
 80041ea:	480c      	ldr	r0, [pc, #48]	; (800421c <UART_Emul_SetConfig+0xc0>)
 80041ec:	f004 f86c 	bl	80082c8 <HAL_TIM_Base_Init>

  if (huart->Init.Mode == UART_EMUL_MODE_TX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	791b      	ldrb	r3, [r3, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d102      	bne.n	80041fe <UART_Emul_SetConfig+0xa2>
  {
    /* Configure UART Emulation in Transmission mode */
    UART_Emul_SetConfig_DMATx();
 80041f8:	f000 f814 	bl	8004224 <UART_Emul_SetConfig_DMATx>
  {
    /* Configure UART Emulation in full-duplex mode */
    UART_Emul_SetConfig_DMATx();
    UART_Emul_SetConfig_DMARx();
  }
}
 80041fc:	e00a      	b.n	8004214 <UART_Emul_SetConfig+0xb8>
  else if (huart->Init.Mode == UART_EMUL_MODE_RX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	791b      	ldrb	r3, [r3, #4]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <UART_Emul_SetConfig+0xb0>
    UART_Emul_SetConfig_DMARx();
 8004206:	f000 f867 	bl	80042d8 <UART_Emul_SetConfig_DMARx>
}
 800420a:	e003      	b.n	8004214 <UART_Emul_SetConfig+0xb8>
    UART_Emul_SetConfig_DMATx();
 800420c:	f000 f80a 	bl	8004224 <UART_Emul_SetConfig_DMATx>
    UART_Emul_SetConfig_DMARx();
 8004210:	f000 f862 	bl	80042d8 <UART_Emul_SetConfig_DMARx>
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bdb0      	pop	{r4, r5, r7, pc}
 800421c:	200002c0 	.word	0x200002c0
 8004220:	40010000 	.word	0x40010000

08004224 <UART_Emul_SetConfig_DMATx>:
             + DMA2 Configuration channel, Stream, Mode, ...
  * @param  None
  * @retval None
  */
static void UART_Emul_SetConfig_DMATx(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Init Idle */
  HAL_GPIO_WritePin((huart_emul->TxPortName), (huart_emul->Init.TxPinNumber), GPIO_PIN_SET);
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <UART_Emul_SetConfig_DMATx+0xa4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <UART_Emul_SetConfig_DMATx+0xa4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	8a5b      	ldrh	r3, [r3, #18]
 8004234:	2201      	movs	r2, #1
 8004236:	4619      	mov	r1, r3
 8004238:	f001 fece 	bl	8005fd8 <HAL_GPIO_WritePin>

  /*##-1- Configure  DMA For UART Emulation TX #############################*/
  /* Set the parameters to be configured */
  hdma_tx.Init.Channel             = DMA_CHANNEL_6;                /* DMA_CHANNEL_6                        */
 800423c:	4b23      	ldr	r3, [pc, #140]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800423e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004242:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;         /* Transfer mode                        */
 8004244:	4b21      	ldr	r3, [pc, #132]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004246:	2240      	movs	r2, #64	; 0x40
 8004248:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;             /* Peripheral increment mode Disable    */
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800424c:	2200      	movs	r2, #0
 800424e:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;              /* Memory increment mode Enable         */
 8004250:	4b1e      	ldr	r3, [pc, #120]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004256:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;         /* Peripheral data alignment : Word     */
 8004258:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800425a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800425e:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD ;         /* memory data alignment :  Word        */
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004266:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;                   /* Normal DMA mode                      */
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;       /* priority level : very high           */
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004270:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004274:	621a      	str	r2, [r3, #32]
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         /* FIFO mode disabled                   */
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;      /* FIFO threshold full configuration    */
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800427e:	2203      	movs	r2, #3
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tx.Init.MemBurst            = DMA_MBURST_SINGLE;            /* Memory burst                         */
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004284:	2200      	movs	r2, #0
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;            /* Peripheral burst                     */
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set hdma_tim instance */
  hdma_tx.Instance = DMA2_Stream1;
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004290:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <UART_Emul_SetConfig_DMATx+0xac>)
 8004292:	601a      	str	r2, [r3, #0]
  hdma_tx.Parent = TimHandle.hdma[1];
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <UART_Emul_SetConfig_DMATx+0xb0>)
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	4a0c      	ldr	r2, [pc, #48]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 800429a:	6393      	str	r3, [r2, #56]	; 0x38
  /* Link hdma_tim to hdma[ ] ( channel Tx or Rx) */
  __HAL_LINKDMA(&TimHandle, hdma[1] , hdma_tx);
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <UART_Emul_SetConfig_DMATx+0xb0>)
 800429e:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042a4:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <UART_Emul_SetConfig_DMATx+0xb0>)
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(TimHandle.hdma[1]);
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <UART_Emul_SetConfig_DMATx+0xb0>)
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 faaf 	bl	8005810 <HAL_DMA_Init>

  /*##-2- NVIC configuration for DMA transfer complete interrupt ###########*/
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 3, 3);
 80042b2:	2203      	movs	r2, #3
 80042b4:	2103      	movs	r1, #3
 80042b6:	2039      	movs	r0, #57	; 0x39
 80042b8:	f001 fa73 	bl	80057a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80042bc:	2039      	movs	r0, #57	; 0x39
 80042be:	f001 fa8c 	bl	80057da <HAL_NVIC_EnableIRQ>
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000300 	.word	0x20000300
 80042cc:	20000200 	.word	0x20000200
 80042d0:	40026428 	.word	0x40026428
 80042d4:	200002c0 	.word	0x200002c0

080042d8 <UART_Emul_SetConfig_DMARx>:
             + DMA2 Configuration channel, Stream, Mode, ...
  * @param  None
  * @retval None
  */
static void UART_Emul_SetConfig_DMARx(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /*##-1- Configure  DMA For UART Emulation RX #############################*/
  /* Set the parameters to be configured */
  hdma_rx.Init.Channel             = DMA_CHANNEL_6;                /* DMA_CHANNEL_6                        */
 80042dc:	4b20      	ldr	r3, [pc, #128]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 80042de:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80042e2:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;         /* Transfer mode                        */
 80042e4:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;             /* Peripheral increment mode Disable    */
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;              /* Memory increment mode Enable         */
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 80042f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f6:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;          /* Peripheral data alignment :Word      */
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 80042fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042fe:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;          /* memory data alignment : Word         */
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 8004302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004306:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_NORMAL;                   /* Normal DMA mode                      */
 8004308:	4b15      	ldr	r3, [pc, #84]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 800430a:	2200      	movs	r2, #0
 800430c:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;       /* priority level : very high           */
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 8004310:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004314:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         /* FIFO mode disabled                   */
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 8004318:	2200      	movs	r2, #0
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;      /* FIFO threshold full configuration    */
 800431c:	4b10      	ldr	r3, [pc, #64]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 800431e:	2203      	movs	r2, #3
 8004320:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_SINGLE;            /* Memory burst                         */
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 8004324:	2200      	movs	r2, #0
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_SINGLE;            /* Peripheral burst                      */
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set hdma_tim instance */
  hdma_rx.Instance = DMA2_Stream2;
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 8004330:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <UART_Emul_SetConfig_DMARx+0x8c>)
 8004332:	601a      	str	r2, [r3, #0]

  /* Link hdma_tim to hdma[ ] ( channel Tx or Rx) */
  __HAL_LINKDMA(&TimHandle, hdma[2], hdma_rx);
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <UART_Emul_SetConfig_DMARx+0x90>)
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <UART_Emul_SetConfig_DMARx+0x88>)
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <UART_Emul_SetConfig_DMARx+0x90>)
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(TimHandle.hdma[2]);
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <UART_Emul_SetConfig_DMARx+0x90>)
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fa63 	bl	8005810 <HAL_DMA_Init>

  /*##-2- NVIC configuration for DMA transfer complete interrupt ###########*/
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 1);
 800434a:	2201      	movs	r2, #1
 800434c:	2100      	movs	r1, #0
 800434e:	203a      	movs	r0, #58	; 0x3a
 8004350:	f001 fa27 	bl	80057a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004354:	203a      	movs	r0, #58	; 0x3a
 8004356:	f001 fa40 	bl	80057da <HAL_NVIC_EnableIRQ>
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000260 	.word	0x20000260
 8004364:	40026440 	.word	0x40026440
 8004368:	200002c0 	.word	0x200002c0

0800436c <UART_Emul_ReceiveFormatFrame>:
 * @param  pBuffer: pointer of receiver Buffer
 * @param  pFrame: pointer of Frame
 * @retval None
*/
static uint8_t UART_Emul_ReceiveFormatFrame(UART_Emul_HandleTypeDef *huart, uint32_t *pBuf, uint8_t Data)
{ 
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
  uint32_t length = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t cntparity = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]

  if (huart->Init.Parity != UART_EMUL_PARITY_NONE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	7b9b      	ldrb	r3, [r3, #14]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <UART_Emul_ReceiveFormatFrame+0x30>
  {
    /* Get Length of frame */
    length = huart->Init.WordLength -1 ;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	7b1b      	ldrb	r3, [r3, #12]
 8004396:	3b01      	subs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e002      	b.n	80043a2 <UART_Emul_ReceiveFormatFrame+0x36>
  }
  else
  {
    /* Get Length of frame */
    length = huart->Init.WordLength ;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	7b1b      	ldrb	r3, [r3, #12]
 80043a0:	61bb      	str	r3, [r7, #24]
  }

  if ((pBuf[huart->Init.WordLength+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	7b1b      	ldrb	r3, [r3, #12]
 80043a6:	3301      	adds	r3, #1
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4413      	add	r3, r2
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	8a12      	ldrh	r2, [r2, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	8a12      	ldrh	r2, [r2, #16]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <UART_Emul_ReceiveFormatFrame+0x92>
  {
    /* UART Emulation frame error occurred */
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_FE);
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <UART_Emul_ReceiveFormatFrame+0x188>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <UART_Emul_ReceiveFormatFrame+0x188>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0204 	orr.w	r2, r2, #4
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

    huart->ErrorCode |= HAL_UART_EMUL_ERROR_FE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable External interrupt for next Frame */
    EXTI->IMR &= ~EXTI_EMR_MR3;
 80043e6:	4b44      	ldr	r3, [pc, #272]	; (80044f8 <UART_Emul_ReceiveFormatFrame+0x18c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a43      	ldr	r2, [pc, #268]	; (80044f8 <UART_Emul_ReceiveFormatFrame+0x18c>)
 80043ec:	f023 0308 	bic.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]

    /* Handle for UART Emulation Error */
    HAL_UART_Emul_ErrorCallback(huart);
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f7fe fa68 	bl	80028c8 <HAL_UART_Emul_ErrorCallback>

    tmp = RESET;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e073      	b.n	80044e6 <UART_Emul_ReceiveFormatFrame+0x17a>
  }
  else
  {
    /* format data */
    for (counter = 0; counter < length; counter++)
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e01c      	b.n	800443e <UART_Emul_ReceiveFormatFrame+0xd2>
    {
      if ((pBuf[counter+1]&(huart->Init.RxPinNumber)) == (huart->Init.RxPinNumber))
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3301      	adds	r3, #1
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	8a12      	ldrh	r2, [r2, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	8a12      	ldrh	r2, [r2, #16]
 800441a:	4293      	cmp	r3, r2
 800441c:	d10c      	bne.n	8004438 <UART_Emul_ReceiveFormatFrame+0xcc>
      {
        Data = (0x01 << counter) | Data;
 800441e:	2201      	movs	r2, #1
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	b25a      	sxtb	r2, r3
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	4313      	orrs	r3, r2
 800442e:	b25b      	sxtb	r3, r3
 8004430:	71fb      	strb	r3, [r7, #7]
        cntparity ++;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	3301      	adds	r3, #1
 8004436:	613b      	str	r3, [r7, #16]
    for (counter = 0; counter < length; counter++)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3301      	adds	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	429a      	cmp	r2, r3
 8004444:	d3de      	bcc.n	8004404 <UART_Emul_ReceiveFormatFrame+0x98>
      }
    }
    /* Parity Bit */
    if (huart->Init.Parity == UART_EMUL_PARITY_ODD)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	7b9b      	ldrb	r3, [r3, #14]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d11c      	bne.n	8004488 <UART_Emul_ReceiveFormatFrame+0x11c>
    {
			
      if (((cntparity % 2) != SET) && ((pBuf[length+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber))
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d117      	bne.n	8004488 <UART_Emul_ReceiveFormatFrame+0x11c>
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	3301      	adds	r3, #1
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	4413      	add	r3, r2
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	8a12      	ldrh	r2, [r2, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	8a12      	ldrh	r2, [r2, #16]
 800446e:	4293      	cmp	r3, r2
 8004470:	d00a      	beq.n	8004488 <UART_Emul_ReceiveFormatFrame+0x11c>
      {
        /* Set flag PE */
        __HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_PE);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0308 	orr.w	r3, r3, #8
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	701a      	strb	r2, [r3, #0]

        HAL_UART_Emul_ErrorCallback(huart);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7fe fa20 	bl	80028c8 <HAL_UART_Emul_ErrorCallback>
      }
    }
    if (huart->Init.Parity == UART_EMUL_PARITY_EVEN)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	7b9b      	ldrb	r3, [r3, #14]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d126      	bne.n	80044de <UART_Emul_ReceiveFormatFrame+0x172>
    {

      if (((cntparity % 2) != RESET) && ((pBuf[length+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber))
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d021      	beq.n	80044de <UART_Emul_ReceiveFormatFrame+0x172>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3301      	adds	r3, #1
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	4413      	add	r3, r2
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	8a12      	ldrh	r2, [r2, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	8a12      	ldrh	r2, [r2, #16]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d014      	beq.n	80044de <UART_Emul_ReceiveFormatFrame+0x172>
      {
        /* UART Emulation parity error occurred */
        __HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_PE);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f043 0308 	orr.w	r3, r3, #8
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	701a      	strb	r2, [r3, #0]

        huart->ErrorCode |= HAL_UART_EMUL_ERROR_PE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        HAL_UART_Emul_ErrorCallback(huart);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7fe f9f5 	bl	80028c8 <HAL_UART_Emul_ErrorCallback>
      }
    }

    /* Reset counter parity */
    cntparity = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]

    tmp = Data;
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	617b      	str	r3, [r7, #20]
  }

  return tmp;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	b2db      	uxtb	r3, r3
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000300 	.word	0x20000300
 80044f8:	40013c00 	.word	0x40013c00

080044fc <UART_Emul_TransmitFormatFrame>:
  * @param  UART Emulation Handle
  * @param  pdata pinteur in data
  * @retval None
  */
static void UART_Emul_TransmitFormatFrame(UART_Emul_HandleTypeDef *huart , uint8_t Data, uint32_t *pBuffer_Tx)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	460b      	mov	r3, r1
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	72fb      	strb	r3, [r7, #11]
uint32_t counter = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
uint32_t bitmask = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
uint32_t length = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
uint32_t cntparity = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]


  length = huart->Init.WordLength;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	7b1b      	ldrb	r3, [r3, #12]
 800451e:	613b      	str	r3, [r7, #16]

  /* Get the Pin Number */
  bitmask = (uint32_t)huart->Init.TxPinNumber;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8a5b      	ldrh	r3, [r3, #18]
 8004524:	617b      	str	r3, [r7, #20]

/* with no parity */
if(huart->Init.Parity == 0x00)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	7b9b      	ldrb	r3, [r3, #14]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d122      	bne.n	8004574 <UART_Emul_TransmitFormatFrame+0x78>
{		
  for (counter = 0; counter < length; counter++)
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	e01a      	b.n	800456a <UART_Emul_TransmitFormatFrame+0x6e>
  {
    if (((Data >> counter)&BitMask) != 0)
 8004534:	7afa      	ldrb	r2, [r7, #11]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa42 f303 	asr.w	r3, r2, r3
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <UART_Emul_TransmitFormatFrame+0x58>
    {
      pBuffer_Tx[counter+1] = bitmask;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	3301      	adds	r3, #1
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e007      	b.n	8004564 <UART_Emul_TransmitFormatFrame+0x68>
    }
    else
    {
      pBuffer_Tx[counter+1] = (bitmask << 16);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3301      	adds	r3, #1
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	0412      	lsls	r2, r2, #16
 8004562:	601a      	str	r2, [r3, #0]
  for (counter = 0; counter < length; counter++)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3e0      	bcc.n	8004534 <UART_Emul_TransmitFormatFrame+0x38>
 8004572:	e025      	b.n	80045c0 <UART_Emul_TransmitFormatFrame+0xc4>
  }
}
/* with parity */
else
{
  for (counter = 0; counter < length-1; counter++)
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e01d      	b.n	80045b6 <UART_Emul_TransmitFormatFrame+0xba>
  {
    if (((Data >> counter)&BitMask) != 0)
 800457a:	7afa      	ldrb	r2, [r7, #11]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	fa42 f303 	asr.w	r3, r2, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_Emul_TransmitFormatFrame+0xa4>
    {
      pBuffer_Tx[counter+1] = bitmask;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	3301      	adds	r3, #1
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	601a      	str	r2, [r3, #0]
      cntparity ++;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	3301      	adds	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e007      	b.n	80045b0 <UART_Emul_TransmitFormatFrame+0xb4>
    }
    else
    {
      pBuffer_Tx[counter+1] = (bitmask << 16);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	4413      	add	r3, r2
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	0412      	lsls	r2, r2, #16
 80045ae:	601a      	str	r2, [r3, #0]
  for (counter = 0; counter < length-1; counter++)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d3dc      	bcc.n	800457a <UART_Emul_TransmitFormatFrame+0x7e>
    }
  }	
}	
	
  switch  (huart->Init.Parity)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	7b9b      	ldrb	r3, [r3, #14]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d016      	beq.n	80045f6 <UART_Emul_TransmitFormatFrame+0xfa>
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d000      	beq.n	80045ce <UART_Emul_TransmitFormatFrame+0xd2>
        pBuffer_Tx[length] = bitmask;
      }
    }
    break;
    default:
      break;
 80045cc:	e027      	b.n	800461e <UART_Emul_TransmitFormatFrame+0x122>
      if ((cntparity % 2) != SET)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <UART_Emul_TransmitFormatFrame+0xea>
        pBuffer_Tx[length] = bitmask;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4413      	add	r3, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	601a      	str	r2, [r3, #0]
    break;
 80045e4:	e01b      	b.n	800461e <UART_Emul_TransmitFormatFrame+0x122>
        pBuffer_Tx[length] = (bitmask << 16);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	0412      	lsls	r2, r2, #16
 80045f2:	601a      	str	r2, [r3, #0]
    break;
 80045f4:	e013      	b.n	800461e <UART_Emul_TransmitFormatFrame+0x122>
      if ((cntparity % 2) != SET)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <UART_Emul_TransmitFormatFrame+0x114>
        pBuffer_Tx[length] = (bitmask << 16);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	0412      	lsls	r2, r2, #16
 800460c:	601a      	str	r2, [r3, #0]
    break;
 800460e:	e005      	b.n	800461c <UART_Emul_TransmitFormatFrame+0x120>
        pBuffer_Tx[length] = bitmask;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	601a      	str	r2, [r3, #0]
    break;
 800461c:	bf00      	nop
  }
  /* Initialize Bit Start */
  pBuffer_Tx[0] = (bitmask << 16);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	041a      	lsls	r2, r3, #16
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	601a      	str	r2, [r3, #0]

  if (huart->Init.StopBits == UART_EMUL_STOPBITS_1)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	7b5b      	ldrb	r3, [r3, #13]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <UART_Emul_TransmitFormatFrame+0x142>
  {
    /* Initialize Bit Stop  */
    pBuffer_Tx[length+1] = bitmask;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3301      	adds	r3, #1
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e00d      	b.n	800465a <UART_Emul_TransmitFormatFrame+0x15e>
  }
  else
  {
    /* Initialize Bit Stop  */
    pBuffer_Tx[length+1] = bitmask;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3301      	adds	r3, #1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	601a      	str	r2, [r3, #0]
    pBuffer_Tx[length+2] = bitmask;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3302      	adds	r3, #2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	601a      	str	r2, [r3, #0]
  }
  /* Reset counter parity */
  cntparity = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
}
 800465e:	bf00      	nop
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <UART_Emul_TransmitFrame>:
  * @param  huart: UART Emulation handle
  * @param  pData: Frame to be sent
  * @retval None
  */
static void UART_Emul_TransmitFrame(UART_Emul_HandleTypeDef *huart)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ds = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_size = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

	
  if ((huart_emul->TxXferCount % 2 ) != 0)
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <UART_Emul_TransmitFrame+0xc0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	8b5b      	ldrh	r3, [r3, #26]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <UART_Emul_TransmitFrame+0x2a>
  {
    tmp_sr = (uint32_t)pFirstBuffer_Tx;
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <UART_Emul_TransmitFrame+0xc4>)
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e001      	b.n	800469a <UART_Emul_TransmitFrame+0x2e>
  }
  else
  {
    tmp_sr = (uint32_t)pSecondBuffer_Tx;
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <UART_Emul_TransmitFrame+0xc8>)
 8004698:	617b      	str	r3, [r7, #20]
  }

	tmp_ds = (uint32_t) & ((huart->TxPortName)->BSRR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	3318      	adds	r3, #24
 80046a0:	613b      	str	r3, [r7, #16]
	
  tmp_size = __HAL_UART_EMUL_FRAME_LENGTH(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7b1b      	ldrb	r3, [r3, #12]
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7b5b      	ldrb	r3, [r3, #13]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Configure DMA Stream data length */
  hdma_tx.Instance->NDTR = tmp_size;
 80046b8:	4b1f      	ldr	r3, [pc, #124]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Stream destination address */
  hdma_tx.Instance->PAR = tmp_ds;
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	609a      	str	r2, [r3, #8]

  /* Configure DMA Stream source address */
  hdma_tx.Instance->M0AR = tmp_sr;
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	60da      	str	r2, [r3, #12]

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_tx, DMA_IT_TC);
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0210 	orr.w	r2, r2, #16
 80046de:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_tx, DMA_IT_TE);
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0204 	orr.w	r2, r2, #4
 80046ee:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(&hdma_tx);
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b10      	ldr	r3, [pc, #64]	; (8004738 <UART_Emul_TransmitFrame+0xcc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(&TimHandle, TIM_DMA_CC1);
 8004700:	4b0e      	ldr	r3, [pc, #56]	; (800473c <UART_Emul_TransmitFrame+0xd0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	4b0d      	ldr	r3, [pc, #52]	; (800473c <UART_Emul_TransmitFrame+0xd0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(&TimHandle);
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <UART_Emul_TransmitFrame+0xd0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <UART_Emul_TransmitFrame+0xd0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	20000300 	.word	0x20000300
 8004730:	20000364 	.word	0x20000364
 8004734:	20000394 	.word	0x20000394
 8004738:	20000200 	.word	0x20000200
 800473c:	200002c0 	.word	0x200002c0

08004740 <UART_Emul_DMATransmitCplt>:
  * @brief  This function is executed in case of Transfer Complete of a Frame.
  * @param  None
  * @retval None
  */
static void UART_Emul_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpbuffer = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  /* Incremente Counter of frame */
  huart_emul->TxXferCount++;
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	8b5a      	ldrh	r2, [r3, #26]
 8004752:	3201      	adds	r2, #1
 8004754:	b292      	uxth	r2, r2
 8004756:	835a      	strh	r2, [r3, #26]

  if (huart_emul->TxXferCount <= huart_emul->TxXferSize)
 8004758:	4b38      	ldr	r3, [pc, #224]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	8b5a      	ldrh	r2, [r3, #26]
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	8b1b      	ldrh	r3, [r3, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d820      	bhi.n	80047aa <UART_Emul_DMATransmitCplt+0x6a>
  { 

    /* Call UART Emulation Transmit frame for next Frame */
    UART_Emul_TransmitFrame(huart_emul);
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff7d 	bl	800466c <UART_Emul_TransmitFrame>

    if ((huart_emul->TxXferCount % 2 ) != 0)
 8004772:	4b32      	ldr	r3, [pc, #200]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	8b5b      	ldrh	r3, [r3, #26]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <UART_Emul_DMATransmitCplt+0x48>
    {
      tmpbuffer = (uint32_t)pSecondBuffer_Tx;
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <UART_Emul_DMATransmitCplt+0x100>)
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e001      	b.n	800478c <UART_Emul_DMATransmitCplt+0x4c>
    }
    else
    {
      tmpbuffer = (uint32_t)pFirstBuffer_Tx;
 8004788:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <UART_Emul_DMATransmitCplt+0x104>)
 800478a:	60fb      	str	r3, [r7, #12]
    }
    /* Format second Data to be sent */
    UART_Emul_TransmitFormatFrame(huart_emul, *(huart_emul->pTxBuffPtr + huart_emul->TxXferCount), (uint32_t*)tmpbuffer);
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4a29      	ldr	r2, [pc, #164]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	8b52      	ldrh	r2, [r2, #26]
 800479c:	4413      	add	r3, r2
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4619      	mov	r1, r3
 80047a4:	f7ff feaa 	bl	80044fc <UART_Emul_TransmitFormatFrame>
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
    }
    /* Handle for UART Emulation Transfer Complete */
    HAL_UART_Emul_TxCpltCallback(huart_emul);
  }
}
 80047a8:	e043      	b.n	8004832 <UART_Emul_DMATransmitCplt+0xf2>
    __HAL_DMA_DISABLE_IT(TimHandle.hdma[TIM_DMA_ID_CC1], DMA_IT_TC);
 80047aa:	4b27      	ldr	r3, [pc, #156]	; (8004848 <UART_Emul_DMATransmitCplt+0x108>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b25      	ldr	r3, [pc, #148]	; (8004848 <UART_Emul_DMATransmitCplt+0x108>)
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0210 	bic.w	r2, r2, #16
 80047bc:	601a      	str	r2, [r3, #0]
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_TC);
 80047be:	4b1f      	ldr	r3, [pc, #124]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0202 	orr.w	r2, r2, #2
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
    __HAL_DMA_DISABLE(&hdma_tx);
 80047d2:	4b1e      	ldr	r3, [pc, #120]	; (800484c <UART_Emul_DMATransmitCplt+0x10c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <UART_Emul_DMATransmitCplt+0x10c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
    __HAL_TIM_DISABLE_DMA(&TimHandle, TIM_DMA_CC1);
 80047e2:	4b19      	ldr	r3, [pc, #100]	; (8004848 <UART_Emul_DMATransmitCplt+0x108>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b17      	ldr	r3, [pc, #92]	; (8004848 <UART_Emul_DMATransmitCplt+0x108>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80047f0:	60da      	str	r2, [r3, #12]
    huart_emul->TxXferCount = 0;
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2200      	movs	r2, #0
 80047f8:	835a      	strh	r2, [r3, #26]
    huart_emul->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 80047fa:	4b10      	ldr	r3, [pc, #64]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (huart_emul->State == HAL_UART_EMUL_STATE_BUSY_TX_RX)
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b10      	cmp	r3, #16
 8004810:	d105      	bne.n	800481e <UART_Emul_DMATransmitCplt+0xde>
      huart_emul->State = HAL_UART_EMUL_STATE_BUSY_RX;
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2208      	movs	r2, #8
 8004818:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800481c:	e004      	b.n	8004828 <UART_Emul_DMATransmitCplt+0xe8>
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    HAL_UART_Emul_TxCpltCallback(huart_emul);
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <UART_Emul_DMATransmitCplt+0xfc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f835 	bl	800489c <HAL_UART_Emul_TxCpltCallback>
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000300 	.word	0x20000300
 8004840:	20000394 	.word	0x20000394
 8004844:	20000364 	.word	0x20000364
 8004848:	200002c0 	.word	0x200002c0
 800484c:	20000200 	.word	0x20000200

08004850 <UART_Emul_DMAError>:
  * @brief  This function is executed in case of error of Transfer occurrence.
  * @param  hdma : DMA Handle
  * @retval None
  */
static void UART_Emul_DMAError(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* UART Emulation frame error occurred */
  __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_FE);
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <UART_Emul_DMAError+0x48>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b2da      	uxtb	r2, r3
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <UART_Emul_DMAError+0x48>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0204 	orr.w	r2, r2, #4
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]

  huart_emul->ErrorCode |= HAL_UART_EMUL_ERROR_FE;
 800486c:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <UART_Emul_DMAError+0x48>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <UART_Emul_DMAError+0x48>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  HAL_UART_Emul_ErrorCallback(huart_emul);
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <UART_Emul_DMAError+0x48>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe f81d 	bl	80028c8 <HAL_UART_Emul_ErrorCallback>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000300 	.word	0x20000300

0800489c <HAL_UART_Emul_TxCpltCallback>:
  * @brief  Initializes the UART Emulation Transfer Complete.
  * @param  huart: UART Emulation Handle
  * @retval None
  */
__weak void HAL_UART_Emul_TxCpltCallback(UART_Emul_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_UART_Emul_TransferComplete could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <Quectel_Init>:
static void L76_Date_Parse(char* sRmcDate, L76* pL76Handle);
extern void Error_Handler(void);


uint8_t Quectel_Init(void)
{
 80048b0:	b5b0      	push	{r4, r5, r7, lr}
 80048b2:	b0b2      	sub	sp, #200	; 0xc8
 80048b4:	af00      	add	r7, sp, #0

	char cGpsOnly[100] = "$PMTK353,1,0,0,0,0*2B\r\n";
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <Quectel_Init+0x8c>)
 80048b8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80048bc:	461d      	mov	r5, r3
 80048be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80048ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048ce:	224c      	movs	r2, #76	; 0x4c
 80048d0:	2100      	movs	r1, #0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f005 faee 	bl	8009eb4 <memset>

	char cGps10HzFix[100] = "$PMTK220,100*1F\r\n";
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <Quectel_Init+0x90>)
 80048da:	463c      	mov	r4, r7
 80048dc:	461d      	mov	r5, r3
 80048de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	8023      	strh	r3, [r4, #0]
 80048e6:	f107 0312 	add.w	r3, r7, #18
 80048ea:	2252      	movs	r2, #82	; 0x52
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f005 fae0 	bl	8009eb4 <memset>

	HAL_UART_Transmit(&huart2, (uint8_t*)cGps10HzFix, strlen(cGps10HzFix), HAL_MAX_DELAY);
 80048f4:	463b      	mov	r3, r7
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fb fc72 	bl	80001e0 <strlen>
 80048fc:	4603      	mov	r3, r0
 80048fe:	b29a      	uxth	r2, r3
 8004900:	4639      	mov	r1, r7
 8004902:	f04f 33ff 	mov.w	r3, #4294967295
 8004906:	480f      	ldr	r0, [pc, #60]	; (8004944 <Quectel_Init+0x94>)
 8004908:	f003 ffbb 	bl	8008882 <HAL_UART_Transmit>

	if(HAL_UART_Transmit(&huart2, (uint8_t*)cGpsOnly, strlen(cGpsOnly), HAL_MAX_DELAY) != HAL_OK)
 800490c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004910:	4618      	mov	r0, r3
 8004912:	f7fb fc65 	bl	80001e0 <strlen>
 8004916:	4603      	mov	r3, r0
 8004918:	b29a      	uxth	r2, r3
 800491a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	4808      	ldr	r0, [pc, #32]	; (8004944 <Quectel_Init+0x94>)
 8004924:	f003 ffad 	bl	8008882 <HAL_UART_Transmit>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <Quectel_Init+0x82>
	{
		return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <Quectel_Init+0x84>
	}
	else
	{
		return HAL_OK;
 8004932:	2300      	movs	r3, #0
	}
}
 8004934:	4618      	mov	r0, r3
 8004936:	37c8      	adds	r7, #200	; 0xc8
 8004938:	46bd      	mov	sp, r7
 800493a:	bdb0      	pop	{r4, r5, r7, pc}
 800493c:	0800e484 	.word	0x0800e484
 8004940:	0800e4e8 	.word	0x0800e4e8
 8004944:	2000158c 	.word	0x2000158c

08004948 <gps_read>:

void gps_read(char*	sRxBuffer,
			  L76* pL76,
			  char *seGNGGA,
			  char* seGNRMC)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b0b2      	sub	sp, #200	; 0xc8
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
	/* Check for NULL */
	if ((sRxBuffer == NULL) || (pL76 == NULL) || (seGNGGA == NULL) || (seGNRMC == NULL))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <gps_read+0x26>
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <gps_read+0x26>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <gps_read+0x26>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <gps_read+0x2a>
	{
		Error_Handler();
 800496e:	f7fc fd41 	bl	80013f4 <Error_Handler>
	}

	uint8_t u8IsFix = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	uint8_t u8IndexOfComma[20] = {0};
 8004978:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	60da      	str	r2, [r3, #12]
 8004986:	611a      	str	r2, [r3, #16]
	uint8_t u8IndexOfComma2[20] = {0};
 8004988:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
	char sUtcTime[15] = {0};
 8004998:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	f8c3 200b 	str.w	r2, [r3, #11]
	char sDate[10]	  = {0};
 80049a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	605a      	str	r2, [r3, #4]
 80049b2:	811a      	strh	r2, [r3, #8]

	memset(pL76, 0, sizeof(L76));
 80049b4:	2218      	movs	r2, #24
 80049b6:	2100      	movs	r1, #0
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	f005 fa7b 	bl	8009eb4 <memset>

	/* 2 strings to split the GNGAA and GNRMC from the NMEA sent from the Quectel L76 LB */
	char *sSubGPS  = strstr(sRxBuffer, "$GNGGA");
 80049be:	49c9      	ldr	r1, [pc, #804]	; (8004ce4 <gps_read+0x39c>)
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f005 ff86 	bl	800a8d2 <strstr>
 80049c6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	char* sSubGPS2 = strstr(sRxBuffer, "$GNRMC");
 80049ca:	49c7      	ldr	r1, [pc, #796]	; (8004ce8 <gps_read+0x3a0>)
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f005 ff80 	bl	800a8d2 <strstr>
 80049d2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	/* Split the GNRMC from the string above */
	for (int i = 0; i < strlen(sSubGPS2); i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049dc:	e02d      	b.n	8004a3a <gps_read+0xf2>
	{
		if (sSubGPS2[i] == '\r')
 80049de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80049e6:	4413      	add	r3, r2
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b0d      	cmp	r3, #13
 80049ec:	d120      	bne.n	8004a30 <gps_read+0xe8>
		{
			for (int j = 0; j < i; j++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049f4:	e00f      	b.n	8004a16 <gps_read+0xce>
			{
				seGNRMC[j] = sSubGPS2[j];
 80049f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80049fe:	441a      	add	r2, r3
 8004a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	440b      	add	r3, r1
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < i; j++)
 8004a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a10:	3301      	adds	r3, #1
 8004a12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	dbe9      	blt.n	80049f6 <gps_read+0xae>
			}
			seGNRMC[i] = '\0';
 8004a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4413      	add	r3, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
			break;
 8004a2e:	e00d      	b.n	8004a4c <gps_read+0x104>
	for (int i = 0; i < strlen(sSubGPS2); i++)
 8004a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a34:	3301      	adds	r3, #1
 8004a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8004a3e:	f7fb fbcf 	bl	80001e0 <strlen>
 8004a42:	4602      	mov	r2, r0
 8004a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d8c8      	bhi.n	80049de <gps_read+0x96>
		}
	}

	/* Test */
	printf("the string of the subGNRMC: %s\r\n", seGNRMC);
 8004a4c:	6839      	ldr	r1, [r7, #0]
 8004a4e:	48a7      	ldr	r0, [pc, #668]	; (8004cec <gps_read+0x3a4>)
 8004a50:	f005 fe94 	bl	800a77c <iprintf>

	/* Split the GNGGA from the string above */
	for (int i = 0; i < strlen(sSubGPS); i++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a5a:	e02d      	b.n	8004ab8 <gps_read+0x170>
	{
		if (sSubGPS[i] == '\r')
 8004a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a60:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004a64:	4413      	add	r3, r2
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b0d      	cmp	r3, #13
 8004a6a:	d120      	bne.n	8004aae <gps_read+0x166>
		{
			for (int j = 0; j < i; j++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a72:	e00f      	b.n	8004a94 <gps_read+0x14c>
			{
				seGNGGA[j] = sSubGPS[j];
 8004a74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a78:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	440b      	add	r3, r1
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < i; j++)
 8004a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	dbe9      	blt.n	8004a74 <gps_read+0x12c>
			}
			seGNGGA[i] = '\0';
 8004aa0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
			break;
 8004aac:	e00d      	b.n	8004aca <gps_read+0x182>
	for (int i = 0; i < strlen(sSubGPS); i++)
 8004aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004abc:	f7fb fb90 	bl	80001e0 <strlen>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d8c8      	bhi.n	8004a5c <gps_read+0x114>
		}
	}

	/* Test */
	printf("the string of the subGNGGA: %s\r\n", seGNGGA);
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4888      	ldr	r0, [pc, #544]	; (8004cf0 <gps_read+0x3a8>)
 8004ace:	f005 fe55 	bl	800a77c <iprintf>

	int j = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNGGA string */
	for (int i = 0; i < strlen(seGNGGA); i++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ade:	e018      	b.n	8004b12 <gps_read+0x1ca>
	{
		if (seGNGGA[i] == ',')
 8004ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b2c      	cmp	r3, #44	; 0x2c
 8004aec:	d10c      	bne.n	8004b08 <gps_read+0x1c0>
		{
			u8IndexOfComma[j++] = i;
 8004aee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004af8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8004b02:	440b      	add	r3, r1
 8004b04:	f803 2c44 	strb.w	r2, [r3, #-68]
	for (int i = 0; i < strlen(seGNGGA); i++)
 8004b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fb fb64 	bl	80001e0 <strlen>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d8de      	bhi.n	8004ae0 <gps_read+0x198>
		}
	}

	j = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNRMC string */
	for (int i = 0; i < strlen(seGNRMC); i++)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b2e:	e018      	b.n	8004b62 <gps_read+0x21a>
	{
		if (seGNRMC[i] == ',')
 8004b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	4413      	add	r3, r2
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b2c      	cmp	r3, #44	; 0x2c
 8004b3c:	d10c      	bne.n	8004b58 <gps_read+0x210>
		{
			u8IndexOfComma2[j++] = i;
 8004b3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004b48:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8004b52:	440b      	add	r3, r1
 8004b54:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (int i = 0; i < strlen(seGNRMC); i++)
 8004b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b62:	6838      	ldr	r0, [r7, #0]
 8004b64:	f7fb fb3c 	bl	80001e0 <strlen>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d8de      	bhi.n	8004b30 <gps_read+0x1e8>
		}
	}

	/* Check whether the GPS is fix or not on GNGGA */
	if (seGNGGA[u8IndexOfComma[5] + 1] == '0' || strlen(seGNGGA) == 0 || seGNGGA[u8IndexOfComma[5]+1] != '1')
 8004b72:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b30      	cmp	r3, #48	; 0x30
 8004b80:	d00b      	beq.n	8004b9a <gps_read+0x252>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <gps_read+0x252>
 8004b8a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004b8e:	3301      	adds	r3, #1
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	4413      	add	r3, r2
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b31      	cmp	r3, #49	; 0x31
 8004b98:	d00e      	beq.n	8004bb8 <gps_read+0x270>
	{
		if (seGNGGA[u8IndexOfComma[5] + 1] == '0')
 8004b9a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b30      	cmp	r3, #48	; 0x30
 8004ba8:	d102      	bne.n	8004bb0 <gps_read+0x268>
		{
			printf("GPS NOT FIX!!!\r\n");
 8004baa:	4852      	ldr	r0, [pc, #328]	; (8004cf4 <gps_read+0x3ac>)
 8004bac:	f005 fe5a 	bl	800a864 <puts>
		}
		u8IsFix = GPS_NOT_FIX;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8004bb6:	e002      	b.n	8004bbe <gps_read+0x276>
	}else
	{
		u8IsFix = GPS_FIX;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	/* If GPS is fix, Get the DATA */
	if (u8IsFix == GPS_NOT_FIX)
 8004bbe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <gps_read+0x290>
	{
		/* Information of NMEA */
		memset(pL76, 0, sizeof(*pL76));
 8004bc6:	2218      	movs	r2, #24
 8004bc8:	2100      	movs	r1, #0
 8004bca:	68b8      	ldr	r0, [r7, #8]
 8004bcc:	f005 f972 	bl	8009eb4 <memset>
		printf("GPS NOT AVAILABLE\r\n");
 8004bd0:	4849      	ldr	r0, [pc, #292]	; (8004cf8 <gps_read+0x3b0>)
 8004bd2:	f005 fe47 	bl	800a864 <puts>
		}

		L76_Long_Parse(sLong, pL76, u8E_W);

	}
}
 8004bd6:	e191      	b.n	8004efc <gps_read+0x5b4>
		char sLat[20] = {0};
 8004bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
		char sN_S[3] = {0};
 8004be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004bec:	2100      	movs	r1, #0
 8004bee:	460a      	mov	r2, r1
 8004bf0:	801a      	strh	r2, [r3, #0]
 8004bf2:	460a      	mov	r2, r1
 8004bf4:	709a      	strb	r2, [r3, #2]
		j = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 8004bfc:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8004c00:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004c04:	e016      	b.n	8004c34 <gps_read+0x2ec>
			sUtcTime[j] = seGNGGA[i+1];
 8004c06:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4413      	add	r3, r2
 8004c10:	7819      	ldrb	r1, [r3, #0]
 8004c12:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004c16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c1a:	4413      	add	r3, r2
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	701a      	strb	r2, [r3, #0]
			j++;
 8004c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c24:	3301      	adds	r3, #1
 8004c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 8004c2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004c34:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8004c38:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d3e2      	bcc.n	8004c06 <gps_read+0x2be>
		sUtcTime[j-1] = '\0';
 8004c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c44:	3b01      	subs	r3, #1
 8004c46:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004c4a:	4413      	add	r3, r2
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f803 2c68 	strb.w	r2, [r3, #-104]
		L76_Time_Parse(sUtcTime, pL76);
 8004c52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c56:	68b9      	ldr	r1, [r7, #8]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 facd 	bl	80051f8 <L76_Time_Parse>
		j = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma2[9]; i++)
 8004c64:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8004c68:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8004c6c:	e016      	b.n	8004c9c <gps_read+0x354>
			sDate[j] = seGNRMC[i+1];
 8004c6e:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8004c72:	3301      	adds	r3, #1
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	4413      	add	r3, r2
 8004c78:	7819      	ldrb	r1, [r3, #0]
 8004c7a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c82:	4413      	add	r3, r2
 8004c84:	460a      	mov	r2, r1
 8004c86:	701a      	strb	r2, [r3, #0]
			j++;
 8004c88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma2[9]; i++)
 8004c92:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8004c96:	3301      	adds	r3, #1
 8004c98:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8004c9c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004ca0:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d3e2      	bcc.n	8004c6e <gps_read+0x326>
		sDate[j-1] = '\0';
 8004ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cac:	3b01      	subs	r3, #1
 8004cae:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004cb2:	4413      	add	r3, r2
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f803 2c74 	strb.w	r2, [r3, #-116]
		printf("DATE string: %s\r\n",sDate);
 8004cba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	480e      	ldr	r0, [pc, #56]	; (8004cfc <gps_read+0x3b4>)
 8004cc2:	f005 fd5b 	bl	800a77c <iprintf>
		L76_Date_Parse(sDate, pL76);
 8004cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fae5 	bl	800529c <L76_Date_Parse>
		j = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 8004cd8:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8004cdc:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8004ce0:	e025      	b.n	8004d2e <gps_read+0x3e6>
 8004ce2:	bf00      	nop
 8004ce4:	0800e54c 	.word	0x0800e54c
 8004ce8:	0800e554 	.word	0x0800e554
 8004cec:	0800e55c 	.word	0x0800e55c
 8004cf0:	0800e580 	.word	0x0800e580
 8004cf4:	0800e5a4 	.word	0x0800e5a4
 8004cf8:	0800e5b4 	.word	0x0800e5b4
 8004cfc:	0800e5c8 	.word	0x0800e5c8
			sLat[j] = seGNGGA[i+1];
 8004d00:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8004d04:	3301      	adds	r3, #1
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	7819      	ldrb	r1, [r3, #0]
 8004d0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d14:	4413      	add	r3, r2
 8004d16:	460a      	mov	r2, r1
 8004d18:	701a      	strb	r2, [r3, #0]
			j++;
 8004d1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 8004d24:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8004d2e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004d32:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3e2      	bcc.n	8004d00 <gps_read+0x3b8>
		sLat[j-1] = '\0';
 8004d3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004d44:	4413      	add	r3, r2
 8004d46:	2200      	movs	r2, #0
 8004d48:	f803 2c88 	strb.w	r2, [r3, #-136]
		printf("%s\n\r", sLat);
 8004d4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d50:	4619      	mov	r1, r3
 8004d52:	486c      	ldr	r0, [pc, #432]	; (8004f04 <gps_read+0x5bc>)
 8004d54:	f005 fd12 	bl	800a77c <iprintf>
		j = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8004d5e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004d62:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8004d66:	e016      	b.n	8004d96 <gps_read+0x44e>
			sN_S[j] = seGNGGA[i+1];
 8004d68:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	7819      	ldrb	r1, [r3, #0]
 8004d74:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d7c:	4413      	add	r3, r2
 8004d7e:	460a      	mov	r2, r1
 8004d80:	701a      	strb	r2, [r3, #0]
			j++;
 8004d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d86:	3301      	adds	r3, #1
 8004d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8004d8c:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004d90:	3301      	adds	r3, #1
 8004d92:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8004d96:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004d9a:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d3e2      	bcc.n	8004d68 <gps_read+0x420>
		sN_S[j-1] = '\0';
 8004da2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004da6:	3b01      	subs	r3, #1
 8004da8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004dac:	4413      	add	r3, r2
 8004dae:	2200      	movs	r2, #0
 8004db0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		uint8_t u8N_S = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if (sN_S[0] == 'N')
 8004dba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004dbe:	2b4e      	cmp	r3, #78	; 0x4e
 8004dc0:	d103      	bne.n	8004dca <gps_read+0x482>
			u8N_S = GPS_NORTH;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8004dc8:	e006      	b.n	8004dd8 <gps_read+0x490>
		}else if (sN_S[0] == 'S')
 8004dca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004dce:	2b53      	cmp	r3, #83	; 0x53
 8004dd0:	d102      	bne.n	8004dd8 <gps_read+0x490>
			u8N_S = GPS_SOUTH;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		L76_Lat_Parse(sLat, pL76, u8N_S);
 8004dd8:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8004ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f892 	bl	8004f0c <L76_Lat_Parse>
		j = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sLong[20] = {0};
 8004dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
 8004dfc:	611a      	str	r2, [r3, #16]
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 8004dfe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004e02:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004e06:	e016      	b.n	8004e36 <gps_read+0x4ee>
			sLong[j] = seGNGGA[i+1];
 8004e08:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	7819      	ldrb	r1, [r3, #0]
 8004e14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e1c:	4413      	add	r3, r2
 8004e1e:	460a      	mov	r2, r1
 8004e20:	701a      	strb	r2, [r3, #0]
			j++;
 8004e22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e26:	3301      	adds	r3, #1
 8004e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 8004e2c:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004e30:	3301      	adds	r3, #1
 8004e32:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004e36:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004e3a:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3e2      	bcc.n	8004e08 <gps_read+0x4c0>
		sLong[j-1] = '\0';
 8004e42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e46:	3b01      	subs	r3, #1
 8004e48:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004e4c:	4413      	add	r3, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f803 2ca0 	strb.w	r2, [r3, #-160]
		printf("%s\r\n",sLong);
 8004e54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e58:	4619      	mov	r1, r3
 8004e5a:	482b      	ldr	r0, [pc, #172]	; (8004f08 <gps_read+0x5c0>)
 8004e5c:	f005 fc8e 	bl	800a77c <iprintf>
		j = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sE_W[20] = {0};
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	605a      	str	r2, [r3, #4]
 8004e70:	609a      	str	r2, [r3, #8]
 8004e72:	60da      	str	r2, [r3, #12]
 8004e74:	611a      	str	r2, [r3, #16]
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8004e76:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004e7a:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8004e7e:	e016      	b.n	8004eae <gps_read+0x566>
			sE_W[j] = seGNGGA[i+1];
 8004e80:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004e84:	3301      	adds	r3, #1
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4413      	add	r3, r2
 8004e8a:	7819      	ldrb	r1, [r3, #0]
 8004e8c:	f107 0214 	add.w	r2, r7, #20
 8004e90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e94:	4413      	add	r3, r2
 8004e96:	460a      	mov	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]
			j++;
 8004e9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8004ea4:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8004eae:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004eb2:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d3e2      	bcc.n	8004e80 <gps_read+0x538>
		sE_W[j-1] = '\0';
 8004eba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004ec4:	4413      	add	r3, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f803 2cb4 	strb.w	r2, [r3, #-180]
		uint8_t u8E_W = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		if (sE_W[0] == 'E')
 8004ed2:	7d3b      	ldrb	r3, [r7, #20]
 8004ed4:	2b45      	cmp	r3, #69	; 0x45
 8004ed6:	d103      	bne.n	8004ee0 <gps_read+0x598>
			u8E_W = GPS_EAST;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8004ede:	e005      	b.n	8004eec <gps_read+0x5a4>
		else if (sE_W[0] == 'W')
 8004ee0:	7d3b      	ldrb	r3, [r7, #20]
 8004ee2:	2b57      	cmp	r3, #87	; 0x57
 8004ee4:	d102      	bne.n	8004eec <gps_read+0x5a4>
			u8E_W = GPS_WEST;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		L76_Long_Parse(sLong, pL76, u8E_W);
 8004eec:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8004ef0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f8c6 	bl	8005088 <L76_Long_Parse>
}
 8004efc:	bf00      	nop
 8004efe:	37c8      	adds	r7, #200	; 0xc8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	0800e5dc 	.word	0x0800e5dc
 8004f08:	0800e5e4 	.word	0x0800e5e4

08004f0c <L76_Lat_Parse>:

static void L76_Lat_Parse(char* sLat,
						  L76* pL76,
						  uint8_t u8NorS)
{
 8004f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0e:	b08f      	sub	sp, #60	; 0x3c
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]
	char degree[3];
	char minute[10];

	/* Check for NULL pointer */
	if ((sLat == NULL) || (pL76 == NULL))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <L76_Lat_Parse+0x1a>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <L76_Lat_Parse+0x1e>
	{
		Error_Handler();
 8004f26:	f7fc fa65 	bl	80013f4 <Error_Handler>
	/* Check the postition of the dot to divide the degrees and minutes
	 * The Latitude NMEA form ddmm.mmmm
	 */

	/* 1. Parse the Degree */
	for (uint8_t i = 0; i < 2; i++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004f30:	e010      	b.n	8004f54 <L76_Lat_Parse+0x48>
	{
		degree[i] = sLat[i];
 8004f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	441a      	add	r2, r3
 8004f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3e:	7812      	ldrb	r2, [r2, #0]
 8004f40:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004f44:	440b      	add	r3, r1
 8004f46:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 2; i++)
 8004f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d9ea      	bls.n	8004f32 <L76_Lat_Parse+0x26>
	}
	degree[2] = '\0';
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	77bb      	strb	r3, [r7, #30]

	/* Test */
	printf("Lat Degree: %s\r\n", degree);
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	4619      	mov	r1, r3
 8004f66:	4843      	ldr	r0, [pc, #268]	; (8005074 <L76_Lat_Parse+0x168>)
 8004f68:	f005 fc08 	bl	800a77c <iprintf>

	double dTempDeg = atof(degree);
 8004f6c:	f107 031c 	add.w	r3, r7, #28
 8004f70:	4618      	mov	r0, r3
 8004f72:	f004 ff71 	bl	8009e58 <atof>
 8004f76:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minute */
	uint8_t j = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	printf("%s\r\n", sLat);
 8004f80:	68f9      	ldr	r1, [r7, #12]
 8004f82:	483d      	ldr	r0, [pc, #244]	; (8005078 <L76_Lat_Parse+0x16c>)
 8004f84:	f005 fbfa 	bl	800a77c <iprintf>

	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004f8e:	e015      	b.n	8004fbc <L76_Lat_Parse+0xb0>
	{
		minute[j] = sLat[i];
 8004f90:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	441a      	add	r2, r3
 8004f98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f9c:	7812      	ldrb	r2, [r2, #0]
 8004f9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004fa2:	440b      	add	r3, r1
 8004fa4:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 8004fa8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004fac:	3301      	adds	r3, #1
 8004fae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8004fb2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004fbc:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7fb f90d 	bl	80001e0 <strlen>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	d3e0      	bcc.n	8004f90 <L76_Lat_Parse+0x84>
	}
	minute[j] = '\0';
 8004fce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004fd2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004fd6:	4413      	add	r3, r2
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f803 2c28 	strb.w	r2, [r3, #-40]

	printf("Lat Minute: %s\r\n", minute);
 8004fde:	f107 0310 	add.w	r3, r7, #16
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4825      	ldr	r0, [pc, #148]	; (800507c <L76_Lat_Parse+0x170>)
 8004fe6:	f005 fbc9 	bl	800a77c <iprintf>

	double dTempMin = atof(minute);
 8004fea:	f107 0310 	add.w	r3, r7, #16
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 ff32 	bl	8009e58 <atof>
 8004ff4:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form dd.xxxxx */
	if (u8NorS == GPS_NORTH)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d114      	bne.n	8005028 <L76_Lat_Parse+0x11c>
	{
		pL76->dLattitude = dTempDeg + (dTempMin / 60);
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <L76_Lat_Parse+0x174>)
 8005004:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005008:	f7fb fc28 	bl	800085c <__aeabi_ddiv>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005018:	f7fb f940 	bl	800029c <__adddf3>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005026:	e019      	b.n	800505c <L76_Lat_Parse+0x150>
	}
	else if (u8NorS == GPS_SOUTH)
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d116      	bne.n	800505c <L76_Lat_Parse+0x150>
	{
		pL76->dLattitude = -(dTempDeg + (dTempMin / 60));
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <L76_Lat_Parse+0x174>)
 8005034:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005038:	f7fb fc10 	bl	800085c <__aeabi_ddiv>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005048:	f7fb f928 	bl	800029c <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4614      	mov	r4, r2
 8005052:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	e9c3 4502 	strd	r4, r5, [r3, #8]
	else
	{
		/* Unavailable */
		;
	}
	printf("NMEA latitude: %lf\r\n", pL76->dLattitude);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8005062:	461a      	mov	r2, r3
 8005064:	4623      	mov	r3, r4
 8005066:	4807      	ldr	r0, [pc, #28]	; (8005084 <L76_Lat_Parse+0x178>)
 8005068:	f005 fb88 	bl	800a77c <iprintf>

}
 800506c:	bf00      	nop
 800506e:	373c      	adds	r7, #60	; 0x3c
 8005070:	46bd      	mov	sp, r7
 8005072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005074:	0800e5ec 	.word	0x0800e5ec
 8005078:	0800e5e4 	.word	0x0800e5e4
 800507c:	0800e600 	.word	0x0800e600
 8005080:	404e0000 	.word	0x404e0000
 8005084:	0800e614 	.word	0x0800e614

08005088 <L76_Long_Parse>:

static void L76_Long_Parse(char* sLong,
						   L76* pL76,
						   uint8_t u8EorW)
{
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	b08f      	sub	sp, #60	; 0x3c
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]
	char degree[4];
	char minute[10];

	/* Check for NULL pointer */
	if ((sLong == NULL) || (pL76 == NULL))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <L76_Long_Parse+0x1a>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <L76_Long_Parse+0x1e>
	{
		Error_Handler();
 80050a2:	f7fc f9a7 	bl	80013f4 <Error_Handler>
	/* Check the position of the dot to divide degrees and minutes
	 * The Longtitude NMEA form dddmm.mmmm
	 */

	/* 1. Parse the degrees */
	for (uint8_t i = 0; i < 3; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80050ac:	e010      	b.n	80050d0 <L76_Long_Parse+0x48>
	{
		degree[i] = sLong[i];
 80050ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	441a      	add	r2, r3
 80050b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050c0:	440b      	add	r3, r1
 80050c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 3; i++)
 80050c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050ca:	3301      	adds	r3, #1
 80050cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80050d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d9ea      	bls.n	80050ae <L76_Long_Parse+0x26>
	}
	degree[3] = '\0';
 80050d8:	2300      	movs	r3, #0
 80050da:	77fb      	strb	r3, [r7, #31]

	/* Test */
	printf("Long Degree: %s\r\n", degree);
 80050dc:	f107 031c 	add.w	r3, r7, #28
 80050e0:	4619      	mov	r1, r3
 80050e2:	4841      	ldr	r0, [pc, #260]	; (80051e8 <L76_Long_Parse+0x160>)
 80050e4:	f005 fb4a 	bl	800a77c <iprintf>

	double dTempDeg = atof(degree);
 80050e8:	f107 031c 	add.w	r3, r7, #28
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 feb3 	bl	8009e58 <atof>
 80050f2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minutes */
	uint8_t j = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 80050fc:	2303      	movs	r3, #3
 80050fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005102:	e015      	b.n	8005130 <L76_Long_Parse+0xa8>
	{
		minute[j] = sLong[i];
 8005104:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	441a      	add	r2, r3
 800510c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005110:	7812      	ldrb	r2, [r2, #0]
 8005112:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005116:	440b      	add	r3, r1
 8005118:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 800511c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005120:	3301      	adds	r3, #1
 8005122:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 8005126:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800512a:	3301      	adds	r3, #1
 800512c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8005130:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7fb f853 	bl	80001e0 <strlen>
 800513a:	4603      	mov	r3, r0
 800513c:	3b01      	subs	r3, #1
 800513e:	429e      	cmp	r6, r3
 8005140:	d3e0      	bcc.n	8005104 <L76_Long_Parse+0x7c>
	}
	minute[j] = '\0';
 8005142:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005146:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800514a:	4413      	add	r3, r2
 800514c:	2200      	movs	r2, #0
 800514e:	f803 2c28 	strb.w	r2, [r3, #-40]

	/* Test */
	printf("Long minute: %s\r\n", minute);
 8005152:	f107 0310 	add.w	r3, r7, #16
 8005156:	4619      	mov	r1, r3
 8005158:	4824      	ldr	r0, [pc, #144]	; (80051ec <L76_Long_Parse+0x164>)
 800515a:	f005 fb0f 	bl	800a77c <iprintf>

	double dTempMin = atof(minute);
 800515e:	f107 0310 	add.w	r3, r7, #16
 8005162:	4618      	mov	r0, r3
 8005164:	f004 fe78 	bl	8009e58 <atof>
 8005168:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form of ddd.xxxxx */
	if (u8EorW == GPS_EAST)
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d114      	bne.n	800519c <L76_Long_Parse+0x114>
	{
		pL76->dLongtitude = dTempDeg + (dTempMin / 60);
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	4b1e      	ldr	r3, [pc, #120]	; (80051f0 <L76_Long_Parse+0x168>)
 8005178:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800517c:	f7fb fb6e 	bl	800085c <__aeabi_ddiv>
 8005180:	4603      	mov	r3, r0
 8005182:	460c      	mov	r4, r1
 8005184:	4618      	mov	r0, r3
 8005186:	4621      	mov	r1, r4
 8005188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800518c:	f7fb f886 	bl	800029c <__adddf3>
 8005190:	4603      	mov	r3, r0
 8005192:	460c      	mov	r4, r1
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	e9c2 3400 	strd	r3, r4, [r2]
 800519a:	e019      	b.n	80051d0 <L76_Long_Parse+0x148>
	}
	else if (u8EorW == GPS_WEST)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d116      	bne.n	80051d0 <L76_Long_Parse+0x148>
	{
		pL76->dLongtitude = -(dTempDeg + (dTempMin / 60));
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <L76_Long_Parse+0x168>)
 80051a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80051ac:	f7fb fb56 	bl	800085c <__aeabi_ddiv>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051bc:	f7fb f86e 	bl	800029c <__adddf3>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	e9c3 4500 	strd	r4, r5, [r3]
		/* Unavailable */
		;
	}

	/* Test */
	printf("NMEA longtitude: %lf\r\n", pL76->dLongtitude);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051d6:	461a      	mov	r2, r3
 80051d8:	4623      	mov	r3, r4
 80051da:	4806      	ldr	r0, [pc, #24]	; (80051f4 <L76_Long_Parse+0x16c>)
 80051dc:	f005 face 	bl	800a77c <iprintf>

}
 80051e0:	bf00      	nop
 80051e2:	373c      	adds	r7, #60	; 0x3c
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e8:	0800e62c 	.word	0x0800e62c
 80051ec:	0800e640 	.word	0x0800e640
 80051f0:	404e0000 	.word	0x404e0000
 80051f4:	0800e654 	.word	0x0800e654

080051f8 <L76_Time_Parse>:

static void L76_Time_Parse(char* sUtcTime,
						   L76* pL76)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	/* Check for NULL pointer */
	if ((sUtcTime == NULL) || (pL76 == NULL))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <L76_Time_Parse+0x16>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <L76_Time_Parse+0x1a>
	{
		Error_Handler();
 800520e:	f7fc f8f1 	bl	80013f4 <Error_Handler>
	}

	uint32_t dTime = (uint32_t)atof(sUtcTime);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f004 fe20 	bl	8009e58 <atof>
 8005218:	ec54 3b10 	vmov	r3, r4, d0
 800521c:	4618      	mov	r0, r3
 800521e:	4621      	mov	r1, r4
 8005220:	f7fb fcca 	bl	8000bb8 <__aeabi_d2uiz>
 8005224:	4603      	mov	r3, r0
 8005226:	60fb      	str	r3, [r7, #12]

	/* 1. Get the seconds */
	pL76->u8Second = (uint8_t) (dTime % 100);
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4b19      	ldr	r3, [pc, #100]	; (8005290 <L76_Time_Parse+0x98>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	; 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	b2da      	uxtb	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	755a      	strb	r2, [r3, #21]

	/* 2. Get the minutes */
	pL76->u8Minute = (uint8_t) ((dTime / 100) % 100);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <L76_Time_Parse+0x98>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095a      	lsrs	r2, r3, #5
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <L76_Time_Parse+0x98>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	b2da      	uxtb	r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	751a      	strb	r2, [r3, #20]

	/* 3. Get the hour */
	pL76->u8Hour = (uint8_t) (dTime / 10000);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a0c      	ldr	r2, [pc, #48]	; (8005294 <L76_Time_Parse+0x9c>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	0b5b      	lsrs	r3, r3, #13
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	74da      	strb	r2, [r3, #19]

	/* Test */
	printf("UTC TIME: %d:%d:%d\r\n", pL76->u8Hour, pL76->u8Minute, pL76->u8Second);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	7cdb      	ldrb	r3, [r3, #19]
 8005274:	4619      	mov	r1, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	7d1b      	ldrb	r3, [r3, #20]
 800527a:	461a      	mov	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	7d5b      	ldrb	r3, [r3, #21]
 8005280:	4805      	ldr	r0, [pc, #20]	; (8005298 <L76_Time_Parse+0xa0>)
 8005282:	f005 fa7b 	bl	800a77c <iprintf>
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bd90      	pop	{r4, r7, pc}
 800528e:	bf00      	nop
 8005290:	51eb851f 	.word	0x51eb851f
 8005294:	d1b71759 	.word	0xd1b71759
 8005298:	0800e66c 	.word	0x0800e66c

0800529c <L76_Date_Parse>:

static void L76_Date_Parse(char* sRmcDate,
						   L76* pL76Handle)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	/* Check for NULL pointers */
	if ((sRmcDate == NULL) || (pL76Handle == NULL))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <L76_Date_Parse+0x16>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <L76_Date_Parse+0x1a>
	{
		Error_Handler();
 80052b2:	f7fc f89f 	bl	80013f4 <Error_Handler>
	}

	uint32_t dDate = (uint32_t)atof(sRmcDate);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f004 fdce 	bl	8009e58 <atof>
 80052bc:	ec54 3b10 	vmov	r3, r4, d0
 80052c0:	4618      	mov	r0, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	f7fb fc78 	bl	8000bb8 <__aeabi_d2uiz>
 80052c8:	4603      	mov	r3, r0
 80052ca:	60fb      	str	r3, [r7, #12]

	/* 1. Get the day */
	pL76Handle->u8Day = (uint8_t) (dDate / 10000);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <L76_Date_Parse+0x98>)
 80052d0:	fba2 2303 	umull	r2, r3, r2, r3
 80052d4:	0b5b      	lsrs	r3, r3, #13
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	741a      	strb	r2, [r3, #16]

	/* 2. Get the month */
	pL76Handle->u8Month = (uint8_t) ((dDate / 100) % 100);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <L76_Date_Parse+0x9c>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	095a      	lsrs	r2, r3, #5
 80052e6:	4b14      	ldr	r3, [pc, #80]	; (8005338 <L76_Date_Parse+0x9c>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	2164      	movs	r1, #100	; 0x64
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	745a      	strb	r2, [r3, #17]

	/* 3. Get the year */
	pL76Handle->u8Year = (uint8_t)(dDate % 100);
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <L76_Date_Parse+0x9c>)
 8005300:	fba3 1302 	umull	r1, r3, r3, r2
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	2164      	movs	r1, #100	; 0x64
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	b2da      	uxtb	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	749a      	strb	r2, [r3, #18]

	/* Test */
	printf("Date: %d/%d/%d \r\n", pL76Handle->u8Day, pL76Handle->u8Month, pL76Handle->u8Year);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	7c1b      	ldrb	r3, [r3, #16]
 8005318:	4619      	mov	r1, r3
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	7c5b      	ldrb	r3, [r3, #17]
 800531e:	461a      	mov	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	7c9b      	ldrb	r3, [r3, #18]
 8005324:	4805      	ldr	r0, [pc, #20]	; (800533c <L76_Date_Parse+0xa0>)
 8005326:	f005 fa29 	bl	800a77c <iprintf>

}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bd90      	pop	{r4, r7, pc}
 8005332:	bf00      	nop
 8005334:	d1b71759 	.word	0xd1b71759
 8005338:	51eb851f 	.word	0x51eb851f
 800533c:	0800e684 	.word	0x0800e684

08005340 <gps_power_EnOrDi>:

void gps_power_EnOrDi(uint8_t u8EnOrDi)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]

	if (u8EnOrDi == ENABLE)
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <gps_power_EnOrDi+0x1c>
	{
		/* Enable the power of the GPS module */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005350:	2201      	movs	r2, #1
 8005352:	2110      	movs	r1, #16
 8005354:	4806      	ldr	r0, [pc, #24]	; (8005370 <gps_power_EnOrDi+0x30>)
 8005356:	f000 fe3f 	bl	8005fd8 <HAL_GPIO_WritePin>
	else
	{
		/* Disable the power of the GPS module */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 800535a:	e004      	b.n	8005366 <gps_power_EnOrDi+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800535c:	2200      	movs	r2, #0
 800535e:	2110      	movs	r1, #16
 8005360:	4803      	ldr	r0, [pc, #12]	; (8005370 <gps_power_EnOrDi+0x30>)
 8005362:	f000 fe39 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40020000 	.word	0x40020000

08005374 <SC7A20_Init>:
extern void Error_Handler(void);

extern I2C_HandleTypeDef hi2c1;

uint8_t SC7A20_Init()
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
	/* 1. Turn on the sensor with ODR = 400Hz normal mode*/
	SC7A20_write(SC7A20_CR1_NORMAL_400HZ_EN, SC7A20_ADDR_CTRL_REG1);
 8005378:	2120      	movs	r1, #32
 800537a:	2073      	movs	r0, #115	; 0x73
 800537c:	f000 f828 	bl	80053d0 <SC7A20_write>

	/* 2. Enable AOI1 Interrupt SIGNAL in INT1*/
	SC7A20_write(SC7A20_CR3_ENABLE_AOI_INT1, SC7A20_ADDR_CTRL_REG3);
 8005380:	2122      	movs	r1, #34	; 0x22
 8005382:	2040      	movs	r0, #64	; 0x40
 8005384:	f000 f824 	bl	80053d0 <SC7A20_write>

	/* 3. Enable Reset after Interrupt event and filter used*/
	SC7A20_write(SC7A20_CR2_INT_RST_FILTER, SC7A20_ADDR_CTRL_REG2);
 8005388:	2121      	movs	r1, #33	; 0x21
 800538a:	2000      	movs	r0, #0
 800538c:	f000 f820 	bl	80053d0 <SC7A20_write>

	/* 4. Detection */
	SC7A20_write(SC7A20_CR5_4D_DISABLE, SC7A20_ADDR_CTRL_REG5);
 8005390:	2124      	movs	r1, #36	; 0x24
 8005392:	2000      	movs	r0, #0
 8005394:	f000 f81c 	bl	80053d0 <SC7A20_write>

	/* 5. Enable 16G range of the SC7A20*/
	SC7A20_write(SC7A20_CR4_2G, SC7A20_ADDR_CTRL_REG4);
 8005398:	2123      	movs	r1, #35	; 0x23
 800539a:	2038      	movs	r0, #56	; 0x38
 800539c:	f000 f818 	bl	80053d0 <SC7A20_write>

	/* 6. Enable Interrupt 1 for Motion detection*/
	SC7A20_write(SC7A20_INT1_MOTION_DETECT, SC7A20_ADDR_INT1_CFG);
 80053a0:	2130      	movs	r1, #48	; 0x30
 80053a2:	200a      	movs	r0, #10
 80053a4:	f000 f814 	bl	80053d0 <SC7A20_write>

	/* 7. Set motion detection Threshold */
	SC7A20_setMotionTHS(SC7A20_INT_THRESHOLD);
 80053a8:	2010      	movs	r0, #16
 80053aa:	f000 f84f 	bl	800544c <SC7A20_setMotionTHS>

	/* 8. Set duration of INT1 to 10*/
	SC7A20_setInt1Duration(SC7A20_DURATION);
 80053ae:	2001      	movs	r0, #1
 80053b0:	f000 f85a 	bl	8005468 <SC7A20_setInt1Duration>

	/* 9. Read back the data from CTRL1, if the data is successfully writen, the initialization is successful*/
	if (SC7A20_read(SC7A20_ADDR_CTRL_REG1) == SC7A20_CR1_NORMAL_400HZ_EN)
 80053b4:	2020      	movs	r0, #32
 80053b6:	f000 f827 	bl	8005408 <SC7A20_read>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b73      	cmp	r3, #115	; 0x73
 80053be:	d104      	bne.n	80053ca <SC7A20_Init+0x56>
	{
		return SC7A20_read(SC7A20_ADDR_CTRL_REG1);
 80053c0:	2020      	movs	r0, #32
 80053c2:	f000 f821 	bl	8005408 <SC7A20_read>
 80053c6:	4603      	mov	r3, r0
 80053c8:	e000      	b.n	80053cc <SC7A20_Init+0x58>
	}else
	{
		return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
	}

}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SC7A20_write>:

}

static void SC7A20_write(uint8_t u8Value,
						 uint8_t u8RegAddress)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	4603      	mov	r3, r0
 80053d8:	460a      	mov	r2, r1
 80053da:	71fb      	strb	r3, [r7, #7]
 80053dc:	4613      	mov	r3, r2
 80053de:	71bb      	strb	r3, [r7, #6]
	/* Write the address of the register and then write the data */
	uint8_t u8Tx[2];
	u8Tx[0] = u8RegAddress;
 80053e0:	79bb      	ldrb	r3, [r7, #6]
 80053e2:	733b      	strb	r3, [r7, #12]
	u8Tx[1] = u8Value;
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, u8Tx, 2, HAL_MAX_DELAY);
 80053e8:	f107 020c 	add.w	r2, r7, #12
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2302      	movs	r3, #2
 80053f4:	2130      	movs	r1, #48	; 0x30
 80053f6:	4803      	ldr	r0, [pc, #12]	; (8005404 <SC7A20_write+0x34>)
 80053f8:	f000 ff58 	bl	80062ac <HAL_I2C_Master_Transmit>
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20001488 	.word	0x20001488

08005408 <SC7A20_read>:

uint8_t SC7A20_read(uint8_t u8RegAddress)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Data = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]

	/* 1. First send the address of the register we want to read*/
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8RegAddress, 1, HAL_MAX_DELAY);
 8005416:	1dfa      	adds	r2, r7, #7
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	2301      	movs	r3, #1
 8005420:	2130      	movs	r1, #48	; 0x30
 8005422:	4809      	ldr	r0, [pc, #36]	; (8005448 <SC7A20_read+0x40>)
 8005424:	f000 ff42 	bl	80062ac <HAL_I2C_Master_Transmit>

	/* 2. Receive the data of the register we want to read*/
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8Data, 1, HAL_MAX_DELAY);
 8005428:	f107 020f 	add.w	r2, r7, #15
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2301      	movs	r3, #1
 8005434:	2130      	movs	r1, #48	; 0x30
 8005436:	4804      	ldr	r0, [pc, #16]	; (8005448 <SC7A20_read+0x40>)
 8005438:	f001 f836 	bl	80064a8 <HAL_I2C_Master_Receive>

	return u8Data;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20001488 	.word	0x20001488

0800544c <SC7A20_setMotionTHS>:

static void SC7A20_setMotionTHS(uint8_t u8Threshold)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Threshold, SC7A20_ADDR_INT1_THS);
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2132      	movs	r1, #50	; 0x32
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff ffb8 	bl	80053d0 <SC7A20_write>
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <SC7A20_setInt1Duration>:

static void SC7A20_setInt1Duration(uint8_t u8Time)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Time, SC7A20_ADDR_INT1_DURATION);
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	2133      	movs	r1, #51	; 0x33
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff ffaa 	bl	80053d0 <SC7A20_write>
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005488:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <HAL_Init+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <HAL_Init+0x40>)
 800548e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_Init+0x40>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <HAL_Init+0x40>)
 800549a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_Init+0x40>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <HAL_Init+0x40>)
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ac:	2003      	movs	r0, #3
 80054ae:	f000 f96d 	bl	800578c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054b2:	2000      	movs	r0, #0
 80054b4:	f000 f808 	bl	80054c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054b8:	f7fb ffa4 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023c00 	.word	0x40023c00

080054c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_InitTick+0x54>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <HAL_InitTick+0x58>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4619      	mov	r1, r3
 80054da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054de:	fbb3 f3f1 	udiv	r3, r3, r1
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 f985 	bl	80057f6 <HAL_SYSTICK_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e00e      	b.n	8005514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d80a      	bhi.n	8005512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054fc:	2200      	movs	r2, #0
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	f000 f94d 	bl	80057a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005508:	4a06      	ldr	r2, [pc, #24]	; (8005524 <HAL_InitTick+0x5c>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000000 	.word	0x20000000
 8005520:	20000008 	.word	0x20000008
 8005524:	20000004 	.word	0x20000004

08005528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_IncTick+0x20>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	4b06      	ldr	r3, [pc, #24]	; (800554c <HAL_IncTick+0x24>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4413      	add	r3, r2
 8005538:	4a04      	ldr	r2, [pc, #16]	; (800554c <HAL_IncTick+0x24>)
 800553a:	6013      	str	r3, [r2, #0]
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000008 	.word	0x20000008
 800554c:	200015e8 	.word	0x200015e8

08005550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return uwTick;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <HAL_GetTick+0x14>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	200015e8 	.word	0x200015e8

08005568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005570:	f7ff ffee 	bl	8005550 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d005      	beq.n	800558e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <HAL_Delay+0x40>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800558e:	bf00      	nop
 8005590:	f7ff ffde 	bl	8005550 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	429a      	cmp	r2, r3
 800559e:	d8f7      	bhi.n	8005590 <HAL_Delay+0x28>
  {
  }
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000008 	.word	0x20000008

080055ac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_SuspendTick+0x1c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_SuspendTick+0x1c>)
 80055b6:	f023 0302 	bic.w	r3, r3, #2
 80055ba:	6013      	str	r3, [r2, #0]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	e000e010 	.word	0xe000e010

080055cc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <HAL_ResumeTick+0x1c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <HAL_ResumeTick+0x1c>)
 80055d6:	f043 0302 	orr.w	r3, r3, #2
 80055da:	6013      	str	r3, [r2, #0]
}
 80055dc:	bf00      	nop
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e010 	.word	0xe000e010

080055ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055fc:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <__NVIC_SetPriorityGrouping+0x44>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005608:	4013      	ands	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800561e:	4a04      	ldr	r2, [pc, #16]	; (8005630 <__NVIC_SetPriorityGrouping+0x44>)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	60d3      	str	r3, [r2, #12]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005638:	4b04      	ldr	r3, [pc, #16]	; (800564c <__NVIC_GetPriorityGrouping+0x18>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	f003 0307 	and.w	r3, r3, #7
}
 8005642:	4618      	mov	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	2b00      	cmp	r3, #0
 8005660:	db0b      	blt.n	800567a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	f003 021f 	and.w	r2, r3, #31
 8005668:	4907      	ldr	r1, [pc, #28]	; (8005688 <__NVIC_EnableIRQ+0x38>)
 800566a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	2001      	movs	r0, #1
 8005672:	fa00 f202 	lsl.w	r2, r0, r2
 8005676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	e000e100 	.word	0xe000e100

0800568c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	6039      	str	r1, [r7, #0]
 8005696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569c:	2b00      	cmp	r3, #0
 800569e:	db0a      	blt.n	80056b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	490c      	ldr	r1, [pc, #48]	; (80056d8 <__NVIC_SetPriority+0x4c>)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	0112      	lsls	r2, r2, #4
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	440b      	add	r3, r1
 80056b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056b4:	e00a      	b.n	80056cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	4908      	ldr	r1, [pc, #32]	; (80056dc <__NVIC_SetPriority+0x50>)
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	3b04      	subs	r3, #4
 80056c4:	0112      	lsls	r2, r2, #4
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	440b      	add	r3, r1
 80056ca:	761a      	strb	r2, [r3, #24]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	e000e100 	.word	0xe000e100
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b089      	sub	sp, #36	; 0x24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f1c3 0307 	rsb	r3, r3, #7
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	bf28      	it	cs
 80056fe:	2304      	movcs	r3, #4
 8005700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3304      	adds	r3, #4
 8005706:	2b06      	cmp	r3, #6
 8005708:	d902      	bls.n	8005710 <NVIC_EncodePriority+0x30>
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3b03      	subs	r3, #3
 800570e:	e000      	b.n	8005712 <NVIC_EncodePriority+0x32>
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005714:	f04f 32ff 	mov.w	r2, #4294967295
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43da      	mvns	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	401a      	ands	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005728:	f04f 31ff 	mov.w	r1, #4294967295
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	43d9      	mvns	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005738:	4313      	orrs	r3, r2
         );
}
 800573a:	4618      	mov	r0, r3
 800573c:	3724      	adds	r7, #36	; 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3b01      	subs	r3, #1
 8005754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005758:	d301      	bcc.n	800575e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800575a:	2301      	movs	r3, #1
 800575c:	e00f      	b.n	800577e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800575e:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <SysTick_Config+0x40>)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3b01      	subs	r3, #1
 8005764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005766:	210f      	movs	r1, #15
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	f7ff ff8e 	bl	800568c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <SysTick_Config+0x40>)
 8005772:	2200      	movs	r2, #0
 8005774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005776:	4b04      	ldr	r3, [pc, #16]	; (8005788 <SysTick_Config+0x40>)
 8005778:	2207      	movs	r2, #7
 800577a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	e000e010 	.word	0xe000e010

0800578c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff ff29 	bl	80055ec <__NVIC_SetPriorityGrouping>
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	4603      	mov	r3, r0
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
 80057ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057b4:	f7ff ff3e 	bl	8005634 <__NVIC_GetPriorityGrouping>
 80057b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	6978      	ldr	r0, [r7, #20]
 80057c0:	f7ff ff8e 	bl	80056e0 <NVIC_EncodePriority>
 80057c4:	4602      	mov	r2, r0
 80057c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ca:	4611      	mov	r1, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ff5d 	bl	800568c <__NVIC_SetPriority>
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	4603      	mov	r3, r0
 80057e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ff31 	bl	8005650 <__NVIC_EnableIRQ>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff ffa2 	bl	8005748 <SysTick_Config>
 8005804:	4603      	mov	r3, r0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800581c:	f7ff fe98 	bl	8005550 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e099      	b.n	8005960 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800584c:	e00f      	b.n	800586e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800584e:	f7ff fe7f 	bl	8005550 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b05      	cmp	r3, #5
 800585a:	d908      	bls.n	800586e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2203      	movs	r2, #3
 8005866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e078      	b.n	8005960 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e8      	bne.n	800584e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4b38      	ldr	r3, [pc, #224]	; (8005968 <HAL_DMA_Init+0x158>)
 8005888:	4013      	ands	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800589a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d107      	bne.n	80058d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	4313      	orrs	r3, r2
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0307 	bic.w	r3, r3, #7
 80058ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d117      	bne.n	8005932 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f881 	bl	8005a1c <DMA_CheckFifoParam>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2240      	movs	r2, #64	; 0x40
 8005924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800592e:	2301      	movs	r3, #1
 8005930:	e016      	b.n	8005960 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f838 	bl	80059b0 <DMA_CalcBaseAndBitshift>
 8005940:	4603      	mov	r3, r0
 8005942:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005948:	223f      	movs	r2, #63	; 0x3f
 800594a:	409a      	lsls	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	f010803f 	.word	0xf010803f

0800596c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d004      	beq.n	800598a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2280      	movs	r2, #128	; 0x80
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e00c      	b.n	80059a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2205      	movs	r2, #5
 800598e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0201 	bic.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	3b10      	subs	r3, #16
 80059c0:	4a14      	ldr	r2, [pc, #80]	; (8005a14 <DMA_CalcBaseAndBitshift+0x64>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059ca:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <DMA_CalcBaseAndBitshift+0x68>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d909      	bls.n	80059f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	659a      	str	r2, [r3, #88]	; 0x58
 80059f0:	e007      	b.n	8005a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	aaaaaaab 	.word	0xaaaaaaab
 8005a18:	0800e90c 	.word	0x0800e90c

08005a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11f      	bne.n	8005a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d855      	bhi.n	8005ae8 <DMA_CheckFifoParam+0xcc>
 8005a3c:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <DMA_CheckFifoParam+0x28>)
 8005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a42:	bf00      	nop
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a67 	.word	0x08005a67
 8005a4c:	08005a55 	.word	0x08005a55
 8005a50:	08005ae9 	.word	0x08005ae9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d045      	beq.n	8005aec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a64:	e042      	b.n	8005aec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a6e:	d13f      	bne.n	8005af0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a74:	e03c      	b.n	8005af0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	d121      	bne.n	8005ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d836      	bhi.n	8005af4 <DMA_CheckFifoParam+0xd8>
 8005a86:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <DMA_CheckFifoParam+0x70>)
 8005a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aa3 	.word	0x08005aa3
 8005a94:	08005a9d 	.word	0x08005a9d
 8005a98:	08005ab5 	.word	0x08005ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa0:	e02f      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d024      	beq.n	8005af8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab2:	e021      	b.n	8005af8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005abc:	d11e      	bne.n	8005afc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ac2:	e01b      	b.n	8005afc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d902      	bls.n	8005ad0 <DMA_CheckFifoParam+0xb4>
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d003      	beq.n	8005ad6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ace:	e018      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad4:	e015      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00e      	beq.n	8005b00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae6:	e00b      	b.n	8005b00 <DMA_CheckFifoParam+0xe4>
      break;
 8005ae8:	bf00      	nop
 8005aea:	e00a      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      break;
 8005aec:	bf00      	nop
 8005aee:	e008      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      break;
 8005af0:	bf00      	nop
 8005af2:	e006      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      break;
 8005af4:	bf00      	nop
 8005af6:	e004      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      break;
 8005af8:	bf00      	nop
 8005afa:	e002      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      break;   
 8005afc:	bf00      	nop
 8005afe:	e000      	b.n	8005b02 <DMA_CheckFifoParam+0xe6>
      break;
 8005b00:	bf00      	nop
    }
  } 
  
  return status; 
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	e159      	b.n	8005de0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	f040 8148 	bne.w	8005dda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d00b      	beq.n	8005b6a <HAL_GPIO_Init+0x5a>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d007      	beq.n	8005b6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b5e:	2b11      	cmp	r3, #17
 8005b60:	d003      	beq.n	8005b6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b12      	cmp	r3, #18
 8005b68:	d130      	bne.n	8005bcc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	2203      	movs	r2, #3
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 0201 	and.w	r2, r3, #1
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d003      	beq.n	8005c0c <HAL_GPIO_Init+0xfc>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b12      	cmp	r3, #18
 8005c0a:	d123      	bne.n	8005c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	08da      	lsrs	r2, r3, #3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3208      	adds	r2, #8
 8005c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	220f      	movs	r2, #15
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	08da      	lsrs	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3208      	adds	r2, #8
 8005c4e:	69b9      	ldr	r1, [r7, #24]
 8005c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	2203      	movs	r2, #3
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0203 	and.w	r2, r3, #3
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a2 	beq.w	8005dda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <HAL_GPIO_Init+0x2e4>)
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	4a55      	ldr	r2, [pc, #340]	; (8005df4 <HAL_GPIO_Init+0x2e4>)
 8005ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ca6:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <HAL_GPIO_Init+0x2e4>)
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cb2:	4a51      	ldr	r2, [pc, #324]	; (8005df8 <HAL_GPIO_Init+0x2e8>)
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	089b      	lsrs	r3, r3, #2
 8005cb8:	3302      	adds	r3, #2
 8005cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	220f      	movs	r2, #15
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a48      	ldr	r2, [pc, #288]	; (8005dfc <HAL_GPIO_Init+0x2ec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d019      	beq.n	8005d12 <HAL_GPIO_Init+0x202>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a47      	ldr	r2, [pc, #284]	; (8005e00 <HAL_GPIO_Init+0x2f0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_GPIO_Init+0x1fe>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a46      	ldr	r2, [pc, #280]	; (8005e04 <HAL_GPIO_Init+0x2f4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00d      	beq.n	8005d0a <HAL_GPIO_Init+0x1fa>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a45      	ldr	r2, [pc, #276]	; (8005e08 <HAL_GPIO_Init+0x2f8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <HAL_GPIO_Init+0x1f6>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <HAL_GPIO_Init+0x2fc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d101      	bne.n	8005d02 <HAL_GPIO_Init+0x1f2>
 8005cfe:	2304      	movs	r3, #4
 8005d00:	e008      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d02:	2307      	movs	r3, #7
 8005d04:	e006      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d06:	2303      	movs	r3, #3
 8005d08:	e004      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e002      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d12:	2300      	movs	r3, #0
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	f002 0203 	and.w	r2, r2, #3
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	4093      	lsls	r3, r2
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d24:	4934      	ldr	r1, [pc, #208]	; (8005df8 <HAL_GPIO_Init+0x2e8>)
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d32:	4b37      	ldr	r3, [pc, #220]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d56:	4a2e      	ldr	r2, [pc, #184]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d5c:	4b2c      	ldr	r3, [pc, #176]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d80:	4a23      	ldr	r2, [pc, #140]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d86:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005daa:	4a19      	ldr	r2, [pc, #100]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dd4:	4a0e      	ldr	r2, [pc, #56]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	f67f aea2 	bls.w	8005b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005de8:	bf00      	nop
 8005dea:	3724      	adds	r7, #36	; 0x24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40013800 	.word	0x40013800
 8005dfc:	40020000 	.word	0x40020000
 8005e00:	40020400 	.word	0x40020400
 8005e04:	40020800 	.word	0x40020800
 8005e08:	40020c00 	.word	0x40020c00
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	40013c00 	.word	0x40013c00

08005e14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e0bb      	b.n	8005fa8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e30:	2201      	movs	r2, #1
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e3a:	683a      	ldr	r2, [r7, #0]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	f040 80ab 	bne.w	8005fa2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005e4c:	4a5b      	ldr	r2, [pc, #364]	; (8005fbc <HAL_GPIO_DeInit+0x1a8>)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	089b      	lsrs	r3, r3, #2
 8005e52:	3302      	adds	r3, #2
 8005e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	220f      	movs	r2, #15
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a53      	ldr	r2, [pc, #332]	; (8005fc0 <HAL_GPIO_DeInit+0x1ac>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d019      	beq.n	8005eaa <HAL_GPIO_DeInit+0x96>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a52      	ldr	r2, [pc, #328]	; (8005fc4 <HAL_GPIO_DeInit+0x1b0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_GPIO_DeInit+0x92>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a51      	ldr	r2, [pc, #324]	; (8005fc8 <HAL_GPIO_DeInit+0x1b4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00d      	beq.n	8005ea2 <HAL_GPIO_DeInit+0x8e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a50      	ldr	r2, [pc, #320]	; (8005fcc <HAL_GPIO_DeInit+0x1b8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <HAL_GPIO_DeInit+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a4f      	ldr	r2, [pc, #316]	; (8005fd0 <HAL_GPIO_DeInit+0x1bc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_GPIO_DeInit+0x86>
 8005e96:	2304      	movs	r3, #4
 8005e98:	e008      	b.n	8005eac <HAL_GPIO_DeInit+0x98>
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	e006      	b.n	8005eac <HAL_GPIO_DeInit+0x98>
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e004      	b.n	8005eac <HAL_GPIO_DeInit+0x98>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e002      	b.n	8005eac <HAL_GPIO_DeInit+0x98>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_GPIO_DeInit+0x98>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	f002 0203 	and.w	r2, r2, #3
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	4093      	lsls	r3, r2
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d132      	bne.n	8005f22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005ebc:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	4943      	ldr	r1, [pc, #268]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005eca:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	4940      	ldr	r1, [pc, #256]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ed8:	4b3e      	ldr	r3, [pc, #248]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	493c      	ldr	r1, [pc, #240]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ee6:	4b3b      	ldr	r3, [pc, #236]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	43db      	mvns	r3, r3
 8005eee:	4939      	ldr	r1, [pc, #228]	; (8005fd4 <HAL_GPIO_DeInit+0x1c0>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	220f      	movs	r2, #15
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005f04:	4a2d      	ldr	r2, [pc, #180]	; (8005fbc <HAL_GPIO_DeInit+0x1a8>)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	089b      	lsrs	r3, r3, #2
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	43da      	mvns	r2, r3
 8005f14:	4829      	ldr	r0, [pc, #164]	; (8005fbc <HAL_GPIO_DeInit+0x1a8>)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	089b      	lsrs	r3, r3, #2
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	2103      	movs	r1, #3
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	43db      	mvns	r3, r3
 8005f32:	401a      	ands	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	08da      	lsrs	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3208      	adds	r2, #8
 8005f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	08d2      	lsrs	r2, r2, #3
 8005f58:	4019      	ands	r1, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3208      	adds	r2, #8
 8005f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	2103      	movs	r1, #3
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	fa01 f303 	lsl.w	r3, r1, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	401a      	ands	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	2103      	movs	r1, #3
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	43db      	mvns	r3, r3
 8005f9c:	401a      	ands	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	f67f af40 	bls.w	8005e30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40013800 	.word	0x40013800
 8005fc0:	40020000 	.word	0x40020000
 8005fc4:	40020400 	.word	0x40020400
 8005fc8:	40020800 	.word	0x40020800
 8005fcc:	40020c00 	.word	0x40020c00
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40013c00 	.word	0x40013c00

08005fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe8:	787b      	ldrb	r3, [r7, #1]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ff4:	e003      	b.n	8005ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	041a      	lsls	r2, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	619a      	str	r2, [r3, #24]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006016:	4b08      	ldr	r3, [pc, #32]	; (8006038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006022:	4a05      	ldr	r2, [pc, #20]	; (8006038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	4618      	mov	r0, r3
 800602c:	f7fd faf4 	bl	8003618 <HAL_GPIO_EXTI_Callback>
  }
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	40013c00 	.word	0x40013c00

0800603c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e11f      	b.n	800628e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fb f9f6 	bl	8001454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800608e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800609e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060a0:	f001 fb96 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a7b      	ldr	r2, [pc, #492]	; (8006298 <HAL_I2C_Init+0x25c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d807      	bhi.n	80060c0 <HAL_I2C_Init+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a7a      	ldr	r2, [pc, #488]	; (800629c <HAL_I2C_Init+0x260>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bf94      	ite	ls
 80060b8:	2301      	movls	r3, #1
 80060ba:	2300      	movhi	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e006      	b.n	80060ce <HAL_I2C_Init+0x92>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a77      	ldr	r2, [pc, #476]	; (80062a0 <HAL_I2C_Init+0x264>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bf94      	ite	ls
 80060c8:	2301      	movls	r3, #1
 80060ca:	2300      	movhi	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0db      	b.n	800628e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a72      	ldr	r2, [pc, #456]	; (80062a4 <HAL_I2C_Init+0x268>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	0c9b      	lsrs	r3, r3, #18
 80060e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a64      	ldr	r2, [pc, #400]	; (8006298 <HAL_I2C_Init+0x25c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d802      	bhi.n	8006110 <HAL_I2C_Init+0xd4>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3301      	adds	r3, #1
 800610e:	e009      	b.n	8006124 <HAL_I2C_Init+0xe8>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	4a63      	ldr	r2, [pc, #396]	; (80062a8 <HAL_I2C_Init+0x26c>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	099b      	lsrs	r3, r3, #6
 8006122:	3301      	adds	r3, #1
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	430b      	orrs	r3, r1
 800612a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	4956      	ldr	r1, [pc, #344]	; (8006298 <HAL_I2C_Init+0x25c>)
 8006140:	428b      	cmp	r3, r1
 8006142:	d80d      	bhi.n	8006160 <HAL_I2C_Init+0x124>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1e59      	subs	r1, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006152:	3301      	adds	r3, #1
 8006154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006158:	2b04      	cmp	r3, #4
 800615a:	bf38      	it	cc
 800615c:	2304      	movcc	r3, #4
 800615e:	e04f      	b.n	8006200 <HAL_I2C_Init+0x1c4>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d111      	bne.n	800618c <HAL_I2C_Init+0x150>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1e58      	subs	r0, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6859      	ldr	r1, [r3, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	440b      	add	r3, r1
 8006176:	fbb0 f3f3 	udiv	r3, r0, r3
 800617a:	3301      	adds	r3, #1
 800617c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006180:	2b00      	cmp	r3, #0
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	e012      	b.n	80061b2 <HAL_I2C_Init+0x176>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1e58      	subs	r0, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	0099      	lsls	r1, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	fbb0 f3f3 	udiv	r3, r0, r3
 80061a2:	3301      	adds	r3, #1
 80061a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_I2C_Init+0x17e>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e022      	b.n	8006200 <HAL_I2C_Init+0x1c4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10e      	bne.n	80061e0 <HAL_I2C_Init+0x1a4>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1e58      	subs	r0, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	440b      	add	r3, r1
 80061d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80061d4:	3301      	adds	r3, #1
 80061d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061de:	e00f      	b.n	8006200 <HAL_I2C_Init+0x1c4>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1e58      	subs	r0, r3, #1
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6859      	ldr	r1, [r3, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	0099      	lsls	r1, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80061f6:	3301      	adds	r3, #1
 80061f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	6809      	ldr	r1, [r1, #0]
 8006204:	4313      	orrs	r3, r2
 8006206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800622e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6911      	ldr	r1, [r2, #16]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68d2      	ldr	r2, [r2, #12]
 800623a:	4311      	orrs	r1, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6812      	ldr	r2, [r2, #0]
 8006240:	430b      	orrs	r3, r1
 8006242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	000186a0 	.word	0x000186a0
 800629c:	001e847f 	.word	0x001e847f
 80062a0:	003d08ff 	.word	0x003d08ff
 80062a4:	431bde83 	.word	0x431bde83
 80062a8:	10624dd3 	.word	0x10624dd3

080062ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	461a      	mov	r2, r3
 80062b8:	460b      	mov	r3, r1
 80062ba:	817b      	strh	r3, [r7, #10]
 80062bc:	4613      	mov	r3, r2
 80062be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062c0:	f7ff f946 	bl	8005550 <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 80e0 	bne.w	8006494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	2319      	movs	r3, #25
 80062da:	2201      	movs	r2, #1
 80062dc:	4970      	ldr	r1, [pc, #448]	; (80064a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fc58 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0d3      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_I2C_Master_Transmit+0x50>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e0cc      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b01      	cmp	r3, #1
 8006310:	d007      	beq.n	8006322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f042 0201 	orr.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2221      	movs	r2, #33	; 0x21
 8006336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2210      	movs	r2, #16
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	893a      	ldrh	r2, [r7, #8]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a50      	ldr	r2, [pc, #320]	; (80064a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006364:	8979      	ldrh	r1, [r7, #10]
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fac2 	bl	80068f4 <I2C_MasterRequestWrite>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e08d      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006390:	e066      	b.n	8006460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	6a39      	ldr	r1, [r7, #32]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fcd2 	bl	8006d40 <I2C_WaitOnTXEFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d107      	bne.n	80063ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e06b      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d11b      	bne.n	8006434 <HAL_I2C_Master_Transmit+0x188>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	6a39      	ldr	r1, [r7, #32]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fcc2 	bl	8006dc2 <I2C_WaitOnBTFFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00d      	beq.n	8006460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006448:	2b04      	cmp	r3, #4
 800644a:	d107      	bne.n	800645c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e01a      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d194      	bne.n	8006392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	00100002 	.word	0x00100002
 80064a4:	ffff0000 	.word	0xffff0000

080064a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	461a      	mov	r2, r3
 80064b4:	460b      	mov	r3, r1
 80064b6:	817b      	strh	r3, [r7, #10]
 80064b8:	4613      	mov	r3, r2
 80064ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064bc:	f7ff f848 	bl	8005550 <HAL_GetTick>
 80064c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	f040 820b 	bne.w	80068e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2319      	movs	r3, #25
 80064d6:	2201      	movs	r2, #1
 80064d8:	497c      	ldr	r1, [pc, #496]	; (80066cc <HAL_I2C_Master_Receive+0x224>)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fb5a 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
 80064e8:	e1fe      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_I2C_Master_Receive+0x50>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e1f7      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b01      	cmp	r3, #1
 800650c:	d007      	beq.n	800651e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800652c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2222      	movs	r2, #34	; 0x22
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2210      	movs	r2, #16
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	893a      	ldrh	r2, [r7, #8]
 800654e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a5c      	ldr	r2, [pc, #368]	; (80066d0 <HAL_I2C_Master_Receive+0x228>)
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa46 	bl	80069f8 <I2C_MasterRequestRead>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e1b8      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d113      	bne.n	80065a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	623b      	str	r3, [r7, #32]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	623b      	str	r3, [r7, #32]
 8006592:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e18c      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d11b      	bne.n	80065e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e16c      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d11b      	bne.n	8006626 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800660c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	e14c      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800664c:	e138      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006652:	2b03      	cmp	r3, #3
 8006654:	f200 80f1 	bhi.w	800683a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b01      	cmp	r3, #1
 800665e:	d123      	bne.n	80066a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fbed 	bl	8006e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e139      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	3b01      	subs	r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066a6:	e10b      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d14e      	bne.n	800674e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	2200      	movs	r2, #0
 80066b8:	4906      	ldr	r1, [pc, #24]	; (80066d4 <HAL_I2C_Master_Receive+0x22c>)
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fa6a 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e10e      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
 80066ca:	bf00      	nop
 80066cc:	00100002 	.word	0x00100002
 80066d0:	ffff0000 	.word	0xffff0000
 80066d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800674c:	e0b8      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	2200      	movs	r2, #0
 8006756:	4966      	ldr	r1, [pc, #408]	; (80068f0 <HAL_I2C_Master_Receive+0x448>)
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 fa1b 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0bf      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2200      	movs	r2, #0
 80067b2:	494f      	ldr	r1, [pc, #316]	; (80068f0 <HAL_I2C_Master_Receive+0x448>)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f9ed 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e091      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006838:	e042      	b.n	80068c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800683a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fb00 	bl	8006e44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e04c      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691a      	ldr	r2, [r3, #16]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b04      	cmp	r3, #4
 800688c:	d118      	bne.n	80068c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f47f aec2 	bne.w	800664e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3728      	adds	r7, #40	; 0x28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	00010004 	.word	0x00010004

080068f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	607a      	str	r2, [r7, #4]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	460b      	mov	r3, r1
 8006902:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d006      	beq.n	800691e <I2C_MasterRequestWrite+0x2a>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d003      	beq.n	800691e <I2C_MasterRequestWrite+0x2a>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800691c:	d108      	bne.n	8006930 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e00b      	b.n	8006948 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	2b12      	cmp	r3, #18
 8006936:	d107      	bne.n	8006948 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006946:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f91d 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00d      	beq.n	800697c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696e:	d103      	bne.n	8006978 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006976:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e035      	b.n	80069e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006984:	d108      	bne.n	8006998 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006986:	897b      	ldrh	r3, [r7, #10]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006994:	611a      	str	r2, [r3, #16]
 8006996:	e01b      	b.n	80069d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006998:	897b      	ldrh	r3, [r7, #10]
 800699a:	11db      	asrs	r3, r3, #7
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0306 	and.w	r3, r3, #6
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f063 030f 	orn	r3, r3, #15
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	490e      	ldr	r1, [pc, #56]	; (80069f0 <I2C_MasterRequestWrite+0xfc>)
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f943 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e010      	b.n	80069e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069c6:	897b      	ldrh	r3, [r7, #10]
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4907      	ldr	r1, [pc, #28]	; (80069f4 <I2C_MasterRequestWrite+0x100>)
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 f933 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	00010008 	.word	0x00010008
 80069f4:	00010002 	.word	0x00010002

080069f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	607a      	str	r2, [r7, #4]
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	460b      	mov	r3, r1
 8006a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d006      	beq.n	8006a32 <I2C_MasterRequestRead+0x3a>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d003      	beq.n	8006a32 <I2C_MasterRequestRead+0x3a>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a30:	d108      	bne.n	8006a44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	e00b      	b.n	8006a5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	2b11      	cmp	r3, #17
 8006a4a:	d107      	bne.n	8006a5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f893 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00d      	beq.n	8006a90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	d103      	bne.n	8006a8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e079      	b.n	8006b84 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a98:	d108      	bne.n	8006aac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a9a:	897b      	ldrh	r3, [r7, #10]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	611a      	str	r2, [r3, #16]
 8006aaa:	e05f      	b.n	8006b6c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006aac:	897b      	ldrh	r3, [r7, #10]
 8006aae:	11db      	asrs	r3, r3, #7
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f003 0306 	and.w	r3, r3, #6
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f063 030f 	orn	r3, r3, #15
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4930      	ldr	r1, [pc, #192]	; (8006b8c <I2C_MasterRequestRead+0x194>)
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f8b9 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e054      	b.n	8006b84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ada:	897b      	ldrh	r3, [r7, #10]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	4929      	ldr	r1, [pc, #164]	; (8006b90 <I2C_MasterRequestRead+0x198>)
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f8a9 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e044      	b.n	8006b84 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	613b      	str	r3, [r7, #16]
 8006b0e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f831 	bl	8006b94 <I2C_WaitOnFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b46:	d103      	bne.n	8006b50 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e017      	b.n	8006b84 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b54:	897b      	ldrh	r3, [r7, #10]
 8006b56:	11db      	asrs	r3, r3, #7
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f063 030e 	orn	r3, r3, #14
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4907      	ldr	r1, [pc, #28]	; (8006b90 <I2C_MasterRequestRead+0x198>)
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f865 	bl	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	00010008 	.word	0x00010008
 8006b90:	00010002 	.word	0x00010002

08006b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ba4:	e025      	b.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d021      	beq.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bae:	f7fe fccf 	bl	8005550 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d116      	bne.n	8006bf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e023      	b.n	8006c3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d10d      	bne.n	8006c18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	43da      	mvns	r2, r3
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bf0c      	ite	eq
 8006c0e:	2301      	moveq	r3, #1
 8006c10:	2300      	movne	r3, #0
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	e00c      	b.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	43da      	mvns	r2, r3
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4013      	ands	r3, r2
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	79fb      	ldrb	r3, [r7, #7]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d0b6      	beq.n	8006ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c50:	e051      	b.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c60:	d123      	bne.n	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0204 	orr.w	r2, r3, #4
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e046      	b.n	8006d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d021      	beq.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fe fc4d 	bl	8005550 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d116      	bne.n	8006cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	f043 0220 	orr.w	r2, r3, #32
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e020      	b.n	8006d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10c      	bne.n	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	43da      	mvns	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	e00b      	b.n	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	43da      	mvns	r2, r3
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4013      	ands	r3, r2
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bf14      	ite	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	2300      	moveq	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d18d      	bne.n	8006c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d4c:	e02d      	b.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f8ce 	bl	8006ef0 <I2C_IsAcknowledgeFailed>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e02d      	b.n	8006dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d021      	beq.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d66:	f7fe fbf3 	bl	8005550 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d302      	bcc.n	8006d7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e007      	b.n	8006dba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db4:	2b80      	cmp	r3, #128	; 0x80
 8006db6:	d1ca      	bne.n	8006d4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dce:	e02d      	b.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f88d 	bl	8006ef0 <I2C_IsAcknowledgeFailed>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e02d      	b.n	8006e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d021      	beq.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de8:	f7fe fbb2 	bl	8005550 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d302      	bcc.n	8006dfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d116      	bne.n	8006e2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e007      	b.n	8006e3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d1ca      	bne.n	8006dd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e50:	e042      	b.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d119      	bne.n	8006e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0210 	mvn.w	r2, #16
 8006e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e029      	b.n	8006ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e94:	f7fe fb5c 	bl	8005550 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d302      	bcc.n	8006eaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d116      	bne.n	8006ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e007      	b.n	8006ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d1b5      	bne.n	8006e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f06:	d11b      	bne.n	8006f40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f043 0204 	orr.w	r2, r3, #4
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
	...

08006f50 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8006f5c:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <HAL_PWR_EnterSTOPMode+0x50>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f023 0203 	bic.w	r2, r3, #3
 8006f64:	490e      	ldr	r1, [pc, #56]	; (8006fa0 <HAL_PWR_EnterSTOPMode+0x50>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <HAL_PWR_EnterSTOPMode+0x54>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <HAL_PWR_EnterSTOPMode+0x54>)
 8006f72:	f043 0304 	orr.w	r3, r3, #4
 8006f76:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d101      	bne.n	8006f82 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8006f7e:	bf30      	wfi
 8006f80:	e002      	b.n	8006f88 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006f82:	bf40      	sev
    __WFE();
 8006f84:	bf20      	wfe
    __WFE();
 8006f86:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8006f88:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <HAL_PWR_EnterSTOPMode+0x54>)
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	4a05      	ldr	r2, [pc, #20]	; (8006fa4 <HAL_PWR_EnterSTOPMode+0x54>)
 8006f8e:	f023 0304 	bic.w	r3, r3, #4
 8006f92:	6113      	str	r3, [r2, #16]
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40007000 	.word	0x40007000
 8006fa4:	e000ed00 	.word	0xe000ed00

08006fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e25b      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d075      	beq.n	80070b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fc6:	4ba3      	ldr	r3, [pc, #652]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 030c 	and.w	r3, r3, #12
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d00c      	beq.n	8006fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fd2:	4ba0      	ldr	r3, [pc, #640]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d112      	bne.n	8007004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fde:	4b9d      	ldr	r3, [pc, #628]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fea:	d10b      	bne.n	8007004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fec:	4b99      	ldr	r3, [pc, #612]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05b      	beq.n	80070b0 <HAL_RCC_OscConfig+0x108>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d157      	bne.n	80070b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e236      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d106      	bne.n	800701c <HAL_RCC_OscConfig+0x74>
 800700e:	4b91      	ldr	r3, [pc, #580]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a90      	ldr	r2, [pc, #576]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e01d      	b.n	8007058 <HAL_RCC_OscConfig+0xb0>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007024:	d10c      	bne.n	8007040 <HAL_RCC_OscConfig+0x98>
 8007026:	4b8b      	ldr	r3, [pc, #556]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a8a      	ldr	r2, [pc, #552]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800702c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	4b88      	ldr	r3, [pc, #544]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a87      	ldr	r2, [pc, #540]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e00b      	b.n	8007058 <HAL_RCC_OscConfig+0xb0>
 8007040:	4b84      	ldr	r3, [pc, #528]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a83      	ldr	r2, [pc, #524]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4b81      	ldr	r3, [pc, #516]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a80      	ldr	r2, [pc, #512]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d013      	beq.n	8007088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007060:	f7fe fa76 	bl	8005550 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007068:	f7fe fa72 	bl	8005550 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b64      	cmp	r3, #100	; 0x64
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e1fb      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707a:	4b76      	ldr	r3, [pc, #472]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0xc0>
 8007086:	e014      	b.n	80070b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007088:	f7fe fa62 	bl	8005550 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007090:	f7fe fa5e 	bl	8005550 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b64      	cmp	r3, #100	; 0x64
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e1e7      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a2:	4b6c      	ldr	r3, [pc, #432]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f0      	bne.n	8007090 <HAL_RCC_OscConfig+0xe8>
 80070ae:	e000      	b.n	80070b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d063      	beq.n	8007186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070be:	4b65      	ldr	r3, [pc, #404]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 030c 	and.w	r3, r3, #12
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070ca:	4b62      	ldr	r3, [pc, #392]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	d11c      	bne.n	8007110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070d6:	4b5f      	ldr	r3, [pc, #380]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d116      	bne.n	8007110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070e2:	4b5c      	ldr	r3, [pc, #368]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <HAL_RCC_OscConfig+0x152>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d001      	beq.n	80070fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e1bb      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070fa:	4b56      	ldr	r3, [pc, #344]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4952      	ldr	r1, [pc, #328]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800710a:	4313      	orrs	r3, r2
 800710c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710e:	e03a      	b.n	8007186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d020      	beq.n	800715a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007118:	4b4f      	ldr	r3, [pc, #316]	; (8007258 <HAL_RCC_OscConfig+0x2b0>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fe fa17 	bl	8005550 <HAL_GetTick>
 8007122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007124:	e008      	b.n	8007138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007126:	f7fe fa13 	bl	8005550 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e19c      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007138:	4b46      	ldr	r3, [pc, #280]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0302 	and.w	r3, r3, #2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f0      	beq.n	8007126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007144:	4b43      	ldr	r3, [pc, #268]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	4940      	ldr	r1, [pc, #256]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]
 8007158:	e015      	b.n	8007186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800715a:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <HAL_RCC_OscConfig+0x2b0>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fe f9f6 	bl	8005550 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007168:	f7fe f9f2 	bl	8005550 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e17b      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717a:	4b36      	ldr	r3, [pc, #216]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d030      	beq.n	80071f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800719a:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_RCC_OscConfig+0x2b4>)
 800719c:	2201      	movs	r2, #1
 800719e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a0:	f7fe f9d6 	bl	8005550 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071a8:	f7fe f9d2 	bl	8005550 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e15b      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ba:	4b26      	ldr	r3, [pc, #152]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCC_OscConfig+0x200>
 80071c6:	e015      	b.n	80071f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071c8:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCC_OscConfig+0x2b4>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ce:	f7fe f9bf 	bl	8005550 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071d6:	f7fe f9bb 	bl	8005550 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e144      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e8:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 80071ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f0      	bne.n	80071d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80a0 	beq.w	8007342 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10f      	bne.n	8007232 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]
 8007216:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	4a0e      	ldr	r2, [pc, #56]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 800721c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007220:	6413      	str	r3, [r2, #64]	; 0x40
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_RCC_OscConfig+0x2ac>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800722e:	2301      	movs	r3, #1
 8007230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <HAL_RCC_OscConfig+0x2b8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800723a:	2b00      	cmp	r3, #0
 800723c:	d121      	bne.n	8007282 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800723e:	4b08      	ldr	r3, [pc, #32]	; (8007260 <HAL_RCC_OscConfig+0x2b8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a07      	ldr	r2, [pc, #28]	; (8007260 <HAL_RCC_OscConfig+0x2b8>)
 8007244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724a:	f7fe f981 	bl	8005550 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007250:	e011      	b.n	8007276 <HAL_RCC_OscConfig+0x2ce>
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800
 8007258:	42470000 	.word	0x42470000
 800725c:	42470e80 	.word	0x42470e80
 8007260:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007264:	f7fe f974 	bl	8005550 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0fd      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007276:	4b81      	ldr	r3, [pc, #516]	; (800747c <HAL_RCC_OscConfig+0x4d4>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d106      	bne.n	8007298 <HAL_RCC_OscConfig+0x2f0>
 800728a:	4b7d      	ldr	r3, [pc, #500]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	4a7c      	ldr	r2, [pc, #496]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 8007290:	f043 0301 	orr.w	r3, r3, #1
 8007294:	6713      	str	r3, [r2, #112]	; 0x70
 8007296:	e01c      	b.n	80072d2 <HAL_RCC_OscConfig+0x32a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b05      	cmp	r3, #5
 800729e:	d10c      	bne.n	80072ba <HAL_RCC_OscConfig+0x312>
 80072a0:	4b77      	ldr	r3, [pc, #476]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a4:	4a76      	ldr	r2, [pc, #472]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072a6:	f043 0304 	orr.w	r3, r3, #4
 80072aa:	6713      	str	r3, [r2, #112]	; 0x70
 80072ac:	4b74      	ldr	r3, [pc, #464]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	4a73      	ldr	r2, [pc, #460]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	6713      	str	r3, [r2, #112]	; 0x70
 80072b8:	e00b      	b.n	80072d2 <HAL_RCC_OscConfig+0x32a>
 80072ba:	4b71      	ldr	r3, [pc, #452]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	4a70      	ldr	r2, [pc, #448]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	6713      	str	r3, [r2, #112]	; 0x70
 80072c6:	4b6e      	ldr	r3, [pc, #440]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	4a6d      	ldr	r2, [pc, #436]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072cc:	f023 0304 	bic.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d015      	beq.n	8007306 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072da:	f7fe f939 	bl	8005550 <HAL_GetTick>
 80072de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e0:	e00a      	b.n	80072f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e2:	f7fe f935 	bl	8005550 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e0bc      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f8:	4b61      	ldr	r3, [pc, #388]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ee      	beq.n	80072e2 <HAL_RCC_OscConfig+0x33a>
 8007304:	e014      	b.n	8007330 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007306:	f7fe f923 	bl	8005550 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800730c:	e00a      	b.n	8007324 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800730e:	f7fe f91f 	bl	8005550 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	f241 3288 	movw	r2, #5000	; 0x1388
 800731c:	4293      	cmp	r3, r2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e0a6      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007324:	4b56      	ldr	r3, [pc, #344]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ee      	bne.n	800730e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d105      	bne.n	8007342 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007336:	4b52      	ldr	r3, [pc, #328]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a51      	ldr	r2, [pc, #324]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 800733c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 8092 	beq.w	8007470 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800734c:	4b4c      	ldr	r3, [pc, #304]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 030c 	and.w	r3, r3, #12
 8007354:	2b08      	cmp	r3, #8
 8007356:	d05c      	beq.n	8007412 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d141      	bne.n	80073e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007360:	4b48      	ldr	r3, [pc, #288]	; (8007484 <HAL_RCC_OscConfig+0x4dc>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007366:	f7fe f8f3 	bl	8005550 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800736e:	f7fe f8ef 	bl	8005550 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e078      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007380:	4b3f      	ldr	r3, [pc, #252]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	019b      	lsls	r3, r3, #6
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	3b01      	subs	r3, #1
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	061b      	lsls	r3, r3, #24
 80073b0:	4933      	ldr	r1, [pc, #204]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073b6:	4b33      	ldr	r3, [pc, #204]	; (8007484 <HAL_RCC_OscConfig+0x4dc>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073bc:	f7fe f8c8 	bl	8005550 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c4:	f7fe f8c4 	bl	8005550 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e04d      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d6:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <HAL_RCC_OscConfig+0x41c>
 80073e2:	e045      	b.n	8007470 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e4:	4b27      	ldr	r3, [pc, #156]	; (8007484 <HAL_RCC_OscConfig+0x4dc>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ea:	f7fe f8b1 	bl	8005550 <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073f2:	f7fe f8ad 	bl	8005550 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e036      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007404:	4b1e      	ldr	r3, [pc, #120]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f0      	bne.n	80073f2 <HAL_RCC_OscConfig+0x44a>
 8007410:	e02e      	b.n	8007470 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e029      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <HAL_RCC_OscConfig+0x4d8>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	429a      	cmp	r2, r3
 8007430:	d11c      	bne.n	800746c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800743c:	429a      	cmp	r2, r3
 800743e:	d115      	bne.n	800746c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007446:	4013      	ands	r3, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800744c:	4293      	cmp	r3, r2
 800744e:	d10d      	bne.n	800746c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800745a:	429a      	cmp	r2, r3
 800745c:	d106      	bne.n	800746c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007468:	429a      	cmp	r2, r3
 800746a:	d001      	beq.n	8007470 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40007000 	.word	0x40007000
 8007480:	40023800 	.word	0x40023800
 8007484:	42470060 	.word	0x42470060

08007488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0cc      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800749c:	4b68      	ldr	r3, [pc, #416]	; (8007640 <HAL_RCC_ClockConfig+0x1b8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d90c      	bls.n	80074c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074aa:	4b65      	ldr	r3, [pc, #404]	; (8007640 <HAL_RCC_ClockConfig+0x1b8>)
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b2:	4b63      	ldr	r3, [pc, #396]	; (8007640 <HAL_RCC_ClockConfig+0x1b8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d001      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0b8      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d020      	beq.n	8007512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0304 	and.w	r3, r3, #4
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074dc:	4b59      	ldr	r3, [pc, #356]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4a58      	ldr	r2, [pc, #352]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0308 	and.w	r3, r3, #8
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074f4:	4b53      	ldr	r3, [pc, #332]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	4a52      	ldr	r2, [pc, #328]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80074fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007500:	4b50      	ldr	r3, [pc, #320]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	494d      	ldr	r1, [pc, #308]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d044      	beq.n	80075a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d107      	bne.n	8007536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007526:	4b47      	ldr	r3, [pc, #284]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d119      	bne.n	8007566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e07f      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d003      	beq.n	8007546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007542:	2b03      	cmp	r3, #3
 8007544:	d107      	bne.n	8007556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007546:	4b3f      	ldr	r3, [pc, #252]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d109      	bne.n	8007566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e06f      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007556:	4b3b      	ldr	r3, [pc, #236]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e067      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007566:	4b37      	ldr	r3, [pc, #220]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f023 0203 	bic.w	r2, r3, #3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	4934      	ldr	r1, [pc, #208]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007574:	4313      	orrs	r3, r2
 8007576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007578:	f7fd ffea 	bl	8005550 <HAL_GetTick>
 800757c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757e:	e00a      	b.n	8007596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007580:	f7fd ffe6 	bl	8005550 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	f241 3288 	movw	r2, #5000	; 0x1388
 800758e:	4293      	cmp	r3, r2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e04f      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007596:	4b2b      	ldr	r3, [pc, #172]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 020c 	and.w	r2, r3, #12
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d1eb      	bne.n	8007580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075a8:	4b25      	ldr	r3, [pc, #148]	; (8007640 <HAL_RCC_ClockConfig+0x1b8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d20c      	bcs.n	80075d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b6:	4b22      	ldr	r3, [pc, #136]	; (8007640 <HAL_RCC_ClockConfig+0x1b8>)
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <HAL_RCC_ClockConfig+0x1b8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e032      	b.n	8007636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d008      	beq.n	80075ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075dc:	4b19      	ldr	r3, [pc, #100]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4916      	ldr	r1, [pc, #88]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d009      	beq.n	800760e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	490e      	ldr	r1, [pc, #56]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800760e:	f000 f821 	bl	8007654 <HAL_RCC_GetSysClockFreq>
 8007612:	4601      	mov	r1, r0
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_RCC_ClockConfig+0x1bc>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	091b      	lsrs	r3, r3, #4
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_RCC_ClockConfig+0x1c0>)
 8007620:	5cd3      	ldrb	r3, [r2, r3]
 8007622:	fa21 f303 	lsr.w	r3, r1, r3
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <HAL_RCC_ClockConfig+0x1c4>)
 8007628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <HAL_RCC_ClockConfig+0x1c8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd ff4a 	bl	80054c8 <HAL_InitTick>

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40023c00 	.word	0x40023c00
 8007644:	40023800 	.word	0x40023800
 8007648:	0800e8f4 	.word	0x0800e8f4
 800764c:	20000000 	.word	0x20000000
 8007650:	20000004 	.word	0x20000004

08007654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	2300      	movs	r3, #0
 8007664:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800766a:	4b50      	ldr	r3, [pc, #320]	; (80077ac <HAL_RCC_GetSysClockFreq+0x158>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b04      	cmp	r3, #4
 8007674:	d007      	beq.n	8007686 <HAL_RCC_GetSysClockFreq+0x32>
 8007676:	2b08      	cmp	r3, #8
 8007678:	d008      	beq.n	800768c <HAL_RCC_GetSysClockFreq+0x38>
 800767a:	2b00      	cmp	r3, #0
 800767c:	f040 808d 	bne.w	800779a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007680:	4b4b      	ldr	r3, [pc, #300]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007682:	60bb      	str	r3, [r7, #8]
       break;
 8007684:	e08c      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007686:	4b4b      	ldr	r3, [pc, #300]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007688:	60bb      	str	r3, [r7, #8]
      break;
 800768a:	e089      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800768c:	4b47      	ldr	r3, [pc, #284]	; (80077ac <HAL_RCC_GetSysClockFreq+0x158>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007696:	4b45      	ldr	r3, [pc, #276]	; (80077ac <HAL_RCC_GetSysClockFreq+0x158>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d023      	beq.n	80076ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076a2:	4b42      	ldr	r3, [pc, #264]	; (80077ac <HAL_RCC_GetSysClockFreq+0x158>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	099b      	lsrs	r3, r3, #6
 80076a8:	f04f 0400 	mov.w	r4, #0
 80076ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076b0:	f04f 0200 	mov.w	r2, #0
 80076b4:	ea03 0501 	and.w	r5, r3, r1
 80076b8:	ea04 0602 	and.w	r6, r4, r2
 80076bc:	4a3d      	ldr	r2, [pc, #244]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076be:	fb02 f106 	mul.w	r1, r2, r6
 80076c2:	2200      	movs	r2, #0
 80076c4:	fb02 f205 	mul.w	r2, r2, r5
 80076c8:	440a      	add	r2, r1
 80076ca:	493a      	ldr	r1, [pc, #232]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80076cc:	fba5 0101 	umull	r0, r1, r5, r1
 80076d0:	1853      	adds	r3, r2, r1
 80076d2:	4619      	mov	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f04f 0400 	mov.w	r4, #0
 80076da:	461a      	mov	r2, r3
 80076dc:	4623      	mov	r3, r4
 80076de:	f7f9 fa8b 	bl	8000bf8 <__aeabi_uldivmod>
 80076e2:	4603      	mov	r3, r0
 80076e4:	460c      	mov	r4, r1
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e049      	b.n	800777e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ea:	4b30      	ldr	r3, [pc, #192]	; (80077ac <HAL_RCC_GetSysClockFreq+0x158>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	099b      	lsrs	r3, r3, #6
 80076f0:	f04f 0400 	mov.w	r4, #0
 80076f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	ea03 0501 	and.w	r5, r3, r1
 8007700:	ea04 0602 	and.w	r6, r4, r2
 8007704:	4629      	mov	r1, r5
 8007706:	4632      	mov	r2, r6
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	f04f 0400 	mov.w	r4, #0
 8007710:	0154      	lsls	r4, r2, #5
 8007712:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007716:	014b      	lsls	r3, r1, #5
 8007718:	4619      	mov	r1, r3
 800771a:	4622      	mov	r2, r4
 800771c:	1b49      	subs	r1, r1, r5
 800771e:	eb62 0206 	sbc.w	r2, r2, r6
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	f04f 0400 	mov.w	r4, #0
 800772a:	0194      	lsls	r4, r2, #6
 800772c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007730:	018b      	lsls	r3, r1, #6
 8007732:	1a5b      	subs	r3, r3, r1
 8007734:	eb64 0402 	sbc.w	r4, r4, r2
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	00e2      	lsls	r2, r4, #3
 8007742:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007746:	00d9      	lsls	r1, r3, #3
 8007748:	460b      	mov	r3, r1
 800774a:	4614      	mov	r4, r2
 800774c:	195b      	adds	r3, r3, r5
 800774e:	eb44 0406 	adc.w	r4, r4, r6
 8007752:	f04f 0100 	mov.w	r1, #0
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	02a2      	lsls	r2, r4, #10
 800775c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007760:	0299      	lsls	r1, r3, #10
 8007762:	460b      	mov	r3, r1
 8007764:	4614      	mov	r4, r2
 8007766:	4618      	mov	r0, r3
 8007768:	4621      	mov	r1, r4
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f04f 0400 	mov.w	r4, #0
 8007770:	461a      	mov	r2, r3
 8007772:	4623      	mov	r3, r4
 8007774:	f7f9 fa40 	bl	8000bf8 <__aeabi_uldivmod>
 8007778:	4603      	mov	r3, r0
 800777a:	460c      	mov	r4, r1
 800777c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <HAL_RCC_GetSysClockFreq+0x158>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	0c1b      	lsrs	r3, r3, #16
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	3301      	adds	r3, #1
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	60bb      	str	r3, [r7, #8]
      break;
 8007798:	e002      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800779c:	60bb      	str	r3, [r7, #8]
      break;
 800779e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077a0:	68bb      	ldr	r3, [r7, #8]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40023800 	.word	0x40023800
 80077b0:	00f42400 	.word	0x00f42400
 80077b4:	017d7840 	.word	0x017d7840

080077b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <HAL_RCC_GetHCLKFreq+0x14>)
 80077be:	681b      	ldr	r3, [r3, #0]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000000 	.word	0x20000000

080077d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077d4:	f7ff fff0 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 80077d8:	4601      	mov	r1, r0
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	0a9b      	lsrs	r3, r3, #10
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4a03      	ldr	r2, [pc, #12]	; (80077f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077e6:	5cd3      	ldrb	r3, [r2, r3]
 80077e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40023800 	.word	0x40023800
 80077f4:	0800e904 	.word	0x0800e904

080077f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077fc:	f7ff ffdc 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 8007800:	4601      	mov	r1, r0
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	0b5b      	lsrs	r3, r3, #13
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	4a03      	ldr	r2, [pc, #12]	; (800781c <HAL_RCC_GetPCLK2Freq+0x24>)
 800780e:	5cd3      	ldrb	r3, [r2, r3]
 8007810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007814:	4618      	mov	r0, r3
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40023800 	.word	0x40023800
 800781c:	0800e904 	.word	0x0800e904

08007820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e056      	b.n	80078e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7f9 fe49 	bl	80014e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007868:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	431a      	orrs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	ea42 0103 	orr.w	r1, r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	0c1b      	lsrs	r3, r3, #16
 80078b0:	f003 0104 	and.w	r1, r3, #4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	69da      	ldr	r2, [r3, #28]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	4613      	mov	r3, r2
 80078f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_SPI_Transmit+0x22>
 8007906:	2302      	movs	r3, #2
 8007908:	e11e      	b.n	8007b48 <HAL_SPI_Transmit+0x260>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007912:	f7fd fe1d 	bl	8005550 <HAL_GetTick>
 8007916:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b01      	cmp	r3, #1
 8007926:	d002      	beq.n	800792e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007928:	2302      	movs	r3, #2
 800792a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800792c:	e103      	b.n	8007b36 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_SPI_Transmit+0x52>
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800793e:	e0fa      	b.n	8007b36 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2203      	movs	r2, #3
 8007944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	88fa      	ldrh	r2, [r7, #6]
 8007958:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	88fa      	ldrh	r2, [r7, #6]
 800795e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007986:	d107      	bne.n	8007998 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007996:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d007      	beq.n	80079b6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079be:	d14b      	bne.n	8007a58 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <HAL_SPI_Transmit+0xe6>
 80079c8:	8afb      	ldrh	r3, [r7, #22]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d13e      	bne.n	8007a4c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	881a      	ldrh	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	1c9a      	adds	r2, r3, #2
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079f2:	e02b      	b.n	8007a4c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d112      	bne.n	8007a28 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	881a      	ldrh	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a26:	e011      	b.n	8007a4c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a28:	f7fd fd92 	bl	8005550 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d803      	bhi.n	8007a40 <HAL_SPI_Transmit+0x158>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d102      	bne.n	8007a46 <HAL_SPI_Transmit+0x15e>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d102      	bne.n	8007a4c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a4a:	e074      	b.n	8007b36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1ce      	bne.n	80079f4 <HAL_SPI_Transmit+0x10c>
 8007a56:	e04c      	b.n	8007af2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_SPI_Transmit+0x17e>
 8007a60:	8afb      	ldrh	r3, [r7, #22]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d140      	bne.n	8007ae8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	7812      	ldrb	r2, [r2, #0]
 8007a72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a8c:	e02c      	b.n	8007ae8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0302 	and.w	r3, r3, #2
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d113      	bne.n	8007ac4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	330c      	adds	r3, #12
 8007aa6:	7812      	ldrb	r2, [r2, #0]
 8007aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ac2:	e011      	b.n	8007ae8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ac4:	f7fd fd44 	bl	8005550 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d803      	bhi.n	8007adc <HAL_SPI_Transmit+0x1f4>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d102      	bne.n	8007ae2 <HAL_SPI_Transmit+0x1fa>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ae6:	e026      	b.n	8007b36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1cd      	bne.n	8007a8e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007af2:	69ba      	ldr	r2, [r7, #24]
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 fba4 	bl	8008244 <SPI_EndRxTxTransaction>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2220      	movs	r2, #32
 8007b06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	77fb      	strb	r3, [r7, #31]
 8007b32:	e000      	b.n	8007b36 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007b34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3720      	adds	r7, #32
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b6c:	d112      	bne.n	8007b94 <HAL_SPI_Receive+0x44>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10e      	bne.n	8007b94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2204      	movs	r2, #4
 8007b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	4613      	mov	r3, r2
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 f8e9 	bl	8007d62 <HAL_SPI_TransmitReceive>
 8007b90:	4603      	mov	r3, r0
 8007b92:	e0e2      	b.n	8007d5a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_SPI_Receive+0x52>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e0db      	b.n	8007d5a <HAL_SPI_Receive+0x20a>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007baa:	f7fd fcd1 	bl	8005550 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d002      	beq.n	8007bc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bc0:	e0c2      	b.n	8007d48 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_SPI_Receive+0x7e>
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bd2:	e0b9      	b.n	8007d48 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	88fa      	ldrh	r2, [r7, #6]
 8007bf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c1a:	d107      	bne.n	8007c2c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d007      	beq.n	8007c4a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d162      	bne.n	8007d18 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c52:	e02e      	b.n	8007cb2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d115      	bne.n	8007c8e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f103 020c 	add.w	r2, r3, #12
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c8c:	e011      	b.n	8007cb2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8e:	f7fd fc5f 	bl	8005550 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d803      	bhi.n	8007ca6 <HAL_SPI_Receive+0x156>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca4:	d102      	bne.n	8007cac <HAL_SPI_Receive+0x15c>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cb0:	e04a      	b.n	8007d48 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1cb      	bne.n	8007c54 <HAL_SPI_Receive+0x104>
 8007cbc:	e031      	b.n	8007d22 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d113      	bne.n	8007cf4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	1c9a      	adds	r2, r3, #2
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cf2:	e011      	b.n	8007d18 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf4:	f7fd fc2c 	bl	8005550 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d803      	bhi.n	8007d0c <HAL_SPI_Receive+0x1bc>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0a:	d102      	bne.n	8007d12 <HAL_SPI_Receive+0x1c2>
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d16:	e017      	b.n	8007d48 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1cd      	bne.n	8007cbe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fa27 	bl	800817a <SPI_EndRxTransaction>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d002      	beq.n	8007d46 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
 8007d44:	e000      	b.n	8007d48 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007d46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b08c      	sub	sp, #48	; 0x30
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d70:	2301      	movs	r3, #1
 8007d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_SPI_TransmitReceive+0x26>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e18a      	b.n	800809e <HAL_SPI_TransmitReceive+0x33c>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d90:	f7fd fbde 	bl	8005550 <HAL_GetTick>
 8007d94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007da6:	887b      	ldrh	r3, [r7, #2]
 8007da8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d00f      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x70>
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db8:	d107      	bne.n	8007dca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <HAL_SPI_TransmitReceive+0x68>
 8007dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d003      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007dca:	2302      	movs	r3, #2
 8007dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dd0:	e15b      	b.n	800808a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_SPI_TransmitReceive+0x82>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <HAL_SPI_TransmitReceive+0x82>
 8007dde:	887b      	ldrh	r3, [r7, #2]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dea:	e14e      	b.n	800808a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d003      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2205      	movs	r2, #5
 8007dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	887a      	ldrh	r2, [r7, #2]
 8007e22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	887a      	ldrh	r2, [r7, #2]
 8007e28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d007      	beq.n	8007e54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e5c:	d178      	bne.n	8007f50 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_SPI_TransmitReceive+0x10a>
 8007e66:	8b7b      	ldrh	r3, [r7, #26]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d166      	bne.n	8007f3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	881a      	ldrh	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	1c9a      	adds	r2, r3, #2
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e90:	e053      	b.n	8007f3a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d11b      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x176>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d016      	beq.n	8007ed8 <HAL_SPI_TransmitReceive+0x176>
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d113      	bne.n	8007ed8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	881a      	ldrh	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	1c9a      	adds	r2, r3, #2
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d119      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x1b8>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d014      	beq.n	8007f1a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efa:	b292      	uxth	r2, r2
 8007efc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	1c9a      	adds	r2, r3, #2
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f16:	2301      	movs	r3, #1
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f1a:	f7fd fb19 	bl	8005550 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d807      	bhi.n	8007f3a <HAL_SPI_TransmitReceive+0x1d8>
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f30:	d003      	beq.n	8007f3a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f38:	e0a7      	b.n	800808a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1a6      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x130>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1a1      	bne.n	8007e92 <HAL_SPI_TransmitReceive+0x130>
 8007f4e:	e07c      	b.n	800804a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <HAL_SPI_TransmitReceive+0x1fc>
 8007f58:	8b7b      	ldrh	r3, [r7, #26]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d16b      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	7812      	ldrb	r2, [r2, #0]
 8007f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f84:	e057      	b.n	8008036 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d11c      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x26c>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d017      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x26c>
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d114      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	330c      	adds	r3, #12
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d119      	bne.n	8008010 <HAL_SPI_TransmitReceive+0x2ae>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d014      	beq.n	8008010 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68da      	ldr	r2, [r3, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008002:	b29b      	uxth	r3, r3
 8008004:	3b01      	subs	r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800800c:	2301      	movs	r3, #1
 800800e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008010:	f7fd fa9e 	bl	8005550 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800801c:	429a      	cmp	r2, r3
 800801e:	d803      	bhi.n	8008028 <HAL_SPI_TransmitReceive+0x2c6>
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	d102      	bne.n	800802e <HAL_SPI_TransmitReceive+0x2cc>
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	2b00      	cmp	r3, #0
 800802c:	d103      	bne.n	8008036 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008034:	e029      	b.n	800808a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1a2      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x224>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d19d      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800804a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f8f8 	bl	8008244 <SPI_EndRxTxTransaction>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008066:	e010      	b.n	800808a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10b      	bne.n	8008088 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	e000      	b.n	800808a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008088:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800809a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3730      	adds	r7, #48	; 0x30
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	4613      	mov	r3, r2
 80080b4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080b6:	e04c      	b.n	8008152 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d048      	beq.n	8008152 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80080c0:	f7fd fa46 	bl	8005550 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d902      	bls.n	80080d6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d13d      	bne.n	8008152 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ee:	d111      	bne.n	8008114 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f8:	d004      	beq.n	8008104 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008102:	d107      	bne.n	8008114 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008112:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811c:	d10f      	bne.n	800813e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800813c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e00f      	b.n	8008172 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4013      	ands	r3, r2
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	429a      	cmp	r2, r3
 800816e:	d1a3      	bne.n	80080b8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b086      	sub	sp, #24
 800817e:	af02      	add	r7, sp, #8
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818e:	d111      	bne.n	80081b4 <SPI_EndRxTransaction+0x3a>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	d004      	beq.n	80081a4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a2:	d107      	bne.n	80081b4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081bc:	d12a      	bne.n	8008214 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c6:	d012      	beq.n	80081ee <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff ff67 	bl	80080a6 <SPI_WaitFlagStateUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d02d      	beq.n	800823a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e026      	b.n	800823c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2101      	movs	r1, #1
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff ff54 	bl	80080a6 <SPI_WaitFlagStateUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01a      	beq.n	800823a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e013      	b.n	800823c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	2101      	movs	r1, #1
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff ff41 	bl	80080a6 <SPI_WaitFlagStateUntilTimeout>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f043 0220 	orr.w	r2, r3, #32
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e000      	b.n	800823c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008250:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <SPI_EndRxTxTransaction+0x7c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <SPI_EndRxTxTransaction+0x80>)
 8008256:	fba2 2303 	umull	r2, r3, r2, r3
 800825a:	0d5b      	lsrs	r3, r3, #21
 800825c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008260:	fb02 f303 	mul.w	r3, r2, r3
 8008264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800826e:	d112      	bne.n	8008296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f7ff ff13 	bl	80080a6 <SPI_WaitFlagStateUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d016      	beq.n	80082b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828a:	f043 0220 	orr.w	r2, r3, #32
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e00f      	b.n	80082b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3b01      	subs	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ac:	2b80      	cmp	r3, #128	; 0x80
 80082ae:	d0f2      	beq.n	8008296 <SPI_EndRxTxTransaction+0x52>
 80082b0:	e000      	b.n	80082b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80082b2:	bf00      	nop
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000000 	.word	0x20000000
 80082c4:	165e9f81 	.word	0x165e9f81

080082c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e01d      	b.n	8008316 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7f9 f940 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f000 f8c0 	bl	800848c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b084      	sub	sp, #16
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_TIM_ConfigClockSource+0x18>
 8008332:	2302      	movs	r3, #2
 8008334:	e0a6      	b.n	8008484 <HAL_TIM_ConfigClockSource+0x166>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008354:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800835c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b40      	cmp	r3, #64	; 0x40
 800836c:	d067      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x120>
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d80b      	bhi.n	800838a <HAL_TIM_ConfigClockSource+0x6c>
 8008372:	2b10      	cmp	r3, #16
 8008374:	d073      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x140>
 8008376:	2b10      	cmp	r3, #16
 8008378:	d802      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x62>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d06f      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800837e:	e078      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008380:	2b20      	cmp	r3, #32
 8008382:	d06c      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x140>
 8008384:	2b30      	cmp	r3, #48	; 0x30
 8008386:	d06a      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008388:	e073      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800838a:	2b70      	cmp	r3, #112	; 0x70
 800838c:	d00d      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x8c>
 800838e:	2b70      	cmp	r3, #112	; 0x70
 8008390:	d804      	bhi.n	800839c <HAL_TIM_ConfigClockSource+0x7e>
 8008392:	2b50      	cmp	r3, #80	; 0x50
 8008394:	d033      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0xe0>
 8008396:	2b60      	cmp	r3, #96	; 0x60
 8008398:	d041      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800839a:	e06a      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800839c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a0:	d066      	beq.n	8008470 <HAL_TIM_ConfigClockSource+0x152>
 80083a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083a6:	d017      	beq.n	80083d8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80083a8:	e063      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6899      	ldr	r1, [r3, #8]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f000 f961 	bl	8008680 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	609a      	str	r2, [r3, #8]
      break;
 80083d6:	e04c      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6899      	ldr	r1, [r3, #8]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f000 f94a 	bl	8008680 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083fa:	609a      	str	r2, [r3, #8]
      break;
 80083fc:	e039      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	461a      	mov	r2, r3
 800840c:	f000 f8be 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2150      	movs	r1, #80	; 0x50
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f917 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 800841c:	e029      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	461a      	mov	r2, r3
 800842c:	f000 f8dd 	bl	80085ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2160      	movs	r1, #96	; 0x60
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f907 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 800843c:	e019      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6859      	ldr	r1, [r3, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	461a      	mov	r2, r3
 800844c:	f000 f89e 	bl	800858c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2140      	movs	r1, #64	; 0x40
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f8f7 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 800845c:	e009      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f000 f8ee 	bl	800864a <TIM_ITRx_SetConfig>
      break;
 800846e:	e000      	b.n	8008472 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008470:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a34      	ldr	r2, [pc, #208]	; (8008570 <TIM_Base_SetConfig+0xe4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00f      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084aa:	d00b      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a31      	ldr	r2, [pc, #196]	; (8008574 <TIM_Base_SetConfig+0xe8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d007      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a30      	ldr	r2, [pc, #192]	; (8008578 <TIM_Base_SetConfig+0xec>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d003      	beq.n	80084c4 <TIM_Base_SetConfig+0x38>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a2f      	ldr	r2, [pc, #188]	; (800857c <TIM_Base_SetConfig+0xf0>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d108      	bne.n	80084d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a25      	ldr	r2, [pc, #148]	; (8008570 <TIM_Base_SetConfig+0xe4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01b      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e4:	d017      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a22      	ldr	r2, [pc, #136]	; (8008574 <TIM_Base_SetConfig+0xe8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d013      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a21      	ldr	r2, [pc, #132]	; (8008578 <TIM_Base_SetConfig+0xec>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00f      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a20      	ldr	r2, [pc, #128]	; (800857c <TIM_Base_SetConfig+0xf0>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00b      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <TIM_Base_SetConfig+0xf4>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d007      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <TIM_Base_SetConfig+0xf8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_Base_SetConfig+0x8a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a1d      	ldr	r2, [pc, #116]	; (8008588 <TIM_Base_SetConfig+0xfc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d108      	bne.n	8008528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800851c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a08      	ldr	r2, [pc, #32]	; (8008570 <TIM_Base_SetConfig+0xe4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d103      	bne.n	800855c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	691a      	ldr	r2, [r3, #16]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	615a      	str	r2, [r3, #20]
}
 8008562:	bf00      	nop
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	40010000 	.word	0x40010000
 8008574:	40000400 	.word	0x40000400
 8008578:	40000800 	.word	0x40000800
 800857c:	40000c00 	.word	0x40000c00
 8008580:	40014000 	.word	0x40014000
 8008584:	40014400 	.word	0x40014400
 8008588:	40014800 	.word	0x40014800

0800858c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f023 030a 	bic.w	r3, r3, #10
 80085c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	621a      	str	r2, [r3, #32]
}
 80085de:	bf00      	nop
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	f023 0210 	bic.w	r2, r3, #16
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	011b      	lsls	r3, r3, #4
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800864a:	b480      	push	{r7}
 800864c:	b085      	sub	sp, #20
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	f043 0307 	orr.w	r3, r3, #7
 800866c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	609a      	str	r2, [r3, #8]
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	021a      	lsls	r2, r3, #8
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	609a      	str	r2, [r3, #8]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	2201      	movs	r2, #1
 80086d4:	fa02 f303 	lsl.w	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	fa01 f303 	lsl.w	r3, r1, r3
 80086f8:	431a      	orrs	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008720:	2302      	movs	r3, #2
 8008722:	e050      	b.n	80087c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1c      	ldr	r2, [pc, #112]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d018      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008770:	d013      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a18      	ldr	r2, [pc, #96]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00e      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a16      	ldr	r2, [pc, #88]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d009      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a15      	ldr	r2, [pc, #84]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d004      	beq.n	800879a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a13      	ldr	r2, [pc, #76]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d10c      	bne.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800
 80087e0:	40000c00 	.word	0x40000c00
 80087e4:	40014000 	.word	0x40014000

080087e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d101      	bne.n	80087fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e03f      	b.n	800887a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7f8 fed2 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2224      	movs	r2, #36	; 0x24
 8008818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800882a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fc3d 	bl	80090ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	691a      	ldr	r2, [r3, #16]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b088      	sub	sp, #32
 8008886:	af02      	add	r7, sp, #8
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	603b      	str	r3, [r7, #0]
 800888e:	4613      	mov	r3, r2
 8008890:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b20      	cmp	r3, #32
 80088a0:	f040 8083 	bne.w	80089aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <HAL_UART_Transmit+0x2e>
 80088aa:	88fb      	ldrh	r3, [r7, #6]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e07b      	b.n	80089ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_UART_Transmit+0x40>
 80088be:	2302      	movs	r3, #2
 80088c0:	e074      	b.n	80089ac <HAL_UART_Transmit+0x12a>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2221      	movs	r2, #33	; 0x21
 80088d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088d8:	f7fc fe3a 	bl	8005550 <HAL_GetTick>
 80088dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	88fa      	ldrh	r2, [r7, #6]
 80088e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	88fa      	ldrh	r2, [r7, #6]
 80088e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80088f2:	e042      	b.n	800897a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890a:	d122      	bne.n	8008952 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	2200      	movs	r2, #0
 8008914:	2180      	movs	r1, #128	; 0x80
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fa5c 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e042      	b.n	80089ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008938:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	3302      	adds	r3, #2
 8008946:	60bb      	str	r3, [r7, #8]
 8008948:	e017      	b.n	800897a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	3301      	adds	r3, #1
 800894e:	60bb      	str	r3, [r7, #8]
 8008950:	e013      	b.n	800897a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2200      	movs	r2, #0
 800895a:	2180      	movs	r1, #128	; 0x80
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 fa39 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e01f      	b.n	80089ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	60ba      	str	r2, [r7, #8]
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1b7      	bne.n	80088f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2200      	movs	r2, #0
 800898c:	2140      	movs	r1, #64	; 0x40
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fa20 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e006      	b.n	80089ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2220      	movs	r2, #32
 80089a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	f040 8090 	bne.w	8008af6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <HAL_UART_Receive+0x2e>
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e088      	b.n	8008af8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_UART_Receive+0x40>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e081      	b.n	8008af8 <HAL_UART_Receive+0x144>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2222      	movs	r2, #34	; 0x22
 8008a06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008a0a:	f7fc fda1 	bl	8005550 <HAL_GetTick>
 8008a0e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	88fa      	ldrh	r2, [r7, #6]
 8008a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008a24:	e05c      	b.n	8008ae0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3c:	d12b      	bne.n	8008a96 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2200      	movs	r2, #0
 8008a46:	2120      	movs	r1, #32
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f9c3 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e04f      	b.n	8008af8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10c      	bne.n	8008a7e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	3302      	adds	r3, #2
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	e030      	b.n	8008ae0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60bb      	str	r3, [r7, #8]
 8008a94:	e024      	b.n	8008ae0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2120      	movs	r1, #32
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f000 f997 	bl	8008dd4 <UART_WaitOnFlagUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e023      	b.n	8008af8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d108      	bne.n	8008aca <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6859      	ldr	r1, [r3, #4]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	60ba      	str	r2, [r7, #8]
 8008ac4:	b2ca      	uxtb	r2, r1
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	e00a      	b.n	8008ae0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	1c59      	adds	r1, r3, #1
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d19d      	bne.n	8008a26 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	e000      	b.n	8008af8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008af6:	2302      	movs	r3, #2
  }
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d140      	bne.n	8008b9c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_UART_Receive_IT+0x26>
 8008b20:	88fb      	ldrh	r3, [r7, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e039      	b.n	8008b9e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_UART_Receive_IT+0x38>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e032      	b.n	8008b9e <HAL_UART_Receive_IT+0x9e>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	68ba      	ldr	r2, [r7, #8]
 8008b44:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	88fa      	ldrh	r2, [r7, #6]
 8008b4a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2222      	movs	r2, #34	; 0x22
 8008b5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b76:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695a      	ldr	r2, [r3, #20]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f042 0220 	orr.w	r2, r2, #32
 8008b96:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e000      	b.n	8008b9e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008b9c:	2302      	movs	r3, #2
  }
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10d      	bne.n	8008bfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d008      	beq.n	8008bfe <HAL_UART_IRQHandler+0x52>
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9d6 	bl	8008fa8 <UART_Receive_IT>
      return;
 8008bfc:	e0d1      	b.n	8008da2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80b0 	beq.w	8008d66 <HAL_UART_IRQHandler+0x1ba>
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d105      	bne.n	8008c1c <HAL_UART_IRQHandler+0x70>
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80a5 	beq.w	8008d66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <HAL_UART_IRQHandler+0x90>
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c34:	f043 0201 	orr.w	r2, r3, #1
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <HAL_UART_IRQHandler+0xb0>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d005      	beq.n	8008c5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c54:	f043 0202 	orr.w	r2, r3, #2
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <HAL_UART_IRQHandler+0xd0>
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c74:	f043 0204 	orr.w	r2, r3, #4
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f003 0308 	and.w	r3, r3, #8
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00f      	beq.n	8008ca6 <HAL_UART_IRQHandler+0xfa>
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <HAL_UART_IRQHandler+0xee>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9e:	f043 0208 	orr.w	r2, r3, #8
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d078      	beq.n	8008da0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x11c>
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f970 	bl	8008fa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd2:	2b40      	cmp	r3, #64	; 0x40
 8008cd4:	bf0c      	ite	eq
 8008cd6:	2301      	moveq	r3, #1
 8008cd8:	2300      	movne	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x144>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d031      	beq.n	8008d54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f8b9 	bl	8008e68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d00:	2b40      	cmp	r3, #64	; 0x40
 8008d02:	d123      	bne.n	8008d4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	695a      	ldr	r2, [r3, #20]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d013      	beq.n	8008d44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d20:	4a21      	ldr	r2, [pc, #132]	; (8008da8 <HAL_UART_IRQHandler+0x1fc>)
 8008d22:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fc fe1f 	bl	800596c <HAL_DMA_Abort_IT>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d016      	beq.n	8008d62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d42:	e00e      	b.n	8008d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f83b 	bl	8008dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4a:	e00a      	b.n	8008d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f837 	bl	8008dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d52:	e006      	b.n	8008d62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f833 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008d60:	e01e      	b.n	8008da0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d62:	bf00      	nop
    return;
 8008d64:	e01c      	b.n	8008da0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d008      	beq.n	8008d82 <HAL_UART_IRQHandler+0x1d6>
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8a6 	bl	8008ecc <UART_Transmit_IT>
    return;
 8008d80:	e00f      	b.n	8008da2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <HAL_UART_IRQHandler+0x1f6>
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d005      	beq.n	8008da2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f8ee 	bl	8008f78 <UART_EndTransmit_IT>
    return;
 8008d9c:	bf00      	nop
 8008d9e:	e000      	b.n	8008da2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008da0:	bf00      	nop
  }
}
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	08008ea5 	.word	0x08008ea5

08008dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	4613      	mov	r3, r2
 8008de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de4:	e02c      	b.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dec:	d028      	beq.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d007      	beq.n	8008e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df4:	f7fc fbac 	bl	8005550 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d21d      	bcs.n	8008e40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695a      	ldr	r2, [r3, #20]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f022 0201 	bic.w	r2, r2, #1
 8008e22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e00f      	b.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	bf0c      	ite	eq
 8008e50:	2301      	moveq	r3, #1
 8008e52:	2300      	movne	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	461a      	mov	r2, r3
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d0c3      	beq.n	8008de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695a      	ldr	r2, [r3, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
 8008e8e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff ff7e 	bl	8008dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b21      	cmp	r3, #33	; 0x21
 8008ede:	d144      	bne.n	8008f6a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee8:	d11a      	bne.n	8008f20 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008efe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d105      	bne.n	8008f14 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	1c9a      	adds	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	621a      	str	r2, [r3, #32]
 8008f12:	e00e      	b.n	8008f32 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	1c5a      	adds	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	621a      	str	r2, [r3, #32]
 8008f1e:	e008      	b.n	8008f32 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	1c59      	adds	r1, r3, #1
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6211      	str	r1, [r2, #32]
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10f      	bne.n	8008f66 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68da      	ldr	r2, [r3, #12]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	e000      	b.n	8008f6c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008f6a:	2302      	movs	r3, #2
  }
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ff07 	bl	8008dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b22      	cmp	r3, #34	; 0x22
 8008fba:	d171      	bne.n	80090a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fc4:	d123      	bne.n	800900e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10e      	bne.n	8008ff2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	1c9a      	adds	r2, r3, #2
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	629a      	str	r2, [r3, #40]	; 0x28
 8008ff0:	e029      	b.n	8009046 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	1c5a      	adds	r2, r3, #1
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	629a      	str	r2, [r3, #40]	; 0x28
 800900c:	e01b      	b.n	8009046 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10a      	bne.n	800902c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	6858      	ldr	r0, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	1c59      	adds	r1, r3, #1
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6291      	str	r1, [r2, #40]	; 0x28
 8009026:	b2c2      	uxtb	r2, r0
 8009028:	701a      	strb	r2, [r3, #0]
 800902a:	e00c      	b.n	8009046 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	b2da      	uxtb	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	1c58      	adds	r0, r3, #1
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	6288      	str	r0, [r1, #40]	; 0x28
 800903e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800904a:	b29b      	uxth	r3, r3
 800904c:	3b01      	subs	r3, #1
 800904e:	b29b      	uxth	r3, r3
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4619      	mov	r1, r3
 8009054:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009056:	2b00      	cmp	r3, #0
 8009058:	d120      	bne.n	800909c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0220 	bic.w	r2, r2, #32
 8009068:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	695a      	ldr	r2, [r3, #20]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0201 	bic.w	r2, r2, #1
 8009088:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7f8 f99c 	bl	80013d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e002      	b.n	80090a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	e000      	b.n	80090a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80090a0:	2302      	movs	r3, #2
  }
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	b085      	sub	sp, #20
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	431a      	orrs	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	69db      	ldr	r3, [r3, #28]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80090ee:	f023 030c 	bic.w	r3, r3, #12
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	430b      	orrs	r3, r1
 80090fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	69db      	ldr	r3, [r3, #28]
 8009116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800911a:	f040 818b 	bne.w	8009434 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4ac1      	ldr	r2, [pc, #772]	; (8009428 <UART_SetConfig+0x37c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d005      	beq.n	8009134 <UART_SetConfig+0x88>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4abf      	ldr	r2, [pc, #764]	; (800942c <UART_SetConfig+0x380>)
 800912e:	4293      	cmp	r3, r2
 8009130:	f040 80bd 	bne.w	80092ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009134:	f7fe fb60 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 8009138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	461d      	mov	r5, r3
 800913e:	f04f 0600 	mov.w	r6, #0
 8009142:	46a8      	mov	r8, r5
 8009144:	46b1      	mov	r9, r6
 8009146:	eb18 0308 	adds.w	r3, r8, r8
 800914a:	eb49 0409 	adc.w	r4, r9, r9
 800914e:	4698      	mov	r8, r3
 8009150:	46a1      	mov	r9, r4
 8009152:	eb18 0805 	adds.w	r8, r8, r5
 8009156:	eb49 0906 	adc.w	r9, r9, r6
 800915a:	f04f 0100 	mov.w	r1, #0
 800915e:	f04f 0200 	mov.w	r2, #0
 8009162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800916a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800916e:	4688      	mov	r8, r1
 8009170:	4691      	mov	r9, r2
 8009172:	eb18 0005 	adds.w	r0, r8, r5
 8009176:	eb49 0106 	adc.w	r1, r9, r6
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	461d      	mov	r5, r3
 8009180:	f04f 0600 	mov.w	r6, #0
 8009184:	196b      	adds	r3, r5, r5
 8009186:	eb46 0406 	adc.w	r4, r6, r6
 800918a:	461a      	mov	r2, r3
 800918c:	4623      	mov	r3, r4
 800918e:	f7f7 fd33 	bl	8000bf8 <__aeabi_uldivmod>
 8009192:	4603      	mov	r3, r0
 8009194:	460c      	mov	r4, r1
 8009196:	461a      	mov	r2, r3
 8009198:	4ba5      	ldr	r3, [pc, #660]	; (8009430 <UART_SetConfig+0x384>)
 800919a:	fba3 2302 	umull	r2, r3, r3, r2
 800919e:	095b      	lsrs	r3, r3, #5
 80091a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	461d      	mov	r5, r3
 80091a8:	f04f 0600 	mov.w	r6, #0
 80091ac:	46a9      	mov	r9, r5
 80091ae:	46b2      	mov	sl, r6
 80091b0:	eb19 0309 	adds.w	r3, r9, r9
 80091b4:	eb4a 040a 	adc.w	r4, sl, sl
 80091b8:	4699      	mov	r9, r3
 80091ba:	46a2      	mov	sl, r4
 80091bc:	eb19 0905 	adds.w	r9, r9, r5
 80091c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80091c4:	f04f 0100 	mov.w	r1, #0
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091d8:	4689      	mov	r9, r1
 80091da:	4692      	mov	sl, r2
 80091dc:	eb19 0005 	adds.w	r0, r9, r5
 80091e0:	eb4a 0106 	adc.w	r1, sl, r6
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	461d      	mov	r5, r3
 80091ea:	f04f 0600 	mov.w	r6, #0
 80091ee:	196b      	adds	r3, r5, r5
 80091f0:	eb46 0406 	adc.w	r4, r6, r6
 80091f4:	461a      	mov	r2, r3
 80091f6:	4623      	mov	r3, r4
 80091f8:	f7f7 fcfe 	bl	8000bf8 <__aeabi_uldivmod>
 80091fc:	4603      	mov	r3, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	461a      	mov	r2, r3
 8009202:	4b8b      	ldr	r3, [pc, #556]	; (8009430 <UART_SetConfig+0x384>)
 8009204:	fba3 1302 	umull	r1, r3, r3, r2
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	2164      	movs	r1, #100	; 0x64
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	3332      	adds	r3, #50	; 0x32
 8009216:	4a86      	ldr	r2, [pc, #536]	; (8009430 <UART_SetConfig+0x384>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009224:	4498      	add	r8, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	461d      	mov	r5, r3
 800922a:	f04f 0600 	mov.w	r6, #0
 800922e:	46a9      	mov	r9, r5
 8009230:	46b2      	mov	sl, r6
 8009232:	eb19 0309 	adds.w	r3, r9, r9
 8009236:	eb4a 040a 	adc.w	r4, sl, sl
 800923a:	4699      	mov	r9, r3
 800923c:	46a2      	mov	sl, r4
 800923e:	eb19 0905 	adds.w	r9, r9, r5
 8009242:	eb4a 0a06 	adc.w	sl, sl, r6
 8009246:	f04f 0100 	mov.w	r1, #0
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800925a:	4689      	mov	r9, r1
 800925c:	4692      	mov	sl, r2
 800925e:	eb19 0005 	adds.w	r0, r9, r5
 8009262:	eb4a 0106 	adc.w	r1, sl, r6
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	461d      	mov	r5, r3
 800926c:	f04f 0600 	mov.w	r6, #0
 8009270:	196b      	adds	r3, r5, r5
 8009272:	eb46 0406 	adc.w	r4, r6, r6
 8009276:	461a      	mov	r2, r3
 8009278:	4623      	mov	r3, r4
 800927a:	f7f7 fcbd 	bl	8000bf8 <__aeabi_uldivmod>
 800927e:	4603      	mov	r3, r0
 8009280:	460c      	mov	r4, r1
 8009282:	461a      	mov	r2, r3
 8009284:	4b6a      	ldr	r3, [pc, #424]	; (8009430 <UART_SetConfig+0x384>)
 8009286:	fba3 1302 	umull	r1, r3, r3, r2
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	2164      	movs	r1, #100	; 0x64
 800928e:	fb01 f303 	mul.w	r3, r1, r3
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	00db      	lsls	r3, r3, #3
 8009296:	3332      	adds	r3, #50	; 0x32
 8009298:	4a65      	ldr	r2, [pc, #404]	; (8009430 <UART_SetConfig+0x384>)
 800929a:	fba2 2303 	umull	r2, r3, r2, r3
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	f003 0207 	and.w	r2, r3, #7
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4442      	add	r2, r8
 80092aa:	609a      	str	r2, [r3, #8]
 80092ac:	e26f      	b.n	800978e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092ae:	f7fe fa8f 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 80092b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	461d      	mov	r5, r3
 80092b8:	f04f 0600 	mov.w	r6, #0
 80092bc:	46a8      	mov	r8, r5
 80092be:	46b1      	mov	r9, r6
 80092c0:	eb18 0308 	adds.w	r3, r8, r8
 80092c4:	eb49 0409 	adc.w	r4, r9, r9
 80092c8:	4698      	mov	r8, r3
 80092ca:	46a1      	mov	r9, r4
 80092cc:	eb18 0805 	adds.w	r8, r8, r5
 80092d0:	eb49 0906 	adc.w	r9, r9, r6
 80092d4:	f04f 0100 	mov.w	r1, #0
 80092d8:	f04f 0200 	mov.w	r2, #0
 80092dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092e8:	4688      	mov	r8, r1
 80092ea:	4691      	mov	r9, r2
 80092ec:	eb18 0005 	adds.w	r0, r8, r5
 80092f0:	eb49 0106 	adc.w	r1, r9, r6
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	461d      	mov	r5, r3
 80092fa:	f04f 0600 	mov.w	r6, #0
 80092fe:	196b      	adds	r3, r5, r5
 8009300:	eb46 0406 	adc.w	r4, r6, r6
 8009304:	461a      	mov	r2, r3
 8009306:	4623      	mov	r3, r4
 8009308:	f7f7 fc76 	bl	8000bf8 <__aeabi_uldivmod>
 800930c:	4603      	mov	r3, r0
 800930e:	460c      	mov	r4, r1
 8009310:	461a      	mov	r2, r3
 8009312:	4b47      	ldr	r3, [pc, #284]	; (8009430 <UART_SetConfig+0x384>)
 8009314:	fba3 2302 	umull	r2, r3, r3, r2
 8009318:	095b      	lsrs	r3, r3, #5
 800931a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	461d      	mov	r5, r3
 8009322:	f04f 0600 	mov.w	r6, #0
 8009326:	46a9      	mov	r9, r5
 8009328:	46b2      	mov	sl, r6
 800932a:	eb19 0309 	adds.w	r3, r9, r9
 800932e:	eb4a 040a 	adc.w	r4, sl, sl
 8009332:	4699      	mov	r9, r3
 8009334:	46a2      	mov	sl, r4
 8009336:	eb19 0905 	adds.w	r9, r9, r5
 800933a:	eb4a 0a06 	adc.w	sl, sl, r6
 800933e:	f04f 0100 	mov.w	r1, #0
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800934a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800934e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009352:	4689      	mov	r9, r1
 8009354:	4692      	mov	sl, r2
 8009356:	eb19 0005 	adds.w	r0, r9, r5
 800935a:	eb4a 0106 	adc.w	r1, sl, r6
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	461d      	mov	r5, r3
 8009364:	f04f 0600 	mov.w	r6, #0
 8009368:	196b      	adds	r3, r5, r5
 800936a:	eb46 0406 	adc.w	r4, r6, r6
 800936e:	461a      	mov	r2, r3
 8009370:	4623      	mov	r3, r4
 8009372:	f7f7 fc41 	bl	8000bf8 <__aeabi_uldivmod>
 8009376:	4603      	mov	r3, r0
 8009378:	460c      	mov	r4, r1
 800937a:	461a      	mov	r2, r3
 800937c:	4b2c      	ldr	r3, [pc, #176]	; (8009430 <UART_SetConfig+0x384>)
 800937e:	fba3 1302 	umull	r1, r3, r3, r2
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	2164      	movs	r1, #100	; 0x64
 8009386:	fb01 f303 	mul.w	r3, r1, r3
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	3332      	adds	r3, #50	; 0x32
 8009390:	4a27      	ldr	r2, [pc, #156]	; (8009430 <UART_SetConfig+0x384>)
 8009392:	fba2 2303 	umull	r2, r3, r2, r3
 8009396:	095b      	lsrs	r3, r3, #5
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800939e:	4498      	add	r8, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	461d      	mov	r5, r3
 80093a4:	f04f 0600 	mov.w	r6, #0
 80093a8:	46a9      	mov	r9, r5
 80093aa:	46b2      	mov	sl, r6
 80093ac:	eb19 0309 	adds.w	r3, r9, r9
 80093b0:	eb4a 040a 	adc.w	r4, sl, sl
 80093b4:	4699      	mov	r9, r3
 80093b6:	46a2      	mov	sl, r4
 80093b8:	eb19 0905 	adds.w	r9, r9, r5
 80093bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80093c0:	f04f 0100 	mov.w	r1, #0
 80093c4:	f04f 0200 	mov.w	r2, #0
 80093c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093d4:	4689      	mov	r9, r1
 80093d6:	4692      	mov	sl, r2
 80093d8:	eb19 0005 	adds.w	r0, r9, r5
 80093dc:	eb4a 0106 	adc.w	r1, sl, r6
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	461d      	mov	r5, r3
 80093e6:	f04f 0600 	mov.w	r6, #0
 80093ea:	196b      	adds	r3, r5, r5
 80093ec:	eb46 0406 	adc.w	r4, r6, r6
 80093f0:	461a      	mov	r2, r3
 80093f2:	4623      	mov	r3, r4
 80093f4:	f7f7 fc00 	bl	8000bf8 <__aeabi_uldivmod>
 80093f8:	4603      	mov	r3, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	461a      	mov	r2, r3
 80093fe:	4b0c      	ldr	r3, [pc, #48]	; (8009430 <UART_SetConfig+0x384>)
 8009400:	fba3 1302 	umull	r1, r3, r3, r2
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	2164      	movs	r1, #100	; 0x64
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	3332      	adds	r3, #50	; 0x32
 8009412:	4a07      	ldr	r2, [pc, #28]	; (8009430 <UART_SetConfig+0x384>)
 8009414:	fba2 2303 	umull	r2, r3, r2, r3
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	f003 0207 	and.w	r2, r3, #7
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4442      	add	r2, r8
 8009424:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009426:	e1b2      	b.n	800978e <UART_SetConfig+0x6e2>
 8009428:	40011000 	.word	0x40011000
 800942c:	40011400 	.word	0x40011400
 8009430:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4ad7      	ldr	r2, [pc, #860]	; (8009798 <UART_SetConfig+0x6ec>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d005      	beq.n	800944a <UART_SetConfig+0x39e>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4ad6      	ldr	r2, [pc, #856]	; (800979c <UART_SetConfig+0x6f0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	f040 80d1 	bne.w	80095ec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800944a:	f7fe f9d5 	bl	80077f8 <HAL_RCC_GetPCLK2Freq>
 800944e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	469a      	mov	sl, r3
 8009454:	f04f 0b00 	mov.w	fp, #0
 8009458:	46d0      	mov	r8, sl
 800945a:	46d9      	mov	r9, fp
 800945c:	eb18 0308 	adds.w	r3, r8, r8
 8009460:	eb49 0409 	adc.w	r4, r9, r9
 8009464:	4698      	mov	r8, r3
 8009466:	46a1      	mov	r9, r4
 8009468:	eb18 080a 	adds.w	r8, r8, sl
 800946c:	eb49 090b 	adc.w	r9, r9, fp
 8009470:	f04f 0100 	mov.w	r1, #0
 8009474:	f04f 0200 	mov.w	r2, #0
 8009478:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800947c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009480:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009484:	4688      	mov	r8, r1
 8009486:	4691      	mov	r9, r2
 8009488:	eb1a 0508 	adds.w	r5, sl, r8
 800948c:	eb4b 0609 	adc.w	r6, fp, r9
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	4619      	mov	r1, r3
 8009496:	f04f 0200 	mov.w	r2, #0
 800949a:	f04f 0300 	mov.w	r3, #0
 800949e:	f04f 0400 	mov.w	r4, #0
 80094a2:	0094      	lsls	r4, r2, #2
 80094a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094a8:	008b      	lsls	r3, r1, #2
 80094aa:	461a      	mov	r2, r3
 80094ac:	4623      	mov	r3, r4
 80094ae:	4628      	mov	r0, r5
 80094b0:	4631      	mov	r1, r6
 80094b2:	f7f7 fba1 	bl	8000bf8 <__aeabi_uldivmod>
 80094b6:	4603      	mov	r3, r0
 80094b8:	460c      	mov	r4, r1
 80094ba:	461a      	mov	r2, r3
 80094bc:	4bb8      	ldr	r3, [pc, #736]	; (80097a0 <UART_SetConfig+0x6f4>)
 80094be:	fba3 2302 	umull	r2, r3, r3, r2
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	469b      	mov	fp, r3
 80094cc:	f04f 0c00 	mov.w	ip, #0
 80094d0:	46d9      	mov	r9, fp
 80094d2:	46e2      	mov	sl, ip
 80094d4:	eb19 0309 	adds.w	r3, r9, r9
 80094d8:	eb4a 040a 	adc.w	r4, sl, sl
 80094dc:	4699      	mov	r9, r3
 80094de:	46a2      	mov	sl, r4
 80094e0:	eb19 090b 	adds.w	r9, r9, fp
 80094e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094e8:	f04f 0100 	mov.w	r1, #0
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094fc:	4689      	mov	r9, r1
 80094fe:	4692      	mov	sl, r2
 8009500:	eb1b 0509 	adds.w	r5, fp, r9
 8009504:	eb4c 060a 	adc.w	r6, ip, sl
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	4619      	mov	r1, r3
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	f04f 0400 	mov.w	r4, #0
 800951a:	0094      	lsls	r4, r2, #2
 800951c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009520:	008b      	lsls	r3, r1, #2
 8009522:	461a      	mov	r2, r3
 8009524:	4623      	mov	r3, r4
 8009526:	4628      	mov	r0, r5
 8009528:	4631      	mov	r1, r6
 800952a:	f7f7 fb65 	bl	8000bf8 <__aeabi_uldivmod>
 800952e:	4603      	mov	r3, r0
 8009530:	460c      	mov	r4, r1
 8009532:	461a      	mov	r2, r3
 8009534:	4b9a      	ldr	r3, [pc, #616]	; (80097a0 <UART_SetConfig+0x6f4>)
 8009536:	fba3 1302 	umull	r1, r3, r3, r2
 800953a:	095b      	lsrs	r3, r3, #5
 800953c:	2164      	movs	r1, #100	; 0x64
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	3332      	adds	r3, #50	; 0x32
 8009548:	4a95      	ldr	r2, [pc, #596]	; (80097a0 <UART_SetConfig+0x6f4>)
 800954a:	fba2 2303 	umull	r2, r3, r2, r3
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009554:	4498      	add	r8, r3
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	469b      	mov	fp, r3
 800955a:	f04f 0c00 	mov.w	ip, #0
 800955e:	46d9      	mov	r9, fp
 8009560:	46e2      	mov	sl, ip
 8009562:	eb19 0309 	adds.w	r3, r9, r9
 8009566:	eb4a 040a 	adc.w	r4, sl, sl
 800956a:	4699      	mov	r9, r3
 800956c:	46a2      	mov	sl, r4
 800956e:	eb19 090b 	adds.w	r9, r9, fp
 8009572:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009576:	f04f 0100 	mov.w	r1, #0
 800957a:	f04f 0200 	mov.w	r2, #0
 800957e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800958a:	4689      	mov	r9, r1
 800958c:	4692      	mov	sl, r2
 800958e:	eb1b 0509 	adds.w	r5, fp, r9
 8009592:	eb4c 060a 	adc.w	r6, ip, sl
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	4619      	mov	r1, r3
 800959c:	f04f 0200 	mov.w	r2, #0
 80095a0:	f04f 0300 	mov.w	r3, #0
 80095a4:	f04f 0400 	mov.w	r4, #0
 80095a8:	0094      	lsls	r4, r2, #2
 80095aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095ae:	008b      	lsls	r3, r1, #2
 80095b0:	461a      	mov	r2, r3
 80095b2:	4623      	mov	r3, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	4631      	mov	r1, r6
 80095b8:	f7f7 fb1e 	bl	8000bf8 <__aeabi_uldivmod>
 80095bc:	4603      	mov	r3, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	461a      	mov	r2, r3
 80095c2:	4b77      	ldr	r3, [pc, #476]	; (80097a0 <UART_SetConfig+0x6f4>)
 80095c4:	fba3 1302 	umull	r1, r3, r3, r2
 80095c8:	095b      	lsrs	r3, r3, #5
 80095ca:	2164      	movs	r1, #100	; 0x64
 80095cc:	fb01 f303 	mul.w	r3, r1, r3
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	3332      	adds	r3, #50	; 0x32
 80095d6:	4a72      	ldr	r2, [pc, #456]	; (80097a0 <UART_SetConfig+0x6f4>)
 80095d8:	fba2 2303 	umull	r2, r3, r2, r3
 80095dc:	095b      	lsrs	r3, r3, #5
 80095de:	f003 020f 	and.w	r2, r3, #15
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4442      	add	r2, r8
 80095e8:	609a      	str	r2, [r3, #8]
 80095ea:	e0d0      	b.n	800978e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ec:	f7fe f8f0 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 80095f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	469a      	mov	sl, r3
 80095f6:	f04f 0b00 	mov.w	fp, #0
 80095fa:	46d0      	mov	r8, sl
 80095fc:	46d9      	mov	r9, fp
 80095fe:	eb18 0308 	adds.w	r3, r8, r8
 8009602:	eb49 0409 	adc.w	r4, r9, r9
 8009606:	4698      	mov	r8, r3
 8009608:	46a1      	mov	r9, r4
 800960a:	eb18 080a 	adds.w	r8, r8, sl
 800960e:	eb49 090b 	adc.w	r9, r9, fp
 8009612:	f04f 0100 	mov.w	r1, #0
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800961e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009622:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009626:	4688      	mov	r8, r1
 8009628:	4691      	mov	r9, r2
 800962a:	eb1a 0508 	adds.w	r5, sl, r8
 800962e:	eb4b 0609 	adc.w	r6, fp, r9
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	4619      	mov	r1, r3
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	f04f 0400 	mov.w	r4, #0
 8009644:	0094      	lsls	r4, r2, #2
 8009646:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800964a:	008b      	lsls	r3, r1, #2
 800964c:	461a      	mov	r2, r3
 800964e:	4623      	mov	r3, r4
 8009650:	4628      	mov	r0, r5
 8009652:	4631      	mov	r1, r6
 8009654:	f7f7 fad0 	bl	8000bf8 <__aeabi_uldivmod>
 8009658:	4603      	mov	r3, r0
 800965a:	460c      	mov	r4, r1
 800965c:	461a      	mov	r2, r3
 800965e:	4b50      	ldr	r3, [pc, #320]	; (80097a0 <UART_SetConfig+0x6f4>)
 8009660:	fba3 2302 	umull	r2, r3, r3, r2
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	469b      	mov	fp, r3
 800966e:	f04f 0c00 	mov.w	ip, #0
 8009672:	46d9      	mov	r9, fp
 8009674:	46e2      	mov	sl, ip
 8009676:	eb19 0309 	adds.w	r3, r9, r9
 800967a:	eb4a 040a 	adc.w	r4, sl, sl
 800967e:	4699      	mov	r9, r3
 8009680:	46a2      	mov	sl, r4
 8009682:	eb19 090b 	adds.w	r9, r9, fp
 8009686:	eb4a 0a0c 	adc.w	sl, sl, ip
 800968a:	f04f 0100 	mov.w	r1, #0
 800968e:	f04f 0200 	mov.w	r2, #0
 8009692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800969a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800969e:	4689      	mov	r9, r1
 80096a0:	4692      	mov	sl, r2
 80096a2:	eb1b 0509 	adds.w	r5, fp, r9
 80096a6:	eb4c 060a 	adc.w	r6, ip, sl
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	4619      	mov	r1, r3
 80096b0:	f04f 0200 	mov.w	r2, #0
 80096b4:	f04f 0300 	mov.w	r3, #0
 80096b8:	f04f 0400 	mov.w	r4, #0
 80096bc:	0094      	lsls	r4, r2, #2
 80096be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096c2:	008b      	lsls	r3, r1, #2
 80096c4:	461a      	mov	r2, r3
 80096c6:	4623      	mov	r3, r4
 80096c8:	4628      	mov	r0, r5
 80096ca:	4631      	mov	r1, r6
 80096cc:	f7f7 fa94 	bl	8000bf8 <__aeabi_uldivmod>
 80096d0:	4603      	mov	r3, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b32      	ldr	r3, [pc, #200]	; (80097a0 <UART_SetConfig+0x6f4>)
 80096d8:	fba3 1302 	umull	r1, r3, r3, r2
 80096dc:	095b      	lsrs	r3, r3, #5
 80096de:	2164      	movs	r1, #100	; 0x64
 80096e0:	fb01 f303 	mul.w	r3, r1, r3
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	3332      	adds	r3, #50	; 0x32
 80096ea:	4a2d      	ldr	r2, [pc, #180]	; (80097a0 <UART_SetConfig+0x6f4>)
 80096ec:	fba2 2303 	umull	r2, r3, r2, r3
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096f6:	4498      	add	r8, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	469b      	mov	fp, r3
 80096fc:	f04f 0c00 	mov.w	ip, #0
 8009700:	46d9      	mov	r9, fp
 8009702:	46e2      	mov	sl, ip
 8009704:	eb19 0309 	adds.w	r3, r9, r9
 8009708:	eb4a 040a 	adc.w	r4, sl, sl
 800970c:	4699      	mov	r9, r3
 800970e:	46a2      	mov	sl, r4
 8009710:	eb19 090b 	adds.w	r9, r9, fp
 8009714:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009718:	f04f 0100 	mov.w	r1, #0
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800972c:	4689      	mov	r9, r1
 800972e:	4692      	mov	sl, r2
 8009730:	eb1b 0509 	adds.w	r5, fp, r9
 8009734:	eb4c 060a 	adc.w	r6, ip, sl
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	4619      	mov	r1, r3
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	f04f 0400 	mov.w	r4, #0
 800974a:	0094      	lsls	r4, r2, #2
 800974c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009750:	008b      	lsls	r3, r1, #2
 8009752:	461a      	mov	r2, r3
 8009754:	4623      	mov	r3, r4
 8009756:	4628      	mov	r0, r5
 8009758:	4631      	mov	r1, r6
 800975a:	f7f7 fa4d 	bl	8000bf8 <__aeabi_uldivmod>
 800975e:	4603      	mov	r3, r0
 8009760:	460c      	mov	r4, r1
 8009762:	461a      	mov	r2, r3
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <UART_SetConfig+0x6f4>)
 8009766:	fba3 1302 	umull	r1, r3, r3, r2
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	2164      	movs	r1, #100	; 0x64
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	3332      	adds	r3, #50	; 0x32
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <UART_SetConfig+0x6f4>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4442      	add	r2, r8
 800978a:	609a      	str	r2, [r3, #8]
}
 800978c:	e7ff      	b.n	800978e <UART_SetConfig+0x6e2>
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	40011000 	.word	0x40011000
 800979c:	40011400 	.word	0x40011400
 80097a0:	51eb851f 	.word	0x51eb851f

080097a4 <MQTT_Open_Connect>:

#include "Middleware.h"

/* MQTT Open Contact */
response_t MQTT_Open_Connect(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
	g_flag = RESPONSE_ERR;
 80097a8:	4b1e      	ldr	r3, [pc, #120]	; (8009824 <MQTT_Open_Connect+0x80>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	701a      	strb	r2, [r3, #0]
	/* Wait to open network port 8883 */
	while(g_flag == RESPONSE_ERR)
 80097ae:	e009      	b.n	80097c4 <MQTT_Open_Connect+0x20>
	{
			#if TEST_MQTT_SSL == 1
			g_flag = MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 8883);
 80097b0:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80097b4:	491c      	ldr	r1, [pc, #112]	; (8009828 <MQTT_Open_Connect+0x84>)
 80097b6:	2000      	movs	r0, #0
 80097b8:	f7f8 fc9e 	bl	80020f8 <MQTT_Open>
 80097bc:	4603      	mov	r3, r0
 80097be:	461a      	mov	r2, r3
 80097c0:	4b18      	ldr	r3, [pc, #96]	; (8009824 <MQTT_Open_Connect+0x80>)
 80097c2:	701a      	strb	r2, [r3, #0]
	while(g_flag == RESPONSE_ERR)
 80097c4:	4b17      	ldr	r3, [pc, #92]	; (8009824 <MQTT_Open_Connect+0x80>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0f1      	beq.n	80097b0 <MQTT_Open_Connect+0xc>
			#else
			g_flag = MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 1883);
			#endif
	}
	g_mqtt_isOn = ON;
 80097cc:	4b17      	ldr	r3, [pc, #92]	; (800982c <MQTT_Open_Connect+0x88>)
 80097ce:	2201      	movs	r2, #1
 80097d0:	701a      	strb	r2, [r3, #0]

	/* Wait to connect to broker*/
	g_flag = RESPONSE_ERR;
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <MQTT_Open_Connect+0x80>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
	g_flag = MQTT_Connect(0, (uint8_t*)"quang", (uint8_t*)"qn052289@gmail.com", (uint8_t*)"182739");
 80097d8:	4b15      	ldr	r3, [pc, #84]	; (8009830 <MQTT_Open_Connect+0x8c>)
 80097da:	4a16      	ldr	r2, [pc, #88]	; (8009834 <MQTT_Open_Connect+0x90>)
 80097dc:	4916      	ldr	r1, [pc, #88]	; (8009838 <MQTT_Open_Connect+0x94>)
 80097de:	2000      	movs	r0, #0
 80097e0:	f7f8 fd4e 	bl	8002280 <MQTT_Connect>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <MQTT_Open_Connect+0x80>)
 80097ea:	701a      	strb	r2, [r3, #0]
	while(g_flag != RESPONSE_OK)
 80097ec:	e00f      	b.n	800980e <MQTT_Open_Connect+0x6a>
	{
			/* Reopen network and reconnect */
			#if TEST_MQTT_SSL == 1
			MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 8883);
 80097ee:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80097f2:	490d      	ldr	r1, [pc, #52]	; (8009828 <MQTT_Open_Connect+0x84>)
 80097f4:	2000      	movs	r0, #0
 80097f6:	f7f8 fc7f 	bl	80020f8 <MQTT_Open>
			#else
			MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 1883);
			#endif
			g_flag = MQTT_Connect(0, (uint8_t*)"quang", (uint8_t*)"qn052289@gmail.com", (uint8_t*)"182739");
 80097fa:	4b0d      	ldr	r3, [pc, #52]	; (8009830 <MQTT_Open_Connect+0x8c>)
 80097fc:	4a0d      	ldr	r2, [pc, #52]	; (8009834 <MQTT_Open_Connect+0x90>)
 80097fe:	490e      	ldr	r1, [pc, #56]	; (8009838 <MQTT_Open_Connect+0x94>)
 8009800:	2000      	movs	r0, #0
 8009802:	f7f8 fd3d 	bl	8002280 <MQTT_Connect>
 8009806:	4603      	mov	r3, r0
 8009808:	461a      	mov	r2, r3
 800980a:	4b06      	ldr	r3, [pc, #24]	; (8009824 <MQTT_Open_Connect+0x80>)
 800980c:	701a      	strb	r2, [r3, #0]
	while(g_flag != RESPONSE_OK)
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <MQTT_Open_Connect+0x80>)
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d1eb      	bne.n	80097ee <MQTT_Open_Connect+0x4a>
	}
	g_flag = RESPONSE_ERR;
 8009816:	4b03      	ldr	r3, [pc, #12]	; (8009824 <MQTT_Open_Connect+0x80>)
 8009818:	2200      	movs	r2, #0
 800981a:	701a      	strb	r2, [r3, #0]
	return RESPONSE_OK;
 800981c:	2301      	movs	r3, #1
}
 800981e:	4618      	mov	r0, r3
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000063e 	.word	0x2000063e
 8009828:	0800e698 	.word	0x0800e698
 800982c:	20000844 	.word	0x20000844
 8009830:	0800e6ac 	.word	0x0800e6ac
 8009834:	0800e6b4 	.word	0x0800e6b4
 8009838:	0800e6c8 	.word	0x0800e6c8

0800983c <LTE_Disable>:
static void Convert_U8_To_Str(char* res, uint8_t inputValue);
static void Write_Read_Pub(void);
extern void SystemClock_Config(void);

static void LTE_Disable(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
	/* Set the pin to disable the the LTE power */
	HAL_GPIO_WritePin(PWR_EN_PORT, PWR_EN_PIN, GPIO_PIN_SET);
 8009840:	2201      	movs	r2, #1
 8009842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009846:	4802      	ldr	r0, [pc, #8]	; (8009850 <LTE_Disable+0x14>)
 8009848:	f7fc fbc6 	bl	8005fd8 <HAL_GPIO_WritePin>
}
 800984c:	bf00      	nop
 800984e:	bd80      	pop	{r7, pc}
 8009850:	40020800 	.word	0x40020800

08009854 <softUART_DeInit>:

static void softUART_DeInit(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(UART_EMUL_RX_PORT, UART_EMUL_RX_PIN);
 8009858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800985c:	4802      	ldr	r0, [pc, #8]	; (8009868 <softUART_DeInit+0x14>)
 800985e:	f7fc fad9 	bl	8005e14 <HAL_GPIO_DeInit>
}
 8009862:	bf00      	nop
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	40020000 	.word	0x40020000

0800986c <softUART_ReInit>:


static void softUART_ReInit(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStruct;

	/* Configure GPIOC for UART Emulation Rx */
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009872:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <softUART_ReInit+0x34>)
 8009874:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin  = UART_EMUL_RX_PIN;
 8009876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800987a:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(UART_EMUL_RX_PORT, &GPIO_InitStruct);
 800987c:	1d3b      	adds	r3, r7, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4808      	ldr	r0, [pc, #32]	; (80098a4 <softUART_ReInit+0x38>)
 8009882:	f7fc f945 	bl	8005b10 <HAL_GPIO_Init>

	/*##-2- Enable NVIC for line Rx  #################################*/
	/* Enable and set EXTI Line Interrupt to the highest priority */
	HAL_NVIC_SetPriority(UART_EMUL_EXTI_IRQ, 0, 0);
 8009886:	2200      	movs	r2, #0
 8009888:	2100      	movs	r1, #0
 800988a:	2028      	movs	r0, #40	; 0x28
 800988c:	f7fb ff89 	bl	80057a2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_EMUL_EXTI_IRQ);
 8009890:	2028      	movs	r0, #40	; 0x28
 8009892:	f7fb ffa2 	bl	80057da <HAL_NVIC_EnableIRQ>
}
 8009896:	bf00      	nop
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	10210000 	.word	0x10210000
 80098a4:	40020000 	.word	0x40020000

080098a8 <MQTT_Config>:


static void MQTT_Config(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
	/* Config the MQTT */
	MQTT_Recv_Mode(0, 0, 1);
 80098ac:	2201      	movs	r2, #1
 80098ae:	2100      	movs	r1, #0
 80098b0:	2000      	movs	r0, #0
 80098b2:	f7f8 fbad 	bl	8002010 <MQTT_Recv_Mode>
	MQTT_Session(0, 0);
 80098b6:	2100      	movs	r1, #0
 80098b8:	2000      	movs	r0, #0
 80098ba:	f7f8 fbe5 	bl	8002088 <MQTT_Session>

	/*Connect with SSL*/
	MQTT_SSL_Mode(0, 1, 0);
 80098be:	2200      	movs	r2, #0
 80098c0:	2101      	movs	r1, #1
 80098c2:	2000      	movs	r0, #0
 80098c4:	f7f8 fe38 	bl	8002538 <MQTT_SSL_Mode>
	MQTT_SSL_Certificate(0);
 80098c8:	2000      	movs	r0, #0
 80098ca:	f7f8 fe71 	bl	80025b0 <MQTT_SSL_Certificate>
	MQTT_SSL_Level(0, 0);
 80098ce:	2100      	movs	r1, #0
 80098d0:	2000      	movs	r0, #0
 80098d2:	f7f8 fedd 	bl	8002690 <MQTT_SSL_Level>
	MQTT_SSL_Version(0, 4);
 80098d6:	2104      	movs	r1, #4
 80098d8:	2000      	movs	r0, #0
 80098da:	f7f8 ff11 	bl	8002700 <MQTT_SSL_Version>
	MQTT_SSL_Ciphersuite(0, (uint8_t*)"0xFFFF");
 80098de:	4905      	ldr	r1, [pc, #20]	; (80098f4 <MQTT_Config+0x4c>)
 80098e0:	2000      	movs	r0, #0
 80098e2:	f7f8 ff45 	bl	8002770 <MQTT_SSL_Ciphersuite>
	MQTT_SSL_Ignore(0, 1);
 80098e6:	2101      	movs	r1, #1
 80098e8:	2000      	movs	r0, #0
 80098ea:	f7f8 ff77 	bl	80027dc <MQTT_SSL_Ignore>
}
 80098ee:	bf00      	nop
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	0800e6d0 	.word	0x0800e6d0

080098f8 <Flash_Init>:

static void Flash_Init(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
	Log_Info((uint8_t*)"Inited Flash\n", 13);
 80098fc:	210d      	movs	r1, #13
 80098fe:	4804      	ldr	r0, [pc, #16]	; (8009910 <Flash_Init+0x18>)
 8009900:	f7f8 f886 	bl	8001a10 <Log_Info>
	W25Q16_Init();
 8009904:	f7f8 f97c 	bl	8001c00 <W25Q16_Init>
	W25Q16_Erase_Chip();
 8009908:	f7f8 fa14 	bl	8001d34 <W25Q16_Erase_Chip>
}
 800990c:	bf00      	nop
 800990e:	bd80      	pop	{r7, pc}
 8009910:	0800e6d8 	.word	0x0800e6d8

08009914 <Convert_U8_To_Str>:

static void Convert_U8_To_Str(char* res, uint8_t inputValue)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
    if(inputValue < 10)
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	2b09      	cmp	r3, #9
 8009924:	d80a      	bhi.n	800993c <Convert_U8_To_Str+0x28>
		{
		    res[0] = '0';
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2230      	movs	r2, #48	; 0x30
 800992a:	701a      	strb	r2, [r3, #0]
			  sprintf(&res[1], "%d", inputValue);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3301      	adds	r3, #1
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	4907      	ldr	r1, [pc, #28]	; (8009950 <Convert_U8_To_Str+0x3c>)
 8009934:	4618      	mov	r0, r3
 8009936:	f000 ff9d 	bl	800a874 <siprintf>
		}
		else sprintf(res, "%d", inputValue);
}
 800993a:	e005      	b.n	8009948 <Convert_U8_To_Str+0x34>
		else sprintf(res, "%d", inputValue);
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	461a      	mov	r2, r3
 8009940:	4903      	ldr	r1, [pc, #12]	; (8009950 <Convert_U8_To_Str+0x3c>)
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 ff96 	bl	800a874 <siprintf>
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	0800e6e8 	.word	0x0800e6e8

08009954 <Write_Read_Pub>:

static void Write_Read_Pub(void)
{
 8009954:	b590      	push	{r4, r7, lr}
 8009956:	b087      	sub	sp, #28
 8009958:	af04      	add	r7, sp, #16
		/*Test Write, Read Flash and pub data to Broker using Union*/
		W25Q16_Erase_Sector(0);
 800995a:	2000      	movs	r0, #0
 800995c:	f7f8 fa1a 	bl	8001d94 <W25Q16_Erase_Sector>

		/* Set data to write into flash */
		g_gps_data.long_t.dLongRaw = g_test_L76.dLongtitude;
 8009960:	4b68      	ldr	r3, [pc, #416]	; (8009b04 <Write_Read_Pub+0x1b0>)
 8009962:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009966:	4a68      	ldr	r2, [pc, #416]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009968:	e9c2 3400 	strd	r3, r4, [r2]
		g_gps_data.lat_t.dLatRaw = g_test_L76.dLattitude;
 800996c:	4b65      	ldr	r3, [pc, #404]	; (8009b04 <Write_Read_Pub+0x1b0>)
 800996e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009972:	4a65      	ldr	r2, [pc, #404]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009974:	e9c2 3402 	strd	r3, r4, [r2, #8]
		g_gps_data.u8Day = g_test_L76.u8Day;
 8009978:	4b62      	ldr	r3, [pc, #392]	; (8009b04 <Write_Read_Pub+0x1b0>)
 800997a:	7c1a      	ldrb	r2, [r3, #16]
 800997c:	4b62      	ldr	r3, [pc, #392]	; (8009b08 <Write_Read_Pub+0x1b4>)
 800997e:	741a      	strb	r2, [r3, #16]
		g_gps_data.u8Month = g_test_L76.u8Month;
 8009980:	4b60      	ldr	r3, [pc, #384]	; (8009b04 <Write_Read_Pub+0x1b0>)
 8009982:	7c5a      	ldrb	r2, [r3, #17]
 8009984:	4b60      	ldr	r3, [pc, #384]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009986:	745a      	strb	r2, [r3, #17]
		g_gps_data.u8Year  = g_test_L76.u8Year;
 8009988:	4b5e      	ldr	r3, [pc, #376]	; (8009b04 <Write_Read_Pub+0x1b0>)
 800998a:	7c9a      	ldrb	r2, [r3, #18]
 800998c:	4b5e      	ldr	r3, [pc, #376]	; (8009b08 <Write_Read_Pub+0x1b4>)
 800998e:	749a      	strb	r2, [r3, #18]
		g_gps_data.u8Hour = g_test_L76.u8Hour;
 8009990:	4b5c      	ldr	r3, [pc, #368]	; (8009b04 <Write_Read_Pub+0x1b0>)
 8009992:	7cda      	ldrb	r2, [r3, #19]
 8009994:	4b5c      	ldr	r3, [pc, #368]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009996:	74da      	strb	r2, [r3, #19]
		g_gps_data.u8Minute = g_test_L76.u8Minute;
 8009998:	4b5a      	ldr	r3, [pc, #360]	; (8009b04 <Write_Read_Pub+0x1b0>)
 800999a:	7d1a      	ldrb	r2, [r3, #20]
 800999c:	4b5a      	ldr	r3, [pc, #360]	; (8009b08 <Write_Read_Pub+0x1b4>)
 800999e:	751a      	strb	r2, [r3, #20]
		g_gps_data.u8Second = g_test_L76.u8Second;
 80099a0:	4b58      	ldr	r3, [pc, #352]	; (8009b04 <Write_Read_Pub+0x1b0>)
 80099a2:	7d5a      	ldrb	r2, [r3, #21]
 80099a4:	4b58      	ldr	r3, [pc, #352]	; (8009b08 <Write_Read_Pub+0x1b4>)
 80099a6:	755a      	strb	r2, [r3, #21]

		Log_Info((uint8_t*)"Write Data\n", 11);
 80099a8:	210b      	movs	r1, #11
 80099aa:	4858      	ldr	r0, [pc, #352]	; (8009b0c <Write_Read_Pub+0x1b8>)
 80099ac:	f7f8 f830 	bl	8001a10 <Log_Info>
		for(uint8_t i = 0; i < 8; i++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	71fb      	strb	r3, [r7, #7]
 80099b4:	e008      	b.n	80099c8 <Write_Read_Pub+0x74>
		{
				g_write_buffer[i] = g_gps_data.long_t.longBytes[i];
 80099b6:	79fa      	ldrb	r2, [r7, #7]
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	4953      	ldr	r1, [pc, #332]	; (8009b08 <Write_Read_Pub+0x1b4>)
 80099bc:	5c89      	ldrb	r1, [r1, r2]
 80099be:	4a54      	ldr	r2, [pc, #336]	; (8009b10 <Write_Read_Pub+0x1bc>)
 80099c0:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	3301      	adds	r3, #1
 80099c6:	71fb      	strb	r3, [r7, #7]
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b07      	cmp	r3, #7
 80099cc:	d9f3      	bls.n	80099b6 <Write_Read_Pub+0x62>
		}
		for(uint8_t i = 8; i < 16; i++)
 80099ce:	2308      	movs	r3, #8
 80099d0:	71bb      	strb	r3, [r7, #6]
 80099d2:	e00b      	b.n	80099ec <Write_Read_Pub+0x98>
		{
				g_write_buffer[i] = g_gps_data.lat_t.latBytes[i - 8];
 80099d4:	79bb      	ldrb	r3, [r7, #6]
 80099d6:	f1a3 0208 	sub.w	r2, r3, #8
 80099da:	79bb      	ldrb	r3, [r7, #6]
 80099dc:	494a      	ldr	r1, [pc, #296]	; (8009b08 <Write_Read_Pub+0x1b4>)
 80099de:	440a      	add	r2, r1
 80099e0:	7a11      	ldrb	r1, [r2, #8]
 80099e2:	4a4b      	ldr	r2, [pc, #300]	; (8009b10 <Write_Read_Pub+0x1bc>)
 80099e4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 8; i < 16; i++)
 80099e6:	79bb      	ldrb	r3, [r7, #6]
 80099e8:	3301      	adds	r3, #1
 80099ea:	71bb      	strb	r3, [r7, #6]
 80099ec:	79bb      	ldrb	r3, [r7, #6]
 80099ee:	2b0f      	cmp	r3, #15
 80099f0:	d9f0      	bls.n	80099d4 <Write_Read_Pub+0x80>
		}
		g_write_buffer[16] = g_gps_data.u8Day;
 80099f2:	4b45      	ldr	r3, [pc, #276]	; (8009b08 <Write_Read_Pub+0x1b4>)
 80099f4:	7c1a      	ldrb	r2, [r3, #16]
 80099f6:	4b46      	ldr	r3, [pc, #280]	; (8009b10 <Write_Read_Pub+0x1bc>)
 80099f8:	741a      	strb	r2, [r3, #16]
		g_write_buffer[17] = g_gps_data.u8Month;
 80099fa:	4b43      	ldr	r3, [pc, #268]	; (8009b08 <Write_Read_Pub+0x1b4>)
 80099fc:	7c5a      	ldrb	r2, [r3, #17]
 80099fe:	4b44      	ldr	r3, [pc, #272]	; (8009b10 <Write_Read_Pub+0x1bc>)
 8009a00:	745a      	strb	r2, [r3, #17]
		g_write_buffer[18] = g_gps_data.u8Year;
 8009a02:	4b41      	ldr	r3, [pc, #260]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a04:	7c9a      	ldrb	r2, [r3, #18]
 8009a06:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <Write_Read_Pub+0x1bc>)
 8009a08:	749a      	strb	r2, [r3, #18]
		g_write_buffer[19] = g_gps_data.u8Hour;
 8009a0a:	4b3f      	ldr	r3, [pc, #252]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a0c:	7cda      	ldrb	r2, [r3, #19]
 8009a0e:	4b40      	ldr	r3, [pc, #256]	; (8009b10 <Write_Read_Pub+0x1bc>)
 8009a10:	74da      	strb	r2, [r3, #19]
		g_write_buffer[20] = g_gps_data.u8Minute;
 8009a12:	4b3d      	ldr	r3, [pc, #244]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a14:	7d1a      	ldrb	r2, [r3, #20]
 8009a16:	4b3e      	ldr	r3, [pc, #248]	; (8009b10 <Write_Read_Pub+0x1bc>)
 8009a18:	751a      	strb	r2, [r3, #20]
		g_write_buffer[21] = g_gps_data.u8Second;
 8009a1a:	4b3b      	ldr	r3, [pc, #236]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a1c:	7d5a      	ldrb	r2, [r3, #21]
 8009a1e:	4b3c      	ldr	r3, [pc, #240]	; (8009b10 <Write_Read_Pub+0x1bc>)
 8009a20:	755a      	strb	r2, [r3, #21]

		W25Q16_WritePage(g_write_buffer, 0, 0x00, 22);
 8009a22:	2316      	movs	r3, #22
 8009a24:	2200      	movs	r2, #0
 8009a26:	2100      	movs	r1, #0
 8009a28:	4839      	ldr	r0, [pc, #228]	; (8009b10 <Write_Read_Pub+0x1bc>)
 8009a2a:	f7f8 fa03 	bl	8001e34 <W25Q16_WritePage>

		HAL_Delay(500);
 8009a2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a32:	f7fb fd99 	bl	8005568 <HAL_Delay>
		Log_Info((uint8_t*)"ReadSomeByte\n", 13);
 8009a36:	210d      	movs	r1, #13
 8009a38:	4836      	ldr	r0, [pc, #216]	; (8009b14 <Write_Read_Pub+0x1c0>)
 8009a3a:	f7f7 ffe9 	bl	8001a10 <Log_Info>
		W25Q16_ReadSomeBytes(g_read_buffer, 0x00, 22);
 8009a3e:	2216      	movs	r2, #22
 8009a40:	2100      	movs	r1, #0
 8009a42:	4835      	ldr	r0, [pc, #212]	; (8009b18 <Write_Read_Pub+0x1c4>)
 8009a44:	f7f8 fa62 	bl	8001f0c <W25Q16_ReadSomeBytes>
		/*Publish Raw data*/

		/*Test send string type to MQTT*/
		HAL_Delay(500);
 8009a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a4c:	f7fb fd8c 	bl	8005568 <HAL_Delay>
		//clear data of gps variables
		g_gps_data.long_t.dLongRaw = 0;
 8009a50:	4a2d      	ldr	r2, [pc, #180]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a52:	f04f 0300 	mov.w	r3, #0
 8009a56:	f04f 0400 	mov.w	r4, #0
 8009a5a:	e9c2 3400 	strd	r3, r4, [r2]
		g_gps_data.lat_t.dLatRaw = 0;
 8009a5e:	4a2a      	ldr	r2, [pc, #168]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	f04f 0400 	mov.w	r4, #0
 8009a68:	e9c2 3402 	strd	r3, r4, [r2, #8]
		g_gps_data.u8Day = 0;
 8009a6c:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	741a      	strb	r2, [r3, #16]
		g_gps_data.u8Month = 0;
 8009a72:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	745a      	strb	r2, [r3, #17]
		g_gps_data.u8Year = 0;
 8009a78:	4b23      	ldr	r3, [pc, #140]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	749a      	strb	r2, [r3, #18]
		g_gps_data.u8Hour = 0;
 8009a7e:	4b22      	ldr	r3, [pc, #136]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	74da      	strb	r2, [r3, #19]
		g_gps_data.u8Minute = 0;
 8009a84:	4b20      	ldr	r3, [pc, #128]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	751a      	strb	r2, [r3, #20]
		g_gps_data.u8Second = 0;
 8009a8a:	4b1f      	ldr	r3, [pc, #124]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	755a      	strb	r2, [r3, #21]

		/*read and pub longitude*/
		memset(g_buff_send, '\0', 60); //clear buffer send
 8009a90:	223c      	movs	r2, #60	; 0x3c
 8009a92:	2100      	movs	r1, #0
 8009a94:	4821      	ldr	r0, [pc, #132]	; (8009b1c <Write_Read_Pub+0x1c8>)
 8009a96:	f000 fa0d 	bl	8009eb4 <memset>

		memset(g_buff_send_long_lat, '\0', 30); //clear buffer long_lat
 8009a9a:	221e      	movs	r2, #30
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	4820      	ldr	r0, [pc, #128]	; (8009b20 <Write_Read_Pub+0x1cc>)
 8009aa0:	f000 fa08 	bl	8009eb4 <memset>
		for(uint8_t i = 0; i < 8; i++)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	717b      	strb	r3, [r7, #5]
 8009aa8:	e008      	b.n	8009abc <Write_Read_Pub+0x168>
		{
				g_gps_data.long_t.longBytes[i] = g_read_buffer[i];
 8009aaa:	797a      	ldrb	r2, [r7, #5]
 8009aac:	797b      	ldrb	r3, [r7, #5]
 8009aae:	491a      	ldr	r1, [pc, #104]	; (8009b18 <Write_Read_Pub+0x1c4>)
 8009ab0:	5c89      	ldrb	r1, [r1, r2]
 8009ab2:	4a15      	ldr	r2, [pc, #84]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009ab4:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8009ab6:	797b      	ldrb	r3, [r7, #5]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	717b      	strb	r3, [r7, #5]
 8009abc:	797b      	ldrb	r3, [r7, #5]
 8009abe:	2b07      	cmp	r3, #7
 8009ac0:	d9f3      	bls.n	8009aaa <Write_Read_Pub+0x156>
		}

		sprintf(g_buff_send_long_lat,  "%lf", g_gps_data.long_t.dLongRaw);
 8009ac2:	4b11      	ldr	r3, [pc, #68]	; (8009b08 <Write_Read_Pub+0x1b4>)
 8009ac4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4623      	mov	r3, r4
 8009acc:	4915      	ldr	r1, [pc, #84]	; (8009b24 <Write_Read_Pub+0x1d0>)
 8009ace:	4814      	ldr	r0, [pc, #80]	; (8009b20 <Write_Read_Pub+0x1cc>)
 8009ad0:	f000 fed0 	bl	800a874 <siprintf>
		strcat(g_buff_send, g_buff_send_long_lat);
 8009ad4:	4912      	ldr	r1, [pc, #72]	; (8009b20 <Write_Read_Pub+0x1cc>)
 8009ad6:	4811      	ldr	r0, [pc, #68]	; (8009b1c <Write_Read_Pub+0x1c8>)
 8009ad8:	f000 feec 	bl	800a8b4 <strcat>
		strcat(g_buff_send, (const char*)",");
 8009adc:	480f      	ldr	r0, [pc, #60]	; (8009b1c <Write_Read_Pub+0x1c8>)
 8009ade:	f7f6 fb7f 	bl	80001e0 <strlen>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <Write_Read_Pub+0x1c8>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	490f      	ldr	r1, [pc, #60]	; (8009b28 <Write_Read_Pub+0x1d4>)
 8009aec:	461a      	mov	r2, r3
 8009aee:	460b      	mov	r3, r1
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	8013      	strh	r3, [r2, #0]

		/*read and pub latitude*/
		memset(g_buff_send_long_lat, '\0', 30); //clear buffer long_lat
 8009af4:	221e      	movs	r2, #30
 8009af6:	2100      	movs	r1, #0
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <Write_Read_Pub+0x1cc>)
 8009afa:	f000 f9db 	bl	8009eb4 <memset>
		for(uint8_t i = 0; i < 8; i++)
 8009afe:	2300      	movs	r3, #0
 8009b00:	713b      	strb	r3, [r7, #4]
 8009b02:	e020      	b.n	8009b46 <Write_Read_Pub+0x1f2>
 8009b04:	20001030 	.word	0x20001030
 8009b08:	200005d0 	.word	0x200005d0
 8009b0c:	0800e6ec 	.word	0x0800e6ec
 8009b10:	200003cc 	.word	0x200003cc
 8009b14:	0800e6f8 	.word	0x0800e6f8
 8009b18:	200004cc 	.word	0x200004cc
 8009b1c:	200005e8 	.word	0x200005e8
 8009b20:	20000624 	.word	0x20000624
 8009b24:	0800e708 	.word	0x0800e708
 8009b28:	0800e70c 	.word	0x0800e70c
		{
				g_gps_data.lat_t.latBytes[i] = g_read_buffer[i+8];
 8009b2c:	793b      	ldrb	r3, [r7, #4]
 8009b2e:	f103 0208 	add.w	r2, r3, #8
 8009b32:	793b      	ldrb	r3, [r7, #4]
 8009b34:	495b      	ldr	r1, [pc, #364]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009b36:	5c89      	ldrb	r1, [r1, r2]
 8009b38:	4a5b      	ldr	r2, [pc, #364]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009b3a:	4413      	add	r3, r2
 8009b3c:	460a      	mov	r2, r1
 8009b3e:	721a      	strb	r2, [r3, #8]
		for(uint8_t i = 0; i < 8; i++)
 8009b40:	793b      	ldrb	r3, [r7, #4]
 8009b42:	3301      	adds	r3, #1
 8009b44:	713b      	strb	r3, [r7, #4]
 8009b46:	793b      	ldrb	r3, [r7, #4]
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	d9ef      	bls.n	8009b2c <Write_Read_Pub+0x1d8>
		}
		sprintf(g_buff_send_long_lat,  "%lf", g_gps_data.lat_t.dLatRaw);
 8009b4c:	4b56      	ldr	r3, [pc, #344]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009b4e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8009b52:	461a      	mov	r2, r3
 8009b54:	4623      	mov	r3, r4
 8009b56:	4955      	ldr	r1, [pc, #340]	; (8009cac <Write_Read_Pub+0x358>)
 8009b58:	4855      	ldr	r0, [pc, #340]	; (8009cb0 <Write_Read_Pub+0x35c>)
 8009b5a:	f000 fe8b 	bl	800a874 <siprintf>
		strcat(g_buff_send, g_buff_send_long_lat);
 8009b5e:	4954      	ldr	r1, [pc, #336]	; (8009cb0 <Write_Read_Pub+0x35c>)
 8009b60:	4854      	ldr	r0, [pc, #336]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009b62:	f000 fea7 	bl	800a8b4 <strcat>
		strcat(g_buff_send, (const char*)",");
 8009b66:	4853      	ldr	r0, [pc, #332]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009b68:	f7f6 fb3a 	bl	80001e0 <strlen>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	461a      	mov	r2, r3
 8009b70:	4b50      	ldr	r3, [pc, #320]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009b72:	4413      	add	r3, r2
 8009b74:	4950      	ldr	r1, [pc, #320]	; (8009cb8 <Write_Read_Pub+0x364>)
 8009b76:	461a      	mov	r2, r3
 8009b78:	460b      	mov	r3, r1
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	8013      	strh	r3, [r2, #0]

		/* Read and pub date */
		memset(g_buff_send_date, '\0', 2); //clear buffer date
 8009b7e:	2202      	movs	r2, #2
 8009b80:	2100      	movs	r1, #0
 8009b82:	484e      	ldr	r0, [pc, #312]	; (8009cbc <Write_Read_Pub+0x368>)
 8009b84:	f000 f996 	bl	8009eb4 <memset>
		g_gps_data.u8Day = g_read_buffer[16];
 8009b88:	4b46      	ldr	r3, [pc, #280]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009b8a:	7c1a      	ldrb	r2, [r3, #16]
 8009b8c:	4b46      	ldr	r3, [pc, #280]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009b8e:	741a      	strb	r2, [r3, #16]
		Convert_U8_To_Str(g_buff_send_date, g_gps_data.u8Day);
 8009b90:	4b45      	ldr	r3, [pc, #276]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009b92:	7c1b      	ldrb	r3, [r3, #16]
 8009b94:	4619      	mov	r1, r3
 8009b96:	4849      	ldr	r0, [pc, #292]	; (8009cbc <Write_Read_Pub+0x368>)
 8009b98:	f7ff febc 	bl	8009914 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_date);
 8009b9c:	4947      	ldr	r1, [pc, #284]	; (8009cbc <Write_Read_Pub+0x368>)
 8009b9e:	4845      	ldr	r0, [pc, #276]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009ba0:	f000 fe88 	bl	800a8b4 <strcat>

		memset(g_buff_send_date, '\0', 2); //clear buffer date
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4844      	ldr	r0, [pc, #272]	; (8009cbc <Write_Read_Pub+0x368>)
 8009baa:	f000 f983 	bl	8009eb4 <memset>
		g_gps_data.u8Month = g_read_buffer[17];
 8009bae:	4b3d      	ldr	r3, [pc, #244]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009bb0:	7c5a      	ldrb	r2, [r3, #17]
 8009bb2:	4b3d      	ldr	r3, [pc, #244]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009bb4:	745a      	strb	r2, [r3, #17]
		Convert_U8_To_Str(g_buff_send_date, g_gps_data.u8Month);
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009bb8:	7c5b      	ldrb	r3, [r3, #17]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	483f      	ldr	r0, [pc, #252]	; (8009cbc <Write_Read_Pub+0x368>)
 8009bbe:	f7ff fea9 	bl	8009914 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_date);
 8009bc2:	493e      	ldr	r1, [pc, #248]	; (8009cbc <Write_Read_Pub+0x368>)
 8009bc4:	483b      	ldr	r0, [pc, #236]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009bc6:	f000 fe75 	bl	800a8b4 <strcat>

		memset(g_buff_send_date, '\0', 2); //clear buffer date
 8009bca:	2202      	movs	r2, #2
 8009bcc:	2100      	movs	r1, #0
 8009bce:	483b      	ldr	r0, [pc, #236]	; (8009cbc <Write_Read_Pub+0x368>)
 8009bd0:	f000 f970 	bl	8009eb4 <memset>
		g_gps_data.u8Year =  g_read_buffer[18];
 8009bd4:	4b33      	ldr	r3, [pc, #204]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009bd6:	7c9a      	ldrb	r2, [r3, #18]
 8009bd8:	4b33      	ldr	r3, [pc, #204]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009bda:	749a      	strb	r2, [r3, #18]
		Convert_U8_To_Str(g_buff_send_date, g_gps_data.u8Year);
 8009bdc:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009bde:	7c9b      	ldrb	r3, [r3, #18]
 8009be0:	4619      	mov	r1, r3
 8009be2:	4836      	ldr	r0, [pc, #216]	; (8009cbc <Write_Read_Pub+0x368>)
 8009be4:	f7ff fe96 	bl	8009914 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_date);
 8009be8:	4934      	ldr	r1, [pc, #208]	; (8009cbc <Write_Read_Pub+0x368>)
 8009bea:	4832      	ldr	r0, [pc, #200]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009bec:	f000 fe62 	bl	800a8b4 <strcat>
		strcat(g_buff_send, (const char*)",");
 8009bf0:	4830      	ldr	r0, [pc, #192]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009bf2:	f7f6 faf5 	bl	80001e0 <strlen>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	4b2e      	ldr	r3, [pc, #184]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009bfc:	4413      	add	r3, r2
 8009bfe:	492e      	ldr	r1, [pc, #184]	; (8009cb8 <Write_Read_Pub+0x364>)
 8009c00:	461a      	mov	r2, r3
 8009c02:	460b      	mov	r3, r1
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	8013      	strh	r3, [r2, #0]

		/* Read and pub time */
		memset(g_buff_send_time, '\0', 2); //clear buffer time
 8009c08:	2202      	movs	r2, #2
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	482c      	ldr	r0, [pc, #176]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c0e:	f000 f951 	bl	8009eb4 <memset>
		g_gps_data.u8Hour = g_read_buffer[19];
 8009c12:	4b24      	ldr	r3, [pc, #144]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009c14:	7cda      	ldrb	r2, [r3, #19]
 8009c16:	4b24      	ldr	r3, [pc, #144]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009c18:	74da      	strb	r2, [r3, #19]
		Convert_U8_To_Str(g_buff_send_time, g_gps_data.u8Hour);
 8009c1a:	4b23      	ldr	r3, [pc, #140]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009c1c:	7cdb      	ldrb	r3, [r3, #19]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	4827      	ldr	r0, [pc, #156]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c22:	f7ff fe77 	bl	8009914 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_time);
 8009c26:	4926      	ldr	r1, [pc, #152]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c28:	4822      	ldr	r0, [pc, #136]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009c2a:	f000 fe43 	bl	800a8b4 <strcat>

		memset(g_buff_send_time, '\0', 2); //clear buffer time
 8009c2e:	2202      	movs	r2, #2
 8009c30:	2100      	movs	r1, #0
 8009c32:	4823      	ldr	r0, [pc, #140]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c34:	f000 f93e 	bl	8009eb4 <memset>
		g_gps_data.u8Minute = g_read_buffer[20];
 8009c38:	4b1a      	ldr	r3, [pc, #104]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009c3a:	7d1a      	ldrb	r2, [r3, #20]
 8009c3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009c3e:	751a      	strb	r2, [r3, #20]
		Convert_U8_To_Str(g_buff_send_time, g_gps_data.u8Minute);
 8009c40:	4b19      	ldr	r3, [pc, #100]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009c42:	7d1b      	ldrb	r3, [r3, #20]
 8009c44:	4619      	mov	r1, r3
 8009c46:	481e      	ldr	r0, [pc, #120]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c48:	f7ff fe64 	bl	8009914 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_time);
 8009c4c:	491c      	ldr	r1, [pc, #112]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c4e:	4819      	ldr	r0, [pc, #100]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009c50:	f000 fe30 	bl	800a8b4 <strcat>

		memset(g_buff_send_time, '\0', 2); //clear buffer time
 8009c54:	2202      	movs	r2, #2
 8009c56:	2100      	movs	r1, #0
 8009c58:	4819      	ldr	r0, [pc, #100]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c5a:	f000 f92b 	bl	8009eb4 <memset>
		g_gps_data.u8Second = g_read_buffer[21];
 8009c5e:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <Write_Read_Pub+0x350>)
 8009c60:	7d5a      	ldrb	r2, [r3, #21]
 8009c62:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009c64:	755a      	strb	r2, [r3, #21]
		Convert_U8_To_Str(g_buff_send_time, g_gps_data.u8Second);
 8009c66:	4b10      	ldr	r3, [pc, #64]	; (8009ca8 <Write_Read_Pub+0x354>)
 8009c68:	7d5b      	ldrb	r3, [r3, #21]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4814      	ldr	r0, [pc, #80]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c6e:	f7ff fe51 	bl	8009914 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_time);
 8009c72:	4913      	ldr	r1, [pc, #76]	; (8009cc0 <Write_Read_Pub+0x36c>)
 8009c74:	480f      	ldr	r0, [pc, #60]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009c76:	f000 fe1d 	bl	800a8b4 <strcat>

		MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send), (uint8_t*)g_buff_send);
 8009c7a:	480e      	ldr	r0, [pc, #56]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009c7c:	f7f6 fab0 	bl	80001e0 <strlen>
 8009c80:	4603      	mov	r3, r0
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	4a0b      	ldr	r2, [pc, #44]	; (8009cb4 <Write_Read_Pub+0x360>)
 8009c86:	9202      	str	r2, [sp, #8]
 8009c88:	9301      	str	r3, [sp, #4]
 8009c8a:	4b0e      	ldr	r3, [pc, #56]	; (8009cc4 <Write_Read_Pub+0x370>)
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	2301      	movs	r3, #1
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	2000      	movs	r0, #0
 8009c96:	f7f8 fbb5 	bl	8002404 <MQTT_Publish>
}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd90      	pop	{r4, r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200004cc 	.word	0x200004cc
 8009ca8:	200005d0 	.word	0x200005d0
 8009cac:	0800e708 	.word	0x0800e708
 8009cb0:	20000624 	.word	0x20000624
 8009cb4:	200005e8 	.word	0x200005e8
 8009cb8:	0800e70c 	.word	0x0800e70c
 8009cbc:	20000638 	.word	0x20000638
 8009cc0:	2000063c 	.word	0x2000063c
 8009cc4:	0800e710 	.word	0x0800e710

08009cc8 <Wakeup_CallBack>:

void Wakeup_CallBack(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
	/* Reconfig the system clock after waking up from stop mode */
	SystemClock_Config();
 8009ccc:	f7f7 f968 	bl	8000fa0 <SystemClock_Config>

	printf("Wake up from stop mode\r\n");
 8009cd0:	4816      	ldr	r0, [pc, #88]	; (8009d2c <Wakeup_CallBack+0x64>)
 8009cd2:	f000 fdc7 	bl	800a864 <puts>

	/* Resume Tick Count */
	HAL_ResumeTick();
 8009cd6:	f7fb fc79 	bl	80055cc <HAL_ResumeTick>

	/* GPS enable */
	gps_power_EnOrDi(ENABLE);
 8009cda:	2001      	movs	r0, #1
 8009cdc:	f7fb fb30 	bl	8005340 <gps_power_EnOrDi>

	/* LTE RX pin enable */
	softUART_ReInit();
 8009ce0:	f7ff fdc4 	bl	800986c <softUART_ReInit>

	/* LTE enable */
	Enable_LTE();
 8009ce4:	f7f8 f988 	bl	8001ff8 <Enable_LTE>

	/* Wait until the LTE finishs initialization */
	HAL_Delay(15000);
 8009ce8:	f643 2098 	movw	r0, #15000	; 0x3a98
 8009cec:	f7fb fc3c 	bl	8005568 <HAL_Delay>

	/* Config the MQTT */
	MQTT_Config();
 8009cf0:	f7ff fdda 	bl	80098a8 <MQTT_Config>

	#if TEST_CONNECT == 1
		/* Check whether the mqtt server is connected or not. If not, reconnected! */
		if(MQTT_Check_Connect() != RESPONSE_OK)
 8009cf4:	f7f8 fb40 	bl	8002378 <MQTT_Check_Connect>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d005      	beq.n	8009d0a <Wakeup_CallBack+0x42>
		{
			MQTT_Open_Connect();
 8009cfe:	f7ff fd51 	bl	80097a4 <MQTT_Open_Connect>
			HAL_Delay(500);
 8009d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d06:	f7fb fc2f 	bl	8005568 <HAL_Delay>
		}
	#endif

	/* Print log */
	printf("!!!!MOTION DETECTED !!!!!\n\r");
 8009d0a:	4809      	ldr	r0, [pc, #36]	; (8009d30 <Wakeup_CallBack+0x68>)
 8009d0c:	f000 fd36 	bl	800a77c <iprintf>

	/* Quectel initialization */
	Quectel_Init();
 8009d10:	f7fa fdce 	bl	80048b0 <Quectel_Init>

	/* Change 2 flags */
	g_bIsMotion = false;
 8009d14:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <Wakeup_CallBack+0x6c>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
	g_bIsSetGPS = true;
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <Wakeup_CallBack+0x70>)
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	701a      	strb	r2, [r3, #0]
	g_bIsStop = false;
 8009d20:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <Wakeup_CallBack+0x74>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	701a      	strb	r2, [r3, #0]
}
 8009d26:	bf00      	nop
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800e72c 	.word	0x0800e72c
 8009d30:	0800e744 	.word	0x0800e744
 8009d34:	200003c5 	.word	0x200003c5
 8009d38:	200003c6 	.word	0x200003c6
 8009d3c:	200003c7 	.word	0x200003c7

08009d40 <Stop_Callback>:

void Stop_Callback(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
	printf("MOTION NOT DETECTED YET !!\r\n");
 8009d44:	480e      	ldr	r0, [pc, #56]	; (8009d80 <Stop_Callback+0x40>)
 8009d46:	f000 fd8d 	bl	800a864 <puts>

	/* Close a Network for MQTT Client */
	MQTT_Close(0);
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7f8 fa46 	bl	80021dc <MQTT_Close>

	/* Power off Module LTE */
	LTE_PWRCRL_OFF();
 8009d50:	f7f8 f924 	bl	8001f9c <LTE_PWRCRL_OFF>

	/* LTE POWER SUPPY DISABLE */
	LTE_Disable();
 8009d54:	f7ff fd72 	bl	800983c <LTE_Disable>

	/* Disable GPS Module */
	gps_power_EnOrDi(DISABLE);
 8009d58:	2000      	movs	r0, #0
 8009d5a:	f7fb faf1 	bl	8005340 <gps_power_EnOrDi>

	/* DeInit the RX pin of UART */
	softUART_DeInit();
 8009d5e:	f7ff fd79 	bl	8009854 <softUART_DeInit>

	/* Enter sleep mode */
	printf("Enter Stop Mode:\r\n");
 8009d62:	4808      	ldr	r0, [pc, #32]	; (8009d84 <Stop_Callback+0x44>)
 8009d64:	f000 fd7e 	bl	800a864 <puts>

	g_bIsStop = true;
 8009d68:	4b07      	ldr	r3, [pc, #28]	; (8009d88 <Stop_Callback+0x48>)
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	701a      	strb	r2, [r3, #0]

	/* Stop tick count */
	HAL_SuspendTick();
 8009d6e:	f7fb fc1d 	bl	80055ac <HAL_SuspendTick>

	/* Enter stop mode after 5 minutes without motion */
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009d72:	2101      	movs	r1, #1
 8009d74:	2000      	movs	r0, #0
 8009d76:	f7fd f8eb 	bl	8006f50 <HAL_PWR_EnterSTOPMode>
}
 8009d7a:	bf00      	nop
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	0800e760 	.word	0x0800e760
 8009d84:	0800e77c 	.word	0x0800e77c
 8009d88:	200003c7 	.word	0x200003c7

08009d8c <Data_Process>:

void Data_Process(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b0b2      	sub	sp, #200	; 0xc8
 8009d90:	af00      	add	r7, sp, #0
	char test_GNGGA[100] = {0};
 8009d92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009d96:	2264      	movs	r2, #100	; 0x64
 8009d98:	2100      	movs	r1, #0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 f88a 	bl	8009eb4 <memset>
	char test_GNRMC[100] = {0};
 8009da0:	463b      	mov	r3, r7
 8009da2:	2264      	movs	r2, #100	; 0x64
 8009da4:	2100      	movs	r1, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 f884 	bl	8009eb4 <memset>

	/* If the motion is detected, the GPS will get data and then publish the data to MQTT server */

	/* Ensure that the power of GPS module is turned on */
	gps_power_EnOrDi(ENABLE);
 8009dac:	2001      	movs	r0, #1
 8009dae:	f7fb fac7 	bl	8005340 <gps_power_EnOrDi>

	printf("\r\n****START THE CONVERSION******\r\n\n");
 8009db2:	4812      	ldr	r0, [pc, #72]	; (8009dfc <Data_Process+0x70>)
 8009db4:	f000 fd56 	bl	800a864 <puts>

	/* Receive the string */
	HAL_UART_Receive(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer), HAL_MAX_DELAY);
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dc0:	490f      	ldr	r1, [pc, #60]	; (8009e00 <Data_Process+0x74>)
 8009dc2:	4810      	ldr	r0, [pc, #64]	; (8009e04 <Data_Process+0x78>)
 8009dc4:	f7fe fdf6 	bl	80089b4 <HAL_UART_Receive>

	/* 2 strings to split the GNGAA from the NMEA sent from the Quectel L76 LB */
	printf("%s\r\n\n", g_rxBuffer);
 8009dc8:	490d      	ldr	r1, [pc, #52]	; (8009e00 <Data_Process+0x74>)
 8009dca:	480f      	ldr	r0, [pc, #60]	; (8009e08 <Data_Process+0x7c>)
 8009dcc:	f000 fcd6 	bl	800a77c <iprintf>
	printf("%d\r\n\n", strlen(g_rxBuffer));
 8009dd0:	480b      	ldr	r0, [pc, #44]	; (8009e00 <Data_Process+0x74>)
 8009dd2:	f7f6 fa05 	bl	80001e0 <strlen>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4619      	mov	r1, r3
 8009dda:	480c      	ldr	r0, [pc, #48]	; (8009e0c <Data_Process+0x80>)
 8009ddc:	f000 fcce 	bl	800a77c <iprintf>

	/* Parse the NMEA string */
	gps_read(g_testBuffer2, &g_test_L76, test_GNGGA, test_GNRMC);
 8009de0:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <Data_Process+0x84>)
 8009de2:	6818      	ldr	r0, [r3, #0]
 8009de4:	463b      	mov	r3, r7
 8009de6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009dea:	490a      	ldr	r1, [pc, #40]	; (8009e14 <Data_Process+0x88>)
 8009dec:	f7fa fdac 	bl	8004948 <gps_read>

	/* Write to Flash, Read from Flash and then publish the infos to MQTT serser */
	Write_Read_Pub();
 8009df0:	f7ff fdb0 	bl	8009954 <Write_Read_Pub>
}
 8009df4:	bf00      	nop
 8009df6:	37c8      	adds	r7, #200	; 0xc8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	0800e790 	.word	0x0800e790
 8009e00:	20000858 	.word	0x20000858
 8009e04:	2000158c 	.word	0x2000158c
 8009e08:	0800e7b4 	.word	0x0800e7b4
 8009e0c:	0800e7bc 	.word	0x0800e7bc
 8009e10:	2000000c 	.word	0x2000000c
 8009e14:	20001030 	.word	0x20001030

08009e18 <System_Initialization>:


void System_Initialization(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
	/* Flash memory init */
	Flash_Init();
 8009e1c:	f7ff fd6c 	bl	80098f8 <Flash_Init>

	/* Acce init */
	g_u8Test = SC7A20_Init();
 8009e20:	f7fb faa8 	bl	8005374 <SC7A20_Init>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461a      	mov	r2, r3
 8009e28:	4b08      	ldr	r3, [pc, #32]	; (8009e4c <System_Initialization+0x34>)
 8009e2a:	701a      	strb	r2, [r3, #0]

	/* Enable UART2 Receive Interrupt */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 8009e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e30:	4907      	ldr	r1, [pc, #28]	; (8009e50 <System_Initialization+0x38>)
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <System_Initialization+0x3c>)
 8009e34:	f7fe fe64 	bl	8008b00 <HAL_UART_Receive_IT>

	/* Initialize GPS module */
	Quectel_Init();
 8009e38:	f7fa fd3a 	bl	80048b0 <Quectel_Init>

	/* Enable the power of LTE module */
	Enable_LTE();
 8009e3c:	f7f8 f8dc 	bl	8001ff8 <Enable_LTE>

	/* Delay to let the LTE modules finishs initializing */
	HAL_Delay(15000);
 8009e40:	f643 2098 	movw	r0, #15000	; 0x3a98
 8009e44:	f7fb fb90 	bl	8005568 <HAL_Delay>
}
 8009e48:	bf00      	nop
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000009 	.word	0x20000009
 8009e50:	20000858 	.word	0x20000858
 8009e54:	2000158c 	.word	0x2000158c

08009e58 <atof>:
 8009e58:	2100      	movs	r1, #0
 8009e5a:	f001 bb65 	b.w	800b528 <strtod>
	...

08009e60 <__errno>:
 8009e60:	4b01      	ldr	r3, [pc, #4]	; (8009e68 <__errno+0x8>)
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	20000010 	.word	0x20000010

08009e6c <__libc_init_array>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	4e0d      	ldr	r6, [pc, #52]	; (8009ea4 <__libc_init_array+0x38>)
 8009e70:	4c0d      	ldr	r4, [pc, #52]	; (8009ea8 <__libc_init_array+0x3c>)
 8009e72:	1ba4      	subs	r4, r4, r6
 8009e74:	10a4      	asrs	r4, r4, #2
 8009e76:	2500      	movs	r5, #0
 8009e78:	42a5      	cmp	r5, r4
 8009e7a:	d109      	bne.n	8009e90 <__libc_init_array+0x24>
 8009e7c:	4e0b      	ldr	r6, [pc, #44]	; (8009eac <__libc_init_array+0x40>)
 8009e7e:	4c0c      	ldr	r4, [pc, #48]	; (8009eb0 <__libc_init_array+0x44>)
 8009e80:	f004 f80e 	bl	800dea0 <_init>
 8009e84:	1ba4      	subs	r4, r4, r6
 8009e86:	10a4      	asrs	r4, r4, #2
 8009e88:	2500      	movs	r5, #0
 8009e8a:	42a5      	cmp	r5, r4
 8009e8c:	d105      	bne.n	8009e9a <__libc_init_array+0x2e>
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e94:	4798      	blx	r3
 8009e96:	3501      	adds	r5, #1
 8009e98:	e7ee      	b.n	8009e78 <__libc_init_array+0xc>
 8009e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e9e:	4798      	blx	r3
 8009ea0:	3501      	adds	r5, #1
 8009ea2:	e7f2      	b.n	8009e8a <__libc_init_array+0x1e>
 8009ea4:	0800ec38 	.word	0x0800ec38
 8009ea8:	0800ec38 	.word	0x0800ec38
 8009eac:	0800ec38 	.word	0x0800ec38
 8009eb0:	0800ec3c 	.word	0x0800ec3c

08009eb4 <memset>:
 8009eb4:	4402      	add	r2, r0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d100      	bne.n	8009ebe <memset+0xa>
 8009ebc:	4770      	bx	lr
 8009ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec2:	e7f9      	b.n	8009eb8 <memset+0x4>

08009ec4 <__cvt>:
 8009ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	ec55 4b10 	vmov	r4, r5, d0
 8009ecc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009ece:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	bfb8      	it	lt
 8009edc:	4622      	movlt	r2, r4
 8009ede:	462b      	mov	r3, r5
 8009ee0:	f027 0720 	bic.w	r7, r7, #32
 8009ee4:	bfbb      	ittet	lt
 8009ee6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009eea:	461d      	movlt	r5, r3
 8009eec:	2300      	movge	r3, #0
 8009eee:	232d      	movlt	r3, #45	; 0x2d
 8009ef0:	bfb8      	it	lt
 8009ef2:	4614      	movlt	r4, r2
 8009ef4:	2f46      	cmp	r7, #70	; 0x46
 8009ef6:	700b      	strb	r3, [r1, #0]
 8009ef8:	d004      	beq.n	8009f04 <__cvt+0x40>
 8009efa:	2f45      	cmp	r7, #69	; 0x45
 8009efc:	d100      	bne.n	8009f00 <__cvt+0x3c>
 8009efe:	3601      	adds	r6, #1
 8009f00:	2102      	movs	r1, #2
 8009f02:	e000      	b.n	8009f06 <__cvt+0x42>
 8009f04:	2103      	movs	r1, #3
 8009f06:	ab03      	add	r3, sp, #12
 8009f08:	9301      	str	r3, [sp, #4]
 8009f0a:	ab02      	add	r3, sp, #8
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	4632      	mov	r2, r6
 8009f10:	4653      	mov	r3, sl
 8009f12:	ec45 4b10 	vmov	d0, r4, r5
 8009f16:	f001 fc67 	bl	800b7e8 <_dtoa_r>
 8009f1a:	2f47      	cmp	r7, #71	; 0x47
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	d102      	bne.n	8009f26 <__cvt+0x62>
 8009f20:	f019 0f01 	tst.w	r9, #1
 8009f24:	d026      	beq.n	8009f74 <__cvt+0xb0>
 8009f26:	2f46      	cmp	r7, #70	; 0x46
 8009f28:	eb08 0906 	add.w	r9, r8, r6
 8009f2c:	d111      	bne.n	8009f52 <__cvt+0x8e>
 8009f2e:	f898 3000 	ldrb.w	r3, [r8]
 8009f32:	2b30      	cmp	r3, #48	; 0x30
 8009f34:	d10a      	bne.n	8009f4c <__cvt+0x88>
 8009f36:	2200      	movs	r2, #0
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	f7f6 fdcb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f42:	b918      	cbnz	r0, 8009f4c <__cvt+0x88>
 8009f44:	f1c6 0601 	rsb	r6, r6, #1
 8009f48:	f8ca 6000 	str.w	r6, [sl]
 8009f4c:	f8da 3000 	ldr.w	r3, [sl]
 8009f50:	4499      	add	r9, r3
 8009f52:	2200      	movs	r2, #0
 8009f54:	2300      	movs	r3, #0
 8009f56:	4620      	mov	r0, r4
 8009f58:	4629      	mov	r1, r5
 8009f5a:	f7f6 fdbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f5e:	b938      	cbnz	r0, 8009f70 <__cvt+0xac>
 8009f60:	2230      	movs	r2, #48	; 0x30
 8009f62:	9b03      	ldr	r3, [sp, #12]
 8009f64:	454b      	cmp	r3, r9
 8009f66:	d205      	bcs.n	8009f74 <__cvt+0xb0>
 8009f68:	1c59      	adds	r1, r3, #1
 8009f6a:	9103      	str	r1, [sp, #12]
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	e7f8      	b.n	8009f62 <__cvt+0x9e>
 8009f70:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f78:	eba3 0308 	sub.w	r3, r3, r8
 8009f7c:	4640      	mov	r0, r8
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	b004      	add	sp, #16
 8009f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f86 <__exponent>:
 8009f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	bfba      	itte	lt
 8009f8e:	4249      	neglt	r1, r1
 8009f90:	232d      	movlt	r3, #45	; 0x2d
 8009f92:	232b      	movge	r3, #43	; 0x2b
 8009f94:	2909      	cmp	r1, #9
 8009f96:	f804 2b02 	strb.w	r2, [r4], #2
 8009f9a:	7043      	strb	r3, [r0, #1]
 8009f9c:	dd20      	ble.n	8009fe0 <__exponent+0x5a>
 8009f9e:	f10d 0307 	add.w	r3, sp, #7
 8009fa2:	461f      	mov	r7, r3
 8009fa4:	260a      	movs	r6, #10
 8009fa6:	fb91 f5f6 	sdiv	r5, r1, r6
 8009faa:	fb06 1115 	mls	r1, r6, r5, r1
 8009fae:	3130      	adds	r1, #48	; 0x30
 8009fb0:	2d09      	cmp	r5, #9
 8009fb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fb6:	f103 32ff 	add.w	r2, r3, #4294967295
 8009fba:	4629      	mov	r1, r5
 8009fbc:	dc09      	bgt.n	8009fd2 <__exponent+0x4c>
 8009fbe:	3130      	adds	r1, #48	; 0x30
 8009fc0:	3b02      	subs	r3, #2
 8009fc2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fc6:	42bb      	cmp	r3, r7
 8009fc8:	4622      	mov	r2, r4
 8009fca:	d304      	bcc.n	8009fd6 <__exponent+0x50>
 8009fcc:	1a10      	subs	r0, r2, r0
 8009fce:	b003      	add	sp, #12
 8009fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	e7e7      	b.n	8009fa6 <__exponent+0x20>
 8009fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fda:	f804 2b01 	strb.w	r2, [r4], #1
 8009fde:	e7f2      	b.n	8009fc6 <__exponent+0x40>
 8009fe0:	2330      	movs	r3, #48	; 0x30
 8009fe2:	4419      	add	r1, r3
 8009fe4:	7083      	strb	r3, [r0, #2]
 8009fe6:	1d02      	adds	r2, r0, #4
 8009fe8:	70c1      	strb	r1, [r0, #3]
 8009fea:	e7ef      	b.n	8009fcc <__exponent+0x46>

08009fec <_printf_float>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	b08d      	sub	sp, #52	; 0x34
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	f002 fe4d 	bl	800cc9c <_localeconv_r>
 800a002:	6803      	ldr	r3, [r0, #0]
 800a004:	9304      	str	r3, [sp, #16]
 800a006:	4618      	mov	r0, r3
 800a008:	f7f6 f8ea 	bl	80001e0 <strlen>
 800a00c:	2300      	movs	r3, #0
 800a00e:	930a      	str	r3, [sp, #40]	; 0x28
 800a010:	f8d8 3000 	ldr.w	r3, [r8]
 800a014:	9005      	str	r0, [sp, #20]
 800a016:	3307      	adds	r3, #7
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	f103 0208 	add.w	r2, r3, #8
 800a020:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a024:	f8d4 b000 	ldr.w	fp, [r4]
 800a028:	f8c8 2000 	str.w	r2, [r8]
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a034:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a038:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a03c:	9307      	str	r3, [sp, #28]
 800a03e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a042:	f04f 32ff 	mov.w	r2, #4294967295
 800a046:	4ba7      	ldr	r3, [pc, #668]	; (800a2e4 <_printf_float+0x2f8>)
 800a048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a04c:	f7f6 fd76 	bl	8000b3c <__aeabi_dcmpun>
 800a050:	bb70      	cbnz	r0, 800a0b0 <_printf_float+0xc4>
 800a052:	f04f 32ff 	mov.w	r2, #4294967295
 800a056:	4ba3      	ldr	r3, [pc, #652]	; (800a2e4 <_printf_float+0x2f8>)
 800a058:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a05c:	f7f6 fd50 	bl	8000b00 <__aeabi_dcmple>
 800a060:	bb30      	cbnz	r0, 800a0b0 <_printf_float+0xc4>
 800a062:	2200      	movs	r2, #0
 800a064:	2300      	movs	r3, #0
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 fd3f 	bl	8000aec <__aeabi_dcmplt>
 800a06e:	b110      	cbz	r0, 800a076 <_printf_float+0x8a>
 800a070:	232d      	movs	r3, #45	; 0x2d
 800a072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a076:	4a9c      	ldr	r2, [pc, #624]	; (800a2e8 <_printf_float+0x2fc>)
 800a078:	4b9c      	ldr	r3, [pc, #624]	; (800a2ec <_printf_float+0x300>)
 800a07a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a07e:	bf8c      	ite	hi
 800a080:	4690      	movhi	r8, r2
 800a082:	4698      	movls	r8, r3
 800a084:	2303      	movs	r3, #3
 800a086:	f02b 0204 	bic.w	r2, fp, #4
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	6022      	str	r2, [r4, #0]
 800a08e:	f04f 0900 	mov.w	r9, #0
 800a092:	9700      	str	r7, [sp, #0]
 800a094:	4633      	mov	r3, r6
 800a096:	aa0b      	add	r2, sp, #44	; 0x2c
 800a098:	4621      	mov	r1, r4
 800a09a:	4628      	mov	r0, r5
 800a09c:	f000 f9e6 	bl	800a46c <_printf_common>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f040 808d 	bne.w	800a1c0 <_printf_float+0x1d4>
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	b00d      	add	sp, #52	; 0x34
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	4640      	mov	r0, r8
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	f7f6 fd40 	bl	8000b3c <__aeabi_dcmpun>
 800a0bc:	b110      	cbz	r0, 800a0c4 <_printf_float+0xd8>
 800a0be:	4a8c      	ldr	r2, [pc, #560]	; (800a2f0 <_printf_float+0x304>)
 800a0c0:	4b8c      	ldr	r3, [pc, #560]	; (800a2f4 <_printf_float+0x308>)
 800a0c2:	e7da      	b.n	800a07a <_printf_float+0x8e>
 800a0c4:	6861      	ldr	r1, [r4, #4]
 800a0c6:	1c4b      	adds	r3, r1, #1
 800a0c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a0cc:	a80a      	add	r0, sp, #40	; 0x28
 800a0ce:	d13e      	bne.n	800a14e <_printf_float+0x162>
 800a0d0:	2306      	movs	r3, #6
 800a0d2:	6063      	str	r3, [r4, #4]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a0da:	ab09      	add	r3, sp, #36	; 0x24
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	ec49 8b10 	vmov	d0, r8, r9
 800a0e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0e6:	6022      	str	r2, [r4, #0]
 800a0e8:	f8cd a004 	str.w	sl, [sp, #4]
 800a0ec:	6861      	ldr	r1, [r4, #4]
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f7ff fee8 	bl	8009ec4 <__cvt>
 800a0f4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a0f8:	2b47      	cmp	r3, #71	; 0x47
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	d109      	bne.n	800a112 <_printf_float+0x126>
 800a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a100:	1cd8      	adds	r0, r3, #3
 800a102:	db02      	blt.n	800a10a <_printf_float+0x11e>
 800a104:	6862      	ldr	r2, [r4, #4]
 800a106:	4293      	cmp	r3, r2
 800a108:	dd47      	ble.n	800a19a <_printf_float+0x1ae>
 800a10a:	f1aa 0a02 	sub.w	sl, sl, #2
 800a10e:	fa5f fa8a 	uxtb.w	sl, sl
 800a112:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a116:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a118:	d824      	bhi.n	800a164 <_printf_float+0x178>
 800a11a:	3901      	subs	r1, #1
 800a11c:	4652      	mov	r2, sl
 800a11e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a122:	9109      	str	r1, [sp, #36]	; 0x24
 800a124:	f7ff ff2f 	bl	8009f86 <__exponent>
 800a128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a12a:	1813      	adds	r3, r2, r0
 800a12c:	2a01      	cmp	r2, #1
 800a12e:	4681      	mov	r9, r0
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	dc02      	bgt.n	800a13a <_printf_float+0x14e>
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	07d1      	lsls	r1, r2, #31
 800a138:	d501      	bpl.n	800a13e <_printf_float+0x152>
 800a13a:	3301      	adds	r3, #1
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0a5      	beq.n	800a092 <_printf_float+0xa6>
 800a146:	232d      	movs	r3, #45	; 0x2d
 800a148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a14c:	e7a1      	b.n	800a092 <_printf_float+0xa6>
 800a14e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a152:	f000 8177 	beq.w	800a444 <_printf_float+0x458>
 800a156:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a15a:	d1bb      	bne.n	800a0d4 <_printf_float+0xe8>
 800a15c:	2900      	cmp	r1, #0
 800a15e:	d1b9      	bne.n	800a0d4 <_printf_float+0xe8>
 800a160:	2301      	movs	r3, #1
 800a162:	e7b6      	b.n	800a0d2 <_printf_float+0xe6>
 800a164:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a168:	d119      	bne.n	800a19e <_printf_float+0x1b2>
 800a16a:	2900      	cmp	r1, #0
 800a16c:	6863      	ldr	r3, [r4, #4]
 800a16e:	dd0c      	ble.n	800a18a <_printf_float+0x19e>
 800a170:	6121      	str	r1, [r4, #16]
 800a172:	b913      	cbnz	r3, 800a17a <_printf_float+0x18e>
 800a174:	6822      	ldr	r2, [r4, #0]
 800a176:	07d2      	lsls	r2, r2, #31
 800a178:	d502      	bpl.n	800a180 <_printf_float+0x194>
 800a17a:	3301      	adds	r3, #1
 800a17c:	440b      	add	r3, r1
 800a17e:	6123      	str	r3, [r4, #16]
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	65a3      	str	r3, [r4, #88]	; 0x58
 800a184:	f04f 0900 	mov.w	r9, #0
 800a188:	e7d9      	b.n	800a13e <_printf_float+0x152>
 800a18a:	b913      	cbnz	r3, 800a192 <_printf_float+0x1a6>
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	07d0      	lsls	r0, r2, #31
 800a190:	d501      	bpl.n	800a196 <_printf_float+0x1aa>
 800a192:	3302      	adds	r3, #2
 800a194:	e7f3      	b.n	800a17e <_printf_float+0x192>
 800a196:	2301      	movs	r3, #1
 800a198:	e7f1      	b.n	800a17e <_printf_float+0x192>
 800a19a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a19e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	db05      	blt.n	800a1b2 <_printf_float+0x1c6>
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	07d1      	lsls	r1, r2, #31
 800a1ac:	d5e8      	bpl.n	800a180 <_printf_float+0x194>
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	e7e5      	b.n	800a17e <_printf_float+0x192>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfd4      	ite	le
 800a1b6:	f1c3 0302 	rsble	r3, r3, #2
 800a1ba:	2301      	movgt	r3, #1
 800a1bc:	4413      	add	r3, r2
 800a1be:	e7de      	b.n	800a17e <_printf_float+0x192>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	055a      	lsls	r2, r3, #21
 800a1c4:	d407      	bmi.n	800a1d6 <_printf_float+0x1ea>
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b8      	blx	r7
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d12b      	bne.n	800a22c <_printf_float+0x240>
 800a1d4:	e767      	b.n	800a0a6 <_printf_float+0xba>
 800a1d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a1da:	f240 80dc 	bls.w	800a396 <_printf_float+0x3aa>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1e6:	f7f6 fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d033      	beq.n	800a256 <_printf_float+0x26a>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4a41      	ldr	r2, [pc, #260]	; (800a2f8 <_printf_float+0x30c>)
 800a1f2:	4631      	mov	r1, r6
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	47b8      	blx	r7
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	f43f af54 	beq.w	800a0a6 <_printf_float+0xba>
 800a1fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a202:	429a      	cmp	r2, r3
 800a204:	db02      	blt.n	800a20c <_printf_float+0x220>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	07d8      	lsls	r0, r3, #31
 800a20a:	d50f      	bpl.n	800a22c <_printf_float+0x240>
 800a20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f af45 	beq.w	800a0a6 <_printf_float+0xba>
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f104 091a 	add.w	r9, r4, #26
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	3b01      	subs	r3, #1
 800a228:	4543      	cmp	r3, r8
 800a22a:	dc09      	bgt.n	800a240 <_printf_float+0x254>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	079b      	lsls	r3, r3, #30
 800a230:	f100 8103 	bmi.w	800a43a <_printf_float+0x44e>
 800a234:	68e0      	ldr	r0, [r4, #12]
 800a236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a238:	4298      	cmp	r0, r3
 800a23a:	bfb8      	it	lt
 800a23c:	4618      	movlt	r0, r3
 800a23e:	e734      	b.n	800a0aa <_printf_float+0xbe>
 800a240:	2301      	movs	r3, #1
 800a242:	464a      	mov	r2, r9
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	f43f af2b 	beq.w	800a0a6 <_printf_float+0xba>
 800a250:	f108 0801 	add.w	r8, r8, #1
 800a254:	e7e6      	b.n	800a224 <_printf_float+0x238>
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc2b      	bgt.n	800a2b4 <_printf_float+0x2c8>
 800a25c:	2301      	movs	r3, #1
 800a25e:	4a26      	ldr	r2, [pc, #152]	; (800a2f8 <_printf_float+0x30c>)
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af1d 	beq.w	800a0a6 <_printf_float+0xba>
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	b923      	cbnz	r3, 800a27a <_printf_float+0x28e>
 800a270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a272:	b913      	cbnz	r3, 800a27a <_printf_float+0x28e>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	07d9      	lsls	r1, r3, #31
 800a278:	d5d8      	bpl.n	800a22c <_printf_float+0x240>
 800a27a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a27e:	4631      	mov	r1, r6
 800a280:	4628      	mov	r0, r5
 800a282:	47b8      	blx	r7
 800a284:	3001      	adds	r0, #1
 800a286:	f43f af0e 	beq.w	800a0a6 <_printf_float+0xba>
 800a28a:	f04f 0900 	mov.w	r9, #0
 800a28e:	f104 0a1a 	add.w	sl, r4, #26
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	425b      	negs	r3, r3
 800a296:	454b      	cmp	r3, r9
 800a298:	dc01      	bgt.n	800a29e <_printf_float+0x2b2>
 800a29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29c:	e794      	b.n	800a1c8 <_printf_float+0x1dc>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4652      	mov	r2, sl
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b8      	blx	r7
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	f43f aefc 	beq.w	800a0a6 <_printf_float+0xba>
 800a2ae:	f109 0901 	add.w	r9, r9, #1
 800a2b2:	e7ee      	b.n	800a292 <_printf_float+0x2a6>
 800a2b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	bfa8      	it	ge
 800a2bc:	461a      	movge	r2, r3
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	4691      	mov	r9, r2
 800a2c2:	dd07      	ble.n	800a2d4 <_printf_float+0x2e8>
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f43f aee9 	beq.w	800a0a6 <_printf_float+0xba>
 800a2d4:	f104 031a 	add.w	r3, r4, #26
 800a2d8:	f04f 0b00 	mov.w	fp, #0
 800a2dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e0:	9306      	str	r3, [sp, #24]
 800a2e2:	e015      	b.n	800a310 <_printf_float+0x324>
 800a2e4:	7fefffff 	.word	0x7fefffff
 800a2e8:	0800e91c 	.word	0x0800e91c
 800a2ec:	0800e918 	.word	0x0800e918
 800a2f0:	0800e924 	.word	0x0800e924
 800a2f4:	0800e920 	.word	0x0800e920
 800a2f8:	0800e928 	.word	0x0800e928
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	9a06      	ldr	r2, [sp, #24]
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	47b8      	blx	r7
 800a306:	3001      	adds	r0, #1
 800a308:	f43f aecd 	beq.w	800a0a6 <_printf_float+0xba>
 800a30c:	f10b 0b01 	add.w	fp, fp, #1
 800a310:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a314:	ebaa 0309 	sub.w	r3, sl, r9
 800a318:	455b      	cmp	r3, fp
 800a31a:	dcef      	bgt.n	800a2fc <_printf_float+0x310>
 800a31c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a320:	429a      	cmp	r2, r3
 800a322:	44d0      	add	r8, sl
 800a324:	db15      	blt.n	800a352 <_printf_float+0x366>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	07da      	lsls	r2, r3, #31
 800a32a:	d412      	bmi.n	800a352 <_printf_float+0x366>
 800a32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a32e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a330:	eba3 020a 	sub.w	r2, r3, sl
 800a334:	eba3 0a01 	sub.w	sl, r3, r1
 800a338:	4592      	cmp	sl, r2
 800a33a:	bfa8      	it	ge
 800a33c:	4692      	movge	sl, r2
 800a33e:	f1ba 0f00 	cmp.w	sl, #0
 800a342:	dc0e      	bgt.n	800a362 <_printf_float+0x376>
 800a344:	f04f 0800 	mov.w	r8, #0
 800a348:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a34c:	f104 091a 	add.w	r9, r4, #26
 800a350:	e019      	b.n	800a386 <_printf_float+0x39a>
 800a352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a356:	4631      	mov	r1, r6
 800a358:	4628      	mov	r0, r5
 800a35a:	47b8      	blx	r7
 800a35c:	3001      	adds	r0, #1
 800a35e:	d1e5      	bne.n	800a32c <_printf_float+0x340>
 800a360:	e6a1      	b.n	800a0a6 <_printf_float+0xba>
 800a362:	4653      	mov	r3, sl
 800a364:	4642      	mov	r2, r8
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	47b8      	blx	r7
 800a36c:	3001      	adds	r0, #1
 800a36e:	d1e9      	bne.n	800a344 <_printf_float+0x358>
 800a370:	e699      	b.n	800a0a6 <_printf_float+0xba>
 800a372:	2301      	movs	r3, #1
 800a374:	464a      	mov	r2, r9
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	f43f ae92 	beq.w	800a0a6 <_printf_float+0xba>
 800a382:	f108 0801 	add.w	r8, r8, #1
 800a386:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	eba3 030a 	sub.w	r3, r3, sl
 800a390:	4543      	cmp	r3, r8
 800a392:	dcee      	bgt.n	800a372 <_printf_float+0x386>
 800a394:	e74a      	b.n	800a22c <_printf_float+0x240>
 800a396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a398:	2a01      	cmp	r2, #1
 800a39a:	dc01      	bgt.n	800a3a0 <_printf_float+0x3b4>
 800a39c:	07db      	lsls	r3, r3, #31
 800a39e:	d53a      	bpl.n	800a416 <_printf_float+0x42a>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	4642      	mov	r2, r8
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	f43f ae7b 	beq.w	800a0a6 <_printf_float+0xba>
 800a3b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	47b8      	blx	r7
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	f108 0801 	add.w	r8, r8, #1
 800a3c0:	f43f ae71 	beq.w	800a0a6 <_printf_float+0xba>
 800a3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f103 3aff 	add.w	sl, r3, #4294967295
 800a3cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f7f6 fb81 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3d6:	b9c8      	cbnz	r0, 800a40c <_printf_float+0x420>
 800a3d8:	4653      	mov	r3, sl
 800a3da:	4642      	mov	r2, r8
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4628      	mov	r0, r5
 800a3e0:	47b8      	blx	r7
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	d10e      	bne.n	800a404 <_printf_float+0x418>
 800a3e6:	e65e      	b.n	800a0a6 <_printf_float+0xba>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	4652      	mov	r2, sl
 800a3ec:	4631      	mov	r1, r6
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	47b8      	blx	r7
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	f43f ae57 	beq.w	800a0a6 <_printf_float+0xba>
 800a3f8:	f108 0801 	add.w	r8, r8, #1
 800a3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4543      	cmp	r3, r8
 800a402:	dcf1      	bgt.n	800a3e8 <_printf_float+0x3fc>
 800a404:	464b      	mov	r3, r9
 800a406:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a40a:	e6de      	b.n	800a1ca <_printf_float+0x1de>
 800a40c:	f04f 0800 	mov.w	r8, #0
 800a410:	f104 0a1a 	add.w	sl, r4, #26
 800a414:	e7f2      	b.n	800a3fc <_printf_float+0x410>
 800a416:	2301      	movs	r3, #1
 800a418:	e7df      	b.n	800a3da <_printf_float+0x3ee>
 800a41a:	2301      	movs	r3, #1
 800a41c:	464a      	mov	r2, r9
 800a41e:	4631      	mov	r1, r6
 800a420:	4628      	mov	r0, r5
 800a422:	47b8      	blx	r7
 800a424:	3001      	adds	r0, #1
 800a426:	f43f ae3e 	beq.w	800a0a6 <_printf_float+0xba>
 800a42a:	f108 0801 	add.w	r8, r8, #1
 800a42e:	68e3      	ldr	r3, [r4, #12]
 800a430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	4543      	cmp	r3, r8
 800a436:	dcf0      	bgt.n	800a41a <_printf_float+0x42e>
 800a438:	e6fc      	b.n	800a234 <_printf_float+0x248>
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	f104 0919 	add.w	r9, r4, #25
 800a442:	e7f4      	b.n	800a42e <_printf_float+0x442>
 800a444:	2900      	cmp	r1, #0
 800a446:	f43f ae8b 	beq.w	800a160 <_printf_float+0x174>
 800a44a:	2300      	movs	r3, #0
 800a44c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a450:	ab09      	add	r3, sp, #36	; 0x24
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	ec49 8b10 	vmov	d0, r8, r9
 800a458:	6022      	str	r2, [r4, #0]
 800a45a:	f8cd a004 	str.w	sl, [sp, #4]
 800a45e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a462:	4628      	mov	r0, r5
 800a464:	f7ff fd2e 	bl	8009ec4 <__cvt>
 800a468:	4680      	mov	r8, r0
 800a46a:	e648      	b.n	800a0fe <_printf_float+0x112>

0800a46c <_printf_common>:
 800a46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a470:	4691      	mov	r9, r2
 800a472:	461f      	mov	r7, r3
 800a474:	688a      	ldr	r2, [r1, #8]
 800a476:	690b      	ldr	r3, [r1, #16]
 800a478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	bfb8      	it	lt
 800a480:	4613      	movlt	r3, r2
 800a482:	f8c9 3000 	str.w	r3, [r9]
 800a486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a48a:	4606      	mov	r6, r0
 800a48c:	460c      	mov	r4, r1
 800a48e:	b112      	cbz	r2, 800a496 <_printf_common+0x2a>
 800a490:	3301      	adds	r3, #1
 800a492:	f8c9 3000 	str.w	r3, [r9]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	0699      	lsls	r1, r3, #26
 800a49a:	bf42      	ittt	mi
 800a49c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4a0:	3302      	addmi	r3, #2
 800a4a2:	f8c9 3000 	strmi.w	r3, [r9]
 800a4a6:	6825      	ldr	r5, [r4, #0]
 800a4a8:	f015 0506 	ands.w	r5, r5, #6
 800a4ac:	d107      	bne.n	800a4be <_printf_common+0x52>
 800a4ae:	f104 0a19 	add.w	sl, r4, #25
 800a4b2:	68e3      	ldr	r3, [r4, #12]
 800a4b4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4b8:	1a9b      	subs	r3, r3, r2
 800a4ba:	42ab      	cmp	r3, r5
 800a4bc:	dc28      	bgt.n	800a510 <_printf_common+0xa4>
 800a4be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	3300      	adds	r3, #0
 800a4c6:	bf18      	it	ne
 800a4c8:	2301      	movne	r3, #1
 800a4ca:	0692      	lsls	r2, r2, #26
 800a4cc:	d42d      	bmi.n	800a52a <_printf_common+0xbe>
 800a4ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	47c0      	blx	r8
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d020      	beq.n	800a51e <_printf_common+0xb2>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	68e5      	ldr	r5, [r4, #12]
 800a4e0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4e4:	f003 0306 	and.w	r3, r3, #6
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	bf08      	it	eq
 800a4ec:	1aad      	subeq	r5, r5, r2
 800a4ee:	68a3      	ldr	r3, [r4, #8]
 800a4f0:	6922      	ldr	r2, [r4, #16]
 800a4f2:	bf0c      	ite	eq
 800a4f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4f8:	2500      	movne	r5, #0
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	bfc4      	itt	gt
 800a4fe:	1a9b      	subgt	r3, r3, r2
 800a500:	18ed      	addgt	r5, r5, r3
 800a502:	f04f 0900 	mov.w	r9, #0
 800a506:	341a      	adds	r4, #26
 800a508:	454d      	cmp	r5, r9
 800a50a:	d11a      	bne.n	800a542 <_printf_common+0xd6>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e008      	b.n	800a522 <_printf_common+0xb6>
 800a510:	2301      	movs	r3, #1
 800a512:	4652      	mov	r2, sl
 800a514:	4639      	mov	r1, r7
 800a516:	4630      	mov	r0, r6
 800a518:	47c0      	blx	r8
 800a51a:	3001      	adds	r0, #1
 800a51c:	d103      	bne.n	800a526 <_printf_common+0xba>
 800a51e:	f04f 30ff 	mov.w	r0, #4294967295
 800a522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a526:	3501      	adds	r5, #1
 800a528:	e7c3      	b.n	800a4b2 <_printf_common+0x46>
 800a52a:	18e1      	adds	r1, r4, r3
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	2030      	movs	r0, #48	; 0x30
 800a530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a534:	4422      	add	r2, r4
 800a536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a53a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a53e:	3302      	adds	r3, #2
 800a540:	e7c5      	b.n	800a4ce <_printf_common+0x62>
 800a542:	2301      	movs	r3, #1
 800a544:	4622      	mov	r2, r4
 800a546:	4639      	mov	r1, r7
 800a548:	4630      	mov	r0, r6
 800a54a:	47c0      	blx	r8
 800a54c:	3001      	adds	r0, #1
 800a54e:	d0e6      	beq.n	800a51e <_printf_common+0xb2>
 800a550:	f109 0901 	add.w	r9, r9, #1
 800a554:	e7d8      	b.n	800a508 <_printf_common+0x9c>
	...

0800a558 <_printf_i>:
 800a558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a55c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a560:	460c      	mov	r4, r1
 800a562:	7e09      	ldrb	r1, [r1, #24]
 800a564:	b085      	sub	sp, #20
 800a566:	296e      	cmp	r1, #110	; 0x6e
 800a568:	4617      	mov	r7, r2
 800a56a:	4606      	mov	r6, r0
 800a56c:	4698      	mov	r8, r3
 800a56e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a570:	f000 80b3 	beq.w	800a6da <_printf_i+0x182>
 800a574:	d822      	bhi.n	800a5bc <_printf_i+0x64>
 800a576:	2963      	cmp	r1, #99	; 0x63
 800a578:	d036      	beq.n	800a5e8 <_printf_i+0x90>
 800a57a:	d80a      	bhi.n	800a592 <_printf_i+0x3a>
 800a57c:	2900      	cmp	r1, #0
 800a57e:	f000 80b9 	beq.w	800a6f4 <_printf_i+0x19c>
 800a582:	2958      	cmp	r1, #88	; 0x58
 800a584:	f000 8083 	beq.w	800a68e <_printf_i+0x136>
 800a588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a58c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a590:	e032      	b.n	800a5f8 <_printf_i+0xa0>
 800a592:	2964      	cmp	r1, #100	; 0x64
 800a594:	d001      	beq.n	800a59a <_printf_i+0x42>
 800a596:	2969      	cmp	r1, #105	; 0x69
 800a598:	d1f6      	bne.n	800a588 <_printf_i+0x30>
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	6813      	ldr	r3, [r2, #0]
 800a59e:	0605      	lsls	r5, r0, #24
 800a5a0:	f103 0104 	add.w	r1, r3, #4
 800a5a4:	d52a      	bpl.n	800a5fc <_printf_i+0xa4>
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6011      	str	r1, [r2, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	da03      	bge.n	800a5b6 <_printf_i+0x5e>
 800a5ae:	222d      	movs	r2, #45	; 0x2d
 800a5b0:	425b      	negs	r3, r3
 800a5b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5b6:	486f      	ldr	r0, [pc, #444]	; (800a774 <_printf_i+0x21c>)
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	e039      	b.n	800a630 <_printf_i+0xd8>
 800a5bc:	2973      	cmp	r1, #115	; 0x73
 800a5be:	f000 809d 	beq.w	800a6fc <_printf_i+0x1a4>
 800a5c2:	d808      	bhi.n	800a5d6 <_printf_i+0x7e>
 800a5c4:	296f      	cmp	r1, #111	; 0x6f
 800a5c6:	d020      	beq.n	800a60a <_printf_i+0xb2>
 800a5c8:	2970      	cmp	r1, #112	; 0x70
 800a5ca:	d1dd      	bne.n	800a588 <_printf_i+0x30>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	f043 0320 	orr.w	r3, r3, #32
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	e003      	b.n	800a5de <_printf_i+0x86>
 800a5d6:	2975      	cmp	r1, #117	; 0x75
 800a5d8:	d017      	beq.n	800a60a <_printf_i+0xb2>
 800a5da:	2978      	cmp	r1, #120	; 0x78
 800a5dc:	d1d4      	bne.n	800a588 <_printf_i+0x30>
 800a5de:	2378      	movs	r3, #120	; 0x78
 800a5e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5e4:	4864      	ldr	r0, [pc, #400]	; (800a778 <_printf_i+0x220>)
 800a5e6:	e055      	b.n	800a694 <_printf_i+0x13c>
 800a5e8:	6813      	ldr	r3, [r2, #0]
 800a5ea:	1d19      	adds	r1, r3, #4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	6011      	str	r1, [r2, #0]
 800a5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e08c      	b.n	800a716 <_printf_i+0x1be>
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6011      	str	r1, [r2, #0]
 800a600:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a604:	bf18      	it	ne
 800a606:	b21b      	sxthne	r3, r3
 800a608:	e7cf      	b.n	800a5aa <_printf_i+0x52>
 800a60a:	6813      	ldr	r3, [r2, #0]
 800a60c:	6825      	ldr	r5, [r4, #0]
 800a60e:	1d18      	adds	r0, r3, #4
 800a610:	6010      	str	r0, [r2, #0]
 800a612:	0628      	lsls	r0, r5, #24
 800a614:	d501      	bpl.n	800a61a <_printf_i+0xc2>
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	e002      	b.n	800a620 <_printf_i+0xc8>
 800a61a:	0668      	lsls	r0, r5, #25
 800a61c:	d5fb      	bpl.n	800a616 <_printf_i+0xbe>
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	4854      	ldr	r0, [pc, #336]	; (800a774 <_printf_i+0x21c>)
 800a622:	296f      	cmp	r1, #111	; 0x6f
 800a624:	bf14      	ite	ne
 800a626:	220a      	movne	r2, #10
 800a628:	2208      	moveq	r2, #8
 800a62a:	2100      	movs	r1, #0
 800a62c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a630:	6865      	ldr	r5, [r4, #4]
 800a632:	60a5      	str	r5, [r4, #8]
 800a634:	2d00      	cmp	r5, #0
 800a636:	f2c0 8095 	blt.w	800a764 <_printf_i+0x20c>
 800a63a:	6821      	ldr	r1, [r4, #0]
 800a63c:	f021 0104 	bic.w	r1, r1, #4
 800a640:	6021      	str	r1, [r4, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d13d      	bne.n	800a6c2 <_printf_i+0x16a>
 800a646:	2d00      	cmp	r5, #0
 800a648:	f040 808e 	bne.w	800a768 <_printf_i+0x210>
 800a64c:	4665      	mov	r5, ip
 800a64e:	2a08      	cmp	r2, #8
 800a650:	d10b      	bne.n	800a66a <_printf_i+0x112>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	07db      	lsls	r3, r3, #31
 800a656:	d508      	bpl.n	800a66a <_printf_i+0x112>
 800a658:	6923      	ldr	r3, [r4, #16]
 800a65a:	6862      	ldr	r2, [r4, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	bfde      	ittt	le
 800a660:	2330      	movle	r3, #48	; 0x30
 800a662:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a666:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a66a:	ebac 0305 	sub.w	r3, ip, r5
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	f8cd 8000 	str.w	r8, [sp]
 800a674:	463b      	mov	r3, r7
 800a676:	aa03      	add	r2, sp, #12
 800a678:	4621      	mov	r1, r4
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff fef6 	bl	800a46c <_printf_common>
 800a680:	3001      	adds	r0, #1
 800a682:	d14d      	bne.n	800a720 <_printf_i+0x1c8>
 800a684:	f04f 30ff 	mov.w	r0, #4294967295
 800a688:	b005      	add	sp, #20
 800a68a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a68e:	4839      	ldr	r0, [pc, #228]	; (800a774 <_printf_i+0x21c>)
 800a690:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a694:	6813      	ldr	r3, [r2, #0]
 800a696:	6821      	ldr	r1, [r4, #0]
 800a698:	1d1d      	adds	r5, r3, #4
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6015      	str	r5, [r2, #0]
 800a69e:	060a      	lsls	r2, r1, #24
 800a6a0:	d50b      	bpl.n	800a6ba <_printf_i+0x162>
 800a6a2:	07ca      	lsls	r2, r1, #31
 800a6a4:	bf44      	itt	mi
 800a6a6:	f041 0120 	orrmi.w	r1, r1, #32
 800a6aa:	6021      	strmi	r1, [r4, #0]
 800a6ac:	b91b      	cbnz	r3, 800a6b6 <_printf_i+0x15e>
 800a6ae:	6822      	ldr	r2, [r4, #0]
 800a6b0:	f022 0220 	bic.w	r2, r2, #32
 800a6b4:	6022      	str	r2, [r4, #0]
 800a6b6:	2210      	movs	r2, #16
 800a6b8:	e7b7      	b.n	800a62a <_printf_i+0xd2>
 800a6ba:	064d      	lsls	r5, r1, #25
 800a6bc:	bf48      	it	mi
 800a6be:	b29b      	uxthmi	r3, r3
 800a6c0:	e7ef      	b.n	800a6a2 <_printf_i+0x14a>
 800a6c2:	4665      	mov	r5, ip
 800a6c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6c8:	fb02 3311 	mls	r3, r2, r1, r3
 800a6cc:	5cc3      	ldrb	r3, [r0, r3]
 800a6ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	d1f5      	bne.n	800a6c4 <_printf_i+0x16c>
 800a6d8:	e7b9      	b.n	800a64e <_printf_i+0xf6>
 800a6da:	6813      	ldr	r3, [r2, #0]
 800a6dc:	6825      	ldr	r5, [r4, #0]
 800a6de:	6961      	ldr	r1, [r4, #20]
 800a6e0:	1d18      	adds	r0, r3, #4
 800a6e2:	6010      	str	r0, [r2, #0]
 800a6e4:	0628      	lsls	r0, r5, #24
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	d501      	bpl.n	800a6ee <_printf_i+0x196>
 800a6ea:	6019      	str	r1, [r3, #0]
 800a6ec:	e002      	b.n	800a6f4 <_printf_i+0x19c>
 800a6ee:	066a      	lsls	r2, r5, #25
 800a6f0:	d5fb      	bpl.n	800a6ea <_printf_i+0x192>
 800a6f2:	8019      	strh	r1, [r3, #0]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	4665      	mov	r5, ip
 800a6fa:	e7b9      	b.n	800a670 <_printf_i+0x118>
 800a6fc:	6813      	ldr	r3, [r2, #0]
 800a6fe:	1d19      	adds	r1, r3, #4
 800a700:	6011      	str	r1, [r2, #0]
 800a702:	681d      	ldr	r5, [r3, #0]
 800a704:	6862      	ldr	r2, [r4, #4]
 800a706:	2100      	movs	r1, #0
 800a708:	4628      	mov	r0, r5
 800a70a:	f7f5 fd71 	bl	80001f0 <memchr>
 800a70e:	b108      	cbz	r0, 800a714 <_printf_i+0x1bc>
 800a710:	1b40      	subs	r0, r0, r5
 800a712:	6060      	str	r0, [r4, #4]
 800a714:	6863      	ldr	r3, [r4, #4]
 800a716:	6123      	str	r3, [r4, #16]
 800a718:	2300      	movs	r3, #0
 800a71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71e:	e7a7      	b.n	800a670 <_printf_i+0x118>
 800a720:	6923      	ldr	r3, [r4, #16]
 800a722:	462a      	mov	r2, r5
 800a724:	4639      	mov	r1, r7
 800a726:	4630      	mov	r0, r6
 800a728:	47c0      	blx	r8
 800a72a:	3001      	adds	r0, #1
 800a72c:	d0aa      	beq.n	800a684 <_printf_i+0x12c>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	079b      	lsls	r3, r3, #30
 800a732:	d413      	bmi.n	800a75c <_printf_i+0x204>
 800a734:	68e0      	ldr	r0, [r4, #12]
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	4298      	cmp	r0, r3
 800a73a:	bfb8      	it	lt
 800a73c:	4618      	movlt	r0, r3
 800a73e:	e7a3      	b.n	800a688 <_printf_i+0x130>
 800a740:	2301      	movs	r3, #1
 800a742:	464a      	mov	r2, r9
 800a744:	4639      	mov	r1, r7
 800a746:	4630      	mov	r0, r6
 800a748:	47c0      	blx	r8
 800a74a:	3001      	adds	r0, #1
 800a74c:	d09a      	beq.n	800a684 <_printf_i+0x12c>
 800a74e:	3501      	adds	r5, #1
 800a750:	68e3      	ldr	r3, [r4, #12]
 800a752:	9a03      	ldr	r2, [sp, #12]
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	42ab      	cmp	r3, r5
 800a758:	dcf2      	bgt.n	800a740 <_printf_i+0x1e8>
 800a75a:	e7eb      	b.n	800a734 <_printf_i+0x1dc>
 800a75c:	2500      	movs	r5, #0
 800a75e:	f104 0919 	add.w	r9, r4, #25
 800a762:	e7f5      	b.n	800a750 <_printf_i+0x1f8>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1ac      	bne.n	800a6c2 <_printf_i+0x16a>
 800a768:	7803      	ldrb	r3, [r0, #0]
 800a76a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a76e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a772:	e76c      	b.n	800a64e <_printf_i+0xf6>
 800a774:	0800e92a 	.word	0x0800e92a
 800a778:	0800e93b 	.word	0x0800e93b

0800a77c <iprintf>:
 800a77c:	b40f      	push	{r0, r1, r2, r3}
 800a77e:	4b0a      	ldr	r3, [pc, #40]	; (800a7a8 <iprintf+0x2c>)
 800a780:	b513      	push	{r0, r1, r4, lr}
 800a782:	681c      	ldr	r4, [r3, #0]
 800a784:	b124      	cbz	r4, 800a790 <iprintf+0x14>
 800a786:	69a3      	ldr	r3, [r4, #24]
 800a788:	b913      	cbnz	r3, 800a790 <iprintf+0x14>
 800a78a:	4620      	mov	r0, r4
 800a78c:	f001 fed4 	bl	800c538 <__sinit>
 800a790:	ab05      	add	r3, sp, #20
 800a792:	9a04      	ldr	r2, [sp, #16]
 800a794:	68a1      	ldr	r1, [r4, #8]
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	4620      	mov	r0, r4
 800a79a:	f003 f947 	bl	800da2c <_vfiprintf_r>
 800a79e:	b002      	add	sp, #8
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	b004      	add	sp, #16
 800a7a6:	4770      	bx	lr
 800a7a8:	20000010 	.word	0x20000010

0800a7ac <_puts_r>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	b118      	cbz	r0, 800a7bc <_puts_r+0x10>
 800a7b4:	6983      	ldr	r3, [r0, #24]
 800a7b6:	b90b      	cbnz	r3, 800a7bc <_puts_r+0x10>
 800a7b8:	f001 febe 	bl	800c538 <__sinit>
 800a7bc:	69ab      	ldr	r3, [r5, #24]
 800a7be:	68ac      	ldr	r4, [r5, #8]
 800a7c0:	b913      	cbnz	r3, 800a7c8 <_puts_r+0x1c>
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	f001 feb8 	bl	800c538 <__sinit>
 800a7c8:	4b23      	ldr	r3, [pc, #140]	; (800a858 <_puts_r+0xac>)
 800a7ca:	429c      	cmp	r4, r3
 800a7cc:	d117      	bne.n	800a7fe <_puts_r+0x52>
 800a7ce:	686c      	ldr	r4, [r5, #4]
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	071b      	lsls	r3, r3, #28
 800a7d4:	d51d      	bpl.n	800a812 <_puts_r+0x66>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	b1db      	cbz	r3, 800a812 <_puts_r+0x66>
 800a7da:	3e01      	subs	r6, #1
 800a7dc:	68a3      	ldr	r3, [r4, #8]
 800a7de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	60a3      	str	r3, [r4, #8]
 800a7e6:	b9e9      	cbnz	r1, 800a824 <_puts_r+0x78>
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	da2e      	bge.n	800a84a <_puts_r+0x9e>
 800a7ec:	4622      	mov	r2, r4
 800a7ee:	210a      	movs	r1, #10
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f000 fead 	bl	800b550 <__swbuf_r>
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	d011      	beq.n	800a81e <_puts_r+0x72>
 800a7fa:	200a      	movs	r0, #10
 800a7fc:	e011      	b.n	800a822 <_puts_r+0x76>
 800a7fe:	4b17      	ldr	r3, [pc, #92]	; (800a85c <_puts_r+0xb0>)
 800a800:	429c      	cmp	r4, r3
 800a802:	d101      	bne.n	800a808 <_puts_r+0x5c>
 800a804:	68ac      	ldr	r4, [r5, #8]
 800a806:	e7e3      	b.n	800a7d0 <_puts_r+0x24>
 800a808:	4b15      	ldr	r3, [pc, #84]	; (800a860 <_puts_r+0xb4>)
 800a80a:	429c      	cmp	r4, r3
 800a80c:	bf08      	it	eq
 800a80e:	68ec      	ldreq	r4, [r5, #12]
 800a810:	e7de      	b.n	800a7d0 <_puts_r+0x24>
 800a812:	4621      	mov	r1, r4
 800a814:	4628      	mov	r0, r5
 800a816:	f000 feed 	bl	800b5f4 <__swsetup_r>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0dd      	beq.n	800a7da <_puts_r+0x2e>
 800a81e:	f04f 30ff 	mov.w	r0, #4294967295
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	2b00      	cmp	r3, #0
 800a826:	da04      	bge.n	800a832 <_puts_r+0x86>
 800a828:	69a2      	ldr	r2, [r4, #24]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	dc06      	bgt.n	800a83c <_puts_r+0x90>
 800a82e:	290a      	cmp	r1, #10
 800a830:	d004      	beq.n	800a83c <_puts_r+0x90>
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	6022      	str	r2, [r4, #0]
 800a838:	7019      	strb	r1, [r3, #0]
 800a83a:	e7cf      	b.n	800a7dc <_puts_r+0x30>
 800a83c:	4622      	mov	r2, r4
 800a83e:	4628      	mov	r0, r5
 800a840:	f000 fe86 	bl	800b550 <__swbuf_r>
 800a844:	3001      	adds	r0, #1
 800a846:	d1c9      	bne.n	800a7dc <_puts_r+0x30>
 800a848:	e7e9      	b.n	800a81e <_puts_r+0x72>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	200a      	movs	r0, #10
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	6022      	str	r2, [r4, #0]
 800a852:	7018      	strb	r0, [r3, #0]
 800a854:	e7e5      	b.n	800a822 <_puts_r+0x76>
 800a856:	bf00      	nop
 800a858:	0800e9d0 	.word	0x0800e9d0
 800a85c:	0800e9f0 	.word	0x0800e9f0
 800a860:	0800e9b0 	.word	0x0800e9b0

0800a864 <puts>:
 800a864:	4b02      	ldr	r3, [pc, #8]	; (800a870 <puts+0xc>)
 800a866:	4601      	mov	r1, r0
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	f7ff bf9f 	b.w	800a7ac <_puts_r>
 800a86e:	bf00      	nop
 800a870:	20000010 	.word	0x20000010

0800a874 <siprintf>:
 800a874:	b40e      	push	{r1, r2, r3}
 800a876:	b500      	push	{lr}
 800a878:	b09c      	sub	sp, #112	; 0x70
 800a87a:	ab1d      	add	r3, sp, #116	; 0x74
 800a87c:	9002      	str	r0, [sp, #8]
 800a87e:	9006      	str	r0, [sp, #24]
 800a880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <siprintf+0x38>)
 800a886:	9107      	str	r1, [sp, #28]
 800a888:	9104      	str	r1, [sp, #16]
 800a88a:	4909      	ldr	r1, [pc, #36]	; (800a8b0 <siprintf+0x3c>)
 800a88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	6800      	ldr	r0, [r0, #0]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	a902      	add	r1, sp, #8
 800a898:	f002 ffa6 	bl	800d7e8 <_svfiprintf_r>
 800a89c:	9b02      	ldr	r3, [sp, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	b01c      	add	sp, #112	; 0x70
 800a8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a8:	b003      	add	sp, #12
 800a8aa:	4770      	bx	lr
 800a8ac:	20000010 	.word	0x20000010
 800a8b0:	ffff0208 	.word	0xffff0208

0800a8b4 <strcat>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	1c5c      	adds	r4, r3, #1
 800a8bc:	b93a      	cbnz	r2, 800a8ce <strcat+0x1a>
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	d1f9      	bne.n	800a8c0 <strcat+0xc>
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	4623      	mov	r3, r4
 800a8d0:	e7f2      	b.n	800a8b8 <strcat+0x4>

0800a8d2 <strstr>:
 800a8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d4:	7803      	ldrb	r3, [r0, #0]
 800a8d6:	b17b      	cbz	r3, 800a8f8 <strstr+0x26>
 800a8d8:	4604      	mov	r4, r0
 800a8da:	7823      	ldrb	r3, [r4, #0]
 800a8dc:	4620      	mov	r0, r4
 800a8de:	1c66      	adds	r6, r4, #1
 800a8e0:	b17b      	cbz	r3, 800a902 <strstr+0x30>
 800a8e2:	1e4a      	subs	r2, r1, #1
 800a8e4:	1e63      	subs	r3, r4, #1
 800a8e6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a8ea:	b14d      	cbz	r5, 800a900 <strstr+0x2e>
 800a8ec:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a8f0:	42af      	cmp	r7, r5
 800a8f2:	4634      	mov	r4, r6
 800a8f4:	d0f7      	beq.n	800a8e6 <strstr+0x14>
 800a8f6:	e7f0      	b.n	800a8da <strstr+0x8>
 800a8f8:	780b      	ldrb	r3, [r1, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	bf18      	it	ne
 800a8fe:	2000      	movne	r0, #0
 800a900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a902:	4618      	mov	r0, r3
 800a904:	e7fc      	b.n	800a900 <strstr+0x2e>

0800a906 <sulp>:
 800a906:	b570      	push	{r4, r5, r6, lr}
 800a908:	4604      	mov	r4, r0
 800a90a:	460d      	mov	r5, r1
 800a90c:	ec45 4b10 	vmov	d0, r4, r5
 800a910:	4616      	mov	r6, r2
 800a912:	f002 fd25 	bl	800d360 <__ulp>
 800a916:	ec51 0b10 	vmov	r0, r1, d0
 800a91a:	b17e      	cbz	r6, 800a93c <sulp+0x36>
 800a91c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a920:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd09      	ble.n	800a93c <sulp+0x36>
 800a928:	051b      	lsls	r3, r3, #20
 800a92a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a92e:	2400      	movs	r4, #0
 800a930:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a934:	4622      	mov	r2, r4
 800a936:	462b      	mov	r3, r5
 800a938:	f7f5 fe66 	bl	8000608 <__aeabi_dmul>
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a940 <_strtod_l>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	461f      	mov	r7, r3
 800a946:	b0a1      	sub	sp, #132	; 0x84
 800a948:	2300      	movs	r3, #0
 800a94a:	4681      	mov	r9, r0
 800a94c:	4638      	mov	r0, r7
 800a94e:	460e      	mov	r6, r1
 800a950:	9217      	str	r2, [sp, #92]	; 0x5c
 800a952:	931c      	str	r3, [sp, #112]	; 0x70
 800a954:	f002 f9a0 	bl	800cc98 <__localeconv_l>
 800a958:	4680      	mov	r8, r0
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	f7f5 fc40 	bl	80001e0 <strlen>
 800a960:	f04f 0a00 	mov.w	sl, #0
 800a964:	4604      	mov	r4, r0
 800a966:	f04f 0b00 	mov.w	fp, #0
 800a96a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a96c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a96e:	781a      	ldrb	r2, [r3, #0]
 800a970:	2a0d      	cmp	r2, #13
 800a972:	d832      	bhi.n	800a9da <_strtod_l+0x9a>
 800a974:	2a09      	cmp	r2, #9
 800a976:	d236      	bcs.n	800a9e6 <_strtod_l+0xa6>
 800a978:	2a00      	cmp	r2, #0
 800a97a:	d03e      	beq.n	800a9fa <_strtod_l+0xba>
 800a97c:	2300      	movs	r3, #0
 800a97e:	930d      	str	r3, [sp, #52]	; 0x34
 800a980:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a982:	782b      	ldrb	r3, [r5, #0]
 800a984:	2b30      	cmp	r3, #48	; 0x30
 800a986:	f040 80ac 	bne.w	800aae2 <_strtod_l+0x1a2>
 800a98a:	786b      	ldrb	r3, [r5, #1]
 800a98c:	2b58      	cmp	r3, #88	; 0x58
 800a98e:	d001      	beq.n	800a994 <_strtod_l+0x54>
 800a990:	2b78      	cmp	r3, #120	; 0x78
 800a992:	d167      	bne.n	800aa64 <_strtod_l+0x124>
 800a994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	ab1c      	add	r3, sp, #112	; 0x70
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	9702      	str	r7, [sp, #8]
 800a99e:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a0:	4a88      	ldr	r2, [pc, #544]	; (800abc4 <_strtod_l+0x284>)
 800a9a2:	a91b      	add	r1, sp, #108	; 0x6c
 800a9a4:	4648      	mov	r0, r9
 800a9a6:	f001 fea0 	bl	800c6ea <__gethex>
 800a9aa:	f010 0407 	ands.w	r4, r0, #7
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	d005      	beq.n	800a9be <_strtod_l+0x7e>
 800a9b2:	2c06      	cmp	r4, #6
 800a9b4:	d12b      	bne.n	800aa0e <_strtod_l+0xce>
 800a9b6:	3501      	adds	r5, #1
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	951b      	str	r5, [sp, #108]	; 0x6c
 800a9bc:	930d      	str	r3, [sp, #52]	; 0x34
 800a9be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f040 859a 	bne.w	800b4fa <_strtod_l+0xbba>
 800a9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9c8:	b1e3      	cbz	r3, 800aa04 <_strtod_l+0xc4>
 800a9ca:	4652      	mov	r2, sl
 800a9cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9d0:	ec43 2b10 	vmov	d0, r2, r3
 800a9d4:	b021      	add	sp, #132	; 0x84
 800a9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9da:	2a2b      	cmp	r2, #43	; 0x2b
 800a9dc:	d015      	beq.n	800aa0a <_strtod_l+0xca>
 800a9de:	2a2d      	cmp	r2, #45	; 0x2d
 800a9e0:	d004      	beq.n	800a9ec <_strtod_l+0xac>
 800a9e2:	2a20      	cmp	r2, #32
 800a9e4:	d1ca      	bne.n	800a97c <_strtod_l+0x3c>
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9ea:	e7bf      	b.n	800a96c <_strtod_l+0x2c>
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	920d      	str	r2, [sp, #52]	; 0x34
 800a9f0:	1c5a      	adds	r2, r3, #1
 800a9f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a9f4:	785b      	ldrb	r3, [r3, #1]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1c2      	bne.n	800a980 <_strtod_l+0x40>
 800a9fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9fc:	961b      	str	r6, [sp, #108]	; 0x6c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	f040 8579 	bne.w	800b4f6 <_strtod_l+0xbb6>
 800aa04:	4652      	mov	r2, sl
 800aa06:	465b      	mov	r3, fp
 800aa08:	e7e2      	b.n	800a9d0 <_strtod_l+0x90>
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	e7ef      	b.n	800a9ee <_strtod_l+0xae>
 800aa0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa10:	b13a      	cbz	r2, 800aa22 <_strtod_l+0xe2>
 800aa12:	2135      	movs	r1, #53	; 0x35
 800aa14:	a81e      	add	r0, sp, #120	; 0x78
 800aa16:	f002 fd9b 	bl	800d550 <__copybits>
 800aa1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa1c:	4648      	mov	r0, r9
 800aa1e:	f002 fa08 	bl	800ce32 <_Bfree>
 800aa22:	3c01      	subs	r4, #1
 800aa24:	2c04      	cmp	r4, #4
 800aa26:	d806      	bhi.n	800aa36 <_strtod_l+0xf6>
 800aa28:	e8df f004 	tbb	[pc, r4]
 800aa2c:	1714030a 	.word	0x1714030a
 800aa30:	0a          	.byte	0x0a
 800aa31:	00          	.byte	0x00
 800aa32:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800aa36:	0730      	lsls	r0, r6, #28
 800aa38:	d5c1      	bpl.n	800a9be <_strtod_l+0x7e>
 800aa3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800aa3e:	e7be      	b.n	800a9be <_strtod_l+0x7e>
 800aa40:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800aa44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aa46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aa4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa52:	e7f0      	b.n	800aa36 <_strtod_l+0xf6>
 800aa54:	f8df b170 	ldr.w	fp, [pc, #368]	; 800abc8 <_strtod_l+0x288>
 800aa58:	e7ed      	b.n	800aa36 <_strtod_l+0xf6>
 800aa5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800aa5e:	f04f 3aff 	mov.w	sl, #4294967295
 800aa62:	e7e8      	b.n	800aa36 <_strtod_l+0xf6>
 800aa64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b30      	cmp	r3, #48	; 0x30
 800aa6e:	d0f9      	beq.n	800aa64 <_strtod_l+0x124>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d0a4      	beq.n	800a9be <_strtod_l+0x7e>
 800aa74:	2301      	movs	r3, #1
 800aa76:	2500      	movs	r5, #0
 800aa78:	9306      	str	r3, [sp, #24]
 800aa7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa7c:	9308      	str	r3, [sp, #32]
 800aa7e:	9507      	str	r5, [sp, #28]
 800aa80:	9505      	str	r5, [sp, #20]
 800aa82:	220a      	movs	r2, #10
 800aa84:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800aa86:	7807      	ldrb	r7, [r0, #0]
 800aa88:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800aa8c:	b2d9      	uxtb	r1, r3
 800aa8e:	2909      	cmp	r1, #9
 800aa90:	d929      	bls.n	800aae6 <_strtod_l+0x1a6>
 800aa92:	4622      	mov	r2, r4
 800aa94:	f8d8 1000 	ldr.w	r1, [r8]
 800aa98:	f003 f931 	bl	800dcfe <strncmp>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d031      	beq.n	800ab04 <_strtod_l+0x1c4>
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	9c05      	ldr	r4, [sp, #20]
 800aaa4:	9004      	str	r0, [sp, #16]
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	2b65      	cmp	r3, #101	; 0x65
 800aaac:	d001      	beq.n	800aab2 <_strtod_l+0x172>
 800aaae:	2b45      	cmp	r3, #69	; 0x45
 800aab0:	d114      	bne.n	800aadc <_strtod_l+0x19c>
 800aab2:	b924      	cbnz	r4, 800aabe <_strtod_l+0x17e>
 800aab4:	b910      	cbnz	r0, 800aabc <_strtod_l+0x17c>
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d09e      	beq.n	800a9fa <_strtod_l+0xba>
 800aabc:	2400      	movs	r4, #0
 800aabe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aac0:	1c73      	adds	r3, r6, #1
 800aac2:	931b      	str	r3, [sp, #108]	; 0x6c
 800aac4:	7873      	ldrb	r3, [r6, #1]
 800aac6:	2b2b      	cmp	r3, #43	; 0x2b
 800aac8:	d078      	beq.n	800abbc <_strtod_l+0x27c>
 800aaca:	2b2d      	cmp	r3, #45	; 0x2d
 800aacc:	d070      	beq.n	800abb0 <_strtod_l+0x270>
 800aace:	f04f 0c00 	mov.w	ip, #0
 800aad2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800aad6:	2f09      	cmp	r7, #9
 800aad8:	d97c      	bls.n	800abd4 <_strtod_l+0x294>
 800aada:	961b      	str	r6, [sp, #108]	; 0x6c
 800aadc:	f04f 0e00 	mov.w	lr, #0
 800aae0:	e09a      	b.n	800ac18 <_strtod_l+0x2d8>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e7c7      	b.n	800aa76 <_strtod_l+0x136>
 800aae6:	9905      	ldr	r1, [sp, #20]
 800aae8:	2908      	cmp	r1, #8
 800aaea:	bfdd      	ittte	le
 800aaec:	9907      	ldrle	r1, [sp, #28]
 800aaee:	fb02 3301 	mlale	r3, r2, r1, r3
 800aaf2:	9307      	strle	r3, [sp, #28]
 800aaf4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800aaf8:	9b05      	ldr	r3, [sp, #20]
 800aafa:	3001      	adds	r0, #1
 800aafc:	3301      	adds	r3, #1
 800aafe:	9305      	str	r3, [sp, #20]
 800ab00:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab02:	e7bf      	b.n	800aa84 <_strtod_l+0x144>
 800ab04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab06:	191a      	adds	r2, r3, r4
 800ab08:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab0a:	9a05      	ldr	r2, [sp, #20]
 800ab0c:	5d1b      	ldrb	r3, [r3, r4]
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	d037      	beq.n	800ab82 <_strtod_l+0x242>
 800ab12:	9c05      	ldr	r4, [sp, #20]
 800ab14:	4602      	mov	r2, r0
 800ab16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ab1a:	2909      	cmp	r1, #9
 800ab1c:	d913      	bls.n	800ab46 <_strtod_l+0x206>
 800ab1e:	2101      	movs	r1, #1
 800ab20:	9104      	str	r1, [sp, #16]
 800ab22:	e7c2      	b.n	800aaaa <_strtod_l+0x16a>
 800ab24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	921b      	str	r2, [sp, #108]	; 0x6c
 800ab2a:	785b      	ldrb	r3, [r3, #1]
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	2b30      	cmp	r3, #48	; 0x30
 800ab30:	d0f8      	beq.n	800ab24 <_strtod_l+0x1e4>
 800ab32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ab36:	2a08      	cmp	r2, #8
 800ab38:	f200 84e4 	bhi.w	800b504 <_strtod_l+0xbc4>
 800ab3c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ab3e:	9208      	str	r2, [sp, #32]
 800ab40:	4602      	mov	r2, r0
 800ab42:	2000      	movs	r0, #0
 800ab44:	4604      	mov	r4, r0
 800ab46:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ab4a:	f100 0101 	add.w	r1, r0, #1
 800ab4e:	d012      	beq.n	800ab76 <_strtod_l+0x236>
 800ab50:	440a      	add	r2, r1
 800ab52:	eb00 0c04 	add.w	ip, r0, r4
 800ab56:	4621      	mov	r1, r4
 800ab58:	270a      	movs	r7, #10
 800ab5a:	458c      	cmp	ip, r1
 800ab5c:	d113      	bne.n	800ab86 <_strtod_l+0x246>
 800ab5e:	1821      	adds	r1, r4, r0
 800ab60:	2908      	cmp	r1, #8
 800ab62:	f104 0401 	add.w	r4, r4, #1
 800ab66:	4404      	add	r4, r0
 800ab68:	dc19      	bgt.n	800ab9e <_strtod_l+0x25e>
 800ab6a:	9b07      	ldr	r3, [sp, #28]
 800ab6c:	210a      	movs	r1, #10
 800ab6e:	fb01 e303 	mla	r3, r1, r3, lr
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	2100      	movs	r1, #0
 800ab76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab78:	1c58      	adds	r0, r3, #1
 800ab7a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	4608      	mov	r0, r1
 800ab80:	e7c9      	b.n	800ab16 <_strtod_l+0x1d6>
 800ab82:	9805      	ldr	r0, [sp, #20]
 800ab84:	e7d3      	b.n	800ab2e <_strtod_l+0x1ee>
 800ab86:	2908      	cmp	r1, #8
 800ab88:	f101 0101 	add.w	r1, r1, #1
 800ab8c:	dc03      	bgt.n	800ab96 <_strtod_l+0x256>
 800ab8e:	9b07      	ldr	r3, [sp, #28]
 800ab90:	437b      	muls	r3, r7
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	e7e1      	b.n	800ab5a <_strtod_l+0x21a>
 800ab96:	2910      	cmp	r1, #16
 800ab98:	bfd8      	it	le
 800ab9a:	437d      	mulle	r5, r7
 800ab9c:	e7dd      	b.n	800ab5a <_strtod_l+0x21a>
 800ab9e:	2c10      	cmp	r4, #16
 800aba0:	bfdc      	itt	le
 800aba2:	210a      	movle	r1, #10
 800aba4:	fb01 e505 	mlale	r5, r1, r5, lr
 800aba8:	e7e4      	b.n	800ab74 <_strtod_l+0x234>
 800abaa:	2301      	movs	r3, #1
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	e781      	b.n	800aab4 <_strtod_l+0x174>
 800abb0:	f04f 0c01 	mov.w	ip, #1
 800abb4:	1cb3      	adds	r3, r6, #2
 800abb6:	931b      	str	r3, [sp, #108]	; 0x6c
 800abb8:	78b3      	ldrb	r3, [r6, #2]
 800abba:	e78a      	b.n	800aad2 <_strtod_l+0x192>
 800abbc:	f04f 0c00 	mov.w	ip, #0
 800abc0:	e7f8      	b.n	800abb4 <_strtod_l+0x274>
 800abc2:	bf00      	nop
 800abc4:	0800e94c 	.word	0x0800e94c
 800abc8:	7ff00000 	.word	0x7ff00000
 800abcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abce:	1c5f      	adds	r7, r3, #1
 800abd0:	971b      	str	r7, [sp, #108]	; 0x6c
 800abd2:	785b      	ldrb	r3, [r3, #1]
 800abd4:	2b30      	cmp	r3, #48	; 0x30
 800abd6:	d0f9      	beq.n	800abcc <_strtod_l+0x28c>
 800abd8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800abdc:	2f08      	cmp	r7, #8
 800abde:	f63f af7d 	bhi.w	800aadc <_strtod_l+0x19c>
 800abe2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800abe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abe8:	930a      	str	r3, [sp, #40]	; 0x28
 800abea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abec:	1c5f      	adds	r7, r3, #1
 800abee:	971b      	str	r7, [sp, #108]	; 0x6c
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800abf6:	f1b8 0f09 	cmp.w	r8, #9
 800abfa:	d937      	bls.n	800ac6c <_strtod_l+0x32c>
 800abfc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abfe:	1a7f      	subs	r7, r7, r1
 800ac00:	2f08      	cmp	r7, #8
 800ac02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ac06:	dc37      	bgt.n	800ac78 <_strtod_l+0x338>
 800ac08:	45be      	cmp	lr, r7
 800ac0a:	bfa8      	it	ge
 800ac0c:	46be      	movge	lr, r7
 800ac0e:	f1bc 0f00 	cmp.w	ip, #0
 800ac12:	d001      	beq.n	800ac18 <_strtod_l+0x2d8>
 800ac14:	f1ce 0e00 	rsb	lr, lr, #0
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	d151      	bne.n	800acc0 <_strtod_l+0x380>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	f47f aece 	bne.w	800a9be <_strtod_l+0x7e>
 800ac22:	9a06      	ldr	r2, [sp, #24]
 800ac24:	2a00      	cmp	r2, #0
 800ac26:	f47f aeca 	bne.w	800a9be <_strtod_l+0x7e>
 800ac2a:	9a04      	ldr	r2, [sp, #16]
 800ac2c:	2a00      	cmp	r2, #0
 800ac2e:	f47f aee4 	bne.w	800a9fa <_strtod_l+0xba>
 800ac32:	2b4e      	cmp	r3, #78	; 0x4e
 800ac34:	d027      	beq.n	800ac86 <_strtod_l+0x346>
 800ac36:	dc21      	bgt.n	800ac7c <_strtod_l+0x33c>
 800ac38:	2b49      	cmp	r3, #73	; 0x49
 800ac3a:	f47f aede 	bne.w	800a9fa <_strtod_l+0xba>
 800ac3e:	49a0      	ldr	r1, [pc, #640]	; (800aec0 <_strtod_l+0x580>)
 800ac40:	a81b      	add	r0, sp, #108	; 0x6c
 800ac42:	f001 ff85 	bl	800cb50 <__match>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f43f aed7 	beq.w	800a9fa <_strtod_l+0xba>
 800ac4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac4e:	499d      	ldr	r1, [pc, #628]	; (800aec4 <_strtod_l+0x584>)
 800ac50:	3b01      	subs	r3, #1
 800ac52:	a81b      	add	r0, sp, #108	; 0x6c
 800ac54:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac56:	f001 ff7b 	bl	800cb50 <__match>
 800ac5a:	b910      	cbnz	r0, 800ac62 <_strtod_l+0x322>
 800ac5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac5e:	3301      	adds	r3, #1
 800ac60:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac62:	f8df b274 	ldr.w	fp, [pc, #628]	; 800aed8 <_strtod_l+0x598>
 800ac66:	f04f 0a00 	mov.w	sl, #0
 800ac6a:	e6a8      	b.n	800a9be <_strtod_l+0x7e>
 800ac6c:	210a      	movs	r1, #10
 800ac6e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ac72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ac76:	e7b8      	b.n	800abea <_strtod_l+0x2aa>
 800ac78:	46be      	mov	lr, r7
 800ac7a:	e7c8      	b.n	800ac0e <_strtod_l+0x2ce>
 800ac7c:	2b69      	cmp	r3, #105	; 0x69
 800ac7e:	d0de      	beq.n	800ac3e <_strtod_l+0x2fe>
 800ac80:	2b6e      	cmp	r3, #110	; 0x6e
 800ac82:	f47f aeba 	bne.w	800a9fa <_strtod_l+0xba>
 800ac86:	4990      	ldr	r1, [pc, #576]	; (800aec8 <_strtod_l+0x588>)
 800ac88:	a81b      	add	r0, sp, #108	; 0x6c
 800ac8a:	f001 ff61 	bl	800cb50 <__match>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f aeb3 	beq.w	800a9fa <_strtod_l+0xba>
 800ac94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b28      	cmp	r3, #40	; 0x28
 800ac9a:	d10e      	bne.n	800acba <_strtod_l+0x37a>
 800ac9c:	aa1e      	add	r2, sp, #120	; 0x78
 800ac9e:	498b      	ldr	r1, [pc, #556]	; (800aecc <_strtod_l+0x58c>)
 800aca0:	a81b      	add	r0, sp, #108	; 0x6c
 800aca2:	f001 ff69 	bl	800cb78 <__hexnan>
 800aca6:	2805      	cmp	r0, #5
 800aca8:	d107      	bne.n	800acba <_strtod_l+0x37a>
 800acaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800acac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800acb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800acb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800acb8:	e681      	b.n	800a9be <_strtod_l+0x7e>
 800acba:	f8df b224 	ldr.w	fp, [pc, #548]	; 800aee0 <_strtod_l+0x5a0>
 800acbe:	e7d2      	b.n	800ac66 <_strtod_l+0x326>
 800acc0:	ebae 0302 	sub.w	r3, lr, r2
 800acc4:	9306      	str	r3, [sp, #24]
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	9807      	ldr	r0, [sp, #28]
 800acca:	2b00      	cmp	r3, #0
 800accc:	bf08      	it	eq
 800acce:	4623      	moveq	r3, r4
 800acd0:	2c10      	cmp	r4, #16
 800acd2:	9305      	str	r3, [sp, #20]
 800acd4:	46a0      	mov	r8, r4
 800acd6:	bfa8      	it	ge
 800acd8:	f04f 0810 	movge.w	r8, #16
 800acdc:	f7f5 fc1a 	bl	8000514 <__aeabi_ui2d>
 800ace0:	2c09      	cmp	r4, #9
 800ace2:	4682      	mov	sl, r0
 800ace4:	468b      	mov	fp, r1
 800ace6:	dc13      	bgt.n	800ad10 <_strtod_l+0x3d0>
 800ace8:	9b06      	ldr	r3, [sp, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f43f ae67 	beq.w	800a9be <_strtod_l+0x7e>
 800acf0:	9b06      	ldr	r3, [sp, #24]
 800acf2:	dd7a      	ble.n	800adea <_strtod_l+0x4aa>
 800acf4:	2b16      	cmp	r3, #22
 800acf6:	dc61      	bgt.n	800adbc <_strtod_l+0x47c>
 800acf8:	4a75      	ldr	r2, [pc, #468]	; (800aed0 <_strtod_l+0x590>)
 800acfa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800acfe:	e9de 0100 	ldrd	r0, r1, [lr]
 800ad02:	4652      	mov	r2, sl
 800ad04:	465b      	mov	r3, fp
 800ad06:	f7f5 fc7f 	bl	8000608 <__aeabi_dmul>
 800ad0a:	4682      	mov	sl, r0
 800ad0c:	468b      	mov	fp, r1
 800ad0e:	e656      	b.n	800a9be <_strtod_l+0x7e>
 800ad10:	4b6f      	ldr	r3, [pc, #444]	; (800aed0 <_strtod_l+0x590>)
 800ad12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ad16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ad1a:	f7f5 fc75 	bl	8000608 <__aeabi_dmul>
 800ad1e:	4606      	mov	r6, r0
 800ad20:	4628      	mov	r0, r5
 800ad22:	460f      	mov	r7, r1
 800ad24:	f7f5 fbf6 	bl	8000514 <__aeabi_ui2d>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 fab4 	bl	800029c <__adddf3>
 800ad34:	2c0f      	cmp	r4, #15
 800ad36:	4682      	mov	sl, r0
 800ad38:	468b      	mov	fp, r1
 800ad3a:	ddd5      	ble.n	800ace8 <_strtod_l+0x3a8>
 800ad3c:	9b06      	ldr	r3, [sp, #24]
 800ad3e:	eba4 0808 	sub.w	r8, r4, r8
 800ad42:	4498      	add	r8, r3
 800ad44:	f1b8 0f00 	cmp.w	r8, #0
 800ad48:	f340 8096 	ble.w	800ae78 <_strtod_l+0x538>
 800ad4c:	f018 030f 	ands.w	r3, r8, #15
 800ad50:	d00a      	beq.n	800ad68 <_strtod_l+0x428>
 800ad52:	495f      	ldr	r1, [pc, #380]	; (800aed0 <_strtod_l+0x590>)
 800ad54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad58:	4652      	mov	r2, sl
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad60:	f7f5 fc52 	bl	8000608 <__aeabi_dmul>
 800ad64:	4682      	mov	sl, r0
 800ad66:	468b      	mov	fp, r1
 800ad68:	f038 080f 	bics.w	r8, r8, #15
 800ad6c:	d073      	beq.n	800ae56 <_strtod_l+0x516>
 800ad6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ad72:	dd47      	ble.n	800ae04 <_strtod_l+0x4c4>
 800ad74:	2400      	movs	r4, #0
 800ad76:	46a0      	mov	r8, r4
 800ad78:	9407      	str	r4, [sp, #28]
 800ad7a:	9405      	str	r4, [sp, #20]
 800ad7c:	2322      	movs	r3, #34	; 0x22
 800ad7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800aed8 <_strtod_l+0x598>
 800ad82:	f8c9 3000 	str.w	r3, [r9]
 800ad86:	f04f 0a00 	mov.w	sl, #0
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f43f ae16 	beq.w	800a9be <_strtod_l+0x7e>
 800ad92:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad94:	4648      	mov	r0, r9
 800ad96:	f002 f84c 	bl	800ce32 <_Bfree>
 800ad9a:	9905      	ldr	r1, [sp, #20]
 800ad9c:	4648      	mov	r0, r9
 800ad9e:	f002 f848 	bl	800ce32 <_Bfree>
 800ada2:	4641      	mov	r1, r8
 800ada4:	4648      	mov	r0, r9
 800ada6:	f002 f844 	bl	800ce32 <_Bfree>
 800adaa:	9907      	ldr	r1, [sp, #28]
 800adac:	4648      	mov	r0, r9
 800adae:	f002 f840 	bl	800ce32 <_Bfree>
 800adb2:	4621      	mov	r1, r4
 800adb4:	4648      	mov	r0, r9
 800adb6:	f002 f83c 	bl	800ce32 <_Bfree>
 800adba:	e600      	b.n	800a9be <_strtod_l+0x7e>
 800adbc:	9a06      	ldr	r2, [sp, #24]
 800adbe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800adc2:	4293      	cmp	r3, r2
 800adc4:	dbba      	blt.n	800ad3c <_strtod_l+0x3fc>
 800adc6:	4d42      	ldr	r5, [pc, #264]	; (800aed0 <_strtod_l+0x590>)
 800adc8:	f1c4 040f 	rsb	r4, r4, #15
 800adcc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800add0:	4652      	mov	r2, sl
 800add2:	465b      	mov	r3, fp
 800add4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add8:	f7f5 fc16 	bl	8000608 <__aeabi_dmul>
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	1b1c      	subs	r4, r3, r4
 800ade0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ade4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ade8:	e78d      	b.n	800ad06 <_strtod_l+0x3c6>
 800adea:	f113 0f16 	cmn.w	r3, #22
 800adee:	dba5      	blt.n	800ad3c <_strtod_l+0x3fc>
 800adf0:	4a37      	ldr	r2, [pc, #220]	; (800aed0 <_strtod_l+0x590>)
 800adf2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800adf6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800adfa:	4650      	mov	r0, sl
 800adfc:	4659      	mov	r1, fp
 800adfe:	f7f5 fd2d 	bl	800085c <__aeabi_ddiv>
 800ae02:	e782      	b.n	800ad0a <_strtod_l+0x3ca>
 800ae04:	2300      	movs	r3, #0
 800ae06:	4e33      	ldr	r6, [pc, #204]	; (800aed4 <_strtod_l+0x594>)
 800ae08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ae0c:	4650      	mov	r0, sl
 800ae0e:	4659      	mov	r1, fp
 800ae10:	461d      	mov	r5, r3
 800ae12:	f1b8 0f01 	cmp.w	r8, #1
 800ae16:	dc21      	bgt.n	800ae5c <_strtod_l+0x51c>
 800ae18:	b10b      	cbz	r3, 800ae1e <_strtod_l+0x4de>
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	468b      	mov	fp, r1
 800ae1e:	4b2d      	ldr	r3, [pc, #180]	; (800aed4 <_strtod_l+0x594>)
 800ae20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ae24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ae28:	4652      	mov	r2, sl
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ae30:	f7f5 fbea 	bl	8000608 <__aeabi_dmul>
 800ae34:	4b28      	ldr	r3, [pc, #160]	; (800aed8 <_strtod_l+0x598>)
 800ae36:	460a      	mov	r2, r1
 800ae38:	400b      	ands	r3, r1
 800ae3a:	4928      	ldr	r1, [pc, #160]	; (800aedc <_strtod_l+0x59c>)
 800ae3c:	428b      	cmp	r3, r1
 800ae3e:	4682      	mov	sl, r0
 800ae40:	d898      	bhi.n	800ad74 <_strtod_l+0x434>
 800ae42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ae46:	428b      	cmp	r3, r1
 800ae48:	bf86      	itte	hi
 800ae4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800aee4 <_strtod_l+0x5a4>
 800ae4e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ae56:	2300      	movs	r3, #0
 800ae58:	9304      	str	r3, [sp, #16]
 800ae5a:	e077      	b.n	800af4c <_strtod_l+0x60c>
 800ae5c:	f018 0f01 	tst.w	r8, #1
 800ae60:	d006      	beq.n	800ae70 <_strtod_l+0x530>
 800ae62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 fbcd 	bl	8000608 <__aeabi_dmul>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	3501      	adds	r5, #1
 800ae72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ae76:	e7cc      	b.n	800ae12 <_strtod_l+0x4d2>
 800ae78:	d0ed      	beq.n	800ae56 <_strtod_l+0x516>
 800ae7a:	f1c8 0800 	rsb	r8, r8, #0
 800ae7e:	f018 020f 	ands.w	r2, r8, #15
 800ae82:	d00a      	beq.n	800ae9a <_strtod_l+0x55a>
 800ae84:	4b12      	ldr	r3, [pc, #72]	; (800aed0 <_strtod_l+0x590>)
 800ae86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae8a:	4650      	mov	r0, sl
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae92:	f7f5 fce3 	bl	800085c <__aeabi_ddiv>
 800ae96:	4682      	mov	sl, r0
 800ae98:	468b      	mov	fp, r1
 800ae9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ae9e:	d0da      	beq.n	800ae56 <_strtod_l+0x516>
 800aea0:	f1b8 0f1f 	cmp.w	r8, #31
 800aea4:	dd20      	ble.n	800aee8 <_strtod_l+0x5a8>
 800aea6:	2400      	movs	r4, #0
 800aea8:	46a0      	mov	r8, r4
 800aeaa:	9407      	str	r4, [sp, #28]
 800aeac:	9405      	str	r4, [sp, #20]
 800aeae:	2322      	movs	r3, #34	; 0x22
 800aeb0:	f04f 0a00 	mov.w	sl, #0
 800aeb4:	f04f 0b00 	mov.w	fp, #0
 800aeb8:	f8c9 3000 	str.w	r3, [r9]
 800aebc:	e765      	b.n	800ad8a <_strtod_l+0x44a>
 800aebe:	bf00      	nop
 800aec0:	0800e91d 	.word	0x0800e91d
 800aec4:	0800e9a3 	.word	0x0800e9a3
 800aec8:	0800e925 	.word	0x0800e925
 800aecc:	0800e960 	.word	0x0800e960
 800aed0:	0800ea48 	.word	0x0800ea48
 800aed4:	0800ea20 	.word	0x0800ea20
 800aed8:	7ff00000 	.word	0x7ff00000
 800aedc:	7ca00000 	.word	0x7ca00000
 800aee0:	fff80000 	.word	0xfff80000
 800aee4:	7fefffff 	.word	0x7fefffff
 800aee8:	f018 0310 	ands.w	r3, r8, #16
 800aeec:	bf18      	it	ne
 800aeee:	236a      	movne	r3, #106	; 0x6a
 800aef0:	4da0      	ldr	r5, [pc, #640]	; (800b174 <_strtod_l+0x834>)
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	4650      	mov	r0, sl
 800aef6:	4659      	mov	r1, fp
 800aef8:	2300      	movs	r3, #0
 800aefa:	f1b8 0f00 	cmp.w	r8, #0
 800aefe:	f300 810a 	bgt.w	800b116 <_strtod_l+0x7d6>
 800af02:	b10b      	cbz	r3, 800af08 <_strtod_l+0x5c8>
 800af04:	4682      	mov	sl, r0
 800af06:	468b      	mov	fp, r1
 800af08:	9b04      	ldr	r3, [sp, #16]
 800af0a:	b1bb      	cbz	r3, 800af3c <_strtod_l+0x5fc>
 800af0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800af10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af14:	2b00      	cmp	r3, #0
 800af16:	4659      	mov	r1, fp
 800af18:	dd10      	ble.n	800af3c <_strtod_l+0x5fc>
 800af1a:	2b1f      	cmp	r3, #31
 800af1c:	f340 8107 	ble.w	800b12e <_strtod_l+0x7ee>
 800af20:	2b34      	cmp	r3, #52	; 0x34
 800af22:	bfde      	ittt	le
 800af24:	3b20      	suble	r3, #32
 800af26:	f04f 32ff 	movle.w	r2, #4294967295
 800af2a:	fa02 f303 	lslle.w	r3, r2, r3
 800af2e:	f04f 0a00 	mov.w	sl, #0
 800af32:	bfcc      	ite	gt
 800af34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800af38:	ea03 0b01 	andle.w	fp, r3, r1
 800af3c:	2200      	movs	r2, #0
 800af3e:	2300      	movs	r3, #0
 800af40:	4650      	mov	r0, sl
 800af42:	4659      	mov	r1, fp
 800af44:	f7f5 fdc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d1ac      	bne.n	800aea6 <_strtod_l+0x566>
 800af4c:	9b07      	ldr	r3, [sp, #28]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	9a05      	ldr	r2, [sp, #20]
 800af52:	9908      	ldr	r1, [sp, #32]
 800af54:	4623      	mov	r3, r4
 800af56:	4648      	mov	r0, r9
 800af58:	f001 ffbd 	bl	800ced6 <__s2b>
 800af5c:	9007      	str	r0, [sp, #28]
 800af5e:	2800      	cmp	r0, #0
 800af60:	f43f af08 	beq.w	800ad74 <_strtod_l+0x434>
 800af64:	9a06      	ldr	r2, [sp, #24]
 800af66:	9b06      	ldr	r3, [sp, #24]
 800af68:	2a00      	cmp	r2, #0
 800af6a:	f1c3 0300 	rsb	r3, r3, #0
 800af6e:	bfa8      	it	ge
 800af70:	2300      	movge	r3, #0
 800af72:	930e      	str	r3, [sp, #56]	; 0x38
 800af74:	2400      	movs	r4, #0
 800af76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800af7a:	9316      	str	r3, [sp, #88]	; 0x58
 800af7c:	46a0      	mov	r8, r4
 800af7e:	9b07      	ldr	r3, [sp, #28]
 800af80:	4648      	mov	r0, r9
 800af82:	6859      	ldr	r1, [r3, #4]
 800af84:	f001 ff21 	bl	800cdca <_Balloc>
 800af88:	9005      	str	r0, [sp, #20]
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f43f aef6 	beq.w	800ad7c <_strtod_l+0x43c>
 800af90:	9b07      	ldr	r3, [sp, #28]
 800af92:	691a      	ldr	r2, [r3, #16]
 800af94:	3202      	adds	r2, #2
 800af96:	f103 010c 	add.w	r1, r3, #12
 800af9a:	0092      	lsls	r2, r2, #2
 800af9c:	300c      	adds	r0, #12
 800af9e:	f001 ff09 	bl	800cdb4 <memcpy>
 800afa2:	aa1e      	add	r2, sp, #120	; 0x78
 800afa4:	a91d      	add	r1, sp, #116	; 0x74
 800afa6:	ec4b ab10 	vmov	d0, sl, fp
 800afaa:	4648      	mov	r0, r9
 800afac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800afb0:	f002 fa4c 	bl	800d44c <__d2b>
 800afb4:	901c      	str	r0, [sp, #112]	; 0x70
 800afb6:	2800      	cmp	r0, #0
 800afb8:	f43f aee0 	beq.w	800ad7c <_strtod_l+0x43c>
 800afbc:	2101      	movs	r1, #1
 800afbe:	4648      	mov	r0, r9
 800afc0:	f002 f815 	bl	800cfee <__i2b>
 800afc4:	4680      	mov	r8, r0
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f43f aed8 	beq.w	800ad7c <_strtod_l+0x43c>
 800afcc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800afce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800afd0:	2e00      	cmp	r6, #0
 800afd2:	bfab      	itete	ge
 800afd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800afd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800afd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800afda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800afdc:	bfac      	ite	ge
 800afde:	18f7      	addge	r7, r6, r3
 800afe0:	1b9d      	sublt	r5, r3, r6
 800afe2:	9b04      	ldr	r3, [sp, #16]
 800afe4:	1af6      	subs	r6, r6, r3
 800afe6:	4416      	add	r6, r2
 800afe8:	4b63      	ldr	r3, [pc, #396]	; (800b178 <_strtod_l+0x838>)
 800afea:	3e01      	subs	r6, #1
 800afec:	429e      	cmp	r6, r3
 800afee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aff2:	f280 80af 	bge.w	800b154 <_strtod_l+0x814>
 800aff6:	1b9b      	subs	r3, r3, r6
 800aff8:	2b1f      	cmp	r3, #31
 800affa:	eba2 0203 	sub.w	r2, r2, r3
 800affe:	f04f 0101 	mov.w	r1, #1
 800b002:	f300 809b 	bgt.w	800b13c <_strtod_l+0x7fc>
 800b006:	fa01 f303 	lsl.w	r3, r1, r3
 800b00a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b00c:	2300      	movs	r3, #0
 800b00e:	930a      	str	r3, [sp, #40]	; 0x28
 800b010:	18be      	adds	r6, r7, r2
 800b012:	9b04      	ldr	r3, [sp, #16]
 800b014:	42b7      	cmp	r7, r6
 800b016:	4415      	add	r5, r2
 800b018:	441d      	add	r5, r3
 800b01a:	463b      	mov	r3, r7
 800b01c:	bfa8      	it	ge
 800b01e:	4633      	movge	r3, r6
 800b020:	42ab      	cmp	r3, r5
 800b022:	bfa8      	it	ge
 800b024:	462b      	movge	r3, r5
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfc2      	ittt	gt
 800b02a:	1af6      	subgt	r6, r6, r3
 800b02c:	1aed      	subgt	r5, r5, r3
 800b02e:	1aff      	subgt	r7, r7, r3
 800b030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b032:	b1bb      	cbz	r3, 800b064 <_strtod_l+0x724>
 800b034:	4641      	mov	r1, r8
 800b036:	461a      	mov	r2, r3
 800b038:	4648      	mov	r0, r9
 800b03a:	f002 f877 	bl	800d12c <__pow5mult>
 800b03e:	4680      	mov	r8, r0
 800b040:	2800      	cmp	r0, #0
 800b042:	f43f ae9b 	beq.w	800ad7c <_strtod_l+0x43c>
 800b046:	4601      	mov	r1, r0
 800b048:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b04a:	4648      	mov	r0, r9
 800b04c:	f001 ffd8 	bl	800d000 <__multiply>
 800b050:	900c      	str	r0, [sp, #48]	; 0x30
 800b052:	2800      	cmp	r0, #0
 800b054:	f43f ae92 	beq.w	800ad7c <_strtod_l+0x43c>
 800b058:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b05a:	4648      	mov	r0, r9
 800b05c:	f001 fee9 	bl	800ce32 <_Bfree>
 800b060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b062:	931c      	str	r3, [sp, #112]	; 0x70
 800b064:	2e00      	cmp	r6, #0
 800b066:	dc7a      	bgt.n	800b15e <_strtod_l+0x81e>
 800b068:	9b06      	ldr	r3, [sp, #24]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	dd08      	ble.n	800b080 <_strtod_l+0x740>
 800b06e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b070:	9905      	ldr	r1, [sp, #20]
 800b072:	4648      	mov	r0, r9
 800b074:	f002 f85a 	bl	800d12c <__pow5mult>
 800b078:	9005      	str	r0, [sp, #20]
 800b07a:	2800      	cmp	r0, #0
 800b07c:	f43f ae7e 	beq.w	800ad7c <_strtod_l+0x43c>
 800b080:	2d00      	cmp	r5, #0
 800b082:	dd08      	ble.n	800b096 <_strtod_l+0x756>
 800b084:	462a      	mov	r2, r5
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	4648      	mov	r0, r9
 800b08a:	f002 f89d 	bl	800d1c8 <__lshift>
 800b08e:	9005      	str	r0, [sp, #20]
 800b090:	2800      	cmp	r0, #0
 800b092:	f43f ae73 	beq.w	800ad7c <_strtod_l+0x43c>
 800b096:	2f00      	cmp	r7, #0
 800b098:	dd08      	ble.n	800b0ac <_strtod_l+0x76c>
 800b09a:	4641      	mov	r1, r8
 800b09c:	463a      	mov	r2, r7
 800b09e:	4648      	mov	r0, r9
 800b0a0:	f002 f892 	bl	800d1c8 <__lshift>
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f43f ae68 	beq.w	800ad7c <_strtod_l+0x43c>
 800b0ac:	9a05      	ldr	r2, [sp, #20]
 800b0ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0b0:	4648      	mov	r0, r9
 800b0b2:	f002 f8f7 	bl	800d2a4 <__mdiff>
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	f43f ae5f 	beq.w	800ad7c <_strtod_l+0x43c>
 800b0be:	68c3      	ldr	r3, [r0, #12]
 800b0c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60c3      	str	r3, [r0, #12]
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	f002 f8d2 	bl	800d270 <__mcmp>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	da55      	bge.n	800b17c <_strtod_l+0x83c>
 800b0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d2:	b9e3      	cbnz	r3, 800b10e <_strtod_l+0x7ce>
 800b0d4:	f1ba 0f00 	cmp.w	sl, #0
 800b0d8:	d119      	bne.n	800b10e <_strtod_l+0x7ce>
 800b0da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0de:	b9b3      	cbnz	r3, 800b10e <_strtod_l+0x7ce>
 800b0e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0e4:	0d1b      	lsrs	r3, r3, #20
 800b0e6:	051b      	lsls	r3, r3, #20
 800b0e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b0ec:	d90f      	bls.n	800b10e <_strtod_l+0x7ce>
 800b0ee:	6963      	ldr	r3, [r4, #20]
 800b0f0:	b913      	cbnz	r3, 800b0f8 <_strtod_l+0x7b8>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	dd0a      	ble.n	800b10e <_strtod_l+0x7ce>
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	4648      	mov	r0, r9
 800b0fe:	f002 f863 	bl	800d1c8 <__lshift>
 800b102:	4641      	mov	r1, r8
 800b104:	4604      	mov	r4, r0
 800b106:	f002 f8b3 	bl	800d270 <__mcmp>
 800b10a:	2800      	cmp	r0, #0
 800b10c:	dc67      	bgt.n	800b1de <_strtod_l+0x89e>
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d171      	bne.n	800b1f8 <_strtod_l+0x8b8>
 800b114:	e63d      	b.n	800ad92 <_strtod_l+0x452>
 800b116:	f018 0f01 	tst.w	r8, #1
 800b11a:	d004      	beq.n	800b126 <_strtod_l+0x7e6>
 800b11c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b120:	f7f5 fa72 	bl	8000608 <__aeabi_dmul>
 800b124:	2301      	movs	r3, #1
 800b126:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b12a:	3508      	adds	r5, #8
 800b12c:	e6e5      	b.n	800aefa <_strtod_l+0x5ba>
 800b12e:	f04f 32ff 	mov.w	r2, #4294967295
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	ea03 0a0a 	and.w	sl, r3, sl
 800b13a:	e6ff      	b.n	800af3c <_strtod_l+0x5fc>
 800b13c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b140:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b144:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b148:	36e2      	adds	r6, #226	; 0xe2
 800b14a:	fa01 f306 	lsl.w	r3, r1, r6
 800b14e:	930a      	str	r3, [sp, #40]	; 0x28
 800b150:	910f      	str	r1, [sp, #60]	; 0x3c
 800b152:	e75d      	b.n	800b010 <_strtod_l+0x6d0>
 800b154:	2300      	movs	r3, #0
 800b156:	930a      	str	r3, [sp, #40]	; 0x28
 800b158:	2301      	movs	r3, #1
 800b15a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b15c:	e758      	b.n	800b010 <_strtod_l+0x6d0>
 800b15e:	4632      	mov	r2, r6
 800b160:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b162:	4648      	mov	r0, r9
 800b164:	f002 f830 	bl	800d1c8 <__lshift>
 800b168:	901c      	str	r0, [sp, #112]	; 0x70
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f47f af7c 	bne.w	800b068 <_strtod_l+0x728>
 800b170:	e604      	b.n	800ad7c <_strtod_l+0x43c>
 800b172:	bf00      	nop
 800b174:	0800e978 	.word	0x0800e978
 800b178:	fffffc02 	.word	0xfffffc02
 800b17c:	465d      	mov	r5, fp
 800b17e:	f040 8086 	bne.w	800b28e <_strtod_l+0x94e>
 800b182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b184:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b188:	b32a      	cbz	r2, 800b1d6 <_strtod_l+0x896>
 800b18a:	4aaf      	ldr	r2, [pc, #700]	; (800b448 <_strtod_l+0xb08>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d153      	bne.n	800b238 <_strtod_l+0x8f8>
 800b190:	9b04      	ldr	r3, [sp, #16]
 800b192:	4650      	mov	r0, sl
 800b194:	b1d3      	cbz	r3, 800b1cc <_strtod_l+0x88c>
 800b196:	4aad      	ldr	r2, [pc, #692]	; (800b44c <_strtod_l+0xb0c>)
 800b198:	402a      	ands	r2, r5
 800b19a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b19e:	f04f 31ff 	mov.w	r1, #4294967295
 800b1a2:	d816      	bhi.n	800b1d2 <_strtod_l+0x892>
 800b1a4:	0d12      	lsrs	r2, r2, #20
 800b1a6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ae:	4298      	cmp	r0, r3
 800b1b0:	d142      	bne.n	800b238 <_strtod_l+0x8f8>
 800b1b2:	4ba7      	ldr	r3, [pc, #668]	; (800b450 <_strtod_l+0xb10>)
 800b1b4:	429d      	cmp	r5, r3
 800b1b6:	d102      	bne.n	800b1be <_strtod_l+0x87e>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	f43f addf 	beq.w	800ad7c <_strtod_l+0x43c>
 800b1be:	4ba3      	ldr	r3, [pc, #652]	; (800b44c <_strtod_l+0xb0c>)
 800b1c0:	402b      	ands	r3, r5
 800b1c2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b1c6:	f04f 0a00 	mov.w	sl, #0
 800b1ca:	e7a0      	b.n	800b10e <_strtod_l+0x7ce>
 800b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d0:	e7ed      	b.n	800b1ae <_strtod_l+0x86e>
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	e7eb      	b.n	800b1ae <_strtod_l+0x86e>
 800b1d6:	bb7b      	cbnz	r3, 800b238 <_strtod_l+0x8f8>
 800b1d8:	f1ba 0f00 	cmp.w	sl, #0
 800b1dc:	d12c      	bne.n	800b238 <_strtod_l+0x8f8>
 800b1de:	9904      	ldr	r1, [sp, #16]
 800b1e0:	4a9a      	ldr	r2, [pc, #616]	; (800b44c <_strtod_l+0xb0c>)
 800b1e2:	465b      	mov	r3, fp
 800b1e4:	b1f1      	cbz	r1, 800b224 <_strtod_l+0x8e4>
 800b1e6:	ea02 010b 	and.w	r1, r2, fp
 800b1ea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b1ee:	dc19      	bgt.n	800b224 <_strtod_l+0x8e4>
 800b1f0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b1f4:	f77f ae5b 	ble.w	800aeae <_strtod_l+0x56e>
 800b1f8:	4a96      	ldr	r2, [pc, #600]	; (800b454 <_strtod_l+0xb14>)
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b200:	4650      	mov	r0, sl
 800b202:	4659      	mov	r1, fp
 800b204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b208:	f7f5 f9fe 	bl	8000608 <__aeabi_dmul>
 800b20c:	4682      	mov	sl, r0
 800b20e:	468b      	mov	fp, r1
 800b210:	2900      	cmp	r1, #0
 800b212:	f47f adbe 	bne.w	800ad92 <_strtod_l+0x452>
 800b216:	2800      	cmp	r0, #0
 800b218:	f47f adbb 	bne.w	800ad92 <_strtod_l+0x452>
 800b21c:	2322      	movs	r3, #34	; 0x22
 800b21e:	f8c9 3000 	str.w	r3, [r9]
 800b222:	e5b6      	b.n	800ad92 <_strtod_l+0x452>
 800b224:	4013      	ands	r3, r2
 800b226:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b22a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b22e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b232:	f04f 3aff 	mov.w	sl, #4294967295
 800b236:	e76a      	b.n	800b10e <_strtod_l+0x7ce>
 800b238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23a:	b193      	cbz	r3, 800b262 <_strtod_l+0x922>
 800b23c:	422b      	tst	r3, r5
 800b23e:	f43f af66 	beq.w	800b10e <_strtod_l+0x7ce>
 800b242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b244:	9a04      	ldr	r2, [sp, #16]
 800b246:	4650      	mov	r0, sl
 800b248:	4659      	mov	r1, fp
 800b24a:	b173      	cbz	r3, 800b26a <_strtod_l+0x92a>
 800b24c:	f7ff fb5b 	bl	800a906 <sulp>
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b258:	f7f5 f820 	bl	800029c <__adddf3>
 800b25c:	4682      	mov	sl, r0
 800b25e:	468b      	mov	fp, r1
 800b260:	e755      	b.n	800b10e <_strtod_l+0x7ce>
 800b262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b264:	ea13 0f0a 	tst.w	r3, sl
 800b268:	e7e9      	b.n	800b23e <_strtod_l+0x8fe>
 800b26a:	f7ff fb4c 	bl	800a906 <sulp>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b276:	f7f5 f80f 	bl	8000298 <__aeabi_dsub>
 800b27a:	2200      	movs	r2, #0
 800b27c:	2300      	movs	r3, #0
 800b27e:	4682      	mov	sl, r0
 800b280:	468b      	mov	fp, r1
 800b282:	f7f5 fc29 	bl	8000ad8 <__aeabi_dcmpeq>
 800b286:	2800      	cmp	r0, #0
 800b288:	f47f ae11 	bne.w	800aeae <_strtod_l+0x56e>
 800b28c:	e73f      	b.n	800b10e <_strtod_l+0x7ce>
 800b28e:	4641      	mov	r1, r8
 800b290:	4620      	mov	r0, r4
 800b292:	f002 f92a 	bl	800d4ea <__ratio>
 800b296:	ec57 6b10 	vmov	r6, r7, d0
 800b29a:	2200      	movs	r2, #0
 800b29c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2a0:	ee10 0a10 	vmov	r0, s0
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	f7f5 fc2b 	bl	8000b00 <__aeabi_dcmple>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d077      	beq.n	800b39e <_strtod_l+0xa5e>
 800b2ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d04a      	beq.n	800b34a <_strtod_l+0xa0a>
 800b2b4:	4b68      	ldr	r3, [pc, #416]	; (800b458 <_strtod_l+0xb18>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2bc:	4f66      	ldr	r7, [pc, #408]	; (800b458 <_strtod_l+0xb18>)
 800b2be:	2600      	movs	r6, #0
 800b2c0:	4b62      	ldr	r3, [pc, #392]	; (800b44c <_strtod_l+0xb0c>)
 800b2c2:	402b      	ands	r3, r5
 800b2c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2c8:	4b64      	ldr	r3, [pc, #400]	; (800b45c <_strtod_l+0xb1c>)
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	f040 80ce 	bne.w	800b46c <_strtod_l+0xb2c>
 800b2d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2d8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b2dc:	ec4b ab10 	vmov	d0, sl, fp
 800b2e0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b2e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2e8:	f002 f83a 	bl	800d360 <__ulp>
 800b2ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b2f0:	ec53 2b10 	vmov	r2, r3, d0
 800b2f4:	f7f5 f988 	bl	8000608 <__aeabi_dmul>
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	f7f4 ffce 	bl	800029c <__adddf3>
 800b300:	460b      	mov	r3, r1
 800b302:	4952      	ldr	r1, [pc, #328]	; (800b44c <_strtod_l+0xb0c>)
 800b304:	4a56      	ldr	r2, [pc, #344]	; (800b460 <_strtod_l+0xb20>)
 800b306:	4019      	ands	r1, r3
 800b308:	4291      	cmp	r1, r2
 800b30a:	4682      	mov	sl, r0
 800b30c:	d95b      	bls.n	800b3c6 <_strtod_l+0xa86>
 800b30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b310:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b314:	4293      	cmp	r3, r2
 800b316:	d103      	bne.n	800b320 <_strtod_l+0x9e0>
 800b318:	9b08      	ldr	r3, [sp, #32]
 800b31a:	3301      	adds	r3, #1
 800b31c:	f43f ad2e 	beq.w	800ad7c <_strtod_l+0x43c>
 800b320:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b450 <_strtod_l+0xb10>
 800b324:	f04f 3aff 	mov.w	sl, #4294967295
 800b328:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b32a:	4648      	mov	r0, r9
 800b32c:	f001 fd81 	bl	800ce32 <_Bfree>
 800b330:	9905      	ldr	r1, [sp, #20]
 800b332:	4648      	mov	r0, r9
 800b334:	f001 fd7d 	bl	800ce32 <_Bfree>
 800b338:	4641      	mov	r1, r8
 800b33a:	4648      	mov	r0, r9
 800b33c:	f001 fd79 	bl	800ce32 <_Bfree>
 800b340:	4621      	mov	r1, r4
 800b342:	4648      	mov	r0, r9
 800b344:	f001 fd75 	bl	800ce32 <_Bfree>
 800b348:	e619      	b.n	800af7e <_strtod_l+0x63e>
 800b34a:	f1ba 0f00 	cmp.w	sl, #0
 800b34e:	d11a      	bne.n	800b386 <_strtod_l+0xa46>
 800b350:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b354:	b9eb      	cbnz	r3, 800b392 <_strtod_l+0xa52>
 800b356:	2200      	movs	r2, #0
 800b358:	4b3f      	ldr	r3, [pc, #252]	; (800b458 <_strtod_l+0xb18>)
 800b35a:	4630      	mov	r0, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	f7f5 fbc5 	bl	8000aec <__aeabi_dcmplt>
 800b362:	b9c8      	cbnz	r0, 800b398 <_strtod_l+0xa58>
 800b364:	4630      	mov	r0, r6
 800b366:	4639      	mov	r1, r7
 800b368:	2200      	movs	r2, #0
 800b36a:	4b3e      	ldr	r3, [pc, #248]	; (800b464 <_strtod_l+0xb24>)
 800b36c:	f7f5 f94c 	bl	8000608 <__aeabi_dmul>
 800b370:	4606      	mov	r6, r0
 800b372:	460f      	mov	r7, r1
 800b374:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b378:	9618      	str	r6, [sp, #96]	; 0x60
 800b37a:	9319      	str	r3, [sp, #100]	; 0x64
 800b37c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b380:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b384:	e79c      	b.n	800b2c0 <_strtod_l+0x980>
 800b386:	f1ba 0f01 	cmp.w	sl, #1
 800b38a:	d102      	bne.n	800b392 <_strtod_l+0xa52>
 800b38c:	2d00      	cmp	r5, #0
 800b38e:	f43f ad8e 	beq.w	800aeae <_strtod_l+0x56e>
 800b392:	2200      	movs	r2, #0
 800b394:	4b34      	ldr	r3, [pc, #208]	; (800b468 <_strtod_l+0xb28>)
 800b396:	e78f      	b.n	800b2b8 <_strtod_l+0x978>
 800b398:	2600      	movs	r6, #0
 800b39a:	4f32      	ldr	r7, [pc, #200]	; (800b464 <_strtod_l+0xb24>)
 800b39c:	e7ea      	b.n	800b374 <_strtod_l+0xa34>
 800b39e:	4b31      	ldr	r3, [pc, #196]	; (800b464 <_strtod_l+0xb24>)
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f7f5 f92f 	bl	8000608 <__aeabi_dmul>
 800b3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	460f      	mov	r7, r1
 800b3b0:	b933      	cbnz	r3, 800b3c0 <_strtod_l+0xa80>
 800b3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3b6:	9010      	str	r0, [sp, #64]	; 0x40
 800b3b8:	9311      	str	r3, [sp, #68]	; 0x44
 800b3ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b3be:	e7df      	b.n	800b380 <_strtod_l+0xa40>
 800b3c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b3c4:	e7f9      	b.n	800b3ba <_strtod_l+0xa7a>
 800b3c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b3ca:	9b04      	ldr	r3, [sp, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1ab      	bne.n	800b328 <_strtod_l+0x9e8>
 800b3d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3d4:	0d1b      	lsrs	r3, r3, #20
 800b3d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b3d8:	051b      	lsls	r3, r3, #20
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	465d      	mov	r5, fp
 800b3de:	d1a3      	bne.n	800b328 <_strtod_l+0x9e8>
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7f5 fbc0 	bl	8000b68 <__aeabi_d2iz>
 800b3e8:	f7f5 f8a4 	bl	8000534 <__aeabi_i2d>
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7f4 ff50 	bl	8000298 <__aeabi_dsub>
 800b3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	b933      	cbnz	r3, 800b40e <_strtod_l+0xace>
 800b400:	f1ba 0f00 	cmp.w	sl, #0
 800b404:	d103      	bne.n	800b40e <_strtod_l+0xace>
 800b406:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b40a:	2d00      	cmp	r5, #0
 800b40c:	d06d      	beq.n	800b4ea <_strtod_l+0xbaa>
 800b40e:	a30a      	add	r3, pc, #40	; (adr r3, 800b438 <_strtod_l+0xaf8>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	4630      	mov	r0, r6
 800b416:	4639      	mov	r1, r7
 800b418:	f7f5 fb68 	bl	8000aec <__aeabi_dcmplt>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f47f acb8 	bne.w	800ad92 <_strtod_l+0x452>
 800b422:	a307      	add	r3, pc, #28	; (adr r3, 800b440 <_strtod_l+0xb00>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	4630      	mov	r0, r6
 800b42a:	4639      	mov	r1, r7
 800b42c:	f7f5 fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 800b430:	2800      	cmp	r0, #0
 800b432:	f43f af79 	beq.w	800b328 <_strtod_l+0x9e8>
 800b436:	e4ac      	b.n	800ad92 <_strtod_l+0x452>
 800b438:	94a03595 	.word	0x94a03595
 800b43c:	3fdfffff 	.word	0x3fdfffff
 800b440:	35afe535 	.word	0x35afe535
 800b444:	3fe00000 	.word	0x3fe00000
 800b448:	000fffff 	.word	0x000fffff
 800b44c:	7ff00000 	.word	0x7ff00000
 800b450:	7fefffff 	.word	0x7fefffff
 800b454:	39500000 	.word	0x39500000
 800b458:	3ff00000 	.word	0x3ff00000
 800b45c:	7fe00000 	.word	0x7fe00000
 800b460:	7c9fffff 	.word	0x7c9fffff
 800b464:	3fe00000 	.word	0x3fe00000
 800b468:	bff00000 	.word	0xbff00000
 800b46c:	9b04      	ldr	r3, [sp, #16]
 800b46e:	b333      	cbz	r3, 800b4be <_strtod_l+0xb7e>
 800b470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b472:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b476:	d822      	bhi.n	800b4be <_strtod_l+0xb7e>
 800b478:	a327      	add	r3, pc, #156	; (adr r3, 800b518 <_strtod_l+0xbd8>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	4630      	mov	r0, r6
 800b480:	4639      	mov	r1, r7
 800b482:	f7f5 fb3d 	bl	8000b00 <__aeabi_dcmple>
 800b486:	b1a0      	cbz	r0, 800b4b2 <_strtod_l+0xb72>
 800b488:	4639      	mov	r1, r7
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7f5 fb94 	bl	8000bb8 <__aeabi_d2uiz>
 800b490:	2800      	cmp	r0, #0
 800b492:	bf08      	it	eq
 800b494:	2001      	moveq	r0, #1
 800b496:	f7f5 f83d 	bl	8000514 <__aeabi_ui2d>
 800b49a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b49c:	4606      	mov	r6, r0
 800b49e:	460f      	mov	r7, r1
 800b4a0:	bb03      	cbnz	r3, 800b4e4 <_strtod_l+0xba4>
 800b4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4a6:	9012      	str	r0, [sp, #72]	; 0x48
 800b4a8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b4aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b4ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4be:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b4c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b4c6:	f001 ff4b 	bl	800d360 <__ulp>
 800b4ca:	4650      	mov	r0, sl
 800b4cc:	ec53 2b10 	vmov	r2, r3, d0
 800b4d0:	4659      	mov	r1, fp
 800b4d2:	f7f5 f899 	bl	8000608 <__aeabi_dmul>
 800b4d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4da:	f7f4 fedf 	bl	800029c <__adddf3>
 800b4de:	4682      	mov	sl, r0
 800b4e0:	468b      	mov	fp, r1
 800b4e2:	e772      	b.n	800b3ca <_strtod_l+0xa8a>
 800b4e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b4e8:	e7df      	b.n	800b4aa <_strtod_l+0xb6a>
 800b4ea:	a30d      	add	r3, pc, #52	; (adr r3, 800b520 <_strtod_l+0xbe0>)
 800b4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f0:	f7f5 fafc 	bl	8000aec <__aeabi_dcmplt>
 800b4f4:	e79c      	b.n	800b430 <_strtod_l+0xaf0>
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	930d      	str	r3, [sp, #52]	; 0x34
 800b4fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b4fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	f7ff ba61 	b.w	800a9c6 <_strtod_l+0x86>
 800b504:	2b65      	cmp	r3, #101	; 0x65
 800b506:	f04f 0200 	mov.w	r2, #0
 800b50a:	f43f ab4e 	beq.w	800abaa <_strtod_l+0x26a>
 800b50e:	2101      	movs	r1, #1
 800b510:	4614      	mov	r4, r2
 800b512:	9104      	str	r1, [sp, #16]
 800b514:	f7ff bacb 	b.w	800aaae <_strtod_l+0x16e>
 800b518:	ffc00000 	.word	0xffc00000
 800b51c:	41dfffff 	.word	0x41dfffff
 800b520:	94a03595 	.word	0x94a03595
 800b524:	3fcfffff 	.word	0x3fcfffff

0800b528 <strtod>:
 800b528:	4b07      	ldr	r3, [pc, #28]	; (800b548 <strtod+0x20>)
 800b52a:	4a08      	ldr	r2, [pc, #32]	; (800b54c <strtod+0x24>)
 800b52c:	b410      	push	{r4}
 800b52e:	681c      	ldr	r4, [r3, #0]
 800b530:	6a23      	ldr	r3, [r4, #32]
 800b532:	2b00      	cmp	r3, #0
 800b534:	bf08      	it	eq
 800b536:	4613      	moveq	r3, r2
 800b538:	460a      	mov	r2, r1
 800b53a:	4601      	mov	r1, r0
 800b53c:	4620      	mov	r0, r4
 800b53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b542:	f7ff b9fd 	b.w	800a940 <_strtod_l>
 800b546:	bf00      	nop
 800b548:	20000010 	.word	0x20000010
 800b54c:	20000074 	.word	0x20000074

0800b550 <__swbuf_r>:
 800b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b552:	460e      	mov	r6, r1
 800b554:	4614      	mov	r4, r2
 800b556:	4605      	mov	r5, r0
 800b558:	b118      	cbz	r0, 800b562 <__swbuf_r+0x12>
 800b55a:	6983      	ldr	r3, [r0, #24]
 800b55c:	b90b      	cbnz	r3, 800b562 <__swbuf_r+0x12>
 800b55e:	f000 ffeb 	bl	800c538 <__sinit>
 800b562:	4b21      	ldr	r3, [pc, #132]	; (800b5e8 <__swbuf_r+0x98>)
 800b564:	429c      	cmp	r4, r3
 800b566:	d12a      	bne.n	800b5be <__swbuf_r+0x6e>
 800b568:	686c      	ldr	r4, [r5, #4]
 800b56a:	69a3      	ldr	r3, [r4, #24]
 800b56c:	60a3      	str	r3, [r4, #8]
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	071a      	lsls	r2, r3, #28
 800b572:	d52e      	bpl.n	800b5d2 <__swbuf_r+0x82>
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	b363      	cbz	r3, 800b5d2 <__swbuf_r+0x82>
 800b578:	6923      	ldr	r3, [r4, #16]
 800b57a:	6820      	ldr	r0, [r4, #0]
 800b57c:	1ac0      	subs	r0, r0, r3
 800b57e:	6963      	ldr	r3, [r4, #20]
 800b580:	b2f6      	uxtb	r6, r6
 800b582:	4283      	cmp	r3, r0
 800b584:	4637      	mov	r7, r6
 800b586:	dc04      	bgt.n	800b592 <__swbuf_r+0x42>
 800b588:	4621      	mov	r1, r4
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 ff6a 	bl	800c464 <_fflush_r>
 800b590:	bb28      	cbnz	r0, 800b5de <__swbuf_r+0x8e>
 800b592:	68a3      	ldr	r3, [r4, #8]
 800b594:	3b01      	subs	r3, #1
 800b596:	60a3      	str	r3, [r4, #8]
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	1c5a      	adds	r2, r3, #1
 800b59c:	6022      	str	r2, [r4, #0]
 800b59e:	701e      	strb	r6, [r3, #0]
 800b5a0:	6963      	ldr	r3, [r4, #20]
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	4283      	cmp	r3, r0
 800b5a6:	d004      	beq.n	800b5b2 <__swbuf_r+0x62>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	07db      	lsls	r3, r3, #31
 800b5ac:	d519      	bpl.n	800b5e2 <__swbuf_r+0x92>
 800b5ae:	2e0a      	cmp	r6, #10
 800b5b0:	d117      	bne.n	800b5e2 <__swbuf_r+0x92>
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f000 ff55 	bl	800c464 <_fflush_r>
 800b5ba:	b190      	cbz	r0, 800b5e2 <__swbuf_r+0x92>
 800b5bc:	e00f      	b.n	800b5de <__swbuf_r+0x8e>
 800b5be:	4b0b      	ldr	r3, [pc, #44]	; (800b5ec <__swbuf_r+0x9c>)
 800b5c0:	429c      	cmp	r4, r3
 800b5c2:	d101      	bne.n	800b5c8 <__swbuf_r+0x78>
 800b5c4:	68ac      	ldr	r4, [r5, #8]
 800b5c6:	e7d0      	b.n	800b56a <__swbuf_r+0x1a>
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <__swbuf_r+0xa0>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	bf08      	it	eq
 800b5ce:	68ec      	ldreq	r4, [r5, #12]
 800b5d0:	e7cb      	b.n	800b56a <__swbuf_r+0x1a>
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	f000 f80d 	bl	800b5f4 <__swsetup_r>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d0cc      	beq.n	800b578 <__swbuf_r+0x28>
 800b5de:	f04f 37ff 	mov.w	r7, #4294967295
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	0800e9d0 	.word	0x0800e9d0
 800b5ec:	0800e9f0 	.word	0x0800e9f0
 800b5f0:	0800e9b0 	.word	0x0800e9b0

0800b5f4 <__swsetup_r>:
 800b5f4:	4b32      	ldr	r3, [pc, #200]	; (800b6c0 <__swsetup_r+0xcc>)
 800b5f6:	b570      	push	{r4, r5, r6, lr}
 800b5f8:	681d      	ldr	r5, [r3, #0]
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	b125      	cbz	r5, 800b60a <__swsetup_r+0x16>
 800b600:	69ab      	ldr	r3, [r5, #24]
 800b602:	b913      	cbnz	r3, 800b60a <__swsetup_r+0x16>
 800b604:	4628      	mov	r0, r5
 800b606:	f000 ff97 	bl	800c538 <__sinit>
 800b60a:	4b2e      	ldr	r3, [pc, #184]	; (800b6c4 <__swsetup_r+0xd0>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	d10f      	bne.n	800b630 <__swsetup_r+0x3c>
 800b610:	686c      	ldr	r4, [r5, #4]
 800b612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b616:	b29a      	uxth	r2, r3
 800b618:	0715      	lsls	r5, r2, #28
 800b61a:	d42c      	bmi.n	800b676 <__swsetup_r+0x82>
 800b61c:	06d0      	lsls	r0, r2, #27
 800b61e:	d411      	bmi.n	800b644 <__swsetup_r+0x50>
 800b620:	2209      	movs	r2, #9
 800b622:	6032      	str	r2, [r6, #0]
 800b624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b628:	81a3      	strh	r3, [r4, #12]
 800b62a:	f04f 30ff 	mov.w	r0, #4294967295
 800b62e:	e03e      	b.n	800b6ae <__swsetup_r+0xba>
 800b630:	4b25      	ldr	r3, [pc, #148]	; (800b6c8 <__swsetup_r+0xd4>)
 800b632:	429c      	cmp	r4, r3
 800b634:	d101      	bne.n	800b63a <__swsetup_r+0x46>
 800b636:	68ac      	ldr	r4, [r5, #8]
 800b638:	e7eb      	b.n	800b612 <__swsetup_r+0x1e>
 800b63a:	4b24      	ldr	r3, [pc, #144]	; (800b6cc <__swsetup_r+0xd8>)
 800b63c:	429c      	cmp	r4, r3
 800b63e:	bf08      	it	eq
 800b640:	68ec      	ldreq	r4, [r5, #12]
 800b642:	e7e6      	b.n	800b612 <__swsetup_r+0x1e>
 800b644:	0751      	lsls	r1, r2, #29
 800b646:	d512      	bpl.n	800b66e <__swsetup_r+0x7a>
 800b648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b64a:	b141      	cbz	r1, 800b65e <__swsetup_r+0x6a>
 800b64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b650:	4299      	cmp	r1, r3
 800b652:	d002      	beq.n	800b65a <__swsetup_r+0x66>
 800b654:	4630      	mov	r0, r6
 800b656:	f001 ffc5 	bl	800d5e4 <_free_r>
 800b65a:	2300      	movs	r3, #0
 800b65c:	6363      	str	r3, [r4, #52]	; 0x34
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	2300      	movs	r3, #0
 800b668:	6063      	str	r3, [r4, #4]
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	6023      	str	r3, [r4, #0]
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	f043 0308 	orr.w	r3, r3, #8
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	b94b      	cbnz	r3, 800b68e <__swsetup_r+0x9a>
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b684:	d003      	beq.n	800b68e <__swsetup_r+0x9a>
 800b686:	4621      	mov	r1, r4
 800b688:	4630      	mov	r0, r6
 800b68a:	f001 fb39 	bl	800cd00 <__smakebuf_r>
 800b68e:	89a2      	ldrh	r2, [r4, #12]
 800b690:	f012 0301 	ands.w	r3, r2, #1
 800b694:	d00c      	beq.n	800b6b0 <__swsetup_r+0xbc>
 800b696:	2300      	movs	r3, #0
 800b698:	60a3      	str	r3, [r4, #8]
 800b69a:	6963      	ldr	r3, [r4, #20]
 800b69c:	425b      	negs	r3, r3
 800b69e:	61a3      	str	r3, [r4, #24]
 800b6a0:	6923      	ldr	r3, [r4, #16]
 800b6a2:	b953      	cbnz	r3, 800b6ba <__swsetup_r+0xc6>
 800b6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b6ac:	d1ba      	bne.n	800b624 <__swsetup_r+0x30>
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	0792      	lsls	r2, r2, #30
 800b6b2:	bf58      	it	pl
 800b6b4:	6963      	ldrpl	r3, [r4, #20]
 800b6b6:	60a3      	str	r3, [r4, #8]
 800b6b8:	e7f2      	b.n	800b6a0 <__swsetup_r+0xac>
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	e7f7      	b.n	800b6ae <__swsetup_r+0xba>
 800b6be:	bf00      	nop
 800b6c0:	20000010 	.word	0x20000010
 800b6c4:	0800e9d0 	.word	0x0800e9d0
 800b6c8:	0800e9f0 	.word	0x0800e9f0
 800b6cc:	0800e9b0 	.word	0x0800e9b0

0800b6d0 <quorem>:
 800b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	6903      	ldr	r3, [r0, #16]
 800b6d6:	690c      	ldr	r4, [r1, #16]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	4680      	mov	r8, r0
 800b6dc:	f2c0 8082 	blt.w	800b7e4 <quorem+0x114>
 800b6e0:	3c01      	subs	r4, #1
 800b6e2:	f101 0714 	add.w	r7, r1, #20
 800b6e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b6ea:	f100 0614 	add.w	r6, r0, #20
 800b6ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b6f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b6f6:	eb06 030c 	add.w	r3, r6, ip
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	eb07 090c 	add.w	r9, r7, ip
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	fbb0 f5f5 	udiv	r5, r0, r5
 800b706:	b395      	cbz	r5, 800b76e <quorem+0x9e>
 800b708:	f04f 0a00 	mov.w	sl, #0
 800b70c:	4638      	mov	r0, r7
 800b70e:	46b6      	mov	lr, r6
 800b710:	46d3      	mov	fp, sl
 800b712:	f850 2b04 	ldr.w	r2, [r0], #4
 800b716:	b293      	uxth	r3, r2
 800b718:	fb05 a303 	mla	r3, r5, r3, sl
 800b71c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b720:	b29b      	uxth	r3, r3
 800b722:	ebab 0303 	sub.w	r3, fp, r3
 800b726:	0c12      	lsrs	r2, r2, #16
 800b728:	f8de b000 	ldr.w	fp, [lr]
 800b72c:	fb05 a202 	mla	r2, r5, r2, sl
 800b730:	fa13 f38b 	uxtah	r3, r3, fp
 800b734:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b738:	fa1f fb82 	uxth.w	fp, r2
 800b73c:	f8de 2000 	ldr.w	r2, [lr]
 800b740:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b748:	b29b      	uxth	r3, r3
 800b74a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b74e:	4581      	cmp	r9, r0
 800b750:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b754:	f84e 3b04 	str.w	r3, [lr], #4
 800b758:	d2db      	bcs.n	800b712 <quorem+0x42>
 800b75a:	f856 300c 	ldr.w	r3, [r6, ip]
 800b75e:	b933      	cbnz	r3, 800b76e <quorem+0x9e>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	3b04      	subs	r3, #4
 800b764:	429e      	cmp	r6, r3
 800b766:	461a      	mov	r2, r3
 800b768:	d330      	bcc.n	800b7cc <quorem+0xfc>
 800b76a:	f8c8 4010 	str.w	r4, [r8, #16]
 800b76e:	4640      	mov	r0, r8
 800b770:	f001 fd7e 	bl	800d270 <__mcmp>
 800b774:	2800      	cmp	r0, #0
 800b776:	db25      	blt.n	800b7c4 <quorem+0xf4>
 800b778:	3501      	adds	r5, #1
 800b77a:	4630      	mov	r0, r6
 800b77c:	f04f 0c00 	mov.w	ip, #0
 800b780:	f857 2b04 	ldr.w	r2, [r7], #4
 800b784:	f8d0 e000 	ldr.w	lr, [r0]
 800b788:	b293      	uxth	r3, r2
 800b78a:	ebac 0303 	sub.w	r3, ip, r3
 800b78e:	0c12      	lsrs	r2, r2, #16
 800b790:	fa13 f38e 	uxtah	r3, r3, lr
 800b794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7a2:	45b9      	cmp	r9, r7
 800b7a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7a8:	f840 3b04 	str.w	r3, [r0], #4
 800b7ac:	d2e8      	bcs.n	800b780 <quorem+0xb0>
 800b7ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b7b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b7b6:	b92a      	cbnz	r2, 800b7c4 <quorem+0xf4>
 800b7b8:	3b04      	subs	r3, #4
 800b7ba:	429e      	cmp	r6, r3
 800b7bc:	461a      	mov	r2, r3
 800b7be:	d30b      	bcc.n	800b7d8 <quorem+0x108>
 800b7c0:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	b003      	add	sp, #12
 800b7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7cc:	6812      	ldr	r2, [r2, #0]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	2a00      	cmp	r2, #0
 800b7d2:	d1ca      	bne.n	800b76a <quorem+0x9a>
 800b7d4:	3c01      	subs	r4, #1
 800b7d6:	e7c5      	b.n	800b764 <quorem+0x94>
 800b7d8:	6812      	ldr	r2, [r2, #0]
 800b7da:	3b04      	subs	r3, #4
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	d1ef      	bne.n	800b7c0 <quorem+0xf0>
 800b7e0:	3c01      	subs	r4, #1
 800b7e2:	e7ea      	b.n	800b7ba <quorem+0xea>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e7ee      	b.n	800b7c6 <quorem+0xf6>

0800b7e8 <_dtoa_r>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	ec57 6b10 	vmov	r6, r7, d0
 800b7f0:	b097      	sub	sp, #92	; 0x5c
 800b7f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b7f4:	9106      	str	r1, [sp, #24]
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7fa:	9312      	str	r3, [sp, #72]	; 0x48
 800b7fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b800:	e9cd 6700 	strd	r6, r7, [sp]
 800b804:	b93d      	cbnz	r5, 800b816 <_dtoa_r+0x2e>
 800b806:	2010      	movs	r0, #16
 800b808:	f001 faba 	bl	800cd80 <malloc>
 800b80c:	6260      	str	r0, [r4, #36]	; 0x24
 800b80e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b812:	6005      	str	r5, [r0, #0]
 800b814:	60c5      	str	r5, [r0, #12]
 800b816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b818:	6819      	ldr	r1, [r3, #0]
 800b81a:	b151      	cbz	r1, 800b832 <_dtoa_r+0x4a>
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	604a      	str	r2, [r1, #4]
 800b820:	2301      	movs	r3, #1
 800b822:	4093      	lsls	r3, r2
 800b824:	608b      	str	r3, [r1, #8]
 800b826:	4620      	mov	r0, r4
 800b828:	f001 fb03 	bl	800ce32 <_Bfree>
 800b82c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
 800b832:	1e3b      	subs	r3, r7, #0
 800b834:	bfbb      	ittet	lt
 800b836:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b83a:	9301      	strlt	r3, [sp, #4]
 800b83c:	2300      	movge	r3, #0
 800b83e:	2201      	movlt	r2, #1
 800b840:	bfac      	ite	ge
 800b842:	f8c8 3000 	strge.w	r3, [r8]
 800b846:	f8c8 2000 	strlt.w	r2, [r8]
 800b84a:	4baf      	ldr	r3, [pc, #700]	; (800bb08 <_dtoa_r+0x320>)
 800b84c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b850:	ea33 0308 	bics.w	r3, r3, r8
 800b854:	d114      	bne.n	800b880 <_dtoa_r+0x98>
 800b856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b858:	f242 730f 	movw	r3, #9999	; 0x270f
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	9b00      	ldr	r3, [sp, #0]
 800b860:	b923      	cbnz	r3, 800b86c <_dtoa_r+0x84>
 800b862:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b866:	2800      	cmp	r0, #0
 800b868:	f000 8542 	beq.w	800c2f0 <_dtoa_r+0xb08>
 800b86c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b86e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bb1c <_dtoa_r+0x334>
 800b872:	2b00      	cmp	r3, #0
 800b874:	f000 8544 	beq.w	800c300 <_dtoa_r+0xb18>
 800b878:	f10b 0303 	add.w	r3, fp, #3
 800b87c:	f000 bd3e 	b.w	800c2fc <_dtoa_r+0xb14>
 800b880:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b884:	2200      	movs	r2, #0
 800b886:	2300      	movs	r3, #0
 800b888:	4630      	mov	r0, r6
 800b88a:	4639      	mov	r1, r7
 800b88c:	f7f5 f924 	bl	8000ad8 <__aeabi_dcmpeq>
 800b890:	4681      	mov	r9, r0
 800b892:	b168      	cbz	r0, 800b8b0 <_dtoa_r+0xc8>
 800b894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b896:	2301      	movs	r3, #1
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 8524 	beq.w	800c2ea <_dtoa_r+0xb02>
 800b8a2:	4b9a      	ldr	r3, [pc, #616]	; (800bb0c <_dtoa_r+0x324>)
 800b8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	f000 bd28 	b.w	800c300 <_dtoa_r+0xb18>
 800b8b0:	aa14      	add	r2, sp, #80	; 0x50
 800b8b2:	a915      	add	r1, sp, #84	; 0x54
 800b8b4:	ec47 6b10 	vmov	d0, r6, r7
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f001 fdc7 	bl	800d44c <__d2b>
 800b8be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8c2:	9004      	str	r0, [sp, #16]
 800b8c4:	2d00      	cmp	r5, #0
 800b8c6:	d07c      	beq.n	800b9c2 <_dtoa_r+0x1da>
 800b8c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b8d0:	46b2      	mov	sl, r6
 800b8d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b8d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4b8b      	ldr	r3, [pc, #556]	; (800bb10 <_dtoa_r+0x328>)
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	4659      	mov	r1, fp
 800b8e6:	f7f4 fcd7 	bl	8000298 <__aeabi_dsub>
 800b8ea:	a381      	add	r3, pc, #516	; (adr r3, 800baf0 <_dtoa_r+0x308>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fe8a 	bl	8000608 <__aeabi_dmul>
 800b8f4:	a380      	add	r3, pc, #512	; (adr r3, 800baf8 <_dtoa_r+0x310>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fccf 	bl	800029c <__adddf3>
 800b8fe:	4606      	mov	r6, r0
 800b900:	4628      	mov	r0, r5
 800b902:	460f      	mov	r7, r1
 800b904:	f7f4 fe16 	bl	8000534 <__aeabi_i2d>
 800b908:	a37d      	add	r3, pc, #500	; (adr r3, 800bb00 <_dtoa_r+0x318>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	f7f4 fe7b 	bl	8000608 <__aeabi_dmul>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fcbf 	bl	800029c <__adddf3>
 800b91e:	4606      	mov	r6, r0
 800b920:	460f      	mov	r7, r1
 800b922:	f7f5 f921 	bl	8000b68 <__aeabi_d2iz>
 800b926:	2200      	movs	r2, #0
 800b928:	4682      	mov	sl, r0
 800b92a:	2300      	movs	r3, #0
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f5 f8dc 	bl	8000aec <__aeabi_dcmplt>
 800b934:	b148      	cbz	r0, 800b94a <_dtoa_r+0x162>
 800b936:	4650      	mov	r0, sl
 800b938:	f7f4 fdfc 	bl	8000534 <__aeabi_i2d>
 800b93c:	4632      	mov	r2, r6
 800b93e:	463b      	mov	r3, r7
 800b940:	f7f5 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 800b944:	b908      	cbnz	r0, 800b94a <_dtoa_r+0x162>
 800b946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b94a:	f1ba 0f16 	cmp.w	sl, #22
 800b94e:	d859      	bhi.n	800ba04 <_dtoa_r+0x21c>
 800b950:	4970      	ldr	r1, [pc, #448]	; (800bb14 <_dtoa_r+0x32c>)
 800b952:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b956:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b95a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b95e:	f7f5 f8e3 	bl	8000b28 <__aeabi_dcmpgt>
 800b962:	2800      	cmp	r0, #0
 800b964:	d050      	beq.n	800ba08 <_dtoa_r+0x220>
 800b966:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b96a:	2300      	movs	r3, #0
 800b96c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b96e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b970:	1b5d      	subs	r5, r3, r5
 800b972:	f1b5 0801 	subs.w	r8, r5, #1
 800b976:	bf49      	itett	mi
 800b978:	f1c5 0301 	rsbmi	r3, r5, #1
 800b97c:	2300      	movpl	r3, #0
 800b97e:	9305      	strmi	r3, [sp, #20]
 800b980:	f04f 0800 	movmi.w	r8, #0
 800b984:	bf58      	it	pl
 800b986:	9305      	strpl	r3, [sp, #20]
 800b988:	f1ba 0f00 	cmp.w	sl, #0
 800b98c:	db3e      	blt.n	800ba0c <_dtoa_r+0x224>
 800b98e:	2300      	movs	r3, #0
 800b990:	44d0      	add	r8, sl
 800b992:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b996:	9307      	str	r3, [sp, #28]
 800b998:	9b06      	ldr	r3, [sp, #24]
 800b99a:	2b09      	cmp	r3, #9
 800b99c:	f200 8090 	bhi.w	800bac0 <_dtoa_r+0x2d8>
 800b9a0:	2b05      	cmp	r3, #5
 800b9a2:	bfc4      	itt	gt
 800b9a4:	3b04      	subgt	r3, #4
 800b9a6:	9306      	strgt	r3, [sp, #24]
 800b9a8:	9b06      	ldr	r3, [sp, #24]
 800b9aa:	f1a3 0302 	sub.w	r3, r3, #2
 800b9ae:	bfcc      	ite	gt
 800b9b0:	2500      	movgt	r5, #0
 800b9b2:	2501      	movle	r5, #1
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	f200 808f 	bhi.w	800bad8 <_dtoa_r+0x2f0>
 800b9ba:	e8df f003 	tbb	[pc, r3]
 800b9be:	7f7d      	.short	0x7f7d
 800b9c0:	7131      	.short	0x7131
 800b9c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b9c6:	441d      	add	r5, r3
 800b9c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b9cc:	2820      	cmp	r0, #32
 800b9ce:	dd13      	ble.n	800b9f8 <_dtoa_r+0x210>
 800b9d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b9d4:	9b00      	ldr	r3, [sp, #0]
 800b9d6:	fa08 f800 	lsl.w	r8, r8, r0
 800b9da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b9de:	fa23 f000 	lsr.w	r0, r3, r0
 800b9e2:	ea48 0000 	orr.w	r0, r8, r0
 800b9e6:	f7f4 fd95 	bl	8000514 <__aeabi_ui2d>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b9f2:	3d01      	subs	r5, #1
 800b9f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800b9f6:	e772      	b.n	800b8de <_dtoa_r+0xf6>
 800b9f8:	9b00      	ldr	r3, [sp, #0]
 800b9fa:	f1c0 0020 	rsb	r0, r0, #32
 800b9fe:	fa03 f000 	lsl.w	r0, r3, r0
 800ba02:	e7f0      	b.n	800b9e6 <_dtoa_r+0x1fe>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e7b1      	b.n	800b96c <_dtoa_r+0x184>
 800ba08:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba0a:	e7b0      	b.n	800b96e <_dtoa_r+0x186>
 800ba0c:	9b05      	ldr	r3, [sp, #20]
 800ba0e:	eba3 030a 	sub.w	r3, r3, sl
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	f1ca 0300 	rsb	r3, sl, #0
 800ba18:	9307      	str	r3, [sp, #28]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba1e:	e7bb      	b.n	800b998 <_dtoa_r+0x1b0>
 800ba20:	2301      	movs	r3, #1
 800ba22:	930a      	str	r3, [sp, #40]	; 0x28
 800ba24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd59      	ble.n	800bade <_dtoa_r+0x2f6>
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	4699      	mov	r9, r3
 800ba2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba30:	2200      	movs	r2, #0
 800ba32:	6072      	str	r2, [r6, #4]
 800ba34:	2204      	movs	r2, #4
 800ba36:	f102 0014 	add.w	r0, r2, #20
 800ba3a:	4298      	cmp	r0, r3
 800ba3c:	6871      	ldr	r1, [r6, #4]
 800ba3e:	d953      	bls.n	800bae8 <_dtoa_r+0x300>
 800ba40:	4620      	mov	r0, r4
 800ba42:	f001 f9c2 	bl	800cdca <_Balloc>
 800ba46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba48:	6030      	str	r0, [r6, #0]
 800ba4a:	f1b9 0f0e 	cmp.w	r9, #14
 800ba4e:	f8d3 b000 	ldr.w	fp, [r3]
 800ba52:	f200 80e6 	bhi.w	800bc22 <_dtoa_r+0x43a>
 800ba56:	2d00      	cmp	r5, #0
 800ba58:	f000 80e3 	beq.w	800bc22 <_dtoa_r+0x43a>
 800ba5c:	ed9d 7b00 	vldr	d7, [sp]
 800ba60:	f1ba 0f00 	cmp.w	sl, #0
 800ba64:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ba68:	dd74      	ble.n	800bb54 <_dtoa_r+0x36c>
 800ba6a:	4a2a      	ldr	r2, [pc, #168]	; (800bb14 <_dtoa_r+0x32c>)
 800ba6c:	f00a 030f 	and.w	r3, sl, #15
 800ba70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba74:	ed93 7b00 	vldr	d7, [r3]
 800ba78:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ba7c:	06f0      	lsls	r0, r6, #27
 800ba7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ba82:	d565      	bpl.n	800bb50 <_dtoa_r+0x368>
 800ba84:	4b24      	ldr	r3, [pc, #144]	; (800bb18 <_dtoa_r+0x330>)
 800ba86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba8a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba8e:	f7f4 fee5 	bl	800085c <__aeabi_ddiv>
 800ba92:	e9cd 0100 	strd	r0, r1, [sp]
 800ba96:	f006 060f 	and.w	r6, r6, #15
 800ba9a:	2503      	movs	r5, #3
 800ba9c:	4f1e      	ldr	r7, [pc, #120]	; (800bb18 <_dtoa_r+0x330>)
 800ba9e:	e04c      	b.n	800bb3a <_dtoa_r+0x352>
 800baa0:	2301      	movs	r3, #1
 800baa2:	930a      	str	r3, [sp, #40]	; 0x28
 800baa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa6:	4453      	add	r3, sl
 800baa8:	f103 0901 	add.w	r9, r3, #1
 800baac:	9302      	str	r3, [sp, #8]
 800baae:	464b      	mov	r3, r9
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	bfb8      	it	lt
 800bab4:	2301      	movlt	r3, #1
 800bab6:	e7ba      	b.n	800ba2e <_dtoa_r+0x246>
 800bab8:	2300      	movs	r3, #0
 800baba:	e7b2      	b.n	800ba22 <_dtoa_r+0x23a>
 800babc:	2300      	movs	r3, #0
 800babe:	e7f0      	b.n	800baa2 <_dtoa_r+0x2ba>
 800bac0:	2501      	movs	r5, #1
 800bac2:	2300      	movs	r3, #0
 800bac4:	9306      	str	r3, [sp, #24]
 800bac6:	950a      	str	r5, [sp, #40]	; 0x28
 800bac8:	f04f 33ff 	mov.w	r3, #4294967295
 800bacc:	9302      	str	r3, [sp, #8]
 800bace:	4699      	mov	r9, r3
 800bad0:	2200      	movs	r2, #0
 800bad2:	2312      	movs	r3, #18
 800bad4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bad6:	e7aa      	b.n	800ba2e <_dtoa_r+0x246>
 800bad8:	2301      	movs	r3, #1
 800bada:	930a      	str	r3, [sp, #40]	; 0x28
 800badc:	e7f4      	b.n	800bac8 <_dtoa_r+0x2e0>
 800bade:	2301      	movs	r3, #1
 800bae0:	9302      	str	r3, [sp, #8]
 800bae2:	4699      	mov	r9, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	e7f5      	b.n	800bad4 <_dtoa_r+0x2ec>
 800bae8:	3101      	adds	r1, #1
 800baea:	6071      	str	r1, [r6, #4]
 800baec:	0052      	lsls	r2, r2, #1
 800baee:	e7a2      	b.n	800ba36 <_dtoa_r+0x24e>
 800baf0:	636f4361 	.word	0x636f4361
 800baf4:	3fd287a7 	.word	0x3fd287a7
 800baf8:	8b60c8b3 	.word	0x8b60c8b3
 800bafc:	3fc68a28 	.word	0x3fc68a28
 800bb00:	509f79fb 	.word	0x509f79fb
 800bb04:	3fd34413 	.word	0x3fd34413
 800bb08:	7ff00000 	.word	0x7ff00000
 800bb0c:	0800e929 	.word	0x0800e929
 800bb10:	3ff80000 	.word	0x3ff80000
 800bb14:	0800ea48 	.word	0x0800ea48
 800bb18:	0800ea20 	.word	0x0800ea20
 800bb1c:	0800e9a9 	.word	0x0800e9a9
 800bb20:	07f1      	lsls	r1, r6, #31
 800bb22:	d508      	bpl.n	800bb36 <_dtoa_r+0x34e>
 800bb24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb2c:	f7f4 fd6c 	bl	8000608 <__aeabi_dmul>
 800bb30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb34:	3501      	adds	r5, #1
 800bb36:	1076      	asrs	r6, r6, #1
 800bb38:	3708      	adds	r7, #8
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	d1f0      	bne.n	800bb20 <_dtoa_r+0x338>
 800bb3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb46:	f7f4 fe89 	bl	800085c <__aeabi_ddiv>
 800bb4a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb4e:	e01a      	b.n	800bb86 <_dtoa_r+0x39e>
 800bb50:	2502      	movs	r5, #2
 800bb52:	e7a3      	b.n	800ba9c <_dtoa_r+0x2b4>
 800bb54:	f000 80a0 	beq.w	800bc98 <_dtoa_r+0x4b0>
 800bb58:	f1ca 0600 	rsb	r6, sl, #0
 800bb5c:	4b9f      	ldr	r3, [pc, #636]	; (800bddc <_dtoa_r+0x5f4>)
 800bb5e:	4fa0      	ldr	r7, [pc, #640]	; (800bde0 <_dtoa_r+0x5f8>)
 800bb60:	f006 020f 	and.w	r2, r6, #15
 800bb64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb70:	f7f4 fd4a 	bl	8000608 <__aeabi_dmul>
 800bb74:	e9cd 0100 	strd	r0, r1, [sp]
 800bb78:	1136      	asrs	r6, r6, #4
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2502      	movs	r5, #2
 800bb7e:	2e00      	cmp	r6, #0
 800bb80:	d17f      	bne.n	800bc82 <_dtoa_r+0x49a>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1e1      	bne.n	800bb4a <_dtoa_r+0x362>
 800bb86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 8087 	beq.w	800bc9c <_dtoa_r+0x4b4>
 800bb8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb92:	2200      	movs	r2, #0
 800bb94:	4b93      	ldr	r3, [pc, #588]	; (800bde4 <_dtoa_r+0x5fc>)
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	f7f4 ffa7 	bl	8000aec <__aeabi_dcmplt>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d07c      	beq.n	800bc9c <_dtoa_r+0x4b4>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	d079      	beq.n	800bc9c <_dtoa_r+0x4b4>
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd35      	ble.n	800bc1a <_dtoa_r+0x432>
 800bbae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bbb2:	9308      	str	r3, [sp, #32]
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	4b8b      	ldr	r3, [pc, #556]	; (800bde8 <_dtoa_r+0x600>)
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7f4 fd24 	bl	8000608 <__aeabi_dmul>
 800bbc0:	e9cd 0100 	strd	r0, r1, [sp]
 800bbc4:	9f02      	ldr	r7, [sp, #8]
 800bbc6:	3501      	adds	r5, #1
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f7f4 fcb3 	bl	8000534 <__aeabi_i2d>
 800bbce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd2:	f7f4 fd19 	bl	8000608 <__aeabi_dmul>
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	4b84      	ldr	r3, [pc, #528]	; (800bdec <_dtoa_r+0x604>)
 800bbda:	f7f4 fb5f 	bl	800029c <__adddf3>
 800bbde:	4605      	mov	r5, r0
 800bbe0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bbe4:	2f00      	cmp	r7, #0
 800bbe6:	d15d      	bne.n	800bca4 <_dtoa_r+0x4bc>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4b81      	ldr	r3, [pc, #516]	; (800bdf0 <_dtoa_r+0x608>)
 800bbec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf0:	f7f4 fb52 	bl	8000298 <__aeabi_dsub>
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	4633      	mov	r3, r6
 800bbf8:	e9cd 0100 	strd	r0, r1, [sp]
 800bbfc:	f7f4 ff94 	bl	8000b28 <__aeabi_dcmpgt>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	f040 8288 	bne.w	800c116 <_dtoa_r+0x92e>
 800bc06:	462a      	mov	r2, r5
 800bc08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc10:	f7f4 ff6c 	bl	8000aec <__aeabi_dcmplt>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f040 827c 	bne.w	800c112 <_dtoa_r+0x92a>
 800bc1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc1e:	e9cd 2300 	strd	r2, r3, [sp]
 800bc22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f2c0 8150 	blt.w	800beca <_dtoa_r+0x6e2>
 800bc2a:	f1ba 0f0e 	cmp.w	sl, #14
 800bc2e:	f300 814c 	bgt.w	800beca <_dtoa_r+0x6e2>
 800bc32:	4b6a      	ldr	r3, [pc, #424]	; (800bddc <_dtoa_r+0x5f4>)
 800bc34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc38:	ed93 7b00 	vldr	d7, [r3]
 800bc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc44:	f280 80d8 	bge.w	800bdf8 <_dtoa_r+0x610>
 800bc48:	f1b9 0f00 	cmp.w	r9, #0
 800bc4c:	f300 80d4 	bgt.w	800bdf8 <_dtoa_r+0x610>
 800bc50:	f040 825e 	bne.w	800c110 <_dtoa_r+0x928>
 800bc54:	2200      	movs	r2, #0
 800bc56:	4b66      	ldr	r3, [pc, #408]	; (800bdf0 <_dtoa_r+0x608>)
 800bc58:	ec51 0b17 	vmov	r0, r1, d7
 800bc5c:	f7f4 fcd4 	bl	8000608 <__aeabi_dmul>
 800bc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc64:	f7f4 ff56 	bl	8000b14 <__aeabi_dcmpge>
 800bc68:	464f      	mov	r7, r9
 800bc6a:	464e      	mov	r6, r9
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	f040 8234 	bne.w	800c0da <_dtoa_r+0x8f2>
 800bc72:	2331      	movs	r3, #49	; 0x31
 800bc74:	f10b 0501 	add.w	r5, fp, #1
 800bc78:	f88b 3000 	strb.w	r3, [fp]
 800bc7c:	f10a 0a01 	add.w	sl, sl, #1
 800bc80:	e22f      	b.n	800c0e2 <_dtoa_r+0x8fa>
 800bc82:	07f2      	lsls	r2, r6, #31
 800bc84:	d505      	bpl.n	800bc92 <_dtoa_r+0x4aa>
 800bc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc8a:	f7f4 fcbd 	bl	8000608 <__aeabi_dmul>
 800bc8e:	3501      	adds	r5, #1
 800bc90:	2301      	movs	r3, #1
 800bc92:	1076      	asrs	r6, r6, #1
 800bc94:	3708      	adds	r7, #8
 800bc96:	e772      	b.n	800bb7e <_dtoa_r+0x396>
 800bc98:	2502      	movs	r5, #2
 800bc9a:	e774      	b.n	800bb86 <_dtoa_r+0x39e>
 800bc9c:	f8cd a020 	str.w	sl, [sp, #32]
 800bca0:	464f      	mov	r7, r9
 800bca2:	e791      	b.n	800bbc8 <_dtoa_r+0x3e0>
 800bca4:	4b4d      	ldr	r3, [pc, #308]	; (800bddc <_dtoa_r+0x5f4>)
 800bca6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bcaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bcae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d047      	beq.n	800bd44 <_dtoa_r+0x55c>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	2000      	movs	r0, #0
 800bcba:	494e      	ldr	r1, [pc, #312]	; (800bdf4 <_dtoa_r+0x60c>)
 800bcbc:	f7f4 fdce 	bl	800085c <__aeabi_ddiv>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	4633      	mov	r3, r6
 800bcc4:	f7f4 fae8 	bl	8000298 <__aeabi_dsub>
 800bcc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bccc:	465d      	mov	r5, fp
 800bcce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcd2:	f7f4 ff49 	bl	8000b68 <__aeabi_d2iz>
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	f7f4 fc2c 	bl	8000534 <__aeabi_i2d>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bce4:	f7f4 fad8 	bl	8000298 <__aeabi_dsub>
 800bce8:	3630      	adds	r6, #48	; 0x30
 800bcea:	f805 6b01 	strb.w	r6, [r5], #1
 800bcee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bcf2:	e9cd 0100 	strd	r0, r1, [sp]
 800bcf6:	f7f4 fef9 	bl	8000aec <__aeabi_dcmplt>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d163      	bne.n	800bdc6 <_dtoa_r+0x5de>
 800bcfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd02:	2000      	movs	r0, #0
 800bd04:	4937      	ldr	r1, [pc, #220]	; (800bde4 <_dtoa_r+0x5fc>)
 800bd06:	f7f4 fac7 	bl	8000298 <__aeabi_dsub>
 800bd0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd0e:	f7f4 feed 	bl	8000aec <__aeabi_dcmplt>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f040 80b7 	bne.w	800be86 <_dtoa_r+0x69e>
 800bd18:	eba5 030b 	sub.w	r3, r5, fp
 800bd1c:	429f      	cmp	r7, r3
 800bd1e:	f77f af7c 	ble.w	800bc1a <_dtoa_r+0x432>
 800bd22:	2200      	movs	r2, #0
 800bd24:	4b30      	ldr	r3, [pc, #192]	; (800bde8 <_dtoa_r+0x600>)
 800bd26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd2a:	f7f4 fc6d 	bl	8000608 <__aeabi_dmul>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd34:	4b2c      	ldr	r3, [pc, #176]	; (800bde8 <_dtoa_r+0x600>)
 800bd36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd3a:	f7f4 fc65 	bl	8000608 <__aeabi_dmul>
 800bd3e:	e9cd 0100 	strd	r0, r1, [sp]
 800bd42:	e7c4      	b.n	800bcce <_dtoa_r+0x4e6>
 800bd44:	462a      	mov	r2, r5
 800bd46:	4633      	mov	r3, r6
 800bd48:	f7f4 fc5e 	bl	8000608 <__aeabi_dmul>
 800bd4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd50:	eb0b 0507 	add.w	r5, fp, r7
 800bd54:	465e      	mov	r6, fp
 800bd56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd5a:	f7f4 ff05 	bl	8000b68 <__aeabi_d2iz>
 800bd5e:	4607      	mov	r7, r0
 800bd60:	f7f4 fbe8 	bl	8000534 <__aeabi_i2d>
 800bd64:	3730      	adds	r7, #48	; 0x30
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd6e:	f7f4 fa93 	bl	8000298 <__aeabi_dsub>
 800bd72:	f806 7b01 	strb.w	r7, [r6], #1
 800bd76:	42ae      	cmp	r6, r5
 800bd78:	e9cd 0100 	strd	r0, r1, [sp]
 800bd7c:	f04f 0200 	mov.w	r2, #0
 800bd80:	d126      	bne.n	800bdd0 <_dtoa_r+0x5e8>
 800bd82:	4b1c      	ldr	r3, [pc, #112]	; (800bdf4 <_dtoa_r+0x60c>)
 800bd84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd88:	f7f4 fa88 	bl	800029c <__adddf3>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd94:	f7f4 fec8 	bl	8000b28 <__aeabi_dcmpgt>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d174      	bne.n	800be86 <_dtoa_r+0x69e>
 800bd9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bda0:	2000      	movs	r0, #0
 800bda2:	4914      	ldr	r1, [pc, #80]	; (800bdf4 <_dtoa_r+0x60c>)
 800bda4:	f7f4 fa78 	bl	8000298 <__aeabi_dsub>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdb0:	f7f4 fe9c 	bl	8000aec <__aeabi_dcmplt>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	f43f af30 	beq.w	800bc1a <_dtoa_r+0x432>
 800bdba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdbe:	2b30      	cmp	r3, #48	; 0x30
 800bdc0:	f105 32ff 	add.w	r2, r5, #4294967295
 800bdc4:	d002      	beq.n	800bdcc <_dtoa_r+0x5e4>
 800bdc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bdca:	e04a      	b.n	800be62 <_dtoa_r+0x67a>
 800bdcc:	4615      	mov	r5, r2
 800bdce:	e7f4      	b.n	800bdba <_dtoa_r+0x5d2>
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <_dtoa_r+0x600>)
 800bdd2:	f7f4 fc19 	bl	8000608 <__aeabi_dmul>
 800bdd6:	e9cd 0100 	strd	r0, r1, [sp]
 800bdda:	e7bc      	b.n	800bd56 <_dtoa_r+0x56e>
 800bddc:	0800ea48 	.word	0x0800ea48
 800bde0:	0800ea20 	.word	0x0800ea20
 800bde4:	3ff00000 	.word	0x3ff00000
 800bde8:	40240000 	.word	0x40240000
 800bdec:	401c0000 	.word	0x401c0000
 800bdf0:	40140000 	.word	0x40140000
 800bdf4:	3fe00000 	.word	0x3fe00000
 800bdf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bdfc:	465d      	mov	r5, fp
 800bdfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7f4 fd29 	bl	800085c <__aeabi_ddiv>
 800be0a:	f7f4 fead 	bl	8000b68 <__aeabi_d2iz>
 800be0e:	4680      	mov	r8, r0
 800be10:	f7f4 fb90 	bl	8000534 <__aeabi_i2d>
 800be14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be18:	f7f4 fbf6 	bl	8000608 <__aeabi_dmul>
 800be1c:	4602      	mov	r2, r0
 800be1e:	460b      	mov	r3, r1
 800be20:	4630      	mov	r0, r6
 800be22:	4639      	mov	r1, r7
 800be24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800be28:	f7f4 fa36 	bl	8000298 <__aeabi_dsub>
 800be2c:	f805 6b01 	strb.w	r6, [r5], #1
 800be30:	eba5 060b 	sub.w	r6, r5, fp
 800be34:	45b1      	cmp	r9, r6
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	d139      	bne.n	800beb0 <_dtoa_r+0x6c8>
 800be3c:	f7f4 fa2e 	bl	800029c <__adddf3>
 800be40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be44:	4606      	mov	r6, r0
 800be46:	460f      	mov	r7, r1
 800be48:	f7f4 fe6e 	bl	8000b28 <__aeabi_dcmpgt>
 800be4c:	b9c8      	cbnz	r0, 800be82 <_dtoa_r+0x69a>
 800be4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be52:	4630      	mov	r0, r6
 800be54:	4639      	mov	r1, r7
 800be56:	f7f4 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800be5a:	b110      	cbz	r0, 800be62 <_dtoa_r+0x67a>
 800be5c:	f018 0f01 	tst.w	r8, #1
 800be60:	d10f      	bne.n	800be82 <_dtoa_r+0x69a>
 800be62:	9904      	ldr	r1, [sp, #16]
 800be64:	4620      	mov	r0, r4
 800be66:	f000 ffe4 	bl	800ce32 <_Bfree>
 800be6a:	2300      	movs	r3, #0
 800be6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be6e:	702b      	strb	r3, [r5, #0]
 800be70:	f10a 0301 	add.w	r3, sl, #1
 800be74:	6013      	str	r3, [r2, #0]
 800be76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 8241 	beq.w	800c300 <_dtoa_r+0xb18>
 800be7e:	601d      	str	r5, [r3, #0]
 800be80:	e23e      	b.n	800c300 <_dtoa_r+0xb18>
 800be82:	f8cd a020 	str.w	sl, [sp, #32]
 800be86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be8a:	2a39      	cmp	r2, #57	; 0x39
 800be8c:	f105 33ff 	add.w	r3, r5, #4294967295
 800be90:	d108      	bne.n	800bea4 <_dtoa_r+0x6bc>
 800be92:	459b      	cmp	fp, r3
 800be94:	d10a      	bne.n	800beac <_dtoa_r+0x6c4>
 800be96:	9b08      	ldr	r3, [sp, #32]
 800be98:	3301      	adds	r3, #1
 800be9a:	9308      	str	r3, [sp, #32]
 800be9c:	2330      	movs	r3, #48	; 0x30
 800be9e:	f88b 3000 	strb.w	r3, [fp]
 800bea2:	465b      	mov	r3, fp
 800bea4:	781a      	ldrb	r2, [r3, #0]
 800bea6:	3201      	adds	r2, #1
 800bea8:	701a      	strb	r2, [r3, #0]
 800beaa:	e78c      	b.n	800bdc6 <_dtoa_r+0x5de>
 800beac:	461d      	mov	r5, r3
 800beae:	e7ea      	b.n	800be86 <_dtoa_r+0x69e>
 800beb0:	2200      	movs	r2, #0
 800beb2:	4b9b      	ldr	r3, [pc, #620]	; (800c120 <_dtoa_r+0x938>)
 800beb4:	f7f4 fba8 	bl	8000608 <__aeabi_dmul>
 800beb8:	2200      	movs	r2, #0
 800beba:	2300      	movs	r3, #0
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	f7f4 fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d09a      	beq.n	800bdfe <_dtoa_r+0x616>
 800bec8:	e7cb      	b.n	800be62 <_dtoa_r+0x67a>
 800beca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800becc:	2a00      	cmp	r2, #0
 800bece:	f000 808b 	beq.w	800bfe8 <_dtoa_r+0x800>
 800bed2:	9a06      	ldr	r2, [sp, #24]
 800bed4:	2a01      	cmp	r2, #1
 800bed6:	dc6e      	bgt.n	800bfb6 <_dtoa_r+0x7ce>
 800bed8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d067      	beq.n	800bfae <_dtoa_r+0x7c6>
 800bede:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bee2:	9f07      	ldr	r7, [sp, #28]
 800bee4:	9d05      	ldr	r5, [sp, #20]
 800bee6:	9a05      	ldr	r2, [sp, #20]
 800bee8:	2101      	movs	r1, #1
 800beea:	441a      	add	r2, r3
 800beec:	4620      	mov	r0, r4
 800beee:	9205      	str	r2, [sp, #20]
 800bef0:	4498      	add	r8, r3
 800bef2:	f001 f87c 	bl	800cfee <__i2b>
 800bef6:	4606      	mov	r6, r0
 800bef8:	2d00      	cmp	r5, #0
 800befa:	dd0c      	ble.n	800bf16 <_dtoa_r+0x72e>
 800befc:	f1b8 0f00 	cmp.w	r8, #0
 800bf00:	dd09      	ble.n	800bf16 <_dtoa_r+0x72e>
 800bf02:	4545      	cmp	r5, r8
 800bf04:	9a05      	ldr	r2, [sp, #20]
 800bf06:	462b      	mov	r3, r5
 800bf08:	bfa8      	it	ge
 800bf0a:	4643      	movge	r3, r8
 800bf0c:	1ad2      	subs	r2, r2, r3
 800bf0e:	9205      	str	r2, [sp, #20]
 800bf10:	1aed      	subs	r5, r5, r3
 800bf12:	eba8 0803 	sub.w	r8, r8, r3
 800bf16:	9b07      	ldr	r3, [sp, #28]
 800bf18:	b1eb      	cbz	r3, 800bf56 <_dtoa_r+0x76e>
 800bf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d067      	beq.n	800bff0 <_dtoa_r+0x808>
 800bf20:	b18f      	cbz	r7, 800bf46 <_dtoa_r+0x75e>
 800bf22:	4631      	mov	r1, r6
 800bf24:	463a      	mov	r2, r7
 800bf26:	4620      	mov	r0, r4
 800bf28:	f001 f900 	bl	800d12c <__pow5mult>
 800bf2c:	9a04      	ldr	r2, [sp, #16]
 800bf2e:	4601      	mov	r1, r0
 800bf30:	4606      	mov	r6, r0
 800bf32:	4620      	mov	r0, r4
 800bf34:	f001 f864 	bl	800d000 <__multiply>
 800bf38:	9904      	ldr	r1, [sp, #16]
 800bf3a:	9008      	str	r0, [sp, #32]
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	f000 ff78 	bl	800ce32 <_Bfree>
 800bf42:	9b08      	ldr	r3, [sp, #32]
 800bf44:	9304      	str	r3, [sp, #16]
 800bf46:	9b07      	ldr	r3, [sp, #28]
 800bf48:	1bda      	subs	r2, r3, r7
 800bf4a:	d004      	beq.n	800bf56 <_dtoa_r+0x76e>
 800bf4c:	9904      	ldr	r1, [sp, #16]
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f001 f8ec 	bl	800d12c <__pow5mult>
 800bf54:	9004      	str	r0, [sp, #16]
 800bf56:	2101      	movs	r1, #1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f001 f848 	bl	800cfee <__i2b>
 800bf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf60:	4607      	mov	r7, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 81d0 	beq.w	800c308 <_dtoa_r+0xb20>
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f001 f8dd 	bl	800d12c <__pow5mult>
 800bf72:	9b06      	ldr	r3, [sp, #24]
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	4607      	mov	r7, r0
 800bf78:	dc40      	bgt.n	800bffc <_dtoa_r+0x814>
 800bf7a:	9b00      	ldr	r3, [sp, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d139      	bne.n	800bff4 <_dtoa_r+0x80c>
 800bf80:	9b01      	ldr	r3, [sp, #4]
 800bf82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d136      	bne.n	800bff8 <_dtoa_r+0x810>
 800bf8a:	9b01      	ldr	r3, [sp, #4]
 800bf8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf90:	0d1b      	lsrs	r3, r3, #20
 800bf92:	051b      	lsls	r3, r3, #20
 800bf94:	b12b      	cbz	r3, 800bfa2 <_dtoa_r+0x7ba>
 800bf96:	9b05      	ldr	r3, [sp, #20]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	f108 0801 	add.w	r8, r8, #1
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	9307      	str	r3, [sp, #28]
 800bfa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d12a      	bne.n	800c000 <_dtoa_r+0x818>
 800bfaa:	2001      	movs	r0, #1
 800bfac:	e030      	b.n	800c010 <_dtoa_r+0x828>
 800bfae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfb4:	e795      	b.n	800bee2 <_dtoa_r+0x6fa>
 800bfb6:	9b07      	ldr	r3, [sp, #28]
 800bfb8:	f109 37ff 	add.w	r7, r9, #4294967295
 800bfbc:	42bb      	cmp	r3, r7
 800bfbe:	bfbf      	itttt	lt
 800bfc0:	9b07      	ldrlt	r3, [sp, #28]
 800bfc2:	9707      	strlt	r7, [sp, #28]
 800bfc4:	1afa      	sublt	r2, r7, r3
 800bfc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bfc8:	bfbb      	ittet	lt
 800bfca:	189b      	addlt	r3, r3, r2
 800bfcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bfce:	1bdf      	subge	r7, r3, r7
 800bfd0:	2700      	movlt	r7, #0
 800bfd2:	f1b9 0f00 	cmp.w	r9, #0
 800bfd6:	bfb5      	itete	lt
 800bfd8:	9b05      	ldrlt	r3, [sp, #20]
 800bfda:	9d05      	ldrge	r5, [sp, #20]
 800bfdc:	eba3 0509 	sublt.w	r5, r3, r9
 800bfe0:	464b      	movge	r3, r9
 800bfe2:	bfb8      	it	lt
 800bfe4:	2300      	movlt	r3, #0
 800bfe6:	e77e      	b.n	800bee6 <_dtoa_r+0x6fe>
 800bfe8:	9f07      	ldr	r7, [sp, #28]
 800bfea:	9d05      	ldr	r5, [sp, #20]
 800bfec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bfee:	e783      	b.n	800bef8 <_dtoa_r+0x710>
 800bff0:	9a07      	ldr	r2, [sp, #28]
 800bff2:	e7ab      	b.n	800bf4c <_dtoa_r+0x764>
 800bff4:	2300      	movs	r3, #0
 800bff6:	e7d4      	b.n	800bfa2 <_dtoa_r+0x7ba>
 800bff8:	9b00      	ldr	r3, [sp, #0]
 800bffa:	e7d2      	b.n	800bfa2 <_dtoa_r+0x7ba>
 800bffc:	2300      	movs	r3, #0
 800bffe:	9307      	str	r3, [sp, #28]
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c006:	6918      	ldr	r0, [r3, #16]
 800c008:	f000 ffa3 	bl	800cf52 <__hi0bits>
 800c00c:	f1c0 0020 	rsb	r0, r0, #32
 800c010:	4440      	add	r0, r8
 800c012:	f010 001f 	ands.w	r0, r0, #31
 800c016:	d047      	beq.n	800c0a8 <_dtoa_r+0x8c0>
 800c018:	f1c0 0320 	rsb	r3, r0, #32
 800c01c:	2b04      	cmp	r3, #4
 800c01e:	dd3b      	ble.n	800c098 <_dtoa_r+0x8b0>
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	f1c0 001c 	rsb	r0, r0, #28
 800c026:	4403      	add	r3, r0
 800c028:	9305      	str	r3, [sp, #20]
 800c02a:	4405      	add	r5, r0
 800c02c:	4480      	add	r8, r0
 800c02e:	9b05      	ldr	r3, [sp, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	dd05      	ble.n	800c040 <_dtoa_r+0x858>
 800c034:	461a      	mov	r2, r3
 800c036:	9904      	ldr	r1, [sp, #16]
 800c038:	4620      	mov	r0, r4
 800c03a:	f001 f8c5 	bl	800d1c8 <__lshift>
 800c03e:	9004      	str	r0, [sp, #16]
 800c040:	f1b8 0f00 	cmp.w	r8, #0
 800c044:	dd05      	ble.n	800c052 <_dtoa_r+0x86a>
 800c046:	4639      	mov	r1, r7
 800c048:	4642      	mov	r2, r8
 800c04a:	4620      	mov	r0, r4
 800c04c:	f001 f8bc 	bl	800d1c8 <__lshift>
 800c050:	4607      	mov	r7, r0
 800c052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c054:	b353      	cbz	r3, 800c0ac <_dtoa_r+0x8c4>
 800c056:	4639      	mov	r1, r7
 800c058:	9804      	ldr	r0, [sp, #16]
 800c05a:	f001 f909 	bl	800d270 <__mcmp>
 800c05e:	2800      	cmp	r0, #0
 800c060:	da24      	bge.n	800c0ac <_dtoa_r+0x8c4>
 800c062:	2300      	movs	r3, #0
 800c064:	220a      	movs	r2, #10
 800c066:	9904      	ldr	r1, [sp, #16]
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fef9 	bl	800ce60 <__multadd>
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	9004      	str	r0, [sp, #16]
 800c072:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 814d 	beq.w	800c316 <_dtoa_r+0xb2e>
 800c07c:	2300      	movs	r3, #0
 800c07e:	4631      	mov	r1, r6
 800c080:	220a      	movs	r2, #10
 800c082:	4620      	mov	r0, r4
 800c084:	f000 feec 	bl	800ce60 <__multadd>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	4606      	mov	r6, r0
 800c08e:	dc4f      	bgt.n	800c130 <_dtoa_r+0x948>
 800c090:	9b06      	ldr	r3, [sp, #24]
 800c092:	2b02      	cmp	r3, #2
 800c094:	dd4c      	ble.n	800c130 <_dtoa_r+0x948>
 800c096:	e011      	b.n	800c0bc <_dtoa_r+0x8d4>
 800c098:	d0c9      	beq.n	800c02e <_dtoa_r+0x846>
 800c09a:	9a05      	ldr	r2, [sp, #20]
 800c09c:	331c      	adds	r3, #28
 800c09e:	441a      	add	r2, r3
 800c0a0:	9205      	str	r2, [sp, #20]
 800c0a2:	441d      	add	r5, r3
 800c0a4:	4498      	add	r8, r3
 800c0a6:	e7c2      	b.n	800c02e <_dtoa_r+0x846>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	e7f6      	b.n	800c09a <_dtoa_r+0x8b2>
 800c0ac:	f1b9 0f00 	cmp.w	r9, #0
 800c0b0:	dc38      	bgt.n	800c124 <_dtoa_r+0x93c>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b02      	cmp	r3, #2
 800c0b6:	dd35      	ble.n	800c124 <_dtoa_r+0x93c>
 800c0b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c0bc:	9b02      	ldr	r3, [sp, #8]
 800c0be:	b963      	cbnz	r3, 800c0da <_dtoa_r+0x8f2>
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	2205      	movs	r2, #5
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 fecb 	bl	800ce60 <__multadd>
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	9804      	ldr	r0, [sp, #16]
 800c0d0:	f001 f8ce 	bl	800d270 <__mcmp>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f73f adcc 	bgt.w	800bc72 <_dtoa_r+0x48a>
 800c0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0dc:	465d      	mov	r5, fp
 800c0de:	ea6f 0a03 	mvn.w	sl, r3
 800c0e2:	f04f 0900 	mov.w	r9, #0
 800c0e6:	4639      	mov	r1, r7
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f000 fea2 	bl	800ce32 <_Bfree>
 800c0ee:	2e00      	cmp	r6, #0
 800c0f0:	f43f aeb7 	beq.w	800be62 <_dtoa_r+0x67a>
 800c0f4:	f1b9 0f00 	cmp.w	r9, #0
 800c0f8:	d005      	beq.n	800c106 <_dtoa_r+0x91e>
 800c0fa:	45b1      	cmp	r9, r6
 800c0fc:	d003      	beq.n	800c106 <_dtoa_r+0x91e>
 800c0fe:	4649      	mov	r1, r9
 800c100:	4620      	mov	r0, r4
 800c102:	f000 fe96 	bl	800ce32 <_Bfree>
 800c106:	4631      	mov	r1, r6
 800c108:	4620      	mov	r0, r4
 800c10a:	f000 fe92 	bl	800ce32 <_Bfree>
 800c10e:	e6a8      	b.n	800be62 <_dtoa_r+0x67a>
 800c110:	2700      	movs	r7, #0
 800c112:	463e      	mov	r6, r7
 800c114:	e7e1      	b.n	800c0da <_dtoa_r+0x8f2>
 800c116:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c11a:	463e      	mov	r6, r7
 800c11c:	e5a9      	b.n	800bc72 <_dtoa_r+0x48a>
 800c11e:	bf00      	nop
 800c120:	40240000 	.word	0x40240000
 800c124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c126:	f8cd 9008 	str.w	r9, [sp, #8]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f000 80fa 	beq.w	800c324 <_dtoa_r+0xb3c>
 800c130:	2d00      	cmp	r5, #0
 800c132:	dd05      	ble.n	800c140 <_dtoa_r+0x958>
 800c134:	4631      	mov	r1, r6
 800c136:	462a      	mov	r2, r5
 800c138:	4620      	mov	r0, r4
 800c13a:	f001 f845 	bl	800d1c8 <__lshift>
 800c13e:	4606      	mov	r6, r0
 800c140:	9b07      	ldr	r3, [sp, #28]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d04c      	beq.n	800c1e0 <_dtoa_r+0x9f8>
 800c146:	6871      	ldr	r1, [r6, #4]
 800c148:	4620      	mov	r0, r4
 800c14a:	f000 fe3e 	bl	800cdca <_Balloc>
 800c14e:	6932      	ldr	r2, [r6, #16]
 800c150:	3202      	adds	r2, #2
 800c152:	4605      	mov	r5, r0
 800c154:	0092      	lsls	r2, r2, #2
 800c156:	f106 010c 	add.w	r1, r6, #12
 800c15a:	300c      	adds	r0, #12
 800c15c:	f000 fe2a 	bl	800cdb4 <memcpy>
 800c160:	2201      	movs	r2, #1
 800c162:	4629      	mov	r1, r5
 800c164:	4620      	mov	r0, r4
 800c166:	f001 f82f 	bl	800d1c8 <__lshift>
 800c16a:	9b00      	ldr	r3, [sp, #0]
 800c16c:	f8cd b014 	str.w	fp, [sp, #20]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	46b1      	mov	r9, r6
 800c176:	9307      	str	r3, [sp, #28]
 800c178:	4606      	mov	r6, r0
 800c17a:	4639      	mov	r1, r7
 800c17c:	9804      	ldr	r0, [sp, #16]
 800c17e:	f7ff faa7 	bl	800b6d0 <quorem>
 800c182:	4649      	mov	r1, r9
 800c184:	4605      	mov	r5, r0
 800c186:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c18a:	9804      	ldr	r0, [sp, #16]
 800c18c:	f001 f870 	bl	800d270 <__mcmp>
 800c190:	4632      	mov	r2, r6
 800c192:	9000      	str	r0, [sp, #0]
 800c194:	4639      	mov	r1, r7
 800c196:	4620      	mov	r0, r4
 800c198:	f001 f884 	bl	800d2a4 <__mdiff>
 800c19c:	68c3      	ldr	r3, [r0, #12]
 800c19e:	4602      	mov	r2, r0
 800c1a0:	bb03      	cbnz	r3, 800c1e4 <_dtoa_r+0x9fc>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	9008      	str	r0, [sp, #32]
 800c1a6:	9804      	ldr	r0, [sp, #16]
 800c1a8:	f001 f862 	bl	800d270 <__mcmp>
 800c1ac:	9a08      	ldr	r2, [sp, #32]
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	9308      	str	r3, [sp, #32]
 800c1b6:	f000 fe3c 	bl	800ce32 <_Bfree>
 800c1ba:	9b08      	ldr	r3, [sp, #32]
 800c1bc:	b9a3      	cbnz	r3, 800c1e8 <_dtoa_r+0xa00>
 800c1be:	9a06      	ldr	r2, [sp, #24]
 800c1c0:	b992      	cbnz	r2, 800c1e8 <_dtoa_r+0xa00>
 800c1c2:	9a07      	ldr	r2, [sp, #28]
 800c1c4:	b982      	cbnz	r2, 800c1e8 <_dtoa_r+0xa00>
 800c1c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c1ca:	d029      	beq.n	800c220 <_dtoa_r+0xa38>
 800c1cc:	9b00      	ldr	r3, [sp, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dd01      	ble.n	800c1d6 <_dtoa_r+0x9ee>
 800c1d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c1d6:	9b05      	ldr	r3, [sp, #20]
 800c1d8:	1c5d      	adds	r5, r3, #1
 800c1da:	f883 8000 	strb.w	r8, [r3]
 800c1de:	e782      	b.n	800c0e6 <_dtoa_r+0x8fe>
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	e7c2      	b.n	800c16a <_dtoa_r+0x982>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e7e3      	b.n	800c1b0 <_dtoa_r+0x9c8>
 800c1e8:	9a00      	ldr	r2, [sp, #0]
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	db04      	blt.n	800c1f8 <_dtoa_r+0xa10>
 800c1ee:	d125      	bne.n	800c23c <_dtoa_r+0xa54>
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	bb1a      	cbnz	r2, 800c23c <_dtoa_r+0xa54>
 800c1f4:	9a07      	ldr	r2, [sp, #28]
 800c1f6:	bb0a      	cbnz	r2, 800c23c <_dtoa_r+0xa54>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	ddec      	ble.n	800c1d6 <_dtoa_r+0x9ee>
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	9904      	ldr	r1, [sp, #16]
 800c200:	4620      	mov	r0, r4
 800c202:	f000 ffe1 	bl	800d1c8 <__lshift>
 800c206:	4639      	mov	r1, r7
 800c208:	9004      	str	r0, [sp, #16]
 800c20a:	f001 f831 	bl	800d270 <__mcmp>
 800c20e:	2800      	cmp	r0, #0
 800c210:	dc03      	bgt.n	800c21a <_dtoa_r+0xa32>
 800c212:	d1e0      	bne.n	800c1d6 <_dtoa_r+0x9ee>
 800c214:	f018 0f01 	tst.w	r8, #1
 800c218:	d0dd      	beq.n	800c1d6 <_dtoa_r+0x9ee>
 800c21a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c21e:	d1d8      	bne.n	800c1d2 <_dtoa_r+0x9ea>
 800c220:	9b05      	ldr	r3, [sp, #20]
 800c222:	9a05      	ldr	r2, [sp, #20]
 800c224:	1c5d      	adds	r5, r3, #1
 800c226:	2339      	movs	r3, #57	; 0x39
 800c228:	7013      	strb	r3, [r2, #0]
 800c22a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c22e:	2b39      	cmp	r3, #57	; 0x39
 800c230:	f105 32ff 	add.w	r2, r5, #4294967295
 800c234:	d04f      	beq.n	800c2d6 <_dtoa_r+0xaee>
 800c236:	3301      	adds	r3, #1
 800c238:	7013      	strb	r3, [r2, #0]
 800c23a:	e754      	b.n	800c0e6 <_dtoa_r+0x8fe>
 800c23c:	9a05      	ldr	r2, [sp, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f102 0501 	add.w	r5, r2, #1
 800c244:	dd06      	ble.n	800c254 <_dtoa_r+0xa6c>
 800c246:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c24a:	d0e9      	beq.n	800c220 <_dtoa_r+0xa38>
 800c24c:	f108 0801 	add.w	r8, r8, #1
 800c250:	9b05      	ldr	r3, [sp, #20]
 800c252:	e7c2      	b.n	800c1da <_dtoa_r+0x9f2>
 800c254:	9a02      	ldr	r2, [sp, #8]
 800c256:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c25a:	eba5 030b 	sub.w	r3, r5, fp
 800c25e:	4293      	cmp	r3, r2
 800c260:	d021      	beq.n	800c2a6 <_dtoa_r+0xabe>
 800c262:	2300      	movs	r3, #0
 800c264:	220a      	movs	r2, #10
 800c266:	9904      	ldr	r1, [sp, #16]
 800c268:	4620      	mov	r0, r4
 800c26a:	f000 fdf9 	bl	800ce60 <__multadd>
 800c26e:	45b1      	cmp	r9, r6
 800c270:	9004      	str	r0, [sp, #16]
 800c272:	f04f 0300 	mov.w	r3, #0
 800c276:	f04f 020a 	mov.w	r2, #10
 800c27a:	4649      	mov	r1, r9
 800c27c:	4620      	mov	r0, r4
 800c27e:	d105      	bne.n	800c28c <_dtoa_r+0xaa4>
 800c280:	f000 fdee 	bl	800ce60 <__multadd>
 800c284:	4681      	mov	r9, r0
 800c286:	4606      	mov	r6, r0
 800c288:	9505      	str	r5, [sp, #20]
 800c28a:	e776      	b.n	800c17a <_dtoa_r+0x992>
 800c28c:	f000 fde8 	bl	800ce60 <__multadd>
 800c290:	4631      	mov	r1, r6
 800c292:	4681      	mov	r9, r0
 800c294:	2300      	movs	r3, #0
 800c296:	220a      	movs	r2, #10
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 fde1 	bl	800ce60 <__multadd>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	e7f2      	b.n	800c288 <_dtoa_r+0xaa0>
 800c2a2:	f04f 0900 	mov.w	r9, #0
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	9904      	ldr	r1, [sp, #16]
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 ff8c 	bl	800d1c8 <__lshift>
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	9004      	str	r0, [sp, #16]
 800c2b4:	f000 ffdc 	bl	800d270 <__mcmp>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	dcb6      	bgt.n	800c22a <_dtoa_r+0xa42>
 800c2bc:	d102      	bne.n	800c2c4 <_dtoa_r+0xadc>
 800c2be:	f018 0f01 	tst.w	r8, #1
 800c2c2:	d1b2      	bne.n	800c22a <_dtoa_r+0xa42>
 800c2c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2c8:	2b30      	cmp	r3, #48	; 0x30
 800c2ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800c2ce:	f47f af0a 	bne.w	800c0e6 <_dtoa_r+0x8fe>
 800c2d2:	4615      	mov	r5, r2
 800c2d4:	e7f6      	b.n	800c2c4 <_dtoa_r+0xadc>
 800c2d6:	4593      	cmp	fp, r2
 800c2d8:	d105      	bne.n	800c2e6 <_dtoa_r+0xafe>
 800c2da:	2331      	movs	r3, #49	; 0x31
 800c2dc:	f10a 0a01 	add.w	sl, sl, #1
 800c2e0:	f88b 3000 	strb.w	r3, [fp]
 800c2e4:	e6ff      	b.n	800c0e6 <_dtoa_r+0x8fe>
 800c2e6:	4615      	mov	r5, r2
 800c2e8:	e79f      	b.n	800c22a <_dtoa_r+0xa42>
 800c2ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c350 <_dtoa_r+0xb68>
 800c2ee:	e007      	b.n	800c300 <_dtoa_r+0xb18>
 800c2f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c354 <_dtoa_r+0xb6c>
 800c2f6:	b11b      	cbz	r3, 800c300 <_dtoa_r+0xb18>
 800c2f8:	f10b 0308 	add.w	r3, fp, #8
 800c2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	4658      	mov	r0, fp
 800c302:	b017      	add	sp, #92	; 0x5c
 800c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c308:	9b06      	ldr	r3, [sp, #24]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	f77f ae35 	ble.w	800bf7a <_dtoa_r+0x792>
 800c310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c312:	9307      	str	r3, [sp, #28]
 800c314:	e649      	b.n	800bfaa <_dtoa_r+0x7c2>
 800c316:	9b02      	ldr	r3, [sp, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dc03      	bgt.n	800c324 <_dtoa_r+0xb3c>
 800c31c:	9b06      	ldr	r3, [sp, #24]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	f73f aecc 	bgt.w	800c0bc <_dtoa_r+0x8d4>
 800c324:	465d      	mov	r5, fp
 800c326:	4639      	mov	r1, r7
 800c328:	9804      	ldr	r0, [sp, #16]
 800c32a:	f7ff f9d1 	bl	800b6d0 <quorem>
 800c32e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c332:	f805 8b01 	strb.w	r8, [r5], #1
 800c336:	9a02      	ldr	r2, [sp, #8]
 800c338:	eba5 030b 	sub.w	r3, r5, fp
 800c33c:	429a      	cmp	r2, r3
 800c33e:	ddb0      	ble.n	800c2a2 <_dtoa_r+0xaba>
 800c340:	2300      	movs	r3, #0
 800c342:	220a      	movs	r2, #10
 800c344:	9904      	ldr	r1, [sp, #16]
 800c346:	4620      	mov	r0, r4
 800c348:	f000 fd8a 	bl	800ce60 <__multadd>
 800c34c:	9004      	str	r0, [sp, #16]
 800c34e:	e7ea      	b.n	800c326 <_dtoa_r+0xb3e>
 800c350:	0800e928 	.word	0x0800e928
 800c354:	0800e9a0 	.word	0x0800e9a0

0800c358 <__sflush_r>:
 800c358:	898a      	ldrh	r2, [r1, #12]
 800c35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35e:	4605      	mov	r5, r0
 800c360:	0710      	lsls	r0, r2, #28
 800c362:	460c      	mov	r4, r1
 800c364:	d458      	bmi.n	800c418 <__sflush_r+0xc0>
 800c366:	684b      	ldr	r3, [r1, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	dc05      	bgt.n	800c378 <__sflush_r+0x20>
 800c36c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dc02      	bgt.n	800c378 <__sflush_r+0x20>
 800c372:	2000      	movs	r0, #0
 800c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c37a:	2e00      	cmp	r6, #0
 800c37c:	d0f9      	beq.n	800c372 <__sflush_r+0x1a>
 800c37e:	2300      	movs	r3, #0
 800c380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c384:	682f      	ldr	r7, [r5, #0]
 800c386:	6a21      	ldr	r1, [r4, #32]
 800c388:	602b      	str	r3, [r5, #0]
 800c38a:	d032      	beq.n	800c3f2 <__sflush_r+0x9a>
 800c38c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c38e:	89a3      	ldrh	r3, [r4, #12]
 800c390:	075a      	lsls	r2, r3, #29
 800c392:	d505      	bpl.n	800c3a0 <__sflush_r+0x48>
 800c394:	6863      	ldr	r3, [r4, #4]
 800c396:	1ac0      	subs	r0, r0, r3
 800c398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c39a:	b10b      	cbz	r3, 800c3a0 <__sflush_r+0x48>
 800c39c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c39e:	1ac0      	subs	r0, r0, r3
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3a6:	6a21      	ldr	r1, [r4, #32]
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b0      	blx	r6
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	d106      	bne.n	800c3c0 <__sflush_r+0x68>
 800c3b2:	6829      	ldr	r1, [r5, #0]
 800c3b4:	291d      	cmp	r1, #29
 800c3b6:	d848      	bhi.n	800c44a <__sflush_r+0xf2>
 800c3b8:	4a29      	ldr	r2, [pc, #164]	; (800c460 <__sflush_r+0x108>)
 800c3ba:	40ca      	lsrs	r2, r1
 800c3bc:	07d6      	lsls	r6, r2, #31
 800c3be:	d544      	bpl.n	800c44a <__sflush_r+0xf2>
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	6062      	str	r2, [r4, #4]
 800c3c4:	04d9      	lsls	r1, r3, #19
 800c3c6:	6922      	ldr	r2, [r4, #16]
 800c3c8:	6022      	str	r2, [r4, #0]
 800c3ca:	d504      	bpl.n	800c3d6 <__sflush_r+0x7e>
 800c3cc:	1c42      	adds	r2, r0, #1
 800c3ce:	d101      	bne.n	800c3d4 <__sflush_r+0x7c>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b903      	cbnz	r3, 800c3d6 <__sflush_r+0x7e>
 800c3d4:	6560      	str	r0, [r4, #84]	; 0x54
 800c3d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3d8:	602f      	str	r7, [r5, #0]
 800c3da:	2900      	cmp	r1, #0
 800c3dc:	d0c9      	beq.n	800c372 <__sflush_r+0x1a>
 800c3de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3e2:	4299      	cmp	r1, r3
 800c3e4:	d002      	beq.n	800c3ec <__sflush_r+0x94>
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f001 f8fc 	bl	800d5e4 <_free_r>
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	6360      	str	r0, [r4, #52]	; 0x34
 800c3f0:	e7c0      	b.n	800c374 <__sflush_r+0x1c>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	47b0      	blx	r6
 800c3f8:	1c41      	adds	r1, r0, #1
 800c3fa:	d1c8      	bne.n	800c38e <__sflush_r+0x36>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0c5      	beq.n	800c38e <__sflush_r+0x36>
 800c402:	2b1d      	cmp	r3, #29
 800c404:	d001      	beq.n	800c40a <__sflush_r+0xb2>
 800c406:	2b16      	cmp	r3, #22
 800c408:	d101      	bne.n	800c40e <__sflush_r+0xb6>
 800c40a:	602f      	str	r7, [r5, #0]
 800c40c:	e7b1      	b.n	800c372 <__sflush_r+0x1a>
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	e7ad      	b.n	800c374 <__sflush_r+0x1c>
 800c418:	690f      	ldr	r7, [r1, #16]
 800c41a:	2f00      	cmp	r7, #0
 800c41c:	d0a9      	beq.n	800c372 <__sflush_r+0x1a>
 800c41e:	0793      	lsls	r3, r2, #30
 800c420:	680e      	ldr	r6, [r1, #0]
 800c422:	bf08      	it	eq
 800c424:	694b      	ldreq	r3, [r1, #20]
 800c426:	600f      	str	r7, [r1, #0]
 800c428:	bf18      	it	ne
 800c42a:	2300      	movne	r3, #0
 800c42c:	eba6 0807 	sub.w	r8, r6, r7
 800c430:	608b      	str	r3, [r1, #8]
 800c432:	f1b8 0f00 	cmp.w	r8, #0
 800c436:	dd9c      	ble.n	800c372 <__sflush_r+0x1a>
 800c438:	4643      	mov	r3, r8
 800c43a:	463a      	mov	r2, r7
 800c43c:	6a21      	ldr	r1, [r4, #32]
 800c43e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c440:	4628      	mov	r0, r5
 800c442:	47b0      	blx	r6
 800c444:	2800      	cmp	r0, #0
 800c446:	dc06      	bgt.n	800c456 <__sflush_r+0xfe>
 800c448:	89a3      	ldrh	r3, [r4, #12]
 800c44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c44e:	81a3      	strh	r3, [r4, #12]
 800c450:	f04f 30ff 	mov.w	r0, #4294967295
 800c454:	e78e      	b.n	800c374 <__sflush_r+0x1c>
 800c456:	4407      	add	r7, r0
 800c458:	eba8 0800 	sub.w	r8, r8, r0
 800c45c:	e7e9      	b.n	800c432 <__sflush_r+0xda>
 800c45e:	bf00      	nop
 800c460:	20400001 	.word	0x20400001

0800c464 <_fflush_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	690b      	ldr	r3, [r1, #16]
 800c468:	4605      	mov	r5, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	b1db      	cbz	r3, 800c4a6 <_fflush_r+0x42>
 800c46e:	b118      	cbz	r0, 800c478 <_fflush_r+0x14>
 800c470:	6983      	ldr	r3, [r0, #24]
 800c472:	b90b      	cbnz	r3, 800c478 <_fflush_r+0x14>
 800c474:	f000 f860 	bl	800c538 <__sinit>
 800c478:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <_fflush_r+0x48>)
 800c47a:	429c      	cmp	r4, r3
 800c47c:	d109      	bne.n	800c492 <_fflush_r+0x2e>
 800c47e:	686c      	ldr	r4, [r5, #4]
 800c480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c484:	b17b      	cbz	r3, 800c4a6 <_fflush_r+0x42>
 800c486:	4621      	mov	r1, r4
 800c488:	4628      	mov	r0, r5
 800c48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c48e:	f7ff bf63 	b.w	800c358 <__sflush_r>
 800c492:	4b07      	ldr	r3, [pc, #28]	; (800c4b0 <_fflush_r+0x4c>)
 800c494:	429c      	cmp	r4, r3
 800c496:	d101      	bne.n	800c49c <_fflush_r+0x38>
 800c498:	68ac      	ldr	r4, [r5, #8]
 800c49a:	e7f1      	b.n	800c480 <_fflush_r+0x1c>
 800c49c:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <_fflush_r+0x50>)
 800c49e:	429c      	cmp	r4, r3
 800c4a0:	bf08      	it	eq
 800c4a2:	68ec      	ldreq	r4, [r5, #12]
 800c4a4:	e7ec      	b.n	800c480 <_fflush_r+0x1c>
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	bd38      	pop	{r3, r4, r5, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0800e9d0 	.word	0x0800e9d0
 800c4b0:	0800e9f0 	.word	0x0800e9f0
 800c4b4:	0800e9b0 	.word	0x0800e9b0

0800c4b8 <std>:
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	b510      	push	{r4, lr}
 800c4bc:	4604      	mov	r4, r0
 800c4be:	e9c0 3300 	strd	r3, r3, [r0]
 800c4c2:	6083      	str	r3, [r0, #8]
 800c4c4:	8181      	strh	r1, [r0, #12]
 800c4c6:	6643      	str	r3, [r0, #100]	; 0x64
 800c4c8:	81c2      	strh	r2, [r0, #14]
 800c4ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ce:	6183      	str	r3, [r0, #24]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	2208      	movs	r2, #8
 800c4d4:	305c      	adds	r0, #92	; 0x5c
 800c4d6:	f7fd fced 	bl	8009eb4 <memset>
 800c4da:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <std+0x38>)
 800c4dc:	6263      	str	r3, [r4, #36]	; 0x24
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <std+0x3c>)
 800c4e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <std+0x40>)
 800c4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <std+0x44>)
 800c4e8:	6224      	str	r4, [r4, #32]
 800c4ea:	6323      	str	r3, [r4, #48]	; 0x30
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800dc79 	.word	0x0800dc79
 800c4f4:	0800dc9b 	.word	0x0800dc9b
 800c4f8:	0800dcd3 	.word	0x0800dcd3
 800c4fc:	0800dcf7 	.word	0x0800dcf7

0800c500 <_cleanup_r>:
 800c500:	4901      	ldr	r1, [pc, #4]	; (800c508 <_cleanup_r+0x8>)
 800c502:	f000 b885 	b.w	800c610 <_fwalk_reent>
 800c506:	bf00      	nop
 800c508:	0800c465 	.word	0x0800c465

0800c50c <__sfmoreglue>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	1e4a      	subs	r2, r1, #1
 800c510:	2568      	movs	r5, #104	; 0x68
 800c512:	4355      	muls	r5, r2
 800c514:	460e      	mov	r6, r1
 800c516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c51a:	f001 f8b1 	bl	800d680 <_malloc_r>
 800c51e:	4604      	mov	r4, r0
 800c520:	b140      	cbz	r0, 800c534 <__sfmoreglue+0x28>
 800c522:	2100      	movs	r1, #0
 800c524:	e9c0 1600 	strd	r1, r6, [r0]
 800c528:	300c      	adds	r0, #12
 800c52a:	60a0      	str	r0, [r4, #8]
 800c52c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c530:	f7fd fcc0 	bl	8009eb4 <memset>
 800c534:	4620      	mov	r0, r4
 800c536:	bd70      	pop	{r4, r5, r6, pc}

0800c538 <__sinit>:
 800c538:	6983      	ldr	r3, [r0, #24]
 800c53a:	b510      	push	{r4, lr}
 800c53c:	4604      	mov	r4, r0
 800c53e:	bb33      	cbnz	r3, 800c58e <__sinit+0x56>
 800c540:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c544:	6503      	str	r3, [r0, #80]	; 0x50
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <__sinit+0x58>)
 800c548:	4a12      	ldr	r2, [pc, #72]	; (800c594 <__sinit+0x5c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6282      	str	r2, [r0, #40]	; 0x28
 800c54e:	4298      	cmp	r0, r3
 800c550:	bf04      	itt	eq
 800c552:	2301      	moveq	r3, #1
 800c554:	6183      	streq	r3, [r0, #24]
 800c556:	f000 f81f 	bl	800c598 <__sfp>
 800c55a:	6060      	str	r0, [r4, #4]
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 f81b 	bl	800c598 <__sfp>
 800c562:	60a0      	str	r0, [r4, #8]
 800c564:	4620      	mov	r0, r4
 800c566:	f000 f817 	bl	800c598 <__sfp>
 800c56a:	2200      	movs	r2, #0
 800c56c:	60e0      	str	r0, [r4, #12]
 800c56e:	2104      	movs	r1, #4
 800c570:	6860      	ldr	r0, [r4, #4]
 800c572:	f7ff ffa1 	bl	800c4b8 <std>
 800c576:	2201      	movs	r2, #1
 800c578:	2109      	movs	r1, #9
 800c57a:	68a0      	ldr	r0, [r4, #8]
 800c57c:	f7ff ff9c 	bl	800c4b8 <std>
 800c580:	2202      	movs	r2, #2
 800c582:	2112      	movs	r1, #18
 800c584:	68e0      	ldr	r0, [r4, #12]
 800c586:	f7ff ff97 	bl	800c4b8 <std>
 800c58a:	2301      	movs	r3, #1
 800c58c:	61a3      	str	r3, [r4, #24]
 800c58e:	bd10      	pop	{r4, pc}
 800c590:	0800e914 	.word	0x0800e914
 800c594:	0800c501 	.word	0x0800c501

0800c598 <__sfp>:
 800c598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c59a:	4b1b      	ldr	r3, [pc, #108]	; (800c608 <__sfp+0x70>)
 800c59c:	681e      	ldr	r6, [r3, #0]
 800c59e:	69b3      	ldr	r3, [r6, #24]
 800c5a0:	4607      	mov	r7, r0
 800c5a2:	b913      	cbnz	r3, 800c5aa <__sfp+0x12>
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff ffc7 	bl	800c538 <__sinit>
 800c5aa:	3648      	adds	r6, #72	; 0x48
 800c5ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	d503      	bpl.n	800c5bc <__sfp+0x24>
 800c5b4:	6833      	ldr	r3, [r6, #0]
 800c5b6:	b133      	cbz	r3, 800c5c6 <__sfp+0x2e>
 800c5b8:	6836      	ldr	r6, [r6, #0]
 800c5ba:	e7f7      	b.n	800c5ac <__sfp+0x14>
 800c5bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5c0:	b16d      	cbz	r5, 800c5de <__sfp+0x46>
 800c5c2:	3468      	adds	r4, #104	; 0x68
 800c5c4:	e7f4      	b.n	800c5b0 <__sfp+0x18>
 800c5c6:	2104      	movs	r1, #4
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	f7ff ff9f 	bl	800c50c <__sfmoreglue>
 800c5ce:	6030      	str	r0, [r6, #0]
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d1f1      	bne.n	800c5b8 <__sfp+0x20>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	4604      	mov	r4, r0
 800c5da:	4620      	mov	r0, r4
 800c5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5de:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <__sfp+0x74>)
 800c5e0:	6665      	str	r5, [r4, #100]	; 0x64
 800c5e2:	e9c4 5500 	strd	r5, r5, [r4]
 800c5e6:	60a5      	str	r5, [r4, #8]
 800c5e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c5ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c5f0:	2208      	movs	r2, #8
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5f8:	f7fd fc5c 	bl	8009eb4 <memset>
 800c5fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c604:	e7e9      	b.n	800c5da <__sfp+0x42>
 800c606:	bf00      	nop
 800c608:	0800e914 	.word	0x0800e914
 800c60c:	ffff0001 	.word	0xffff0001

0800c610 <_fwalk_reent>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	4680      	mov	r8, r0
 800c616:	4689      	mov	r9, r1
 800c618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c61c:	2600      	movs	r6, #0
 800c61e:	b914      	cbnz	r4, 800c626 <_fwalk_reent+0x16>
 800c620:	4630      	mov	r0, r6
 800c622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c626:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c62a:	3f01      	subs	r7, #1
 800c62c:	d501      	bpl.n	800c632 <_fwalk_reent+0x22>
 800c62e:	6824      	ldr	r4, [r4, #0]
 800c630:	e7f5      	b.n	800c61e <_fwalk_reent+0xe>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d907      	bls.n	800c648 <_fwalk_reent+0x38>
 800c638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c63c:	3301      	adds	r3, #1
 800c63e:	d003      	beq.n	800c648 <_fwalk_reent+0x38>
 800c640:	4629      	mov	r1, r5
 800c642:	4640      	mov	r0, r8
 800c644:	47c8      	blx	r9
 800c646:	4306      	orrs	r6, r0
 800c648:	3568      	adds	r5, #104	; 0x68
 800c64a:	e7ee      	b.n	800c62a <_fwalk_reent+0x1a>

0800c64c <rshift>:
 800c64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c64e:	6906      	ldr	r6, [r0, #16]
 800c650:	114b      	asrs	r3, r1, #5
 800c652:	429e      	cmp	r6, r3
 800c654:	f100 0414 	add.w	r4, r0, #20
 800c658:	dd30      	ble.n	800c6bc <rshift+0x70>
 800c65a:	f011 011f 	ands.w	r1, r1, #31
 800c65e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c662:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c666:	d108      	bne.n	800c67a <rshift+0x2e>
 800c668:	4621      	mov	r1, r4
 800c66a:	42b2      	cmp	r2, r6
 800c66c:	460b      	mov	r3, r1
 800c66e:	d211      	bcs.n	800c694 <rshift+0x48>
 800c670:	f852 3b04 	ldr.w	r3, [r2], #4
 800c674:	f841 3b04 	str.w	r3, [r1], #4
 800c678:	e7f7      	b.n	800c66a <rshift+0x1e>
 800c67a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c67e:	f1c1 0c20 	rsb	ip, r1, #32
 800c682:	40cd      	lsrs	r5, r1
 800c684:	3204      	adds	r2, #4
 800c686:	4623      	mov	r3, r4
 800c688:	42b2      	cmp	r2, r6
 800c68a:	4617      	mov	r7, r2
 800c68c:	d30c      	bcc.n	800c6a8 <rshift+0x5c>
 800c68e:	601d      	str	r5, [r3, #0]
 800c690:	b105      	cbz	r5, 800c694 <rshift+0x48>
 800c692:	3304      	adds	r3, #4
 800c694:	1b1a      	subs	r2, r3, r4
 800c696:	42a3      	cmp	r3, r4
 800c698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c69c:	bf08      	it	eq
 800c69e:	2300      	moveq	r3, #0
 800c6a0:	6102      	str	r2, [r0, #16]
 800c6a2:	bf08      	it	eq
 800c6a4:	6143      	streq	r3, [r0, #20]
 800c6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a8:	683f      	ldr	r7, [r7, #0]
 800c6aa:	fa07 f70c 	lsl.w	r7, r7, ip
 800c6ae:	433d      	orrs	r5, r7
 800c6b0:	f843 5b04 	str.w	r5, [r3], #4
 800c6b4:	f852 5b04 	ldr.w	r5, [r2], #4
 800c6b8:	40cd      	lsrs	r5, r1
 800c6ba:	e7e5      	b.n	800c688 <rshift+0x3c>
 800c6bc:	4623      	mov	r3, r4
 800c6be:	e7e9      	b.n	800c694 <rshift+0x48>

0800c6c0 <__hexdig_fun>:
 800c6c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c6c4:	2b09      	cmp	r3, #9
 800c6c6:	d802      	bhi.n	800c6ce <__hexdig_fun+0xe>
 800c6c8:	3820      	subs	r0, #32
 800c6ca:	b2c0      	uxtb	r0, r0
 800c6cc:	4770      	bx	lr
 800c6ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c6d2:	2b05      	cmp	r3, #5
 800c6d4:	d801      	bhi.n	800c6da <__hexdig_fun+0x1a>
 800c6d6:	3847      	subs	r0, #71	; 0x47
 800c6d8:	e7f7      	b.n	800c6ca <__hexdig_fun+0xa>
 800c6da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c6de:	2b05      	cmp	r3, #5
 800c6e0:	d801      	bhi.n	800c6e6 <__hexdig_fun+0x26>
 800c6e2:	3827      	subs	r0, #39	; 0x27
 800c6e4:	e7f1      	b.n	800c6ca <__hexdig_fun+0xa>
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	4770      	bx	lr

0800c6ea <__gethex>:
 800c6ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ee:	b08b      	sub	sp, #44	; 0x2c
 800c6f0:	468a      	mov	sl, r1
 800c6f2:	9002      	str	r0, [sp, #8]
 800c6f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c6f6:	9306      	str	r3, [sp, #24]
 800c6f8:	4690      	mov	r8, r2
 800c6fa:	f000 facd 	bl	800cc98 <__localeconv_l>
 800c6fe:	6803      	ldr	r3, [r0, #0]
 800c700:	9303      	str	r3, [sp, #12]
 800c702:	4618      	mov	r0, r3
 800c704:	f7f3 fd6c 	bl	80001e0 <strlen>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	9001      	str	r0, [sp, #4]
 800c70c:	4403      	add	r3, r0
 800c70e:	f04f 0b00 	mov.w	fp, #0
 800c712:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c716:	9307      	str	r3, [sp, #28]
 800c718:	f8da 3000 	ldr.w	r3, [sl]
 800c71c:	3302      	adds	r3, #2
 800c71e:	461f      	mov	r7, r3
 800c720:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c724:	2830      	cmp	r0, #48	; 0x30
 800c726:	d06c      	beq.n	800c802 <__gethex+0x118>
 800c728:	f7ff ffca 	bl	800c6c0 <__hexdig_fun>
 800c72c:	4604      	mov	r4, r0
 800c72e:	2800      	cmp	r0, #0
 800c730:	d16a      	bne.n	800c808 <__gethex+0x11e>
 800c732:	9a01      	ldr	r2, [sp, #4]
 800c734:	9903      	ldr	r1, [sp, #12]
 800c736:	4638      	mov	r0, r7
 800c738:	f001 fae1 	bl	800dcfe <strncmp>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d166      	bne.n	800c80e <__gethex+0x124>
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	5cf8      	ldrb	r0, [r7, r3]
 800c744:	18fe      	adds	r6, r7, r3
 800c746:	f7ff ffbb 	bl	800c6c0 <__hexdig_fun>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d062      	beq.n	800c814 <__gethex+0x12a>
 800c74e:	4633      	mov	r3, r6
 800c750:	7818      	ldrb	r0, [r3, #0]
 800c752:	2830      	cmp	r0, #48	; 0x30
 800c754:	461f      	mov	r7, r3
 800c756:	f103 0301 	add.w	r3, r3, #1
 800c75a:	d0f9      	beq.n	800c750 <__gethex+0x66>
 800c75c:	f7ff ffb0 	bl	800c6c0 <__hexdig_fun>
 800c760:	fab0 f580 	clz	r5, r0
 800c764:	096d      	lsrs	r5, r5, #5
 800c766:	4634      	mov	r4, r6
 800c768:	f04f 0b01 	mov.w	fp, #1
 800c76c:	463a      	mov	r2, r7
 800c76e:	4616      	mov	r6, r2
 800c770:	3201      	adds	r2, #1
 800c772:	7830      	ldrb	r0, [r6, #0]
 800c774:	f7ff ffa4 	bl	800c6c0 <__hexdig_fun>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d1f8      	bne.n	800c76e <__gethex+0x84>
 800c77c:	9a01      	ldr	r2, [sp, #4]
 800c77e:	9903      	ldr	r1, [sp, #12]
 800c780:	4630      	mov	r0, r6
 800c782:	f001 fabc 	bl	800dcfe <strncmp>
 800c786:	b950      	cbnz	r0, 800c79e <__gethex+0xb4>
 800c788:	b954      	cbnz	r4, 800c7a0 <__gethex+0xb6>
 800c78a:	9b01      	ldr	r3, [sp, #4]
 800c78c:	18f4      	adds	r4, r6, r3
 800c78e:	4622      	mov	r2, r4
 800c790:	4616      	mov	r6, r2
 800c792:	3201      	adds	r2, #1
 800c794:	7830      	ldrb	r0, [r6, #0]
 800c796:	f7ff ff93 	bl	800c6c0 <__hexdig_fun>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d1f8      	bne.n	800c790 <__gethex+0xa6>
 800c79e:	b10c      	cbz	r4, 800c7a4 <__gethex+0xba>
 800c7a0:	1ba4      	subs	r4, r4, r6
 800c7a2:	00a4      	lsls	r4, r4, #2
 800c7a4:	7833      	ldrb	r3, [r6, #0]
 800c7a6:	2b50      	cmp	r3, #80	; 0x50
 800c7a8:	d001      	beq.n	800c7ae <__gethex+0xc4>
 800c7aa:	2b70      	cmp	r3, #112	; 0x70
 800c7ac:	d140      	bne.n	800c830 <__gethex+0x146>
 800c7ae:	7873      	ldrb	r3, [r6, #1]
 800c7b0:	2b2b      	cmp	r3, #43	; 0x2b
 800c7b2:	d031      	beq.n	800c818 <__gethex+0x12e>
 800c7b4:	2b2d      	cmp	r3, #45	; 0x2d
 800c7b6:	d033      	beq.n	800c820 <__gethex+0x136>
 800c7b8:	1c71      	adds	r1, r6, #1
 800c7ba:	f04f 0900 	mov.w	r9, #0
 800c7be:	7808      	ldrb	r0, [r1, #0]
 800c7c0:	f7ff ff7e 	bl	800c6c0 <__hexdig_fun>
 800c7c4:	1e43      	subs	r3, r0, #1
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b18      	cmp	r3, #24
 800c7ca:	d831      	bhi.n	800c830 <__gethex+0x146>
 800c7cc:	f1a0 0210 	sub.w	r2, r0, #16
 800c7d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7d4:	f7ff ff74 	bl	800c6c0 <__hexdig_fun>
 800c7d8:	1e43      	subs	r3, r0, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b18      	cmp	r3, #24
 800c7de:	d922      	bls.n	800c826 <__gethex+0x13c>
 800c7e0:	f1b9 0f00 	cmp.w	r9, #0
 800c7e4:	d000      	beq.n	800c7e8 <__gethex+0xfe>
 800c7e6:	4252      	negs	r2, r2
 800c7e8:	4414      	add	r4, r2
 800c7ea:	f8ca 1000 	str.w	r1, [sl]
 800c7ee:	b30d      	cbz	r5, 800c834 <__gethex+0x14a>
 800c7f0:	f1bb 0f00 	cmp.w	fp, #0
 800c7f4:	bf0c      	ite	eq
 800c7f6:	2706      	moveq	r7, #6
 800c7f8:	2700      	movne	r7, #0
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	b00b      	add	sp, #44	; 0x2c
 800c7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c802:	f10b 0b01 	add.w	fp, fp, #1
 800c806:	e78a      	b.n	800c71e <__gethex+0x34>
 800c808:	2500      	movs	r5, #0
 800c80a:	462c      	mov	r4, r5
 800c80c:	e7ae      	b.n	800c76c <__gethex+0x82>
 800c80e:	463e      	mov	r6, r7
 800c810:	2501      	movs	r5, #1
 800c812:	e7c7      	b.n	800c7a4 <__gethex+0xba>
 800c814:	4604      	mov	r4, r0
 800c816:	e7fb      	b.n	800c810 <__gethex+0x126>
 800c818:	f04f 0900 	mov.w	r9, #0
 800c81c:	1cb1      	adds	r1, r6, #2
 800c81e:	e7ce      	b.n	800c7be <__gethex+0xd4>
 800c820:	f04f 0901 	mov.w	r9, #1
 800c824:	e7fa      	b.n	800c81c <__gethex+0x132>
 800c826:	230a      	movs	r3, #10
 800c828:	fb03 0202 	mla	r2, r3, r2, r0
 800c82c:	3a10      	subs	r2, #16
 800c82e:	e7cf      	b.n	800c7d0 <__gethex+0xe6>
 800c830:	4631      	mov	r1, r6
 800c832:	e7da      	b.n	800c7ea <__gethex+0x100>
 800c834:	1bf3      	subs	r3, r6, r7
 800c836:	3b01      	subs	r3, #1
 800c838:	4629      	mov	r1, r5
 800c83a:	2b07      	cmp	r3, #7
 800c83c:	dc49      	bgt.n	800c8d2 <__gethex+0x1e8>
 800c83e:	9802      	ldr	r0, [sp, #8]
 800c840:	f000 fac3 	bl	800cdca <_Balloc>
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	f100 0914 	add.w	r9, r0, #20
 800c84a:	f04f 0b00 	mov.w	fp, #0
 800c84e:	f1c3 0301 	rsb	r3, r3, #1
 800c852:	4605      	mov	r5, r0
 800c854:	f8cd 9010 	str.w	r9, [sp, #16]
 800c858:	46da      	mov	sl, fp
 800c85a:	9308      	str	r3, [sp, #32]
 800c85c:	42b7      	cmp	r7, r6
 800c85e:	d33b      	bcc.n	800c8d8 <__gethex+0x1ee>
 800c860:	9804      	ldr	r0, [sp, #16]
 800c862:	f840 ab04 	str.w	sl, [r0], #4
 800c866:	eba0 0009 	sub.w	r0, r0, r9
 800c86a:	1080      	asrs	r0, r0, #2
 800c86c:	6128      	str	r0, [r5, #16]
 800c86e:	0147      	lsls	r7, r0, #5
 800c870:	4650      	mov	r0, sl
 800c872:	f000 fb6e 	bl	800cf52 <__hi0bits>
 800c876:	f8d8 6000 	ldr.w	r6, [r8]
 800c87a:	1a3f      	subs	r7, r7, r0
 800c87c:	42b7      	cmp	r7, r6
 800c87e:	dd64      	ble.n	800c94a <__gethex+0x260>
 800c880:	1bbf      	subs	r7, r7, r6
 800c882:	4639      	mov	r1, r7
 800c884:	4628      	mov	r0, r5
 800c886:	f000 fe7d 	bl	800d584 <__any_on>
 800c88a:	4682      	mov	sl, r0
 800c88c:	b178      	cbz	r0, 800c8ae <__gethex+0x1c4>
 800c88e:	1e7b      	subs	r3, r7, #1
 800c890:	1159      	asrs	r1, r3, #5
 800c892:	f003 021f 	and.w	r2, r3, #31
 800c896:	f04f 0a01 	mov.w	sl, #1
 800c89a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c89e:	fa0a f202 	lsl.w	r2, sl, r2
 800c8a2:	420a      	tst	r2, r1
 800c8a4:	d003      	beq.n	800c8ae <__gethex+0x1c4>
 800c8a6:	4553      	cmp	r3, sl
 800c8a8:	dc46      	bgt.n	800c938 <__gethex+0x24e>
 800c8aa:	f04f 0a02 	mov.w	sl, #2
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f7ff fecb 	bl	800c64c <rshift>
 800c8b6:	443c      	add	r4, r7
 800c8b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8bc:	42a3      	cmp	r3, r4
 800c8be:	da52      	bge.n	800c966 <__gethex+0x27c>
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	9802      	ldr	r0, [sp, #8]
 800c8c4:	f000 fab5 	bl	800ce32 <_Bfree>
 800c8c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	27a3      	movs	r7, #163	; 0xa3
 800c8d0:	e793      	b.n	800c7fa <__gethex+0x110>
 800c8d2:	3101      	adds	r1, #1
 800c8d4:	105b      	asrs	r3, r3, #1
 800c8d6:	e7b0      	b.n	800c83a <__gethex+0x150>
 800c8d8:	1e73      	subs	r3, r6, #1
 800c8da:	9305      	str	r3, [sp, #20]
 800c8dc:	9a07      	ldr	r2, [sp, #28]
 800c8de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d018      	beq.n	800c918 <__gethex+0x22e>
 800c8e6:	f1bb 0f20 	cmp.w	fp, #32
 800c8ea:	d107      	bne.n	800c8fc <__gethex+0x212>
 800c8ec:	9b04      	ldr	r3, [sp, #16]
 800c8ee:	f8c3 a000 	str.w	sl, [r3]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	f04f 0a00 	mov.w	sl, #0
 800c8f8:	9304      	str	r3, [sp, #16]
 800c8fa:	46d3      	mov	fp, sl
 800c8fc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c900:	f7ff fede 	bl	800c6c0 <__hexdig_fun>
 800c904:	f000 000f 	and.w	r0, r0, #15
 800c908:	fa00 f00b 	lsl.w	r0, r0, fp
 800c90c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c910:	f10b 0b04 	add.w	fp, fp, #4
 800c914:	9b05      	ldr	r3, [sp, #20]
 800c916:	e00d      	b.n	800c934 <__gethex+0x24a>
 800c918:	9b05      	ldr	r3, [sp, #20]
 800c91a:	9a08      	ldr	r2, [sp, #32]
 800c91c:	4413      	add	r3, r2
 800c91e:	42bb      	cmp	r3, r7
 800c920:	d3e1      	bcc.n	800c8e6 <__gethex+0x1fc>
 800c922:	4618      	mov	r0, r3
 800c924:	9a01      	ldr	r2, [sp, #4]
 800c926:	9903      	ldr	r1, [sp, #12]
 800c928:	9309      	str	r3, [sp, #36]	; 0x24
 800c92a:	f001 f9e8 	bl	800dcfe <strncmp>
 800c92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c930:	2800      	cmp	r0, #0
 800c932:	d1d8      	bne.n	800c8e6 <__gethex+0x1fc>
 800c934:	461e      	mov	r6, r3
 800c936:	e791      	b.n	800c85c <__gethex+0x172>
 800c938:	1eb9      	subs	r1, r7, #2
 800c93a:	4628      	mov	r0, r5
 800c93c:	f000 fe22 	bl	800d584 <__any_on>
 800c940:	2800      	cmp	r0, #0
 800c942:	d0b2      	beq.n	800c8aa <__gethex+0x1c0>
 800c944:	f04f 0a03 	mov.w	sl, #3
 800c948:	e7b1      	b.n	800c8ae <__gethex+0x1c4>
 800c94a:	da09      	bge.n	800c960 <__gethex+0x276>
 800c94c:	1bf7      	subs	r7, r6, r7
 800c94e:	4629      	mov	r1, r5
 800c950:	463a      	mov	r2, r7
 800c952:	9802      	ldr	r0, [sp, #8]
 800c954:	f000 fc38 	bl	800d1c8 <__lshift>
 800c958:	1be4      	subs	r4, r4, r7
 800c95a:	4605      	mov	r5, r0
 800c95c:	f100 0914 	add.w	r9, r0, #20
 800c960:	f04f 0a00 	mov.w	sl, #0
 800c964:	e7a8      	b.n	800c8b8 <__gethex+0x1ce>
 800c966:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c96a:	42a0      	cmp	r0, r4
 800c96c:	dd6a      	ble.n	800ca44 <__gethex+0x35a>
 800c96e:	1b04      	subs	r4, r0, r4
 800c970:	42a6      	cmp	r6, r4
 800c972:	dc2e      	bgt.n	800c9d2 <__gethex+0x2e8>
 800c974:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d022      	beq.n	800c9c2 <__gethex+0x2d8>
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d024      	beq.n	800c9ca <__gethex+0x2e0>
 800c980:	2b01      	cmp	r3, #1
 800c982:	d115      	bne.n	800c9b0 <__gethex+0x2c6>
 800c984:	42a6      	cmp	r6, r4
 800c986:	d113      	bne.n	800c9b0 <__gethex+0x2c6>
 800c988:	2e01      	cmp	r6, #1
 800c98a:	dc0b      	bgt.n	800c9a4 <__gethex+0x2ba>
 800c98c:	9a06      	ldr	r2, [sp, #24]
 800c98e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c992:	6013      	str	r3, [r2, #0]
 800c994:	2301      	movs	r3, #1
 800c996:	612b      	str	r3, [r5, #16]
 800c998:	f8c9 3000 	str.w	r3, [r9]
 800c99c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c99e:	2762      	movs	r7, #98	; 0x62
 800c9a0:	601d      	str	r5, [r3, #0]
 800c9a2:	e72a      	b.n	800c7fa <__gethex+0x110>
 800c9a4:	1e71      	subs	r1, r6, #1
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f000 fdec 	bl	800d584 <__any_on>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1ed      	bne.n	800c98c <__gethex+0x2a2>
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	9802      	ldr	r0, [sp, #8]
 800c9b4:	f000 fa3d 	bl	800ce32 <_Bfree>
 800c9b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6013      	str	r3, [r2, #0]
 800c9be:	2750      	movs	r7, #80	; 0x50
 800c9c0:	e71b      	b.n	800c7fa <__gethex+0x110>
 800c9c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d0e1      	beq.n	800c98c <__gethex+0x2a2>
 800c9c8:	e7f2      	b.n	800c9b0 <__gethex+0x2c6>
 800c9ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1dd      	bne.n	800c98c <__gethex+0x2a2>
 800c9d0:	e7ee      	b.n	800c9b0 <__gethex+0x2c6>
 800c9d2:	1e67      	subs	r7, r4, #1
 800c9d4:	f1ba 0f00 	cmp.w	sl, #0
 800c9d8:	d131      	bne.n	800ca3e <__gethex+0x354>
 800c9da:	b127      	cbz	r7, 800c9e6 <__gethex+0x2fc>
 800c9dc:	4639      	mov	r1, r7
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f000 fdd0 	bl	800d584 <__any_on>
 800c9e4:	4682      	mov	sl, r0
 800c9e6:	117a      	asrs	r2, r7, #5
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f007 071f 	and.w	r7, r7, #31
 800c9ee:	fa03 f707 	lsl.w	r7, r3, r7
 800c9f2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	421f      	tst	r7, r3
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	bf18      	it	ne
 800c9fe:	f04a 0a02 	orrne.w	sl, sl, #2
 800ca02:	1b36      	subs	r6, r6, r4
 800ca04:	f7ff fe22 	bl	800c64c <rshift>
 800ca08:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ca0c:	2702      	movs	r7, #2
 800ca0e:	f1ba 0f00 	cmp.w	sl, #0
 800ca12:	d048      	beq.n	800caa6 <__gethex+0x3bc>
 800ca14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d015      	beq.n	800ca48 <__gethex+0x35e>
 800ca1c:	2b03      	cmp	r3, #3
 800ca1e:	d017      	beq.n	800ca50 <__gethex+0x366>
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d109      	bne.n	800ca38 <__gethex+0x34e>
 800ca24:	f01a 0f02 	tst.w	sl, #2
 800ca28:	d006      	beq.n	800ca38 <__gethex+0x34e>
 800ca2a:	f8d9 3000 	ldr.w	r3, [r9]
 800ca2e:	ea4a 0a03 	orr.w	sl, sl, r3
 800ca32:	f01a 0f01 	tst.w	sl, #1
 800ca36:	d10e      	bne.n	800ca56 <__gethex+0x36c>
 800ca38:	f047 0710 	orr.w	r7, r7, #16
 800ca3c:	e033      	b.n	800caa6 <__gethex+0x3bc>
 800ca3e:	f04f 0a01 	mov.w	sl, #1
 800ca42:	e7d0      	b.n	800c9e6 <__gethex+0x2fc>
 800ca44:	2701      	movs	r7, #1
 800ca46:	e7e2      	b.n	800ca0e <__gethex+0x324>
 800ca48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca4a:	f1c3 0301 	rsb	r3, r3, #1
 800ca4e:	9315      	str	r3, [sp, #84]	; 0x54
 800ca50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0f0      	beq.n	800ca38 <__gethex+0x34e>
 800ca56:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ca5a:	f105 0314 	add.w	r3, r5, #20
 800ca5e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ca62:	eb03 010a 	add.w	r1, r3, sl
 800ca66:	f04f 0c00 	mov.w	ip, #0
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca74:	d01c      	beq.n	800cab0 <__gethex+0x3c6>
 800ca76:	3201      	adds	r2, #1
 800ca78:	6002      	str	r2, [r0, #0]
 800ca7a:	2f02      	cmp	r7, #2
 800ca7c:	f105 0314 	add.w	r3, r5, #20
 800ca80:	d138      	bne.n	800caf4 <__gethex+0x40a>
 800ca82:	f8d8 2000 	ldr.w	r2, [r8]
 800ca86:	3a01      	subs	r2, #1
 800ca88:	42b2      	cmp	r2, r6
 800ca8a:	d10a      	bne.n	800caa2 <__gethex+0x3b8>
 800ca8c:	1171      	asrs	r1, r6, #5
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f006 061f 	and.w	r6, r6, #31
 800ca94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca98:	fa02 f606 	lsl.w	r6, r2, r6
 800ca9c:	421e      	tst	r6, r3
 800ca9e:	bf18      	it	ne
 800caa0:	4617      	movne	r7, r2
 800caa2:	f047 0720 	orr.w	r7, r7, #32
 800caa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800caa8:	601d      	str	r5, [r3, #0]
 800caaa:	9b06      	ldr	r3, [sp, #24]
 800caac:	601c      	str	r4, [r3, #0]
 800caae:	e6a4      	b.n	800c7fa <__gethex+0x110>
 800cab0:	4299      	cmp	r1, r3
 800cab2:	f843 cc04 	str.w	ip, [r3, #-4]
 800cab6:	d8d8      	bhi.n	800ca6a <__gethex+0x380>
 800cab8:	68ab      	ldr	r3, [r5, #8]
 800caba:	4599      	cmp	r9, r3
 800cabc:	db12      	blt.n	800cae4 <__gethex+0x3fa>
 800cabe:	6869      	ldr	r1, [r5, #4]
 800cac0:	9802      	ldr	r0, [sp, #8]
 800cac2:	3101      	adds	r1, #1
 800cac4:	f000 f981 	bl	800cdca <_Balloc>
 800cac8:	692a      	ldr	r2, [r5, #16]
 800caca:	3202      	adds	r2, #2
 800cacc:	f105 010c 	add.w	r1, r5, #12
 800cad0:	4683      	mov	fp, r0
 800cad2:	0092      	lsls	r2, r2, #2
 800cad4:	300c      	adds	r0, #12
 800cad6:	f000 f96d 	bl	800cdb4 <memcpy>
 800cada:	4629      	mov	r1, r5
 800cadc:	9802      	ldr	r0, [sp, #8]
 800cade:	f000 f9a8 	bl	800ce32 <_Bfree>
 800cae2:	465d      	mov	r5, fp
 800cae4:	692b      	ldr	r3, [r5, #16]
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800caec:	612a      	str	r2, [r5, #16]
 800caee:	2201      	movs	r2, #1
 800caf0:	615a      	str	r2, [r3, #20]
 800caf2:	e7c2      	b.n	800ca7a <__gethex+0x390>
 800caf4:	692a      	ldr	r2, [r5, #16]
 800caf6:	454a      	cmp	r2, r9
 800caf8:	dd0b      	ble.n	800cb12 <__gethex+0x428>
 800cafa:	2101      	movs	r1, #1
 800cafc:	4628      	mov	r0, r5
 800cafe:	f7ff fda5 	bl	800c64c <rshift>
 800cb02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb06:	3401      	adds	r4, #1
 800cb08:	42a3      	cmp	r3, r4
 800cb0a:	f6ff aed9 	blt.w	800c8c0 <__gethex+0x1d6>
 800cb0e:	2701      	movs	r7, #1
 800cb10:	e7c7      	b.n	800caa2 <__gethex+0x3b8>
 800cb12:	f016 061f 	ands.w	r6, r6, #31
 800cb16:	d0fa      	beq.n	800cb0e <__gethex+0x424>
 800cb18:	449a      	add	sl, r3
 800cb1a:	f1c6 0620 	rsb	r6, r6, #32
 800cb1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cb22:	f000 fa16 	bl	800cf52 <__hi0bits>
 800cb26:	42b0      	cmp	r0, r6
 800cb28:	dbe7      	blt.n	800cafa <__gethex+0x410>
 800cb2a:	e7f0      	b.n	800cb0e <__gethex+0x424>

0800cb2c <L_shift>:
 800cb2c:	f1c2 0208 	rsb	r2, r2, #8
 800cb30:	0092      	lsls	r2, r2, #2
 800cb32:	b570      	push	{r4, r5, r6, lr}
 800cb34:	f1c2 0620 	rsb	r6, r2, #32
 800cb38:	6843      	ldr	r3, [r0, #4]
 800cb3a:	6804      	ldr	r4, [r0, #0]
 800cb3c:	fa03 f506 	lsl.w	r5, r3, r6
 800cb40:	432c      	orrs	r4, r5
 800cb42:	40d3      	lsrs	r3, r2
 800cb44:	6004      	str	r4, [r0, #0]
 800cb46:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb4a:	4288      	cmp	r0, r1
 800cb4c:	d3f4      	bcc.n	800cb38 <L_shift+0xc>
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}

0800cb50 <__match>:
 800cb50:	b530      	push	{r4, r5, lr}
 800cb52:	6803      	ldr	r3, [r0, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb5a:	b914      	cbnz	r4, 800cb62 <__match+0x12>
 800cb5c:	6003      	str	r3, [r0, #0]
 800cb5e:	2001      	movs	r0, #1
 800cb60:	bd30      	pop	{r4, r5, pc}
 800cb62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cb6a:	2d19      	cmp	r5, #25
 800cb6c:	bf98      	it	ls
 800cb6e:	3220      	addls	r2, #32
 800cb70:	42a2      	cmp	r2, r4
 800cb72:	d0f0      	beq.n	800cb56 <__match+0x6>
 800cb74:	2000      	movs	r0, #0
 800cb76:	e7f3      	b.n	800cb60 <__match+0x10>

0800cb78 <__hexnan>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	680b      	ldr	r3, [r1, #0]
 800cb7e:	6801      	ldr	r1, [r0, #0]
 800cb80:	115f      	asrs	r7, r3, #5
 800cb82:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cb86:	f013 031f 	ands.w	r3, r3, #31
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	bf18      	it	ne
 800cb8e:	3704      	addne	r7, #4
 800cb90:	2500      	movs	r5, #0
 800cb92:	1f3e      	subs	r6, r7, #4
 800cb94:	4682      	mov	sl, r0
 800cb96:	4690      	mov	r8, r2
 800cb98:	9301      	str	r3, [sp, #4]
 800cb9a:	f847 5c04 	str.w	r5, [r7, #-4]
 800cb9e:	46b1      	mov	r9, r6
 800cba0:	4634      	mov	r4, r6
 800cba2:	9502      	str	r5, [sp, #8]
 800cba4:	46ab      	mov	fp, r5
 800cba6:	784a      	ldrb	r2, [r1, #1]
 800cba8:	1c4b      	adds	r3, r1, #1
 800cbaa:	9303      	str	r3, [sp, #12]
 800cbac:	b342      	cbz	r2, 800cc00 <__hexnan+0x88>
 800cbae:	4610      	mov	r0, r2
 800cbb0:	9105      	str	r1, [sp, #20]
 800cbb2:	9204      	str	r2, [sp, #16]
 800cbb4:	f7ff fd84 	bl	800c6c0 <__hexdig_fun>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d143      	bne.n	800cc44 <__hexnan+0xcc>
 800cbbc:	9a04      	ldr	r2, [sp, #16]
 800cbbe:	9905      	ldr	r1, [sp, #20]
 800cbc0:	2a20      	cmp	r2, #32
 800cbc2:	d818      	bhi.n	800cbf6 <__hexnan+0x7e>
 800cbc4:	9b02      	ldr	r3, [sp, #8]
 800cbc6:	459b      	cmp	fp, r3
 800cbc8:	dd13      	ble.n	800cbf2 <__hexnan+0x7a>
 800cbca:	454c      	cmp	r4, r9
 800cbcc:	d206      	bcs.n	800cbdc <__hexnan+0x64>
 800cbce:	2d07      	cmp	r5, #7
 800cbd0:	dc04      	bgt.n	800cbdc <__hexnan+0x64>
 800cbd2:	462a      	mov	r2, r5
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f7ff ffa8 	bl	800cb2c <L_shift>
 800cbdc:	4544      	cmp	r4, r8
 800cbde:	d944      	bls.n	800cc6a <__hexnan+0xf2>
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	f1a4 0904 	sub.w	r9, r4, #4
 800cbe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbea:	f8cd b008 	str.w	fp, [sp, #8]
 800cbee:	464c      	mov	r4, r9
 800cbf0:	461d      	mov	r5, r3
 800cbf2:	9903      	ldr	r1, [sp, #12]
 800cbf4:	e7d7      	b.n	800cba6 <__hexnan+0x2e>
 800cbf6:	2a29      	cmp	r2, #41	; 0x29
 800cbf8:	d14a      	bne.n	800cc90 <__hexnan+0x118>
 800cbfa:	3102      	adds	r1, #2
 800cbfc:	f8ca 1000 	str.w	r1, [sl]
 800cc00:	f1bb 0f00 	cmp.w	fp, #0
 800cc04:	d044      	beq.n	800cc90 <__hexnan+0x118>
 800cc06:	454c      	cmp	r4, r9
 800cc08:	d206      	bcs.n	800cc18 <__hexnan+0xa0>
 800cc0a:	2d07      	cmp	r5, #7
 800cc0c:	dc04      	bgt.n	800cc18 <__hexnan+0xa0>
 800cc0e:	462a      	mov	r2, r5
 800cc10:	4649      	mov	r1, r9
 800cc12:	4620      	mov	r0, r4
 800cc14:	f7ff ff8a 	bl	800cb2c <L_shift>
 800cc18:	4544      	cmp	r4, r8
 800cc1a:	d928      	bls.n	800cc6e <__hexnan+0xf6>
 800cc1c:	4643      	mov	r3, r8
 800cc1e:	f854 2b04 	ldr.w	r2, [r4], #4
 800cc22:	f843 2b04 	str.w	r2, [r3], #4
 800cc26:	42a6      	cmp	r6, r4
 800cc28:	d2f9      	bcs.n	800cc1e <__hexnan+0xa6>
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f843 2b04 	str.w	r2, [r3], #4
 800cc30:	429e      	cmp	r6, r3
 800cc32:	d2fb      	bcs.n	800cc2c <__hexnan+0xb4>
 800cc34:	6833      	ldr	r3, [r6, #0]
 800cc36:	b91b      	cbnz	r3, 800cc40 <__hexnan+0xc8>
 800cc38:	4546      	cmp	r6, r8
 800cc3a:	d127      	bne.n	800cc8c <__hexnan+0x114>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	6033      	str	r3, [r6, #0]
 800cc40:	2005      	movs	r0, #5
 800cc42:	e026      	b.n	800cc92 <__hexnan+0x11a>
 800cc44:	3501      	adds	r5, #1
 800cc46:	2d08      	cmp	r5, #8
 800cc48:	f10b 0b01 	add.w	fp, fp, #1
 800cc4c:	dd06      	ble.n	800cc5c <__hexnan+0xe4>
 800cc4e:	4544      	cmp	r4, r8
 800cc50:	d9cf      	bls.n	800cbf2 <__hexnan+0x7a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc58:	2501      	movs	r5, #1
 800cc5a:	3c04      	subs	r4, #4
 800cc5c:	6822      	ldr	r2, [r4, #0]
 800cc5e:	f000 000f 	and.w	r0, r0, #15
 800cc62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc66:	6020      	str	r0, [r4, #0]
 800cc68:	e7c3      	b.n	800cbf2 <__hexnan+0x7a>
 800cc6a:	2508      	movs	r5, #8
 800cc6c:	e7c1      	b.n	800cbf2 <__hexnan+0x7a>
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0df      	beq.n	800cc34 <__hexnan+0xbc>
 800cc74:	f04f 32ff 	mov.w	r2, #4294967295
 800cc78:	f1c3 0320 	rsb	r3, r3, #32
 800cc7c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc80:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cc84:	401a      	ands	r2, r3
 800cc86:	f847 2c04 	str.w	r2, [r7, #-4]
 800cc8a:	e7d3      	b.n	800cc34 <__hexnan+0xbc>
 800cc8c:	3e04      	subs	r6, #4
 800cc8e:	e7d1      	b.n	800cc34 <__hexnan+0xbc>
 800cc90:	2004      	movs	r0, #4
 800cc92:	b007      	add	sp, #28
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc98 <__localeconv_l>:
 800cc98:	30f0      	adds	r0, #240	; 0xf0
 800cc9a:	4770      	bx	lr

0800cc9c <_localeconv_r>:
 800cc9c:	4b04      	ldr	r3, [pc, #16]	; (800ccb0 <_localeconv_r+0x14>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6a18      	ldr	r0, [r3, #32]
 800cca2:	4b04      	ldr	r3, [pc, #16]	; (800ccb4 <_localeconv_r+0x18>)
 800cca4:	2800      	cmp	r0, #0
 800cca6:	bf08      	it	eq
 800cca8:	4618      	moveq	r0, r3
 800ccaa:	30f0      	adds	r0, #240	; 0xf0
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	20000010 	.word	0x20000010
 800ccb4:	20000074 	.word	0x20000074

0800ccb8 <__swhatbuf_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	460e      	mov	r6, r1
 800ccbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc0:	2900      	cmp	r1, #0
 800ccc2:	b096      	sub	sp, #88	; 0x58
 800ccc4:	4614      	mov	r4, r2
 800ccc6:	461d      	mov	r5, r3
 800ccc8:	da07      	bge.n	800ccda <__swhatbuf_r+0x22>
 800ccca:	2300      	movs	r3, #0
 800cccc:	602b      	str	r3, [r5, #0]
 800ccce:	89b3      	ldrh	r3, [r6, #12]
 800ccd0:	061a      	lsls	r2, r3, #24
 800ccd2:	d410      	bmi.n	800ccf6 <__swhatbuf_r+0x3e>
 800ccd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd8:	e00e      	b.n	800ccf8 <__swhatbuf_r+0x40>
 800ccda:	466a      	mov	r2, sp
 800ccdc:	f001 f850 	bl	800dd80 <_fstat_r>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dbf2      	blt.n	800ccca <__swhatbuf_r+0x12>
 800cce4:	9a01      	ldr	r2, [sp, #4]
 800cce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccee:	425a      	negs	r2, r3
 800ccf0:	415a      	adcs	r2, r3
 800ccf2:	602a      	str	r2, [r5, #0]
 800ccf4:	e7ee      	b.n	800ccd4 <__swhatbuf_r+0x1c>
 800ccf6:	2340      	movs	r3, #64	; 0x40
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	b016      	add	sp, #88	; 0x58
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}

0800cd00 <__smakebuf_r>:
 800cd00:	898b      	ldrh	r3, [r1, #12]
 800cd02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd04:	079d      	lsls	r5, r3, #30
 800cd06:	4606      	mov	r6, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	d507      	bpl.n	800cd1c <__smakebuf_r+0x1c>
 800cd0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	2301      	movs	r3, #1
 800cd16:	6163      	str	r3, [r4, #20]
 800cd18:	b002      	add	sp, #8
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	ab01      	add	r3, sp, #4
 800cd1e:	466a      	mov	r2, sp
 800cd20:	f7ff ffca 	bl	800ccb8 <__swhatbuf_r>
 800cd24:	9900      	ldr	r1, [sp, #0]
 800cd26:	4605      	mov	r5, r0
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 fca9 	bl	800d680 <_malloc_r>
 800cd2e:	b948      	cbnz	r0, 800cd44 <__smakebuf_r+0x44>
 800cd30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd34:	059a      	lsls	r2, r3, #22
 800cd36:	d4ef      	bmi.n	800cd18 <__smakebuf_r+0x18>
 800cd38:	f023 0303 	bic.w	r3, r3, #3
 800cd3c:	f043 0302 	orr.w	r3, r3, #2
 800cd40:	81a3      	strh	r3, [r4, #12]
 800cd42:	e7e3      	b.n	800cd0c <__smakebuf_r+0xc>
 800cd44:	4b0d      	ldr	r3, [pc, #52]	; (800cd7c <__smakebuf_r+0x7c>)
 800cd46:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	6020      	str	r0, [r4, #0]
 800cd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd50:	81a3      	strh	r3, [r4, #12]
 800cd52:	9b00      	ldr	r3, [sp, #0]
 800cd54:	6163      	str	r3, [r4, #20]
 800cd56:	9b01      	ldr	r3, [sp, #4]
 800cd58:	6120      	str	r0, [r4, #16]
 800cd5a:	b15b      	cbz	r3, 800cd74 <__smakebuf_r+0x74>
 800cd5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd60:	4630      	mov	r0, r6
 800cd62:	f001 f81f 	bl	800dda4 <_isatty_r>
 800cd66:	b128      	cbz	r0, 800cd74 <__smakebuf_r+0x74>
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f023 0303 	bic.w	r3, r3, #3
 800cd6e:	f043 0301 	orr.w	r3, r3, #1
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	431d      	orrs	r5, r3
 800cd78:	81a5      	strh	r5, [r4, #12]
 800cd7a:	e7cd      	b.n	800cd18 <__smakebuf_r+0x18>
 800cd7c:	0800c501 	.word	0x0800c501

0800cd80 <malloc>:
 800cd80:	4b02      	ldr	r3, [pc, #8]	; (800cd8c <malloc+0xc>)
 800cd82:	4601      	mov	r1, r0
 800cd84:	6818      	ldr	r0, [r3, #0]
 800cd86:	f000 bc7b 	b.w	800d680 <_malloc_r>
 800cd8a:	bf00      	nop
 800cd8c:	20000010 	.word	0x20000010

0800cd90 <__ascii_mbtowc>:
 800cd90:	b082      	sub	sp, #8
 800cd92:	b901      	cbnz	r1, 800cd96 <__ascii_mbtowc+0x6>
 800cd94:	a901      	add	r1, sp, #4
 800cd96:	b142      	cbz	r2, 800cdaa <__ascii_mbtowc+0x1a>
 800cd98:	b14b      	cbz	r3, 800cdae <__ascii_mbtowc+0x1e>
 800cd9a:	7813      	ldrb	r3, [r2, #0]
 800cd9c:	600b      	str	r3, [r1, #0]
 800cd9e:	7812      	ldrb	r2, [r2, #0]
 800cda0:	1c10      	adds	r0, r2, #0
 800cda2:	bf18      	it	ne
 800cda4:	2001      	movne	r0, #1
 800cda6:	b002      	add	sp, #8
 800cda8:	4770      	bx	lr
 800cdaa:	4610      	mov	r0, r2
 800cdac:	e7fb      	b.n	800cda6 <__ascii_mbtowc+0x16>
 800cdae:	f06f 0001 	mvn.w	r0, #1
 800cdb2:	e7f8      	b.n	800cda6 <__ascii_mbtowc+0x16>

0800cdb4 <memcpy>:
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	1e43      	subs	r3, r0, #1
 800cdb8:	440a      	add	r2, r1
 800cdba:	4291      	cmp	r1, r2
 800cdbc:	d100      	bne.n	800cdc0 <memcpy+0xc>
 800cdbe:	bd10      	pop	{r4, pc}
 800cdc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdc8:	e7f7      	b.n	800cdba <memcpy+0x6>

0800cdca <_Balloc>:
 800cdca:	b570      	push	{r4, r5, r6, lr}
 800cdcc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cdce:	4604      	mov	r4, r0
 800cdd0:	460e      	mov	r6, r1
 800cdd2:	b93d      	cbnz	r5, 800cde4 <_Balloc+0x1a>
 800cdd4:	2010      	movs	r0, #16
 800cdd6:	f7ff ffd3 	bl	800cd80 <malloc>
 800cdda:	6260      	str	r0, [r4, #36]	; 0x24
 800cddc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cde0:	6005      	str	r5, [r0, #0]
 800cde2:	60c5      	str	r5, [r0, #12]
 800cde4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cde6:	68eb      	ldr	r3, [r5, #12]
 800cde8:	b183      	cbz	r3, 800ce0c <_Balloc+0x42>
 800cdea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cdf2:	b9b8      	cbnz	r0, 800ce24 <_Balloc+0x5a>
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	fa01 f506 	lsl.w	r5, r1, r6
 800cdfa:	1d6a      	adds	r2, r5, #5
 800cdfc:	0092      	lsls	r2, r2, #2
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f000 fbe1 	bl	800d5c6 <_calloc_r>
 800ce04:	b160      	cbz	r0, 800ce20 <_Balloc+0x56>
 800ce06:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ce0a:	e00e      	b.n	800ce2a <_Balloc+0x60>
 800ce0c:	2221      	movs	r2, #33	; 0x21
 800ce0e:	2104      	movs	r1, #4
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 fbd8 	bl	800d5c6 <_calloc_r>
 800ce16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce18:	60e8      	str	r0, [r5, #12]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e4      	bne.n	800cdea <_Balloc+0x20>
 800ce20:	2000      	movs	r0, #0
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	6802      	ldr	r2, [r0, #0]
 800ce26:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce30:	e7f7      	b.n	800ce22 <_Balloc+0x58>

0800ce32 <_Bfree>:
 800ce32:	b570      	push	{r4, r5, r6, lr}
 800ce34:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ce36:	4606      	mov	r6, r0
 800ce38:	460d      	mov	r5, r1
 800ce3a:	b93c      	cbnz	r4, 800ce4c <_Bfree+0x1a>
 800ce3c:	2010      	movs	r0, #16
 800ce3e:	f7ff ff9f 	bl	800cd80 <malloc>
 800ce42:	6270      	str	r0, [r6, #36]	; 0x24
 800ce44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce48:	6004      	str	r4, [r0, #0]
 800ce4a:	60c4      	str	r4, [r0, #12]
 800ce4c:	b13d      	cbz	r5, 800ce5e <_Bfree+0x2c>
 800ce4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ce50:	686a      	ldr	r2, [r5, #4]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce58:	6029      	str	r1, [r5, #0]
 800ce5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ce5e:	bd70      	pop	{r4, r5, r6, pc}

0800ce60 <__multadd>:
 800ce60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce64:	690d      	ldr	r5, [r1, #16]
 800ce66:	461f      	mov	r7, r3
 800ce68:	4606      	mov	r6, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	f101 0c14 	add.w	ip, r1, #20
 800ce70:	2300      	movs	r3, #0
 800ce72:	f8dc 0000 	ldr.w	r0, [ip]
 800ce76:	b281      	uxth	r1, r0
 800ce78:	fb02 7101 	mla	r1, r2, r1, r7
 800ce7c:	0c0f      	lsrs	r7, r1, #16
 800ce7e:	0c00      	lsrs	r0, r0, #16
 800ce80:	fb02 7000 	mla	r0, r2, r0, r7
 800ce84:	b289      	uxth	r1, r1
 800ce86:	3301      	adds	r3, #1
 800ce88:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ce8c:	429d      	cmp	r5, r3
 800ce8e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ce92:	f84c 1b04 	str.w	r1, [ip], #4
 800ce96:	dcec      	bgt.n	800ce72 <__multadd+0x12>
 800ce98:	b1d7      	cbz	r7, 800ced0 <__multadd+0x70>
 800ce9a:	68a3      	ldr	r3, [r4, #8]
 800ce9c:	42ab      	cmp	r3, r5
 800ce9e:	dc12      	bgt.n	800cec6 <__multadd+0x66>
 800cea0:	6861      	ldr	r1, [r4, #4]
 800cea2:	4630      	mov	r0, r6
 800cea4:	3101      	adds	r1, #1
 800cea6:	f7ff ff90 	bl	800cdca <_Balloc>
 800ceaa:	6922      	ldr	r2, [r4, #16]
 800ceac:	3202      	adds	r2, #2
 800ceae:	f104 010c 	add.w	r1, r4, #12
 800ceb2:	4680      	mov	r8, r0
 800ceb4:	0092      	lsls	r2, r2, #2
 800ceb6:	300c      	adds	r0, #12
 800ceb8:	f7ff ff7c 	bl	800cdb4 <memcpy>
 800cebc:	4621      	mov	r1, r4
 800cebe:	4630      	mov	r0, r6
 800cec0:	f7ff ffb7 	bl	800ce32 <_Bfree>
 800cec4:	4644      	mov	r4, r8
 800cec6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ceca:	3501      	adds	r5, #1
 800cecc:	615f      	str	r7, [r3, #20]
 800cece:	6125      	str	r5, [r4, #16]
 800ced0:	4620      	mov	r0, r4
 800ced2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ced6 <__s2b>:
 800ced6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceda:	460c      	mov	r4, r1
 800cedc:	4615      	mov	r5, r2
 800cede:	461f      	mov	r7, r3
 800cee0:	2209      	movs	r2, #9
 800cee2:	3308      	adds	r3, #8
 800cee4:	4606      	mov	r6, r0
 800cee6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ceea:	2100      	movs	r1, #0
 800ceec:	2201      	movs	r2, #1
 800ceee:	429a      	cmp	r2, r3
 800cef0:	db20      	blt.n	800cf34 <__s2b+0x5e>
 800cef2:	4630      	mov	r0, r6
 800cef4:	f7ff ff69 	bl	800cdca <_Balloc>
 800cef8:	9b08      	ldr	r3, [sp, #32]
 800cefa:	6143      	str	r3, [r0, #20]
 800cefc:	2d09      	cmp	r5, #9
 800cefe:	f04f 0301 	mov.w	r3, #1
 800cf02:	6103      	str	r3, [r0, #16]
 800cf04:	dd19      	ble.n	800cf3a <__s2b+0x64>
 800cf06:	f104 0809 	add.w	r8, r4, #9
 800cf0a:	46c1      	mov	r9, r8
 800cf0c:	442c      	add	r4, r5
 800cf0e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cf12:	4601      	mov	r1, r0
 800cf14:	3b30      	subs	r3, #48	; 0x30
 800cf16:	220a      	movs	r2, #10
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f7ff ffa1 	bl	800ce60 <__multadd>
 800cf1e:	45a1      	cmp	r9, r4
 800cf20:	d1f5      	bne.n	800cf0e <__s2b+0x38>
 800cf22:	eb08 0405 	add.w	r4, r8, r5
 800cf26:	3c08      	subs	r4, #8
 800cf28:	1b2d      	subs	r5, r5, r4
 800cf2a:	1963      	adds	r3, r4, r5
 800cf2c:	42bb      	cmp	r3, r7
 800cf2e:	db07      	blt.n	800cf40 <__s2b+0x6a>
 800cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf34:	0052      	lsls	r2, r2, #1
 800cf36:	3101      	adds	r1, #1
 800cf38:	e7d9      	b.n	800ceee <__s2b+0x18>
 800cf3a:	340a      	adds	r4, #10
 800cf3c:	2509      	movs	r5, #9
 800cf3e:	e7f3      	b.n	800cf28 <__s2b+0x52>
 800cf40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf44:	4601      	mov	r1, r0
 800cf46:	3b30      	subs	r3, #48	; 0x30
 800cf48:	220a      	movs	r2, #10
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f7ff ff88 	bl	800ce60 <__multadd>
 800cf50:	e7eb      	b.n	800cf2a <__s2b+0x54>

0800cf52 <__hi0bits>:
 800cf52:	0c02      	lsrs	r2, r0, #16
 800cf54:	0412      	lsls	r2, r2, #16
 800cf56:	4603      	mov	r3, r0
 800cf58:	b9b2      	cbnz	r2, 800cf88 <__hi0bits+0x36>
 800cf5a:	0403      	lsls	r3, r0, #16
 800cf5c:	2010      	movs	r0, #16
 800cf5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cf62:	bf04      	itt	eq
 800cf64:	021b      	lsleq	r3, r3, #8
 800cf66:	3008      	addeq	r0, #8
 800cf68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cf6c:	bf04      	itt	eq
 800cf6e:	011b      	lsleq	r3, r3, #4
 800cf70:	3004      	addeq	r0, #4
 800cf72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cf76:	bf04      	itt	eq
 800cf78:	009b      	lsleq	r3, r3, #2
 800cf7a:	3002      	addeq	r0, #2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	db06      	blt.n	800cf8e <__hi0bits+0x3c>
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	d503      	bpl.n	800cf8c <__hi0bits+0x3a>
 800cf84:	3001      	adds	r0, #1
 800cf86:	4770      	bx	lr
 800cf88:	2000      	movs	r0, #0
 800cf8a:	e7e8      	b.n	800cf5e <__hi0bits+0xc>
 800cf8c:	2020      	movs	r0, #32
 800cf8e:	4770      	bx	lr

0800cf90 <__lo0bits>:
 800cf90:	6803      	ldr	r3, [r0, #0]
 800cf92:	f013 0207 	ands.w	r2, r3, #7
 800cf96:	4601      	mov	r1, r0
 800cf98:	d00b      	beq.n	800cfb2 <__lo0bits+0x22>
 800cf9a:	07da      	lsls	r2, r3, #31
 800cf9c:	d423      	bmi.n	800cfe6 <__lo0bits+0x56>
 800cf9e:	0798      	lsls	r0, r3, #30
 800cfa0:	bf49      	itett	mi
 800cfa2:	085b      	lsrmi	r3, r3, #1
 800cfa4:	089b      	lsrpl	r3, r3, #2
 800cfa6:	2001      	movmi	r0, #1
 800cfa8:	600b      	strmi	r3, [r1, #0]
 800cfaa:	bf5c      	itt	pl
 800cfac:	600b      	strpl	r3, [r1, #0]
 800cfae:	2002      	movpl	r0, #2
 800cfb0:	4770      	bx	lr
 800cfb2:	b298      	uxth	r0, r3
 800cfb4:	b9a8      	cbnz	r0, 800cfe2 <__lo0bits+0x52>
 800cfb6:	0c1b      	lsrs	r3, r3, #16
 800cfb8:	2010      	movs	r0, #16
 800cfba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cfbe:	bf04      	itt	eq
 800cfc0:	0a1b      	lsreq	r3, r3, #8
 800cfc2:	3008      	addeq	r0, #8
 800cfc4:	071a      	lsls	r2, r3, #28
 800cfc6:	bf04      	itt	eq
 800cfc8:	091b      	lsreq	r3, r3, #4
 800cfca:	3004      	addeq	r0, #4
 800cfcc:	079a      	lsls	r2, r3, #30
 800cfce:	bf04      	itt	eq
 800cfd0:	089b      	lsreq	r3, r3, #2
 800cfd2:	3002      	addeq	r0, #2
 800cfd4:	07da      	lsls	r2, r3, #31
 800cfd6:	d402      	bmi.n	800cfde <__lo0bits+0x4e>
 800cfd8:	085b      	lsrs	r3, r3, #1
 800cfda:	d006      	beq.n	800cfea <__lo0bits+0x5a>
 800cfdc:	3001      	adds	r0, #1
 800cfde:	600b      	str	r3, [r1, #0]
 800cfe0:	4770      	bx	lr
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	e7e9      	b.n	800cfba <__lo0bits+0x2a>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	4770      	bx	lr
 800cfea:	2020      	movs	r0, #32
 800cfec:	4770      	bx	lr

0800cfee <__i2b>:
 800cfee:	b510      	push	{r4, lr}
 800cff0:	460c      	mov	r4, r1
 800cff2:	2101      	movs	r1, #1
 800cff4:	f7ff fee9 	bl	800cdca <_Balloc>
 800cff8:	2201      	movs	r2, #1
 800cffa:	6144      	str	r4, [r0, #20]
 800cffc:	6102      	str	r2, [r0, #16]
 800cffe:	bd10      	pop	{r4, pc}

0800d000 <__multiply>:
 800d000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	4614      	mov	r4, r2
 800d006:	690a      	ldr	r2, [r1, #16]
 800d008:	6923      	ldr	r3, [r4, #16]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	bfb8      	it	lt
 800d00e:	460b      	movlt	r3, r1
 800d010:	4688      	mov	r8, r1
 800d012:	bfbc      	itt	lt
 800d014:	46a0      	movlt	r8, r4
 800d016:	461c      	movlt	r4, r3
 800d018:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d01c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d020:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d024:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d028:	eb07 0609 	add.w	r6, r7, r9
 800d02c:	42b3      	cmp	r3, r6
 800d02e:	bfb8      	it	lt
 800d030:	3101      	addlt	r1, #1
 800d032:	f7ff feca 	bl	800cdca <_Balloc>
 800d036:	f100 0514 	add.w	r5, r0, #20
 800d03a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d03e:	462b      	mov	r3, r5
 800d040:	2200      	movs	r2, #0
 800d042:	4573      	cmp	r3, lr
 800d044:	d316      	bcc.n	800d074 <__multiply+0x74>
 800d046:	f104 0214 	add.w	r2, r4, #20
 800d04a:	f108 0114 	add.w	r1, r8, #20
 800d04e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d052:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	9b00      	ldr	r3, [sp, #0]
 800d05a:	9201      	str	r2, [sp, #4]
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d80c      	bhi.n	800d07a <__multiply+0x7a>
 800d060:	2e00      	cmp	r6, #0
 800d062:	dd03      	ble.n	800d06c <__multiply+0x6c>
 800d064:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d05d      	beq.n	800d128 <__multiply+0x128>
 800d06c:	6106      	str	r6, [r0, #16]
 800d06e:	b003      	add	sp, #12
 800d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d074:	f843 2b04 	str.w	r2, [r3], #4
 800d078:	e7e3      	b.n	800d042 <__multiply+0x42>
 800d07a:	f8b2 b000 	ldrh.w	fp, [r2]
 800d07e:	f1bb 0f00 	cmp.w	fp, #0
 800d082:	d023      	beq.n	800d0cc <__multiply+0xcc>
 800d084:	4689      	mov	r9, r1
 800d086:	46ac      	mov	ip, r5
 800d088:	f04f 0800 	mov.w	r8, #0
 800d08c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d090:	f8dc a000 	ldr.w	sl, [ip]
 800d094:	b2a3      	uxth	r3, r4
 800d096:	fa1f fa8a 	uxth.w	sl, sl
 800d09a:	fb0b a303 	mla	r3, fp, r3, sl
 800d09e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d0a2:	f8dc 4000 	ldr.w	r4, [ip]
 800d0a6:	4443      	add	r3, r8
 800d0a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d0ac:	fb0b 840a 	mla	r4, fp, sl, r8
 800d0b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d0b4:	46e2      	mov	sl, ip
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d0bc:	454f      	cmp	r7, r9
 800d0be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d0c2:	f84a 3b04 	str.w	r3, [sl], #4
 800d0c6:	d82b      	bhi.n	800d120 <__multiply+0x120>
 800d0c8:	f8cc 8004 	str.w	r8, [ip, #4]
 800d0cc:	9b01      	ldr	r3, [sp, #4]
 800d0ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d0d2:	3204      	adds	r2, #4
 800d0d4:	f1ba 0f00 	cmp.w	sl, #0
 800d0d8:	d020      	beq.n	800d11c <__multiply+0x11c>
 800d0da:	682b      	ldr	r3, [r5, #0]
 800d0dc:	4689      	mov	r9, r1
 800d0de:	46a8      	mov	r8, r5
 800d0e0:	f04f 0b00 	mov.w	fp, #0
 800d0e4:	f8b9 c000 	ldrh.w	ip, [r9]
 800d0e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d0ec:	fb0a 440c 	mla	r4, sl, ip, r4
 800d0f0:	445c      	add	r4, fp
 800d0f2:	46c4      	mov	ip, r8
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d0fa:	f84c 3b04 	str.w	r3, [ip], #4
 800d0fe:	f859 3b04 	ldr.w	r3, [r9], #4
 800d102:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d106:	0c1b      	lsrs	r3, r3, #16
 800d108:	fb0a b303 	mla	r3, sl, r3, fp
 800d10c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d110:	454f      	cmp	r7, r9
 800d112:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d116:	d805      	bhi.n	800d124 <__multiply+0x124>
 800d118:	f8c8 3004 	str.w	r3, [r8, #4]
 800d11c:	3504      	adds	r5, #4
 800d11e:	e79b      	b.n	800d058 <__multiply+0x58>
 800d120:	46d4      	mov	ip, sl
 800d122:	e7b3      	b.n	800d08c <__multiply+0x8c>
 800d124:	46e0      	mov	r8, ip
 800d126:	e7dd      	b.n	800d0e4 <__multiply+0xe4>
 800d128:	3e01      	subs	r6, #1
 800d12a:	e799      	b.n	800d060 <__multiply+0x60>

0800d12c <__pow5mult>:
 800d12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d130:	4615      	mov	r5, r2
 800d132:	f012 0203 	ands.w	r2, r2, #3
 800d136:	4606      	mov	r6, r0
 800d138:	460f      	mov	r7, r1
 800d13a:	d007      	beq.n	800d14c <__pow5mult+0x20>
 800d13c:	3a01      	subs	r2, #1
 800d13e:	4c21      	ldr	r4, [pc, #132]	; (800d1c4 <__pow5mult+0x98>)
 800d140:	2300      	movs	r3, #0
 800d142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d146:	f7ff fe8b 	bl	800ce60 <__multadd>
 800d14a:	4607      	mov	r7, r0
 800d14c:	10ad      	asrs	r5, r5, #2
 800d14e:	d035      	beq.n	800d1bc <__pow5mult+0x90>
 800d150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d152:	b93c      	cbnz	r4, 800d164 <__pow5mult+0x38>
 800d154:	2010      	movs	r0, #16
 800d156:	f7ff fe13 	bl	800cd80 <malloc>
 800d15a:	6270      	str	r0, [r6, #36]	; 0x24
 800d15c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d160:	6004      	str	r4, [r0, #0]
 800d162:	60c4      	str	r4, [r0, #12]
 800d164:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d16c:	b94c      	cbnz	r4, 800d182 <__pow5mult+0x56>
 800d16e:	f240 2171 	movw	r1, #625	; 0x271
 800d172:	4630      	mov	r0, r6
 800d174:	f7ff ff3b 	bl	800cfee <__i2b>
 800d178:	2300      	movs	r3, #0
 800d17a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d17e:	4604      	mov	r4, r0
 800d180:	6003      	str	r3, [r0, #0]
 800d182:	f04f 0800 	mov.w	r8, #0
 800d186:	07eb      	lsls	r3, r5, #31
 800d188:	d50a      	bpl.n	800d1a0 <__pow5mult+0x74>
 800d18a:	4639      	mov	r1, r7
 800d18c:	4622      	mov	r2, r4
 800d18e:	4630      	mov	r0, r6
 800d190:	f7ff ff36 	bl	800d000 <__multiply>
 800d194:	4639      	mov	r1, r7
 800d196:	4681      	mov	r9, r0
 800d198:	4630      	mov	r0, r6
 800d19a:	f7ff fe4a 	bl	800ce32 <_Bfree>
 800d19e:	464f      	mov	r7, r9
 800d1a0:	106d      	asrs	r5, r5, #1
 800d1a2:	d00b      	beq.n	800d1bc <__pow5mult+0x90>
 800d1a4:	6820      	ldr	r0, [r4, #0]
 800d1a6:	b938      	cbnz	r0, 800d1b8 <__pow5mult+0x8c>
 800d1a8:	4622      	mov	r2, r4
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff ff27 	bl	800d000 <__multiply>
 800d1b2:	6020      	str	r0, [r4, #0]
 800d1b4:	f8c0 8000 	str.w	r8, [r0]
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	e7e4      	b.n	800d186 <__pow5mult+0x5a>
 800d1bc:	4638      	mov	r0, r7
 800d1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0800eb10 	.word	0x0800eb10

0800d1c8 <__lshift>:
 800d1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1cc:	460c      	mov	r4, r1
 800d1ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1d2:	6923      	ldr	r3, [r4, #16]
 800d1d4:	6849      	ldr	r1, [r1, #4]
 800d1d6:	eb0a 0903 	add.w	r9, sl, r3
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	4607      	mov	r7, r0
 800d1de:	4616      	mov	r6, r2
 800d1e0:	f109 0501 	add.w	r5, r9, #1
 800d1e4:	42ab      	cmp	r3, r5
 800d1e6:	db32      	blt.n	800d24e <__lshift+0x86>
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f7ff fdee 	bl	800cdca <_Balloc>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	4680      	mov	r8, r0
 800d1f2:	f100 0114 	add.w	r1, r0, #20
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	4553      	cmp	r3, sl
 800d1fa:	db2b      	blt.n	800d254 <__lshift+0x8c>
 800d1fc:	6920      	ldr	r0, [r4, #16]
 800d1fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d202:	f104 0314 	add.w	r3, r4, #20
 800d206:	f016 021f 	ands.w	r2, r6, #31
 800d20a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d20e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d212:	d025      	beq.n	800d260 <__lshift+0x98>
 800d214:	f1c2 0e20 	rsb	lr, r2, #32
 800d218:	2000      	movs	r0, #0
 800d21a:	681e      	ldr	r6, [r3, #0]
 800d21c:	468a      	mov	sl, r1
 800d21e:	4096      	lsls	r6, r2
 800d220:	4330      	orrs	r0, r6
 800d222:	f84a 0b04 	str.w	r0, [sl], #4
 800d226:	f853 0b04 	ldr.w	r0, [r3], #4
 800d22a:	459c      	cmp	ip, r3
 800d22c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d230:	d814      	bhi.n	800d25c <__lshift+0x94>
 800d232:	6048      	str	r0, [r1, #4]
 800d234:	b108      	cbz	r0, 800d23a <__lshift+0x72>
 800d236:	f109 0502 	add.w	r5, r9, #2
 800d23a:	3d01      	subs	r5, #1
 800d23c:	4638      	mov	r0, r7
 800d23e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d242:	4621      	mov	r1, r4
 800d244:	f7ff fdf5 	bl	800ce32 <_Bfree>
 800d248:	4640      	mov	r0, r8
 800d24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d24e:	3101      	adds	r1, #1
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	e7c7      	b.n	800d1e4 <__lshift+0x1c>
 800d254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d258:	3301      	adds	r3, #1
 800d25a:	e7cd      	b.n	800d1f8 <__lshift+0x30>
 800d25c:	4651      	mov	r1, sl
 800d25e:	e7dc      	b.n	800d21a <__lshift+0x52>
 800d260:	3904      	subs	r1, #4
 800d262:	f853 2b04 	ldr.w	r2, [r3], #4
 800d266:	f841 2f04 	str.w	r2, [r1, #4]!
 800d26a:	459c      	cmp	ip, r3
 800d26c:	d8f9      	bhi.n	800d262 <__lshift+0x9a>
 800d26e:	e7e4      	b.n	800d23a <__lshift+0x72>

0800d270 <__mcmp>:
 800d270:	6903      	ldr	r3, [r0, #16]
 800d272:	690a      	ldr	r2, [r1, #16]
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	b530      	push	{r4, r5, lr}
 800d278:	d10c      	bne.n	800d294 <__mcmp+0x24>
 800d27a:	0092      	lsls	r2, r2, #2
 800d27c:	3014      	adds	r0, #20
 800d27e:	3114      	adds	r1, #20
 800d280:	1884      	adds	r4, r0, r2
 800d282:	4411      	add	r1, r2
 800d284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d28c:	4295      	cmp	r5, r2
 800d28e:	d003      	beq.n	800d298 <__mcmp+0x28>
 800d290:	d305      	bcc.n	800d29e <__mcmp+0x2e>
 800d292:	2301      	movs	r3, #1
 800d294:	4618      	mov	r0, r3
 800d296:	bd30      	pop	{r4, r5, pc}
 800d298:	42a0      	cmp	r0, r4
 800d29a:	d3f3      	bcc.n	800d284 <__mcmp+0x14>
 800d29c:	e7fa      	b.n	800d294 <__mcmp+0x24>
 800d29e:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a2:	e7f7      	b.n	800d294 <__mcmp+0x24>

0800d2a4 <__mdiff>:
 800d2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a8:	460d      	mov	r5, r1
 800d2aa:	4607      	mov	r7, r0
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	4614      	mov	r4, r2
 800d2b2:	f7ff ffdd 	bl	800d270 <__mcmp>
 800d2b6:	1e06      	subs	r6, r0, #0
 800d2b8:	d108      	bne.n	800d2cc <__mdiff+0x28>
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f7ff fd84 	bl	800cdca <_Balloc>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2cc:	bfa4      	itt	ge
 800d2ce:	4623      	movge	r3, r4
 800d2d0:	462c      	movge	r4, r5
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	6861      	ldr	r1, [r4, #4]
 800d2d6:	bfa6      	itte	ge
 800d2d8:	461d      	movge	r5, r3
 800d2da:	2600      	movge	r6, #0
 800d2dc:	2601      	movlt	r6, #1
 800d2de:	f7ff fd74 	bl	800cdca <_Balloc>
 800d2e2:	692b      	ldr	r3, [r5, #16]
 800d2e4:	60c6      	str	r6, [r0, #12]
 800d2e6:	6926      	ldr	r6, [r4, #16]
 800d2e8:	f105 0914 	add.w	r9, r5, #20
 800d2ec:	f104 0214 	add.w	r2, r4, #20
 800d2f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d2f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d2f8:	f100 0514 	add.w	r5, r0, #20
 800d2fc:	f04f 0e00 	mov.w	lr, #0
 800d300:	f852 ab04 	ldr.w	sl, [r2], #4
 800d304:	f859 4b04 	ldr.w	r4, [r9], #4
 800d308:	fa1e f18a 	uxtah	r1, lr, sl
 800d30c:	b2a3      	uxth	r3, r4
 800d30e:	1ac9      	subs	r1, r1, r3
 800d310:	0c23      	lsrs	r3, r4, #16
 800d312:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d316:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d31a:	b289      	uxth	r1, r1
 800d31c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d320:	45c8      	cmp	r8, r9
 800d322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d326:	4694      	mov	ip, r2
 800d328:	f845 3b04 	str.w	r3, [r5], #4
 800d32c:	d8e8      	bhi.n	800d300 <__mdiff+0x5c>
 800d32e:	45bc      	cmp	ip, r7
 800d330:	d304      	bcc.n	800d33c <__mdiff+0x98>
 800d332:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d336:	b183      	cbz	r3, 800d35a <__mdiff+0xb6>
 800d338:	6106      	str	r6, [r0, #16]
 800d33a:	e7c5      	b.n	800d2c8 <__mdiff+0x24>
 800d33c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d340:	fa1e f381 	uxtah	r3, lr, r1
 800d344:	141a      	asrs	r2, r3, #16
 800d346:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d350:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d354:	f845 3b04 	str.w	r3, [r5], #4
 800d358:	e7e9      	b.n	800d32e <__mdiff+0x8a>
 800d35a:	3e01      	subs	r6, #1
 800d35c:	e7e9      	b.n	800d332 <__mdiff+0x8e>
	...

0800d360 <__ulp>:
 800d360:	4b12      	ldr	r3, [pc, #72]	; (800d3ac <__ulp+0x4c>)
 800d362:	ee10 2a90 	vmov	r2, s1
 800d366:	401a      	ands	r2, r3
 800d368:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dd04      	ble.n	800d37a <__ulp+0x1a>
 800d370:	2000      	movs	r0, #0
 800d372:	4619      	mov	r1, r3
 800d374:	ec41 0b10 	vmov	d0, r0, r1
 800d378:	4770      	bx	lr
 800d37a:	425b      	negs	r3, r3
 800d37c:	151b      	asrs	r3, r3, #20
 800d37e:	2b13      	cmp	r3, #19
 800d380:	f04f 0000 	mov.w	r0, #0
 800d384:	f04f 0100 	mov.w	r1, #0
 800d388:	dc04      	bgt.n	800d394 <__ulp+0x34>
 800d38a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d38e:	fa42 f103 	asr.w	r1, r2, r3
 800d392:	e7ef      	b.n	800d374 <__ulp+0x14>
 800d394:	3b14      	subs	r3, #20
 800d396:	2b1e      	cmp	r3, #30
 800d398:	f04f 0201 	mov.w	r2, #1
 800d39c:	bfda      	itte	le
 800d39e:	f1c3 031f 	rsble	r3, r3, #31
 800d3a2:	fa02 f303 	lslle.w	r3, r2, r3
 800d3a6:	4613      	movgt	r3, r2
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	e7e3      	b.n	800d374 <__ulp+0x14>
 800d3ac:	7ff00000 	.word	0x7ff00000

0800d3b0 <__b2d>:
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b2:	6905      	ldr	r5, [r0, #16]
 800d3b4:	f100 0714 	add.w	r7, r0, #20
 800d3b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d3bc:	1f2e      	subs	r6, r5, #4
 800d3be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f7ff fdc5 	bl	800cf52 <__hi0bits>
 800d3c8:	f1c0 0320 	rsb	r3, r0, #32
 800d3cc:	280a      	cmp	r0, #10
 800d3ce:	600b      	str	r3, [r1, #0]
 800d3d0:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d448 <__b2d+0x98>
 800d3d4:	dc14      	bgt.n	800d400 <__b2d+0x50>
 800d3d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800d3da:	fa24 f10e 	lsr.w	r1, r4, lr
 800d3de:	42b7      	cmp	r7, r6
 800d3e0:	ea41 030c 	orr.w	r3, r1, ip
 800d3e4:	bf34      	ite	cc
 800d3e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3ea:	2100      	movcs	r1, #0
 800d3ec:	3015      	adds	r0, #21
 800d3ee:	fa04 f000 	lsl.w	r0, r4, r0
 800d3f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800d3f6:	ea40 0201 	orr.w	r2, r0, r1
 800d3fa:	ec43 2b10 	vmov	d0, r2, r3
 800d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d400:	42b7      	cmp	r7, r6
 800d402:	bf3a      	itte	cc
 800d404:	f1a5 0608 	subcc.w	r6, r5, #8
 800d408:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d40c:	2100      	movcs	r1, #0
 800d40e:	380b      	subs	r0, #11
 800d410:	d015      	beq.n	800d43e <__b2d+0x8e>
 800d412:	4084      	lsls	r4, r0
 800d414:	f1c0 0520 	rsb	r5, r0, #32
 800d418:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d41c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d420:	42be      	cmp	r6, r7
 800d422:	fa21 fc05 	lsr.w	ip, r1, r5
 800d426:	ea44 030c 	orr.w	r3, r4, ip
 800d42a:	bf8c      	ite	hi
 800d42c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d430:	2400      	movls	r4, #0
 800d432:	fa01 f000 	lsl.w	r0, r1, r0
 800d436:	40ec      	lsrs	r4, r5
 800d438:	ea40 0204 	orr.w	r2, r0, r4
 800d43c:	e7dd      	b.n	800d3fa <__b2d+0x4a>
 800d43e:	ea44 030c 	orr.w	r3, r4, ip
 800d442:	460a      	mov	r2, r1
 800d444:	e7d9      	b.n	800d3fa <__b2d+0x4a>
 800d446:	bf00      	nop
 800d448:	3ff00000 	.word	0x3ff00000

0800d44c <__d2b>:
 800d44c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d450:	460e      	mov	r6, r1
 800d452:	2101      	movs	r1, #1
 800d454:	ec59 8b10 	vmov	r8, r9, d0
 800d458:	4615      	mov	r5, r2
 800d45a:	f7ff fcb6 	bl	800cdca <_Balloc>
 800d45e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d462:	4607      	mov	r7, r0
 800d464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d468:	bb34      	cbnz	r4, 800d4b8 <__d2b+0x6c>
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	f1b8 0300 	subs.w	r3, r8, #0
 800d470:	d027      	beq.n	800d4c2 <__d2b+0x76>
 800d472:	a802      	add	r0, sp, #8
 800d474:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d478:	f7ff fd8a 	bl	800cf90 <__lo0bits>
 800d47c:	9900      	ldr	r1, [sp, #0]
 800d47e:	b1f0      	cbz	r0, 800d4be <__d2b+0x72>
 800d480:	9a01      	ldr	r2, [sp, #4]
 800d482:	f1c0 0320 	rsb	r3, r0, #32
 800d486:	fa02 f303 	lsl.w	r3, r2, r3
 800d48a:	430b      	orrs	r3, r1
 800d48c:	40c2      	lsrs	r2, r0
 800d48e:	617b      	str	r3, [r7, #20]
 800d490:	9201      	str	r2, [sp, #4]
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	61bb      	str	r3, [r7, #24]
 800d496:	2b00      	cmp	r3, #0
 800d498:	bf14      	ite	ne
 800d49a:	2102      	movne	r1, #2
 800d49c:	2101      	moveq	r1, #1
 800d49e:	6139      	str	r1, [r7, #16]
 800d4a0:	b1c4      	cbz	r4, 800d4d4 <__d2b+0x88>
 800d4a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d4a6:	4404      	add	r4, r0
 800d4a8:	6034      	str	r4, [r6, #0]
 800d4aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4ae:	6028      	str	r0, [r5, #0]
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	b003      	add	sp, #12
 800d4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4bc:	e7d5      	b.n	800d46a <__d2b+0x1e>
 800d4be:	6179      	str	r1, [r7, #20]
 800d4c0:	e7e7      	b.n	800d492 <__d2b+0x46>
 800d4c2:	a801      	add	r0, sp, #4
 800d4c4:	f7ff fd64 	bl	800cf90 <__lo0bits>
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	617b      	str	r3, [r7, #20]
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	6139      	str	r1, [r7, #16]
 800d4d0:	3020      	adds	r0, #32
 800d4d2:	e7e5      	b.n	800d4a0 <__d2b+0x54>
 800d4d4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d4d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4dc:	6030      	str	r0, [r6, #0]
 800d4de:	6918      	ldr	r0, [r3, #16]
 800d4e0:	f7ff fd37 	bl	800cf52 <__hi0bits>
 800d4e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d4e8:	e7e1      	b.n	800d4ae <__d2b+0x62>

0800d4ea <__ratio>:
 800d4ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ee:	4688      	mov	r8, r1
 800d4f0:	4669      	mov	r1, sp
 800d4f2:	4681      	mov	r9, r0
 800d4f4:	f7ff ff5c 	bl	800d3b0 <__b2d>
 800d4f8:	a901      	add	r1, sp, #4
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	ec57 6b10 	vmov	r6, r7, d0
 800d500:	f7ff ff56 	bl	800d3b0 <__b2d>
 800d504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d508:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d50c:	eba3 0c02 	sub.w	ip, r3, r2
 800d510:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d51a:	ec5b ab10 	vmov	sl, fp, d0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	bfce      	itee	gt
 800d522:	463a      	movgt	r2, r7
 800d524:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d528:	465a      	movle	r2, fp
 800d52a:	4659      	mov	r1, fp
 800d52c:	463d      	mov	r5, r7
 800d52e:	bfd4      	ite	le
 800d530:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d534:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d538:	4630      	mov	r0, r6
 800d53a:	ee10 2a10 	vmov	r2, s0
 800d53e:	460b      	mov	r3, r1
 800d540:	4629      	mov	r1, r5
 800d542:	f7f3 f98b 	bl	800085c <__aeabi_ddiv>
 800d546:	ec41 0b10 	vmov	d0, r0, r1
 800d54a:	b003      	add	sp, #12
 800d54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d550 <__copybits>:
 800d550:	3901      	subs	r1, #1
 800d552:	b510      	push	{r4, lr}
 800d554:	1149      	asrs	r1, r1, #5
 800d556:	6914      	ldr	r4, [r2, #16]
 800d558:	3101      	adds	r1, #1
 800d55a:	f102 0314 	add.w	r3, r2, #20
 800d55e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d562:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d566:	42a3      	cmp	r3, r4
 800d568:	4602      	mov	r2, r0
 800d56a:	d303      	bcc.n	800d574 <__copybits+0x24>
 800d56c:	2300      	movs	r3, #0
 800d56e:	428a      	cmp	r2, r1
 800d570:	d305      	bcc.n	800d57e <__copybits+0x2e>
 800d572:	bd10      	pop	{r4, pc}
 800d574:	f853 2b04 	ldr.w	r2, [r3], #4
 800d578:	f840 2b04 	str.w	r2, [r0], #4
 800d57c:	e7f3      	b.n	800d566 <__copybits+0x16>
 800d57e:	f842 3b04 	str.w	r3, [r2], #4
 800d582:	e7f4      	b.n	800d56e <__copybits+0x1e>

0800d584 <__any_on>:
 800d584:	f100 0214 	add.w	r2, r0, #20
 800d588:	6900      	ldr	r0, [r0, #16]
 800d58a:	114b      	asrs	r3, r1, #5
 800d58c:	4298      	cmp	r0, r3
 800d58e:	b510      	push	{r4, lr}
 800d590:	db11      	blt.n	800d5b6 <__any_on+0x32>
 800d592:	dd0a      	ble.n	800d5aa <__any_on+0x26>
 800d594:	f011 011f 	ands.w	r1, r1, #31
 800d598:	d007      	beq.n	800d5aa <__any_on+0x26>
 800d59a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d59e:	fa24 f001 	lsr.w	r0, r4, r1
 800d5a2:	fa00 f101 	lsl.w	r1, r0, r1
 800d5a6:	428c      	cmp	r4, r1
 800d5a8:	d10b      	bne.n	800d5c2 <__any_on+0x3e>
 800d5aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d803      	bhi.n	800d5ba <__any_on+0x36>
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	bd10      	pop	{r4, pc}
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	e7f7      	b.n	800d5aa <__any_on+0x26>
 800d5ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5be:	2900      	cmp	r1, #0
 800d5c0:	d0f5      	beq.n	800d5ae <__any_on+0x2a>
 800d5c2:	2001      	movs	r0, #1
 800d5c4:	e7f6      	b.n	800d5b4 <__any_on+0x30>

0800d5c6 <_calloc_r>:
 800d5c6:	b538      	push	{r3, r4, r5, lr}
 800d5c8:	fb02 f401 	mul.w	r4, r2, r1
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	f000 f857 	bl	800d680 <_malloc_r>
 800d5d2:	4605      	mov	r5, r0
 800d5d4:	b118      	cbz	r0, 800d5de <_calloc_r+0x18>
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	2100      	movs	r1, #0
 800d5da:	f7fc fc6b 	bl	8009eb4 <memset>
 800d5de:	4628      	mov	r0, r5
 800d5e0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d5e4 <_free_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	d045      	beq.n	800d678 <_free_r+0x94>
 800d5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5f0:	1f0c      	subs	r4, r1, #4
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	bfb8      	it	lt
 800d5f6:	18e4      	addlt	r4, r4, r3
 800d5f8:	f000 fc0f 	bl	800de1a <__malloc_lock>
 800d5fc:	4a1f      	ldr	r2, [pc, #124]	; (800d67c <_free_r+0x98>)
 800d5fe:	6813      	ldr	r3, [r2, #0]
 800d600:	4610      	mov	r0, r2
 800d602:	b933      	cbnz	r3, 800d612 <_free_r+0x2e>
 800d604:	6063      	str	r3, [r4, #4]
 800d606:	6014      	str	r4, [r2, #0]
 800d608:	4628      	mov	r0, r5
 800d60a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d60e:	f000 bc05 	b.w	800de1c <__malloc_unlock>
 800d612:	42a3      	cmp	r3, r4
 800d614:	d90c      	bls.n	800d630 <_free_r+0x4c>
 800d616:	6821      	ldr	r1, [r4, #0]
 800d618:	1862      	adds	r2, r4, r1
 800d61a:	4293      	cmp	r3, r2
 800d61c:	bf04      	itt	eq
 800d61e:	681a      	ldreq	r2, [r3, #0]
 800d620:	685b      	ldreq	r3, [r3, #4]
 800d622:	6063      	str	r3, [r4, #4]
 800d624:	bf04      	itt	eq
 800d626:	1852      	addeq	r2, r2, r1
 800d628:	6022      	streq	r2, [r4, #0]
 800d62a:	6004      	str	r4, [r0, #0]
 800d62c:	e7ec      	b.n	800d608 <_free_r+0x24>
 800d62e:	4613      	mov	r3, r2
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	b10a      	cbz	r2, 800d638 <_free_r+0x54>
 800d634:	42a2      	cmp	r2, r4
 800d636:	d9fa      	bls.n	800d62e <_free_r+0x4a>
 800d638:	6819      	ldr	r1, [r3, #0]
 800d63a:	1858      	adds	r0, r3, r1
 800d63c:	42a0      	cmp	r0, r4
 800d63e:	d10b      	bne.n	800d658 <_free_r+0x74>
 800d640:	6820      	ldr	r0, [r4, #0]
 800d642:	4401      	add	r1, r0
 800d644:	1858      	adds	r0, r3, r1
 800d646:	4282      	cmp	r2, r0
 800d648:	6019      	str	r1, [r3, #0]
 800d64a:	d1dd      	bne.n	800d608 <_free_r+0x24>
 800d64c:	6810      	ldr	r0, [r2, #0]
 800d64e:	6852      	ldr	r2, [r2, #4]
 800d650:	605a      	str	r2, [r3, #4]
 800d652:	4401      	add	r1, r0
 800d654:	6019      	str	r1, [r3, #0]
 800d656:	e7d7      	b.n	800d608 <_free_r+0x24>
 800d658:	d902      	bls.n	800d660 <_free_r+0x7c>
 800d65a:	230c      	movs	r3, #12
 800d65c:	602b      	str	r3, [r5, #0]
 800d65e:	e7d3      	b.n	800d608 <_free_r+0x24>
 800d660:	6820      	ldr	r0, [r4, #0]
 800d662:	1821      	adds	r1, r4, r0
 800d664:	428a      	cmp	r2, r1
 800d666:	bf04      	itt	eq
 800d668:	6811      	ldreq	r1, [r2, #0]
 800d66a:	6852      	ldreq	r2, [r2, #4]
 800d66c:	6062      	str	r2, [r4, #4]
 800d66e:	bf04      	itt	eq
 800d670:	1809      	addeq	r1, r1, r0
 800d672:	6021      	streq	r1, [r4, #0]
 800d674:	605c      	str	r4, [r3, #4]
 800d676:	e7c7      	b.n	800d608 <_free_r+0x24>
 800d678:	bd38      	pop	{r3, r4, r5, pc}
 800d67a:	bf00      	nop
 800d67c:	2000084c 	.word	0x2000084c

0800d680 <_malloc_r>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	1ccd      	adds	r5, r1, #3
 800d684:	f025 0503 	bic.w	r5, r5, #3
 800d688:	3508      	adds	r5, #8
 800d68a:	2d0c      	cmp	r5, #12
 800d68c:	bf38      	it	cc
 800d68e:	250c      	movcc	r5, #12
 800d690:	2d00      	cmp	r5, #0
 800d692:	4606      	mov	r6, r0
 800d694:	db01      	blt.n	800d69a <_malloc_r+0x1a>
 800d696:	42a9      	cmp	r1, r5
 800d698:	d903      	bls.n	800d6a2 <_malloc_r+0x22>
 800d69a:	230c      	movs	r3, #12
 800d69c:	6033      	str	r3, [r6, #0]
 800d69e:	2000      	movs	r0, #0
 800d6a0:	bd70      	pop	{r4, r5, r6, pc}
 800d6a2:	f000 fbba 	bl	800de1a <__malloc_lock>
 800d6a6:	4a21      	ldr	r2, [pc, #132]	; (800d72c <_malloc_r+0xac>)
 800d6a8:	6814      	ldr	r4, [r2, #0]
 800d6aa:	4621      	mov	r1, r4
 800d6ac:	b991      	cbnz	r1, 800d6d4 <_malloc_r+0x54>
 800d6ae:	4c20      	ldr	r4, [pc, #128]	; (800d730 <_malloc_r+0xb0>)
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	b91b      	cbnz	r3, 800d6bc <_malloc_r+0x3c>
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f000 facf 	bl	800dc58 <_sbrk_r>
 800d6ba:	6020      	str	r0, [r4, #0]
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f000 faca 	bl	800dc58 <_sbrk_r>
 800d6c4:	1c43      	adds	r3, r0, #1
 800d6c6:	d124      	bne.n	800d712 <_malloc_r+0x92>
 800d6c8:	230c      	movs	r3, #12
 800d6ca:	6033      	str	r3, [r6, #0]
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f000 fba5 	bl	800de1c <__malloc_unlock>
 800d6d2:	e7e4      	b.n	800d69e <_malloc_r+0x1e>
 800d6d4:	680b      	ldr	r3, [r1, #0]
 800d6d6:	1b5b      	subs	r3, r3, r5
 800d6d8:	d418      	bmi.n	800d70c <_malloc_r+0x8c>
 800d6da:	2b0b      	cmp	r3, #11
 800d6dc:	d90f      	bls.n	800d6fe <_malloc_r+0x7e>
 800d6de:	600b      	str	r3, [r1, #0]
 800d6e0:	50cd      	str	r5, [r1, r3]
 800d6e2:	18cc      	adds	r4, r1, r3
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f000 fb99 	bl	800de1c <__malloc_unlock>
 800d6ea:	f104 000b 	add.w	r0, r4, #11
 800d6ee:	1d23      	adds	r3, r4, #4
 800d6f0:	f020 0007 	bic.w	r0, r0, #7
 800d6f4:	1ac3      	subs	r3, r0, r3
 800d6f6:	d0d3      	beq.n	800d6a0 <_malloc_r+0x20>
 800d6f8:	425a      	negs	r2, r3
 800d6fa:	50e2      	str	r2, [r4, r3]
 800d6fc:	e7d0      	b.n	800d6a0 <_malloc_r+0x20>
 800d6fe:	428c      	cmp	r4, r1
 800d700:	684b      	ldr	r3, [r1, #4]
 800d702:	bf16      	itet	ne
 800d704:	6063      	strne	r3, [r4, #4]
 800d706:	6013      	streq	r3, [r2, #0]
 800d708:	460c      	movne	r4, r1
 800d70a:	e7eb      	b.n	800d6e4 <_malloc_r+0x64>
 800d70c:	460c      	mov	r4, r1
 800d70e:	6849      	ldr	r1, [r1, #4]
 800d710:	e7cc      	b.n	800d6ac <_malloc_r+0x2c>
 800d712:	1cc4      	adds	r4, r0, #3
 800d714:	f024 0403 	bic.w	r4, r4, #3
 800d718:	42a0      	cmp	r0, r4
 800d71a:	d005      	beq.n	800d728 <_malloc_r+0xa8>
 800d71c:	1a21      	subs	r1, r4, r0
 800d71e:	4630      	mov	r0, r6
 800d720:	f000 fa9a 	bl	800dc58 <_sbrk_r>
 800d724:	3001      	adds	r0, #1
 800d726:	d0cf      	beq.n	800d6c8 <_malloc_r+0x48>
 800d728:	6025      	str	r5, [r4, #0]
 800d72a:	e7db      	b.n	800d6e4 <_malloc_r+0x64>
 800d72c:	2000084c 	.word	0x2000084c
 800d730:	20000850 	.word	0x20000850

0800d734 <__ssputs_r>:
 800d734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d738:	688e      	ldr	r6, [r1, #8]
 800d73a:	429e      	cmp	r6, r3
 800d73c:	4682      	mov	sl, r0
 800d73e:	460c      	mov	r4, r1
 800d740:	4690      	mov	r8, r2
 800d742:	4699      	mov	r9, r3
 800d744:	d837      	bhi.n	800d7b6 <__ssputs_r+0x82>
 800d746:	898a      	ldrh	r2, [r1, #12]
 800d748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d74c:	d031      	beq.n	800d7b2 <__ssputs_r+0x7e>
 800d74e:	6825      	ldr	r5, [r4, #0]
 800d750:	6909      	ldr	r1, [r1, #16]
 800d752:	1a6f      	subs	r7, r5, r1
 800d754:	6965      	ldr	r5, [r4, #20]
 800d756:	2302      	movs	r3, #2
 800d758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d75c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d760:	f109 0301 	add.w	r3, r9, #1
 800d764:	443b      	add	r3, r7
 800d766:	429d      	cmp	r5, r3
 800d768:	bf38      	it	cc
 800d76a:	461d      	movcc	r5, r3
 800d76c:	0553      	lsls	r3, r2, #21
 800d76e:	d530      	bpl.n	800d7d2 <__ssputs_r+0x9e>
 800d770:	4629      	mov	r1, r5
 800d772:	f7ff ff85 	bl	800d680 <_malloc_r>
 800d776:	4606      	mov	r6, r0
 800d778:	b950      	cbnz	r0, 800d790 <__ssputs_r+0x5c>
 800d77a:	230c      	movs	r3, #12
 800d77c:	f8ca 3000 	str.w	r3, [sl]
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d786:	81a3      	strh	r3, [r4, #12]
 800d788:	f04f 30ff 	mov.w	r0, #4294967295
 800d78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d790:	463a      	mov	r2, r7
 800d792:	6921      	ldr	r1, [r4, #16]
 800d794:	f7ff fb0e 	bl	800cdb4 <memcpy>
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	6126      	str	r6, [r4, #16]
 800d7a6:	6165      	str	r5, [r4, #20]
 800d7a8:	443e      	add	r6, r7
 800d7aa:	1bed      	subs	r5, r5, r7
 800d7ac:	6026      	str	r6, [r4, #0]
 800d7ae:	60a5      	str	r5, [r4, #8]
 800d7b0:	464e      	mov	r6, r9
 800d7b2:	454e      	cmp	r6, r9
 800d7b4:	d900      	bls.n	800d7b8 <__ssputs_r+0x84>
 800d7b6:	464e      	mov	r6, r9
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	4641      	mov	r1, r8
 800d7bc:	6820      	ldr	r0, [r4, #0]
 800d7be:	f000 fb13 	bl	800dde8 <memmove>
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	1b9b      	subs	r3, r3, r6
 800d7c6:	60a3      	str	r3, [r4, #8]
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	441e      	add	r6, r3
 800d7cc:	6026      	str	r6, [r4, #0]
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	e7dc      	b.n	800d78c <__ssputs_r+0x58>
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	f000 fb23 	bl	800de1e <_realloc_r>
 800d7d8:	4606      	mov	r6, r0
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d1e2      	bne.n	800d7a4 <__ssputs_r+0x70>
 800d7de:	6921      	ldr	r1, [r4, #16]
 800d7e0:	4650      	mov	r0, sl
 800d7e2:	f7ff feff 	bl	800d5e4 <_free_r>
 800d7e6:	e7c8      	b.n	800d77a <__ssputs_r+0x46>

0800d7e8 <_svfiprintf_r>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	461d      	mov	r5, r3
 800d7ee:	898b      	ldrh	r3, [r1, #12]
 800d7f0:	061f      	lsls	r7, r3, #24
 800d7f2:	b09d      	sub	sp, #116	; 0x74
 800d7f4:	4680      	mov	r8, r0
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	4616      	mov	r6, r2
 800d7fa:	d50f      	bpl.n	800d81c <_svfiprintf_r+0x34>
 800d7fc:	690b      	ldr	r3, [r1, #16]
 800d7fe:	b96b      	cbnz	r3, 800d81c <_svfiprintf_r+0x34>
 800d800:	2140      	movs	r1, #64	; 0x40
 800d802:	f7ff ff3d 	bl	800d680 <_malloc_r>
 800d806:	6020      	str	r0, [r4, #0]
 800d808:	6120      	str	r0, [r4, #16]
 800d80a:	b928      	cbnz	r0, 800d818 <_svfiprintf_r+0x30>
 800d80c:	230c      	movs	r3, #12
 800d80e:	f8c8 3000 	str.w	r3, [r8]
 800d812:	f04f 30ff 	mov.w	r0, #4294967295
 800d816:	e0c8      	b.n	800d9aa <_svfiprintf_r+0x1c2>
 800d818:	2340      	movs	r3, #64	; 0x40
 800d81a:	6163      	str	r3, [r4, #20]
 800d81c:	2300      	movs	r3, #0
 800d81e:	9309      	str	r3, [sp, #36]	; 0x24
 800d820:	2320      	movs	r3, #32
 800d822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d826:	2330      	movs	r3, #48	; 0x30
 800d828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d82c:	9503      	str	r5, [sp, #12]
 800d82e:	f04f 0b01 	mov.w	fp, #1
 800d832:	4637      	mov	r7, r6
 800d834:	463d      	mov	r5, r7
 800d836:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d83a:	b10b      	cbz	r3, 800d840 <_svfiprintf_r+0x58>
 800d83c:	2b25      	cmp	r3, #37	; 0x25
 800d83e:	d13e      	bne.n	800d8be <_svfiprintf_r+0xd6>
 800d840:	ebb7 0a06 	subs.w	sl, r7, r6
 800d844:	d00b      	beq.n	800d85e <_svfiprintf_r+0x76>
 800d846:	4653      	mov	r3, sl
 800d848:	4632      	mov	r2, r6
 800d84a:	4621      	mov	r1, r4
 800d84c:	4640      	mov	r0, r8
 800d84e:	f7ff ff71 	bl	800d734 <__ssputs_r>
 800d852:	3001      	adds	r0, #1
 800d854:	f000 80a4 	beq.w	800d9a0 <_svfiprintf_r+0x1b8>
 800d858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d85a:	4453      	add	r3, sl
 800d85c:	9309      	str	r3, [sp, #36]	; 0x24
 800d85e:	783b      	ldrb	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 809d 	beq.w	800d9a0 <_svfiprintf_r+0x1b8>
 800d866:	2300      	movs	r3, #0
 800d868:	f04f 32ff 	mov.w	r2, #4294967295
 800d86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	9307      	str	r3, [sp, #28]
 800d874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d878:	931a      	str	r3, [sp, #104]	; 0x68
 800d87a:	462f      	mov	r7, r5
 800d87c:	2205      	movs	r2, #5
 800d87e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d882:	4850      	ldr	r0, [pc, #320]	; (800d9c4 <_svfiprintf_r+0x1dc>)
 800d884:	f7f2 fcb4 	bl	80001f0 <memchr>
 800d888:	9b04      	ldr	r3, [sp, #16]
 800d88a:	b9d0      	cbnz	r0, 800d8c2 <_svfiprintf_r+0xda>
 800d88c:	06d9      	lsls	r1, r3, #27
 800d88e:	bf44      	itt	mi
 800d890:	2220      	movmi	r2, #32
 800d892:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d896:	071a      	lsls	r2, r3, #28
 800d898:	bf44      	itt	mi
 800d89a:	222b      	movmi	r2, #43	; 0x2b
 800d89c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d8a0:	782a      	ldrb	r2, [r5, #0]
 800d8a2:	2a2a      	cmp	r2, #42	; 0x2a
 800d8a4:	d015      	beq.n	800d8d2 <_svfiprintf_r+0xea>
 800d8a6:	9a07      	ldr	r2, [sp, #28]
 800d8a8:	462f      	mov	r7, r5
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	250a      	movs	r5, #10
 800d8ae:	4639      	mov	r1, r7
 800d8b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8b4:	3b30      	subs	r3, #48	; 0x30
 800d8b6:	2b09      	cmp	r3, #9
 800d8b8:	d94d      	bls.n	800d956 <_svfiprintf_r+0x16e>
 800d8ba:	b1b8      	cbz	r0, 800d8ec <_svfiprintf_r+0x104>
 800d8bc:	e00f      	b.n	800d8de <_svfiprintf_r+0xf6>
 800d8be:	462f      	mov	r7, r5
 800d8c0:	e7b8      	b.n	800d834 <_svfiprintf_r+0x4c>
 800d8c2:	4a40      	ldr	r2, [pc, #256]	; (800d9c4 <_svfiprintf_r+0x1dc>)
 800d8c4:	1a80      	subs	r0, r0, r2
 800d8c6:	fa0b f000 	lsl.w	r0, fp, r0
 800d8ca:	4318      	orrs	r0, r3
 800d8cc:	9004      	str	r0, [sp, #16]
 800d8ce:	463d      	mov	r5, r7
 800d8d0:	e7d3      	b.n	800d87a <_svfiprintf_r+0x92>
 800d8d2:	9a03      	ldr	r2, [sp, #12]
 800d8d4:	1d11      	adds	r1, r2, #4
 800d8d6:	6812      	ldr	r2, [r2, #0]
 800d8d8:	9103      	str	r1, [sp, #12]
 800d8da:	2a00      	cmp	r2, #0
 800d8dc:	db01      	blt.n	800d8e2 <_svfiprintf_r+0xfa>
 800d8de:	9207      	str	r2, [sp, #28]
 800d8e0:	e004      	b.n	800d8ec <_svfiprintf_r+0x104>
 800d8e2:	4252      	negs	r2, r2
 800d8e4:	f043 0302 	orr.w	r3, r3, #2
 800d8e8:	9207      	str	r2, [sp, #28]
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	783b      	ldrb	r3, [r7, #0]
 800d8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d8f0:	d10c      	bne.n	800d90c <_svfiprintf_r+0x124>
 800d8f2:	787b      	ldrb	r3, [r7, #1]
 800d8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8f6:	d133      	bne.n	800d960 <_svfiprintf_r+0x178>
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	1d1a      	adds	r2, r3, #4
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	9203      	str	r2, [sp, #12]
 800d900:	2b00      	cmp	r3, #0
 800d902:	bfb8      	it	lt
 800d904:	f04f 33ff 	movlt.w	r3, #4294967295
 800d908:	3702      	adds	r7, #2
 800d90a:	9305      	str	r3, [sp, #20]
 800d90c:	4d2e      	ldr	r5, [pc, #184]	; (800d9c8 <_svfiprintf_r+0x1e0>)
 800d90e:	7839      	ldrb	r1, [r7, #0]
 800d910:	2203      	movs	r2, #3
 800d912:	4628      	mov	r0, r5
 800d914:	f7f2 fc6c 	bl	80001f0 <memchr>
 800d918:	b138      	cbz	r0, 800d92a <_svfiprintf_r+0x142>
 800d91a:	2340      	movs	r3, #64	; 0x40
 800d91c:	1b40      	subs	r0, r0, r5
 800d91e:	fa03 f000 	lsl.w	r0, r3, r0
 800d922:	9b04      	ldr	r3, [sp, #16]
 800d924:	4303      	orrs	r3, r0
 800d926:	3701      	adds	r7, #1
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	7839      	ldrb	r1, [r7, #0]
 800d92c:	4827      	ldr	r0, [pc, #156]	; (800d9cc <_svfiprintf_r+0x1e4>)
 800d92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d932:	2206      	movs	r2, #6
 800d934:	1c7e      	adds	r6, r7, #1
 800d936:	f7f2 fc5b 	bl	80001f0 <memchr>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	d038      	beq.n	800d9b0 <_svfiprintf_r+0x1c8>
 800d93e:	4b24      	ldr	r3, [pc, #144]	; (800d9d0 <_svfiprintf_r+0x1e8>)
 800d940:	bb13      	cbnz	r3, 800d988 <_svfiprintf_r+0x1a0>
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	3307      	adds	r3, #7
 800d946:	f023 0307 	bic.w	r3, r3, #7
 800d94a:	3308      	adds	r3, #8
 800d94c:	9303      	str	r3, [sp, #12]
 800d94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d950:	444b      	add	r3, r9
 800d952:	9309      	str	r3, [sp, #36]	; 0x24
 800d954:	e76d      	b.n	800d832 <_svfiprintf_r+0x4a>
 800d956:	fb05 3202 	mla	r2, r5, r2, r3
 800d95a:	2001      	movs	r0, #1
 800d95c:	460f      	mov	r7, r1
 800d95e:	e7a6      	b.n	800d8ae <_svfiprintf_r+0xc6>
 800d960:	2300      	movs	r3, #0
 800d962:	3701      	adds	r7, #1
 800d964:	9305      	str	r3, [sp, #20]
 800d966:	4619      	mov	r1, r3
 800d968:	250a      	movs	r5, #10
 800d96a:	4638      	mov	r0, r7
 800d96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d970:	3a30      	subs	r2, #48	; 0x30
 800d972:	2a09      	cmp	r2, #9
 800d974:	d903      	bls.n	800d97e <_svfiprintf_r+0x196>
 800d976:	2b00      	cmp	r3, #0
 800d978:	d0c8      	beq.n	800d90c <_svfiprintf_r+0x124>
 800d97a:	9105      	str	r1, [sp, #20]
 800d97c:	e7c6      	b.n	800d90c <_svfiprintf_r+0x124>
 800d97e:	fb05 2101 	mla	r1, r5, r1, r2
 800d982:	2301      	movs	r3, #1
 800d984:	4607      	mov	r7, r0
 800d986:	e7f0      	b.n	800d96a <_svfiprintf_r+0x182>
 800d988:	ab03      	add	r3, sp, #12
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	4622      	mov	r2, r4
 800d98e:	4b11      	ldr	r3, [pc, #68]	; (800d9d4 <_svfiprintf_r+0x1ec>)
 800d990:	a904      	add	r1, sp, #16
 800d992:	4640      	mov	r0, r8
 800d994:	f7fc fb2a 	bl	8009fec <_printf_float>
 800d998:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d99c:	4681      	mov	r9, r0
 800d99e:	d1d6      	bne.n	800d94e <_svfiprintf_r+0x166>
 800d9a0:	89a3      	ldrh	r3, [r4, #12]
 800d9a2:	065b      	lsls	r3, r3, #25
 800d9a4:	f53f af35 	bmi.w	800d812 <_svfiprintf_r+0x2a>
 800d9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9aa:	b01d      	add	sp, #116	; 0x74
 800d9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b0:	ab03      	add	r3, sp, #12
 800d9b2:	9300      	str	r3, [sp, #0]
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4b07      	ldr	r3, [pc, #28]	; (800d9d4 <_svfiprintf_r+0x1ec>)
 800d9b8:	a904      	add	r1, sp, #16
 800d9ba:	4640      	mov	r0, r8
 800d9bc:	f7fc fdcc 	bl	800a558 <_printf_i>
 800d9c0:	e7ea      	b.n	800d998 <_svfiprintf_r+0x1b0>
 800d9c2:	bf00      	nop
 800d9c4:	0800eb1c 	.word	0x0800eb1c
 800d9c8:	0800eb22 	.word	0x0800eb22
 800d9cc:	0800eb26 	.word	0x0800eb26
 800d9d0:	08009fed 	.word	0x08009fed
 800d9d4:	0800d735 	.word	0x0800d735

0800d9d8 <__sfputc_r>:
 800d9d8:	6893      	ldr	r3, [r2, #8]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	b410      	push	{r4}
 800d9e0:	6093      	str	r3, [r2, #8]
 800d9e2:	da08      	bge.n	800d9f6 <__sfputc_r+0x1e>
 800d9e4:	6994      	ldr	r4, [r2, #24]
 800d9e6:	42a3      	cmp	r3, r4
 800d9e8:	db01      	blt.n	800d9ee <__sfputc_r+0x16>
 800d9ea:	290a      	cmp	r1, #10
 800d9ec:	d103      	bne.n	800d9f6 <__sfputc_r+0x1e>
 800d9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9f2:	f7fd bdad 	b.w	800b550 <__swbuf_r>
 800d9f6:	6813      	ldr	r3, [r2, #0]
 800d9f8:	1c58      	adds	r0, r3, #1
 800d9fa:	6010      	str	r0, [r2, #0]
 800d9fc:	7019      	strb	r1, [r3, #0]
 800d9fe:	4608      	mov	r0, r1
 800da00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da04:	4770      	bx	lr

0800da06 <__sfputs_r>:
 800da06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	4614      	mov	r4, r2
 800da0e:	18d5      	adds	r5, r2, r3
 800da10:	42ac      	cmp	r4, r5
 800da12:	d101      	bne.n	800da18 <__sfputs_r+0x12>
 800da14:	2000      	movs	r0, #0
 800da16:	e007      	b.n	800da28 <__sfputs_r+0x22>
 800da18:	463a      	mov	r2, r7
 800da1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1e:	4630      	mov	r0, r6
 800da20:	f7ff ffda 	bl	800d9d8 <__sfputc_r>
 800da24:	1c43      	adds	r3, r0, #1
 800da26:	d1f3      	bne.n	800da10 <__sfputs_r+0xa>
 800da28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da2c <_vfiprintf_r>:
 800da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da30:	460c      	mov	r4, r1
 800da32:	b09d      	sub	sp, #116	; 0x74
 800da34:	4617      	mov	r7, r2
 800da36:	461d      	mov	r5, r3
 800da38:	4606      	mov	r6, r0
 800da3a:	b118      	cbz	r0, 800da44 <_vfiprintf_r+0x18>
 800da3c:	6983      	ldr	r3, [r0, #24]
 800da3e:	b90b      	cbnz	r3, 800da44 <_vfiprintf_r+0x18>
 800da40:	f7fe fd7a 	bl	800c538 <__sinit>
 800da44:	4b7c      	ldr	r3, [pc, #496]	; (800dc38 <_vfiprintf_r+0x20c>)
 800da46:	429c      	cmp	r4, r3
 800da48:	d158      	bne.n	800dafc <_vfiprintf_r+0xd0>
 800da4a:	6874      	ldr	r4, [r6, #4]
 800da4c:	89a3      	ldrh	r3, [r4, #12]
 800da4e:	0718      	lsls	r0, r3, #28
 800da50:	d55e      	bpl.n	800db10 <_vfiprintf_r+0xe4>
 800da52:	6923      	ldr	r3, [r4, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d05b      	beq.n	800db10 <_vfiprintf_r+0xe4>
 800da58:	2300      	movs	r3, #0
 800da5a:	9309      	str	r3, [sp, #36]	; 0x24
 800da5c:	2320      	movs	r3, #32
 800da5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da62:	2330      	movs	r3, #48	; 0x30
 800da64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da68:	9503      	str	r5, [sp, #12]
 800da6a:	f04f 0b01 	mov.w	fp, #1
 800da6e:	46b8      	mov	r8, r7
 800da70:	4645      	mov	r5, r8
 800da72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da76:	b10b      	cbz	r3, 800da7c <_vfiprintf_r+0x50>
 800da78:	2b25      	cmp	r3, #37	; 0x25
 800da7a:	d154      	bne.n	800db26 <_vfiprintf_r+0xfa>
 800da7c:	ebb8 0a07 	subs.w	sl, r8, r7
 800da80:	d00b      	beq.n	800da9a <_vfiprintf_r+0x6e>
 800da82:	4653      	mov	r3, sl
 800da84:	463a      	mov	r2, r7
 800da86:	4621      	mov	r1, r4
 800da88:	4630      	mov	r0, r6
 800da8a:	f7ff ffbc 	bl	800da06 <__sfputs_r>
 800da8e:	3001      	adds	r0, #1
 800da90:	f000 80c2 	beq.w	800dc18 <_vfiprintf_r+0x1ec>
 800da94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da96:	4453      	add	r3, sl
 800da98:	9309      	str	r3, [sp, #36]	; 0x24
 800da9a:	f898 3000 	ldrb.w	r3, [r8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f000 80ba 	beq.w	800dc18 <_vfiprintf_r+0x1ec>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f04f 32ff 	mov.w	r2, #4294967295
 800daaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daae:	9304      	str	r3, [sp, #16]
 800dab0:	9307      	str	r3, [sp, #28]
 800dab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dab6:	931a      	str	r3, [sp, #104]	; 0x68
 800dab8:	46a8      	mov	r8, r5
 800daba:	2205      	movs	r2, #5
 800dabc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dac0:	485e      	ldr	r0, [pc, #376]	; (800dc3c <_vfiprintf_r+0x210>)
 800dac2:	f7f2 fb95 	bl	80001f0 <memchr>
 800dac6:	9b04      	ldr	r3, [sp, #16]
 800dac8:	bb78      	cbnz	r0, 800db2a <_vfiprintf_r+0xfe>
 800daca:	06d9      	lsls	r1, r3, #27
 800dacc:	bf44      	itt	mi
 800dace:	2220      	movmi	r2, #32
 800dad0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dad4:	071a      	lsls	r2, r3, #28
 800dad6:	bf44      	itt	mi
 800dad8:	222b      	movmi	r2, #43	; 0x2b
 800dada:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dade:	782a      	ldrb	r2, [r5, #0]
 800dae0:	2a2a      	cmp	r2, #42	; 0x2a
 800dae2:	d02a      	beq.n	800db3a <_vfiprintf_r+0x10e>
 800dae4:	9a07      	ldr	r2, [sp, #28]
 800dae6:	46a8      	mov	r8, r5
 800dae8:	2000      	movs	r0, #0
 800daea:	250a      	movs	r5, #10
 800daec:	4641      	mov	r1, r8
 800daee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daf2:	3b30      	subs	r3, #48	; 0x30
 800daf4:	2b09      	cmp	r3, #9
 800daf6:	d969      	bls.n	800dbcc <_vfiprintf_r+0x1a0>
 800daf8:	b360      	cbz	r0, 800db54 <_vfiprintf_r+0x128>
 800dafa:	e024      	b.n	800db46 <_vfiprintf_r+0x11a>
 800dafc:	4b50      	ldr	r3, [pc, #320]	; (800dc40 <_vfiprintf_r+0x214>)
 800dafe:	429c      	cmp	r4, r3
 800db00:	d101      	bne.n	800db06 <_vfiprintf_r+0xda>
 800db02:	68b4      	ldr	r4, [r6, #8]
 800db04:	e7a2      	b.n	800da4c <_vfiprintf_r+0x20>
 800db06:	4b4f      	ldr	r3, [pc, #316]	; (800dc44 <_vfiprintf_r+0x218>)
 800db08:	429c      	cmp	r4, r3
 800db0a:	bf08      	it	eq
 800db0c:	68f4      	ldreq	r4, [r6, #12]
 800db0e:	e79d      	b.n	800da4c <_vfiprintf_r+0x20>
 800db10:	4621      	mov	r1, r4
 800db12:	4630      	mov	r0, r6
 800db14:	f7fd fd6e 	bl	800b5f4 <__swsetup_r>
 800db18:	2800      	cmp	r0, #0
 800db1a:	d09d      	beq.n	800da58 <_vfiprintf_r+0x2c>
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	b01d      	add	sp, #116	; 0x74
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	46a8      	mov	r8, r5
 800db28:	e7a2      	b.n	800da70 <_vfiprintf_r+0x44>
 800db2a:	4a44      	ldr	r2, [pc, #272]	; (800dc3c <_vfiprintf_r+0x210>)
 800db2c:	1a80      	subs	r0, r0, r2
 800db2e:	fa0b f000 	lsl.w	r0, fp, r0
 800db32:	4318      	orrs	r0, r3
 800db34:	9004      	str	r0, [sp, #16]
 800db36:	4645      	mov	r5, r8
 800db38:	e7be      	b.n	800dab8 <_vfiprintf_r+0x8c>
 800db3a:	9a03      	ldr	r2, [sp, #12]
 800db3c:	1d11      	adds	r1, r2, #4
 800db3e:	6812      	ldr	r2, [r2, #0]
 800db40:	9103      	str	r1, [sp, #12]
 800db42:	2a00      	cmp	r2, #0
 800db44:	db01      	blt.n	800db4a <_vfiprintf_r+0x11e>
 800db46:	9207      	str	r2, [sp, #28]
 800db48:	e004      	b.n	800db54 <_vfiprintf_r+0x128>
 800db4a:	4252      	negs	r2, r2
 800db4c:	f043 0302 	orr.w	r3, r3, #2
 800db50:	9207      	str	r2, [sp, #28]
 800db52:	9304      	str	r3, [sp, #16]
 800db54:	f898 3000 	ldrb.w	r3, [r8]
 800db58:	2b2e      	cmp	r3, #46	; 0x2e
 800db5a:	d10e      	bne.n	800db7a <_vfiprintf_r+0x14e>
 800db5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db60:	2b2a      	cmp	r3, #42	; 0x2a
 800db62:	d138      	bne.n	800dbd6 <_vfiprintf_r+0x1aa>
 800db64:	9b03      	ldr	r3, [sp, #12]
 800db66:	1d1a      	adds	r2, r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	9203      	str	r2, [sp, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	bfb8      	it	lt
 800db70:	f04f 33ff 	movlt.w	r3, #4294967295
 800db74:	f108 0802 	add.w	r8, r8, #2
 800db78:	9305      	str	r3, [sp, #20]
 800db7a:	4d33      	ldr	r5, [pc, #204]	; (800dc48 <_vfiprintf_r+0x21c>)
 800db7c:	f898 1000 	ldrb.w	r1, [r8]
 800db80:	2203      	movs	r2, #3
 800db82:	4628      	mov	r0, r5
 800db84:	f7f2 fb34 	bl	80001f0 <memchr>
 800db88:	b140      	cbz	r0, 800db9c <_vfiprintf_r+0x170>
 800db8a:	2340      	movs	r3, #64	; 0x40
 800db8c:	1b40      	subs	r0, r0, r5
 800db8e:	fa03 f000 	lsl.w	r0, r3, r0
 800db92:	9b04      	ldr	r3, [sp, #16]
 800db94:	4303      	orrs	r3, r0
 800db96:	f108 0801 	add.w	r8, r8, #1
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	f898 1000 	ldrb.w	r1, [r8]
 800dba0:	482a      	ldr	r0, [pc, #168]	; (800dc4c <_vfiprintf_r+0x220>)
 800dba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dba6:	2206      	movs	r2, #6
 800dba8:	f108 0701 	add.w	r7, r8, #1
 800dbac:	f7f2 fb20 	bl	80001f0 <memchr>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d037      	beq.n	800dc24 <_vfiprintf_r+0x1f8>
 800dbb4:	4b26      	ldr	r3, [pc, #152]	; (800dc50 <_vfiprintf_r+0x224>)
 800dbb6:	bb1b      	cbnz	r3, 800dc00 <_vfiprintf_r+0x1d4>
 800dbb8:	9b03      	ldr	r3, [sp, #12]
 800dbba:	3307      	adds	r3, #7
 800dbbc:	f023 0307 	bic.w	r3, r3, #7
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	9303      	str	r3, [sp, #12]
 800dbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc6:	444b      	add	r3, r9
 800dbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbca:	e750      	b.n	800da6e <_vfiprintf_r+0x42>
 800dbcc:	fb05 3202 	mla	r2, r5, r2, r3
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	4688      	mov	r8, r1
 800dbd4:	e78a      	b.n	800daec <_vfiprintf_r+0xc0>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	f108 0801 	add.w	r8, r8, #1
 800dbdc:	9305      	str	r3, [sp, #20]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	250a      	movs	r5, #10
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe8:	3a30      	subs	r2, #48	; 0x30
 800dbea:	2a09      	cmp	r2, #9
 800dbec:	d903      	bls.n	800dbf6 <_vfiprintf_r+0x1ca>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0c3      	beq.n	800db7a <_vfiprintf_r+0x14e>
 800dbf2:	9105      	str	r1, [sp, #20]
 800dbf4:	e7c1      	b.n	800db7a <_vfiprintf_r+0x14e>
 800dbf6:	fb05 2101 	mla	r1, r5, r1, r2
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	4680      	mov	r8, r0
 800dbfe:	e7f0      	b.n	800dbe2 <_vfiprintf_r+0x1b6>
 800dc00:	ab03      	add	r3, sp, #12
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	4622      	mov	r2, r4
 800dc06:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <_vfiprintf_r+0x228>)
 800dc08:	a904      	add	r1, sp, #16
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f7fc f9ee 	bl	8009fec <_printf_float>
 800dc10:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc14:	4681      	mov	r9, r0
 800dc16:	d1d5      	bne.n	800dbc4 <_vfiprintf_r+0x198>
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	065b      	lsls	r3, r3, #25
 800dc1c:	f53f af7e 	bmi.w	800db1c <_vfiprintf_r+0xf0>
 800dc20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc22:	e77d      	b.n	800db20 <_vfiprintf_r+0xf4>
 800dc24:	ab03      	add	r3, sp, #12
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	4622      	mov	r2, r4
 800dc2a:	4b0a      	ldr	r3, [pc, #40]	; (800dc54 <_vfiprintf_r+0x228>)
 800dc2c:	a904      	add	r1, sp, #16
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f7fc fc92 	bl	800a558 <_printf_i>
 800dc34:	e7ec      	b.n	800dc10 <_vfiprintf_r+0x1e4>
 800dc36:	bf00      	nop
 800dc38:	0800e9d0 	.word	0x0800e9d0
 800dc3c:	0800eb1c 	.word	0x0800eb1c
 800dc40:	0800e9f0 	.word	0x0800e9f0
 800dc44:	0800e9b0 	.word	0x0800e9b0
 800dc48:	0800eb22 	.word	0x0800eb22
 800dc4c:	0800eb26 	.word	0x0800eb26
 800dc50:	08009fed 	.word	0x08009fed
 800dc54:	0800da07 	.word	0x0800da07

0800dc58 <_sbrk_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4c06      	ldr	r4, [pc, #24]	; (800dc74 <_sbrk_r+0x1c>)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4605      	mov	r5, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	f7f3 fe5e 	bl	8001924 <_sbrk>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_sbrk_r+0x1a>
 800dc6c:	6823      	ldr	r3, [r4, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_sbrk_r+0x1a>
 800dc70:	602b      	str	r3, [r5, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	200015ec 	.word	0x200015ec

0800dc78 <__sread>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc80:	f000 f8f4 	bl	800de6c <_read_r>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	bfab      	itete	ge
 800dc88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dc8a:	89a3      	ldrhlt	r3, [r4, #12]
 800dc8c:	181b      	addge	r3, r3, r0
 800dc8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dc92:	bfac      	ite	ge
 800dc94:	6563      	strge	r3, [r4, #84]	; 0x54
 800dc96:	81a3      	strhlt	r3, [r4, #12]
 800dc98:	bd10      	pop	{r4, pc}

0800dc9a <__swrite>:
 800dc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9e:	461f      	mov	r7, r3
 800dca0:	898b      	ldrh	r3, [r1, #12]
 800dca2:	05db      	lsls	r3, r3, #23
 800dca4:	4605      	mov	r5, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	4616      	mov	r6, r2
 800dcaa:	d505      	bpl.n	800dcb8 <__swrite+0x1e>
 800dcac:	2302      	movs	r3, #2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb4:	f000 f886 	bl	800ddc4 <_lseek_r>
 800dcb8:	89a3      	ldrh	r3, [r4, #12]
 800dcba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcc2:	81a3      	strh	r3, [r4, #12]
 800dcc4:	4632      	mov	r2, r6
 800dcc6:	463b      	mov	r3, r7
 800dcc8:	4628      	mov	r0, r5
 800dcca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcce:	f000 b835 	b.w	800dd3c <_write_r>

0800dcd2 <__sseek>:
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcda:	f000 f873 	bl	800ddc4 <_lseek_r>
 800dcde:	1c43      	adds	r3, r0, #1
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	bf15      	itete	ne
 800dce4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dcea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dcee:	81a3      	strheq	r3, [r4, #12]
 800dcf0:	bf18      	it	ne
 800dcf2:	81a3      	strhne	r3, [r4, #12]
 800dcf4:	bd10      	pop	{r4, pc}

0800dcf6 <__sclose>:
 800dcf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcfa:	f000 b831 	b.w	800dd60 <_close_r>

0800dcfe <strncmp>:
 800dcfe:	b510      	push	{r4, lr}
 800dd00:	b16a      	cbz	r2, 800dd1e <strncmp+0x20>
 800dd02:	3901      	subs	r1, #1
 800dd04:	1884      	adds	r4, r0, r2
 800dd06:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dd0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d103      	bne.n	800dd1a <strncmp+0x1c>
 800dd12:	42a0      	cmp	r0, r4
 800dd14:	d001      	beq.n	800dd1a <strncmp+0x1c>
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1f5      	bne.n	800dd06 <strncmp+0x8>
 800dd1a:	1a98      	subs	r0, r3, r2
 800dd1c:	bd10      	pop	{r4, pc}
 800dd1e:	4610      	mov	r0, r2
 800dd20:	e7fc      	b.n	800dd1c <strncmp+0x1e>

0800dd22 <__ascii_wctomb>:
 800dd22:	b149      	cbz	r1, 800dd38 <__ascii_wctomb+0x16>
 800dd24:	2aff      	cmp	r2, #255	; 0xff
 800dd26:	bf85      	ittet	hi
 800dd28:	238a      	movhi	r3, #138	; 0x8a
 800dd2a:	6003      	strhi	r3, [r0, #0]
 800dd2c:	700a      	strbls	r2, [r1, #0]
 800dd2e:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd32:	bf98      	it	ls
 800dd34:	2001      	movls	r0, #1
 800dd36:	4770      	bx	lr
 800dd38:	4608      	mov	r0, r1
 800dd3a:	4770      	bx	lr

0800dd3c <_write_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	4c07      	ldr	r4, [pc, #28]	; (800dd5c <_write_r+0x20>)
 800dd40:	4605      	mov	r5, r0
 800dd42:	4608      	mov	r0, r1
 800dd44:	4611      	mov	r1, r2
 800dd46:	2200      	movs	r2, #0
 800dd48:	6022      	str	r2, [r4, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	f7f3 fd99 	bl	8001882 <_write>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d102      	bne.n	800dd5a <_write_r+0x1e>
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	b103      	cbz	r3, 800dd5a <_write_r+0x1e>
 800dd58:	602b      	str	r3, [r5, #0]
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	200015ec 	.word	0x200015ec

0800dd60 <_close_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4c06      	ldr	r4, [pc, #24]	; (800dd7c <_close_r+0x1c>)
 800dd64:	2300      	movs	r3, #0
 800dd66:	4605      	mov	r5, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	6023      	str	r3, [r4, #0]
 800dd6c:	f7f3 fda5 	bl	80018ba <_close>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_close_r+0x1a>
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_close_r+0x1a>
 800dd78:	602b      	str	r3, [r5, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	200015ec 	.word	0x200015ec

0800dd80 <_fstat_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4c07      	ldr	r4, [pc, #28]	; (800dda0 <_fstat_r+0x20>)
 800dd84:	2300      	movs	r3, #0
 800dd86:	4605      	mov	r5, r0
 800dd88:	4608      	mov	r0, r1
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	6023      	str	r3, [r4, #0]
 800dd8e:	f7f3 fda0 	bl	80018d2 <_fstat>
 800dd92:	1c43      	adds	r3, r0, #1
 800dd94:	d102      	bne.n	800dd9c <_fstat_r+0x1c>
 800dd96:	6823      	ldr	r3, [r4, #0]
 800dd98:	b103      	cbz	r3, 800dd9c <_fstat_r+0x1c>
 800dd9a:	602b      	str	r3, [r5, #0]
 800dd9c:	bd38      	pop	{r3, r4, r5, pc}
 800dd9e:	bf00      	nop
 800dda0:	200015ec 	.word	0x200015ec

0800dda4 <_isatty_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4c06      	ldr	r4, [pc, #24]	; (800ddc0 <_isatty_r+0x1c>)
 800dda8:	2300      	movs	r3, #0
 800ddaa:	4605      	mov	r5, r0
 800ddac:	4608      	mov	r0, r1
 800ddae:	6023      	str	r3, [r4, #0]
 800ddb0:	f7f3 fd9f 	bl	80018f2 <_isatty>
 800ddb4:	1c43      	adds	r3, r0, #1
 800ddb6:	d102      	bne.n	800ddbe <_isatty_r+0x1a>
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	b103      	cbz	r3, 800ddbe <_isatty_r+0x1a>
 800ddbc:	602b      	str	r3, [r5, #0]
 800ddbe:	bd38      	pop	{r3, r4, r5, pc}
 800ddc0:	200015ec 	.word	0x200015ec

0800ddc4 <_lseek_r>:
 800ddc4:	b538      	push	{r3, r4, r5, lr}
 800ddc6:	4c07      	ldr	r4, [pc, #28]	; (800dde4 <_lseek_r+0x20>)
 800ddc8:	4605      	mov	r5, r0
 800ddca:	4608      	mov	r0, r1
 800ddcc:	4611      	mov	r1, r2
 800ddce:	2200      	movs	r2, #0
 800ddd0:	6022      	str	r2, [r4, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f7f3 fd98 	bl	8001908 <_lseek>
 800ddd8:	1c43      	adds	r3, r0, #1
 800ddda:	d102      	bne.n	800dde2 <_lseek_r+0x1e>
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	b103      	cbz	r3, 800dde2 <_lseek_r+0x1e>
 800dde0:	602b      	str	r3, [r5, #0]
 800dde2:	bd38      	pop	{r3, r4, r5, pc}
 800dde4:	200015ec 	.word	0x200015ec

0800dde8 <memmove>:
 800dde8:	4288      	cmp	r0, r1
 800ddea:	b510      	push	{r4, lr}
 800ddec:	eb01 0302 	add.w	r3, r1, r2
 800ddf0:	d807      	bhi.n	800de02 <memmove+0x1a>
 800ddf2:	1e42      	subs	r2, r0, #1
 800ddf4:	4299      	cmp	r1, r3
 800ddf6:	d00a      	beq.n	800de0e <memmove+0x26>
 800ddf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddfc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800de00:	e7f8      	b.n	800ddf4 <memmove+0xc>
 800de02:	4283      	cmp	r3, r0
 800de04:	d9f5      	bls.n	800ddf2 <memmove+0xa>
 800de06:	1881      	adds	r1, r0, r2
 800de08:	1ad2      	subs	r2, r2, r3
 800de0a:	42d3      	cmn	r3, r2
 800de0c:	d100      	bne.n	800de10 <memmove+0x28>
 800de0e:	bd10      	pop	{r4, pc}
 800de10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800de18:	e7f7      	b.n	800de0a <memmove+0x22>

0800de1a <__malloc_lock>:
 800de1a:	4770      	bx	lr

0800de1c <__malloc_unlock>:
 800de1c:	4770      	bx	lr

0800de1e <_realloc_r>:
 800de1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de20:	4607      	mov	r7, r0
 800de22:	4614      	mov	r4, r2
 800de24:	460e      	mov	r6, r1
 800de26:	b921      	cbnz	r1, 800de32 <_realloc_r+0x14>
 800de28:	4611      	mov	r1, r2
 800de2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de2e:	f7ff bc27 	b.w	800d680 <_malloc_r>
 800de32:	b922      	cbnz	r2, 800de3e <_realloc_r+0x20>
 800de34:	f7ff fbd6 	bl	800d5e4 <_free_r>
 800de38:	4625      	mov	r5, r4
 800de3a:	4628      	mov	r0, r5
 800de3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de3e:	f000 f827 	bl	800de90 <_malloc_usable_size_r>
 800de42:	42a0      	cmp	r0, r4
 800de44:	d20f      	bcs.n	800de66 <_realloc_r+0x48>
 800de46:	4621      	mov	r1, r4
 800de48:	4638      	mov	r0, r7
 800de4a:	f7ff fc19 	bl	800d680 <_malloc_r>
 800de4e:	4605      	mov	r5, r0
 800de50:	2800      	cmp	r0, #0
 800de52:	d0f2      	beq.n	800de3a <_realloc_r+0x1c>
 800de54:	4631      	mov	r1, r6
 800de56:	4622      	mov	r2, r4
 800de58:	f7fe ffac 	bl	800cdb4 <memcpy>
 800de5c:	4631      	mov	r1, r6
 800de5e:	4638      	mov	r0, r7
 800de60:	f7ff fbc0 	bl	800d5e4 <_free_r>
 800de64:	e7e9      	b.n	800de3a <_realloc_r+0x1c>
 800de66:	4635      	mov	r5, r6
 800de68:	e7e7      	b.n	800de3a <_realloc_r+0x1c>
	...

0800de6c <_read_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4c07      	ldr	r4, [pc, #28]	; (800de8c <_read_r+0x20>)
 800de70:	4605      	mov	r5, r0
 800de72:	4608      	mov	r0, r1
 800de74:	4611      	mov	r1, r2
 800de76:	2200      	movs	r2, #0
 800de78:	6022      	str	r2, [r4, #0]
 800de7a:	461a      	mov	r2, r3
 800de7c:	f7f3 fce4 	bl	8001848 <_read>
 800de80:	1c43      	adds	r3, r0, #1
 800de82:	d102      	bne.n	800de8a <_read_r+0x1e>
 800de84:	6823      	ldr	r3, [r4, #0]
 800de86:	b103      	cbz	r3, 800de8a <_read_r+0x1e>
 800de88:	602b      	str	r3, [r5, #0]
 800de8a:	bd38      	pop	{r3, r4, r5, pc}
 800de8c:	200015ec 	.word	0x200015ec

0800de90 <_malloc_usable_size_r>:
 800de90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de94:	1f18      	subs	r0, r3, #4
 800de96:	2b00      	cmp	r3, #0
 800de98:	bfbc      	itt	lt
 800de9a:	580b      	ldrlt	r3, [r1, r0]
 800de9c:	18c0      	addlt	r0, r0, r3
 800de9e:	4770      	bx	lr

0800dea0 <_init>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	bf00      	nop
 800dea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dea6:	bc08      	pop	{r3}
 800dea8:	469e      	mov	lr, r3
 800deaa:	4770      	bx	lr

0800deac <_fini>:
 800deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deae:	bf00      	nop
 800deb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deb2:	bc08      	pop	{r3}
 800deb4:	469e      	mov	lr, r3
 800deb6:	4770      	bx	lr
