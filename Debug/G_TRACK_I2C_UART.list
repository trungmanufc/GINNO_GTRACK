
G_TRACK_I2C_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  0800dcf0  0800dcf0  0001dcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e940  0800e940  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e940  0800e940  0001e940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e948  0800e948  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e948  0800e948  0001e948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e94c  0800e94c  0001e94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001028  200001e0  0800eb2c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001208  0800eb2c  00021208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed33  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a1b  00000000  00000000  0003ef3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  00042960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f8  00000000  00000000  00043fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aa85  00000000  00000000  000454d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ad5  00000000  00000000  0005ff5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000947a2  00000000  00000000  00073a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001081d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fe4  00000000  00000000  00108250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dcd8 	.word	0x0800dcd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800dcd8 	.word	0x0800dcd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b972 	b.w	8000ef4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4688      	mov	r8, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14b      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4615      	mov	r5, r2
 8000c3a:	d967      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0720 	rsb	r7, r2, #32
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c4e:	4095      	lsls	r5, r2
 8000c50:	ea47 0803 	orr.w	r8, r7, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c60:	fa1f fc85 	uxth.w	ip, r5
 8000c64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7a:	f080 811b 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8118 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	442b      	add	r3, r5
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9c:	45a4      	cmp	ip, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	192c      	adds	r4, r5, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	442c      	add	r4, r5
 8000cb4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cb8:	eba4 040c 	sub.w	r4, r4, ip
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	b11e      	cbz	r6, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0xbe>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80eb 	beq.w	8000eae <__udivmoddi4+0x286>
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e9c6 0100 	strd	r0, r1, [r6]
 8000cde:	4638      	mov	r0, r7
 8000ce0:	4639      	mov	r1, r7
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f783 	clz	r7, r3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d147      	bne.n	8000d7e <__udivmoddi4+0x156>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xd0>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80fa 	bhi.w	8000eec <__udivmoddi4+0x2c4>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	4698      	mov	r8, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d0e0      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d06:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0a:	e7dd      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d0c:	b902      	cbnz	r2, 8000d10 <__udivmoddi4+0xe8>
 8000d0e:	deff      	udf	#255	; 0xff
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f040 808f 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d1a:	1b49      	subs	r1, r1, r5
 8000d1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d20:	fa1f f885 	uxth.w	r8, r5
 8000d24:	2701      	movs	r7, #1
 8000d26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb08 f10c 	mul.w	r1, r8, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3c:	18eb      	adds	r3, r5, r3
 8000d3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4299      	cmp	r1, r3
 8000d46:	f200 80cd 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d4a:	4684      	mov	ip, r0
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	b2a3      	uxth	r3, r4
 8000d50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d5c:	fb08 f800 	mul.w	r8, r8, r0
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x14c>
 8000d64:	192c      	adds	r4, r5, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x14a>
 8000d6c:	45a0      	cmp	r8, r4
 8000d6e:	f200 80b6 	bhi.w	8000ede <__udivmoddi4+0x2b6>
 8000d72:	4618      	mov	r0, r3
 8000d74:	eba4 0408 	sub.w	r4, r4, r8
 8000d78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d7c:	e79f      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d9c:	4325      	orrs	r5, r4
 8000d9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da2:	0c2c      	lsrs	r4, r5, #16
 8000da4:	fb08 3319 	mls	r3, r8, r9, r3
 8000da8:	fa1f fa8e 	uxth.w	sl, lr
 8000dac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db0:	fb09 f40a 	mul.w	r4, r9, sl
 8000db4:	429c      	cmp	r4, r3
 8000db6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dba:	fa00 f107 	lsl.w	r1, r0, r7
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc8:	f080 8087 	bcs.w	8000eda <__udivmoddi4+0x2b2>
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	f240 8084 	bls.w	8000eda <__udivmoddi4+0x2b2>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4473      	add	r3, lr
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000de8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dec:	45a2      	cmp	sl, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1e 0404 	adds.w	r4, lr, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	d26b      	bcs.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfa:	45a2      	cmp	sl, r4
 8000dfc:	d969      	bls.n	8000ed2 <__udivmoddi4+0x2aa>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4474      	add	r4, lr
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	eba4 040a 	sub.w	r4, r4, sl
 8000e0e:	454c      	cmp	r4, r9
 8000e10:	46c2      	mov	sl, r8
 8000e12:	464b      	mov	r3, r9
 8000e14:	d354      	bcc.n	8000ec0 <__udivmoddi4+0x298>
 8000e16:	d051      	beq.n	8000ebc <__udivmoddi4+0x294>
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	d069      	beq.n	8000ef0 <__udivmoddi4+0x2c8>
 8000e1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e20:	eb64 0403 	sbc.w	r4, r4, r3
 8000e24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e28:	40fd      	lsrs	r5, r7
 8000e2a:	40fc      	lsrs	r4, r7
 8000e2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e30:	e9c6 5400 	strd	r5, r4, [r6]
 8000e34:	2700      	movs	r7, #0
 8000e36:	e747      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000e38:	f1c2 0320 	rsb	r3, r2, #32
 8000e3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e40:	4095      	lsls	r5, r2
 8000e42:	fa01 f002 	lsl.w	r0, r1, r2
 8000e46:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e4e:	4338      	orrs	r0, r7
 8000e50:	0c01      	lsrs	r1, r0, #16
 8000e52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e56:	fa1f f885 	uxth.w	r8, r5
 8000e5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb07 f308 	mul.w	r3, r7, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x256>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e74:	d22f      	bcs.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d92d      	bls.n	8000ed6 <__udivmoddi4+0x2ae>
 8000e7a:	3f02      	subs	r7, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	b281      	uxth	r1, r0
 8000e82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8e:	fb00 f308 	mul.w	r3, r0, r8
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x27e>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e9c:	d217      	bcs.n	8000ece <__udivmoddi4+0x2a6>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d915      	bls.n	8000ece <__udivmoddi4+0x2a6>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eac:	e73b      	b.n	8000d26 <__udivmoddi4+0xfe>
 8000eae:	4637      	mov	r7, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e709      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	e6e7      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000ebc:	4541      	cmp	r1, r8
 8000ebe:	d2ab      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ec8:	3801      	subs	r0, #1
 8000eca:	4613      	mov	r3, r2
 8000ecc:	e7a4      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ece:	4660      	mov	r0, ip
 8000ed0:	e7e9      	b.n	8000ea6 <__udivmoddi4+0x27e>
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	e795      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed6:	4667      	mov	r7, ip
 8000ed8:	e7d1      	b.n	8000e7e <__udivmoddi4+0x256>
 8000eda:	4681      	mov	r9, r0
 8000edc:	e77c      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	442c      	add	r4, r5
 8000ee2:	e747      	b.n	8000d74 <__udivmoddi4+0x14c>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	442b      	add	r3, r5
 8000eea:	e72f      	b.n	8000d4c <__udivmoddi4+0x124>
 8000eec:	4638      	mov	r0, r7
 8000eee:	e708      	b.n	8000d02 <__udivmoddi4+0xda>
 8000ef0:	4637      	mov	r7, r6
 8000ef2:	e6e9      	b.n	8000cc8 <__udivmoddi4+0xa0>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <main_process>:


#include"MainProcess.h"

void main_process(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
		/* Initialize some peripherals conneted externally to the system */
	    System_Initialization();
 8000efc:	f008 feb0 	bl	8009c60 <System_Initialization>
	    /* LTE module Init */
	    LTE_Init();
	#endif

	    /* Enter Stop Mode */
	    if (!g_bIsMotion)
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <main_process+0x44>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f083 0301 	eor.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <main_process+0x1a>
	    {
	    	Stop_Callback();
 8000f0e:	f008 fe47 	bl	8009ba0 <Stop_Callback>
	    }

	    /* If motion is detected, reconfig the system */
	    Wakeup_CallBack();
 8000f12:	f008 fe01 	bl	8009b18 <Wakeup_CallBack>

		/* Print log to indicate that we initialize the program */
		printf("************GTRACK STM32 PROGRAM*************\r\n");
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main_process+0x48>)
 8000f18:	f009 fbc0 	bl	800a69c <puts>

	    	/* USER CODE BEGIN 3 */
		#if (TEST_GPS == 1)

			/* Check whether the inmotion state lasts 5 minutes or not */
			if ((HAL_GetTick() - g_u32CurrentTime) > TIME_5MINUTE)
 8000f1c:	f004 fae4 	bl	80054e8 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <main_process+0x4c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <main_process+0x50>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d903      	bls.n	8000f36 <main_process+0x3e>
			{
				/* If the motion is not detected over 5 minutes, the system will enter stop mode */
				Stop_Callback();
 8000f2e:	f008 fe37 	bl	8009ba0 <Stop_Callback>

				/* Wake up the system if the motion is detected */
				Wakeup_CallBack();
 8000f32:	f008 fdf1 	bl	8009b18 <Wakeup_CallBack>
			}
			Data_Process();
 8000f36:	f008 fe59 	bl	8009bec <Data_Process>
			if ((HAL_GetTick() - g_u32CurrentTime) > TIME_5MINUTE)
 8000f3a:	e7ef      	b.n	8000f1c <main_process+0x24>
 8000f3c:	200003c5 	.word	0x200003c5
 8000f40:	0800dcf0 	.word	0x0800dcf0
 8000f44:	200003c8 	.word	0x200003c8
 8000f48:	000493e0 	.word	0x000493e0

08000f4c <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNU__C */

PUTCHAR_PROTOTYPE
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <__io_putchar+0x20>)
 8000f5e:	f007 fc5c 	bl	800881a <HAL_UART_Transmit>

	return ch;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20001134 	.word	0x20001134

08000f70 <main>:


int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f74:	f004 fa52 	bl	800541c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f78:	f000 f826 	bl	8000fc8 <SystemClock_Config>

  	/* USER CODE BEGIN SysInit */
    g_test_L76.u8Day = 10;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <main+0x54>)
 8000f7e:	220a      	movs	r2, #10
 8000f80:	741a      	strb	r2, [r3, #16]
    g_test_L76.u8Hour = 0;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <main+0x54>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	74da      	strb	r2, [r3, #19]
    g_test_L76.u8Minute = 0;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <main+0x54>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	751a      	strb	r2, [r3, #20]
    g_test_L76.u8Month = 0;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <main+0x54>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	745a      	strb	r2, [r3, #17]
    g_test_L76.u8Second = 0;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <main+0x54>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	755a      	strb	r2, [r3, #21]
    g_test_L76.u8Year = 0;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <main+0x54>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	749a      	strb	r2, [r3, #18]
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000fa0:	f000 f982 	bl	80012a8 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000fa4:	f000 f87a 	bl	800109c <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8000fa8:	f000 f954 	bl	8001254 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000fac:	f000 f928 	bl	8001200 <MX_USART1_UART_Init>
    MX_SPI2_Init();
 8000fb0:	f000 f8a2 	bl	80010f8 <MX_SPI2_Init>
    MX_TIM3_Init();
 8000fb4:	f000 f8d6 	bl	8001164 <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */

    /* Run the main process */
    main_process();
 8000fb8:	f7ff ff9e 	bl	8000ef8 <main_process>
 8000fbc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000c48 	.word	0x20000c48

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	; 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fe88 	bl	8009cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b28      	ldr	r3, [pc, #160]	; (8001094 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <SystemClock_Config+0xcc>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <SystemClock_Config+0xcc>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <SystemClock_Config+0xd0>)
 8001016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800103c:	2308      	movs	r3, #8
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001040:	2354      	movs	r3, #84	; 0x54
 8001042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001048:	2304      	movs	r3, #4
 800104a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104c:	f107 0320 	add.w	r3, r7, #32
 8001050:	4618      	mov	r0, r3
 8001052:	f005 ff75 	bl	8006f40 <HAL_RCC_OscConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800105c:	f000 f9de 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001060:	230f      	movs	r3, #15
 8001062:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2102      	movs	r1, #2
 800107c:	4618      	mov	r0, r3
 800107e:	f006 f9cf 	bl	8007420 <HAL_RCC_ClockConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001088:	f000 f9c8 	bl	800141c <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	3750      	adds	r7, #80	; 0x50
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000

0800109c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f004 ff7b 	bl	8005fd4 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 f99a 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200010a0 	.word	0x200010a0
 80010f0:	40005400 	.word	0x40005400
 80010f4:	00061a80 	.word	0x00061a80

080010f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_SPI2_Init+0x64>)
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <MX_SPI2_Init+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_SPI2_Init+0x64>)
 8001104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001108:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_SPI2_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_SPI2_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_SPI2_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_SPI2_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_SPI2_Init+0x64>)
 8001124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001128:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_SPI2_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_SPI2_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_SPI2_Init+0x64>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MX_SPI2_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_SPI2_Init+0x64>)
 8001144:	220a      	movs	r2, #10
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_SPI2_Init+0x64>)
 800114a:	f006 fb35 	bl	80077b8 <HAL_SPI_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001154:	f000 f962 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20001048 	.word	0x20001048
 8001160:	40003800 	.word	0x40003800

08001164 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001182:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <MX_TIM3_Init+0x98>)
 8001184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM3_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_TIM3_Init+0x94>)
 8001194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_TIM3_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011a8:	f007 f85a 	bl	8008260 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 f933 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	4619      	mov	r1, r3
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011c4:	f007 f877 	bl	80082b6 <HAL_TIM_ConfigClockSource>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ce:	f000 f925 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_TIM3_Init+0x94>)
 80011e0:	f007 fa60 	bl	80086a4 <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011ea:	f000 f917 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200010f4 	.word	0x200010f4
 80011fc:	40000400 	.word	0x40000400

08001200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_USART1_UART_Init+0x50>)
 8001208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001238:	f007 faa2 	bl	8008780 <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001242:	f000 f8eb 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20001134 	.word	0x20001134
 8001250:	40011000 	.word	0x40011000

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f007 fa78 	bl	8008780 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f8c1 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200011a4 	.word	0x200011a4
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a47      	ldr	r2, [pc, #284]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a40      	ldr	r2, [pc, #256]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3e      	ldr	r3, [pc, #248]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <MX_GPIO_Init+0x13c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a39      	ldr	r2, [pc, #228]	; (80013e4 <MX_GPIO_Init+0x13c>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <MX_GPIO_Init+0x13c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2190      	movs	r1, #144	; 0x90
 8001316:	4834      	ldr	r0, [pc, #208]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001318:	f004 fe2a 	bl	8005f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|WAKEUP_CTRL_Pin|RESET_CTRL_Pin|PWRKEY_CTRL_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f241 0138 	movw	r1, #4152	; 0x1038
 8001322:	4832      	ldr	r0, [pc, #200]	; (80013ec <MX_GPIO_Init+0x144>)
 8001324:	f004 fe24 	bl	8005f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132e:	4830      	ldr	r0, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x148>)
 8001330:	f004 fe1e 	bl	8005f70 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800133a:	482d      	ldr	r0, [pc, #180]	; (80013f0 <MX_GPIO_Init+0x148>)
 800133c:	f004 fe18 	bl	8005f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001340:	2301      	movs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_GPIO_Init+0x14c>)
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4825      	ldr	r0, [pc, #148]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001354:	f004 fba8 	bl	8005aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001358:	2390      	movs	r3, #144	; 0x90
 800135a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	481e      	ldr	r0, [pc, #120]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001370:	f004 fb9a 	bl	8005aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|WAKEUP_CTRL_Pin|PWRKEY_CTRL_Pin;
 8001374:	f241 0328 	movw	r3, #4136	; 0x1028
 8001378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <MX_GPIO_Init+0x144>)
 800138e:	f004 fb8b 	bl	8005aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001392:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_GPIO_Init+0x148>)
 80013ac:	f004 fb7c 	bl	8005aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_CTRL_Pin */
  GPIO_InitStruct.Pin = RESET_CTRL_Pin;
 80013b0:	2310      	movs	r3, #16
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013b4:	2311      	movs	r3, #17
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_CTRL_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <MX_GPIO_Init+0x144>)
 80013c8:	f004 fb6e 	bl	8005aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2006      	movs	r0, #6
 80013d2:	f004 f9b2 	bl	800573a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013d6:	2006      	movs	r0, #6
 80013d8:	f004 f9cb 	bl	8005772 <HAL_NVIC_EnableIRQ>

}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	10310000 	.word	0x10310000

080013f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 8001400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001404:	4903      	ldr	r1, [pc, #12]	; (8001414 <HAL_UART_RxCpltCallback+0x1c>)
 8001406:	4804      	ldr	r0, [pc, #16]	; (8001418 <HAL_UART_RxCpltCallback+0x20>)
 8001408:	f007 faa0 	bl	800894c <HAL_UART_Receive_IT>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000858 	.word	0x20000858
 8001418:	200011a4 	.word	0x200011a4

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <HAL_I2C_MspInit+0x84>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d12b      	bne.n	80014f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ba:	23c0      	movs	r3, #192	; 0xc0
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ca:	2304      	movs	r3, #4
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <HAL_I2C_MspInit+0x8c>)
 80014d6:	f004 fae7 	bl	8005aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_I2C_MspInit+0x88>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40005400 	.word	0x40005400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_SPI_MspInit+0x84>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_SPI_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_SPI_MspInit+0x88>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_SPI_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_SPI_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_SPI_MspInit+0x88>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_SPI_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001566:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001578:	2305      	movs	r3, #5
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <HAL_SPI_MspInit+0x8c>)
 8001584:	f004 fa90 	bl	8005aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40003800 	.word	0x40003800
 8001594:	40023800 	.word	0x40023800
 8001598:	40020400 	.word	0x40020400

0800159c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_TIM_Base_MspInit+0x3c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d10d      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_TIM_Base_MspInit+0x40>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a36      	ldr	r2, [pc, #216]	; (80016d8 <HAL_UART_MspInit+0xf8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12d      	bne.n	800165e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b35      	ldr	r3, [pc, #212]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a34      	ldr	r2, [pc, #208]	; (80016dc <HAL_UART_MspInit+0xfc>)
 800160c:	f043 0310 	orr.w	r3, r3, #16
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800163a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800164c:	2307      	movs	r3, #7
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4822      	ldr	r0, [pc, #136]	; (80016e0 <HAL_UART_MspInit+0x100>)
 8001658:	f004 fa26 	bl	8005aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800165c:	e038      	b.n	80016d0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a20      	ldr	r2, [pc, #128]	; (80016e4 <HAL_UART_MspInit+0x104>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d133      	bne.n	80016d0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_UART_MspInit+0xfc>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0xfc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_UART_MspInit+0xfc>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_UART_MspInit+0xfc>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0xfc>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a0:	230c      	movs	r3, #12
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b0:	2307      	movs	r3, #7
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4809      	ldr	r0, [pc, #36]	; (80016e0 <HAL_UART_MspInit+0x100>)
 80016bc:	f004 f9f4 	bl	8005aa8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2026      	movs	r0, #38	; 0x26
 80016c6:	f004 f838 	bl	800573a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ca:	2026      	movs	r0, #38	; 0x26
 80016cc:	f004 f851 	bl	8005772 <HAL_NVIC_EnableIRQ>
}
 80016d0:	bf00      	nop
 80016d2:	3730      	adds	r7, #48	; 0x30
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40004400 	.word	0x40004400

080016e8 <HAL_UART_Emul_MspInit>:
 *           - Pin Tx and Rx
  * @param  htim: UART Emulation handle pointer
  * @retval None
  */
void HAL_UART_Emul_MspInit(UART_Emul_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #######################*/
  /* Enable clock for UART Emul */
  __UART_EMUL_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a2c      	ldr	r2, [pc, #176]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 8001716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIO TX/RX clock */
  UART_EMUL_TX_GPIO_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
  UART_EMUL_RX_GPIO_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_Emul_MspInit+0xe0>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

  /* Initialize UART Emulation port name */
  UartEmulHandle.TxPortName = UART_EMUL_TX_PORT;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_UART_Emul_MspInit+0xe4>)
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <HAL_UART_Emul_MspInit+0xe8>)
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
  UartEmulHandle.RxPortName = UART_EMUL_RX_PORT;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_UART_Emul_MspInit+0xe4>)
 8001768:	4a19      	ldr	r2, [pc, #100]	; (80017d0 <HAL_UART_Emul_MspInit+0xe8>)
 800176a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Initialize UART Emulation pin number for Tx */
  UartEmulHandle.Init.RxPinNumber = UART_EMUL_RX_PIN;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_UART_Emul_MspInit+0xe4>)
 800176e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001772:	821a      	strh	r2, [r3, #16]
  UartEmulHandle.Init.TxPinNumber = UART_EMUL_TX_PIN;
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_Emul_MspInit+0xe4>)
 8001776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177a:	825a      	strh	r2, [r3, #18]

  /* Configure GPIOE for UART Emulation Tx */
  GPIO_InitStruct.Pin    = UART_EMUL_TX_PIN;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(UART_EMUL_TX_PORT, &GPIO_InitStruct);
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	4619      	mov	r1, r3
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <HAL_UART_Emul_MspInit+0xe8>)
 8001796:	f004 f987 	bl	8005aa8 <HAL_GPIO_Init>

  /* Configure GPIOC for UART Emulation Rx */
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_UART_Emul_MspInit+0xec>)
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin  = UART_EMUL_RX_PIN;
 800179e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a2:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(UART_EMUL_RX_PORT, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <HAL_UART_Emul_MspInit+0xe8>)
 80017ac:	f004 f97c 	bl	8005aa8 <HAL_GPIO_Init>

  /*##-2- Enable NVIC for line Rx  #################################*/
  /* Enable and set EXTI Line Interrupt to the highest priority */
  HAL_NVIC_SetPriority(UART_EMUL_EXTI_IRQ, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2028      	movs	r0, #40	; 0x28
 80017b6:	f003 ffc0 	bl	800573a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART_EMUL_EXTI_IRQ);
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f003 ffd9 	bl	8005772 <HAL_NVIC_EnableIRQ>
}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	20001174 	.word	0x20001174
 80017d0:	40020000 	.word	0x40020000
 80017d4:	10210000 	.word	0x10210000

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f003 fe48 	bl	80054c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001838:	2001      	movs	r0, #1
 800183a:	f004 fbb3 	bl	8005fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  printf("MOTION DETECTED !!\r\n");
 800183e:	4802      	ldr	r0, [pc, #8]	; (8001848 <EXTI0_IRQHandler+0x14>)
 8001840:	f008 ff2c 	bl	800a69c <puts>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	0800dd20 	.word	0x0800dd20

0800184c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <USART2_IRQHandler+0x10>)
 8001852:	f007 f8d1 	bl	80089f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200011a4 	.word	0x200011a4

08001860 <EXTI15_10_IRQHandler>:
* @brief  This function handles EXTI interrupt Rx Line.
* @param  None
* @retval None
*/
void UART_EMUL_EXTI_IRQHandler (void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(UART_EMUL_RX_PIN);
 8001864:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001868:	f004 fb9c 	bl	8005fa4 <HAL_GPIO_EXTI_IRQHandler>
  //printf("Detected SOFTUART!!!\r\n");
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e00a      	b.n	8001898 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001882:	f3af 8000 	nop.w
 8001886:	4601      	mov	r1, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	b2ca      	uxtb	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	dbf0      	blt.n	8001882 <_read+0x12>
	}

return len;
 80018a0:	687b      	ldr	r3, [r7, #4]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e009      	b.n	80018d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fb41 	bl	8000f4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbf1      	blt.n	80018bc <_write+0x12>
	}
	return len;
 80018d8:	687b      	ldr	r3, [r7, #4]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <_close>:

int _close(int file)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	return -1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190a:	605a      	str	r2, [r3, #4]
	return 0;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_isatty>:

int _isatty(int file)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	return 1;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
	return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d207      	bcs.n	800198c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800197c:	f008 f98c 	bl	8009c98 <__errno>
 8001980:	4602      	mov	r2, r0
 8001982:	230c      	movs	r3, #12
 8001984:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	e009      	b.n	80019a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_sbrk+0x64>)
 800199c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199e:	68fb      	ldr	r3, [r7, #12]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20010000 	.word	0x20010000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	200001fc 	.word	0x200001fc
 80019b4:	20001208 	.word	0x20001208

080019b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019bc:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <SystemInit+0x28>)
 80019be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <SystemInit+0x28>)
 80019c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SystemInit+0x28>)
 80019ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d2:	609a      	str	r2, [r3, #8]
#endif
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ea:	e003      	b.n	80019f4 <LoopCopyDataInit>

080019ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019f2:	3104      	adds	r1, #4

080019f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019fc:	d3f6      	bcc.n	80019ec <CopyDataInit>
  ldr  r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a00:	e002      	b.n	8001a08 <LoopFillZerobss>

08001a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a04:	f842 3b04 	str.w	r3, [r2], #4

08001a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a0c:	d3f9      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd3 	bl	80019b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f008 f947 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff faab 	bl	8000f70 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001a20:	0800e950 	.word	0x0800e950
  ldr  r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a28:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001a2c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001a30:	20001208 	.word	0x20001208

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <Log_Info>:
  * @param  sizeStr  Amount of data elements to be sent
  * @param  inputStr pointer to data elements to be sent
  * @retval none
  */
void Log_Info(uint8_t* inputStr,  uint8_t sizeStr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
		if(inputStr != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <Log_Info+0x24>
		{
		    HAL_UART_Transmit(&UART_LOG, inputStr, sizeStr, 1000);
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <Log_Info+0x3c>)
 8001a56:	f006 fee0 	bl	800881a <HAL_UART_Transmit>
		}
		else
		{
				HAL_UART_Transmit(&UART_LOG, (uint8_t*)"Data Log NULL\r\n", 15, 1000);
		}
}
 8001a5a:	e006      	b.n	8001a6a <Log_Info+0x32>
				HAL_UART_Transmit(&UART_LOG, (uint8_t*)"Data Log NULL\r\n", 15, 1000);
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	220f      	movs	r2, #15
 8001a62:	4905      	ldr	r1, [pc, #20]	; (8001a78 <Log_Info+0x40>)
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <Log_Info+0x3c>)
 8001a66:	f006 fed8 	bl	800881a <HAL_UART_Transmit>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20001134 	.word	0x20001134
 8001a78:	0800dd34 	.word	0x0800dd34

08001a7c <W25Q16_Trans_Recv>:
 *
 *
 * @param[in] data: value to be sent
 */
uint8_t W25Q16_Trans_Recv(uint8_t data)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
		uint8_t retValue = 0;	//local variable to return
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_TransmitReceive(&W25Q16_SPI, &data, &retValue, 1, 100);
 8001a8a:	f107 020f 	add.w	r2, r7, #15
 8001a8e:	1df9      	adds	r1, r7, #7
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <W25Q16_Trans_Recv+0x2c>)
 8001a98:	f006 f92f 	bl	8007cfa <HAL_SPI_TransmitReceive>
		return retValue;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20001048 	.word	0x20001048

08001aac <W25Q16_Read_UniqID>:
 * This function reads Unique ID of W25Q16
 *
 * @param[in] none
 */
void W25Q16_Read_UniqID(void)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
		3. Send 4 dummy bytes
		4. Send 8 dummy byes and receive 8byte uniqueID
		5. Disable SPI
		******************************************************************************
		*/
		W25Q16_CS_EN; //Enable SPI
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <W25Q16_Read_UniqID+0x68>)
 8001aba:	f004 fa59 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(READ_UNIQUE_ID); //Send READ_UNIQUE_ID Instruction
 8001abe:	204b      	movs	r0, #75	; 0x4b
 8001ac0:	f7ff ffdc 	bl	8001a7c <W25Q16_Trans_Recv>
		for(uint8_t i = 0; i < 4; i++) //Send 4 dummy bytes
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	e005      	b.n	8001ad6 <W25Q16_Read_UniqID+0x2a>
		{
				W25Q16_Trans_Recv(DUMMY_BYTE);
 8001aca:	20a5      	movs	r0, #165	; 0xa5
 8001acc:	f7ff ffd6 	bl	8001a7c <W25Q16_Trans_Recv>
		for(uint8_t i = 0; i < 4; i++) //Send 4 dummy bytes
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d9f6      	bls.n	8001aca <W25Q16_Read_UniqID+0x1e>
		}
		for(uint8_t i = 0; i < 8; i++) //Send 8 dummy byes and receive 8byte uniqueID
 8001adc:	2300      	movs	r3, #0
 8001ade:	71bb      	strb	r3, [r7, #6]
 8001ae0:	e00a      	b.n	8001af8 <W25Q16_Read_UniqID+0x4c>
		{
			myDevice.uniqID[i] = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001ae2:	79bc      	ldrb	r4, [r7, #6]
 8001ae4:	20a5      	movs	r0, #165	; 0xa5
 8001ae6:	f7ff ffc9 	bl	8001a7c <W25Q16_Trans_Recv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <W25Q16_Read_UniqID+0x6c>)
 8001af0:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < 8; i++) //Send 8 dummy byes and receive 8byte uniqueID
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	3301      	adds	r3, #1
 8001af6:	71bb      	strb	r3, [r7, #6]
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	2b07      	cmp	r3, #7
 8001afc:	d9f1      	bls.n	8001ae2 <W25Q16_Read_UniqID+0x36>
		}
		W25Q16_CS_DIS; //Disable SPI
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <W25Q16_Read_UniqID+0x68>)
 8001b06:	f004 fa33 	bl	8005f70 <HAL_GPIO_WritePin>
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020400 	.word	0x40020400
 8001b18:	200011e4 	.word	0x200011e4

08001b1c <W25Q16_Enable_Write>:
 * @brief enable write operation with W25Q16
 *
 * @param[in] none
 */
void W25Q16_Enable_Write(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
		1. Enable SPI
		2. Send WRITE_ENABLE Instruction
		3. Disable SPI
		******************************************************************************
		*/
		W25Q16_CS_EN;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	4808      	ldr	r0, [pc, #32]	; (8001b48 <W25Q16_Enable_Write+0x2c>)
 8001b28:	f004 fa22 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(WRITE_ENABLE);
 8001b2c:	2006      	movs	r0, #6
 8001b2e:	f7ff ffa5 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_CS_DIS;
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <W25Q16_Enable_Write+0x2c>)
 8001b3a:	f004 fa19 	bl	8005f70 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f003 fcde 	bl	8005500 <HAL_Delay>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40020400 	.word	0x40020400

08001b4c <W25Q16_Read_StatusReg>:
 * @brief read status register of W25Q16
 *
 * @param[in] regID: 1 or 2 or 3 corresponding to id register
 */
uint8_t W25Q16_Read_StatusReg(uint8_t regID)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
		2. Check ID of Register
		3. Send READ_STATUS_REG corresponding
		4. Disable SPI
		******************************************************************************
		*/
		uint8_t retValue = 0;	//local variable to return
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
		W25Q16_CS_EN;
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b60:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <W25Q16_Read_StatusReg+0x84>)
 8001b62:	f004 fa05 	bl	8005f70 <HAL_GPIO_WritePin>
		switch(regID)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d002      	beq.n	8001b72 <W25Q16_Read_StatusReg+0x26>
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d00c      	beq.n	8001b8a <W25Q16_Read_StatusReg+0x3e>
 8001b70:	e017      	b.n	8001ba2 <W25Q16_Read_StatusReg+0x56>
		{
				case 1:
				{
						W25Q16_Trans_Recv(READ_STATUS_REG1);
 8001b72:	2005      	movs	r0, #5
 8001b74:	f7ff ff82 	bl	8001a7c <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001b78:	20a5      	movs	r0, #165	; 0xa5
 8001b7a:	f7ff ff7f 	bl	8001a7c <W25Q16_Trans_Recv>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg1 = retValue;
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <W25Q16_Read_StatusReg+0x88>)
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	7593      	strb	r3, [r2, #22]
						break;
 8001b88:	e017      	b.n	8001bba <W25Q16_Read_StatusReg+0x6e>
				}
				case 2:
				{
						W25Q16_Trans_Recv(READ_STATUS_REG2);
 8001b8a:	2035      	movs	r0, #53	; 0x35
 8001b8c:	f7ff ff76 	bl	8001a7c <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001b90:	20a5      	movs	r0, #165	; 0xa5
 8001b92:	f7ff ff73 	bl	8001a7c <W25Q16_Trans_Recv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg2 = retValue;
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <W25Q16_Read_StatusReg+0x88>)
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	75d3      	strb	r3, [r2, #23]
						break;
 8001ba0:	e00b      	b.n	8001bba <W25Q16_Read_StatusReg+0x6e>
				}
				default:
						W25Q16_Trans_Recv(READ_STATUS_REG3);
 8001ba2:	2015      	movs	r0, #21
 8001ba4:	f7ff ff6a 	bl	8001a7c <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001ba8:	20a5      	movs	r0, #165	; 0xa5
 8001baa:	f7ff ff67 	bl	8001a7c <W25Q16_Trans_Recv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg3 = retValue;
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <W25Q16_Read_StatusReg+0x88>)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	7613      	strb	r3, [r2, #24]
						break;
 8001bb8:	bf00      	nop
		} //end switch
		W25Q16_CS_DIS; //disable SPI
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <W25Q16_Read_StatusReg+0x84>)
 8001bc2:	f004 f9d5 	bl	8005f70 <HAL_GPIO_WritePin>

		return retValue;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	200011e4 	.word	0x200011e4

08001bd8 <W25Q16_Wait_EndBusy>:
 * @brief wait for end busy
 *
 * @param[in] none
 */
void W25Q16_Wait_EndBusy(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
		2. Send READ_STATUS_REG1
		3. Wait until MSB bit of status register 1 != 1
		4. Disable SPI
		******************************************************************************
		*/
		HAL_Delay(1);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f003 fc8f 	bl	8005500 <HAL_Delay>
		W25Q16_CS_EN;	//Enable SPI
 8001be2:	2200      	movs	r2, #0
 8001be4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <W25Q16_Wait_EndBusy+0x48>)
 8001bea:	f004 f9c1 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(READ_STATUS_REG1); //Send READ_STATUS_REG1
 8001bee:	2005      	movs	r0, #5
 8001bf0:	f7ff ff44 	bl	8001a7c <W25Q16_Trans_Recv>
		do //Wait until MSB bit of status register 1 != 1
		{
				myDevice.statusReg1 = W25Q16_Trans_Recv(DUMMY_BYTE);
 8001bf4:	20a5      	movs	r0, #165	; 0xa5
 8001bf6:	f7ff ff41 	bl	8001a7c <W25Q16_Trans_Recv>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <W25Q16_Wait_EndBusy+0x4c>)
 8001c00:	759a      	strb	r2, [r3, #22]
		}while((myDevice.statusReg1 & 0x01) == 0x01);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <W25Q16_Wait_EndBusy+0x4c>)
 8001c04:	7d9b      	ldrb	r3, [r3, #22]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f2      	bne.n	8001bf4 <W25Q16_Wait_EndBusy+0x1c>
		W25Q16_CS_DIS; //Disable SPI
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <W25Q16_Wait_EndBusy+0x48>)
 8001c16:	f004 f9ab 	bl	8005f70 <HAL_GPIO_WritePin>
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020400 	.word	0x40020400
 8001c24:	200011e4 	.word	0x200011e4

08001c28 <W25Q16_Init>:
 * This function initializes the IC
 *
 * @param[in] none
 */
bool W25Q16_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
		6. Set idle status for device
		******************************************************************************
		*/
		char buffer_to_log[20];	//buffer for data to log via uart

		myDevice.isBusy = BUSY; //Set busy status for device
 8001c2e:	4b42      	ldr	r3, [pc, #264]	; (8001d38 <W25Q16_Init+0x110>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	765a      	strb	r2, [r3, #25]
		W25Q16_CS_DIS; //Disable SPI
 8001c34:	2201      	movs	r2, #1
 8001c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c3a:	4840      	ldr	r0, [pc, #256]	; (8001d3c <W25Q16_Init+0x114>)
 8001c3c:	f004 f998 	bl	8005f70 <HAL_GPIO_WritePin>

		/*Config parameters of Device*/
		myDevice.numBlock   = NUM_BLOCK;
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <W25Q16_Init+0x110>)
 8001c42:	2220      	movs	r2, #32
 8001c44:	829a      	strh	r2, [r3, #20]
		myDevice.numSector  = NUM_SECTOR;
 8001c46:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <W25Q16_Init+0x110>)
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	81da      	strh	r2, [r3, #14]
		myDevice.numPage		= NUM_PAGE;
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <W25Q16_Init+0x110>)
 8001c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c54:	815a      	strh	r2, [r3, #10]
		myDevice.sizePage   = SIZE_PAGE;
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <W25Q16_Init+0x110>)
 8001c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5c:	811a      	strh	r2, [r3, #8]
		myDevice.sizeSector = SIZE_SECTOR;
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <W25Q16_Init+0x110>)
 8001c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c64:	819a      	strh	r2, [r3, #12]
		myDevice.sizeBlock  = SIZE_BLOCK;
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <W25Q16_Init+0x110>)
 8001c68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c6c:	611a      	str	r2, [r3, #16]

		W25Q16_Read_UniqID();
 8001c6e:	f7ff ff1d 	bl	8001aac <W25Q16_Read_UniqID>
		W25Q16_Read_StatusReg(1);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff ff6a 	bl	8001b4c <W25Q16_Read_StatusReg>
		W25Q16_Read_StatusReg(2);
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f7ff ff67 	bl	8001b4c <W25Q16_Read_StatusReg>
		W25Q16_Read_StatusReg(3);
 8001c7e:	2003      	movs	r0, #3
 8001c80:	f7ff ff64 	bl	8001b4c <W25Q16_Read_StatusReg>


		/*Log informations of device*/
		Log_Info((uint8_t*)"Initialize\n", 12);
 8001c84:	210c      	movs	r1, #12
 8001c86:	482e      	ldr	r0, [pc, #184]	; (8001d40 <W25Q16_Init+0x118>)
 8001c88:	f7ff fed6 	bl	8001a38 <Log_Info>
		sprintf((char*)buffer_to_log, "NumBlock = %d\r\n", myDevice.numBlock);
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <W25Q16_Init+0x110>)
 8001c8e:	8a9b      	ldrh	r3, [r3, #20]
 8001c90:	461a      	mov	r2, r3
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	492b      	ldr	r1, [pc, #172]	; (8001d44 <W25Q16_Init+0x11c>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f008 fd08 	bl	800a6ac <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fec9 	bl	8001a38 <Log_Info>
		sprintf((char*)buffer_to_log, "NumSector = %d\r\n", myDevice.numSector);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <W25Q16_Init+0x110>)
 8001ca8:	89db      	ldrh	r3, [r3, #14]
 8001caa:	461a      	mov	r2, r3
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4926      	ldr	r1, [pc, #152]	; (8001d48 <W25Q16_Init+0x120>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f008 fcfb 	bl	800a6ac <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 17);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2111      	movs	r1, #17
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff febc 	bl	8001a38 <Log_Info>
		sprintf((char*)buffer_to_log, "NumPage = %d\r\n", myDevice.numPage);
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <W25Q16_Init+0x110>)
 8001cc2:	895b      	ldrh	r3, [r3, #10]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4920      	ldr	r1, [pc, #128]	; (8001d4c <W25Q16_Init+0x124>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 fcee 	bl	800a6ac <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2110      	movs	r1, #16
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff feaf 	bl	8001a38 <Log_Info>
		sprintf((char*)buffer_to_log, "SizePage = %d\r\n", myDevice.sizePage);
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <W25Q16_Init+0x110>)
 8001cdc:	891b      	ldrh	r3, [r3, #8]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	491b      	ldr	r1, [pc, #108]	; (8001d50 <W25Q16_Init+0x128>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f008 fce1 	bl	800a6ac <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2110      	movs	r1, #16
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fea2 	bl	8001a38 <Log_Info>
		sprintf((char*)buffer_to_log, "SizeSector = %d\r\n", myDevice.sizeSector);
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <W25Q16_Init+0x110>)
 8001cf6:	899b      	ldrh	r3, [r3, #12]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4915      	ldr	r1, [pc, #84]	; (8001d54 <W25Q16_Init+0x12c>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f008 fcd4 	bl	800a6ac <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 19);
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2113      	movs	r1, #19
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fe95 	bl	8001a38 <Log_Info>
		sprintf((char*)buffer_to_log, "SizeBlock = %ld\r\n", myDevice.sizeBlock);
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <W25Q16_Init+0x110>)
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4910      	ldr	r1, [pc, #64]	; (8001d58 <W25Q16_Init+0x130>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f008 fcc8 	bl	800a6ac <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 19);
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2113      	movs	r1, #19
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fe89 	bl	8001a38 <Log_Info>

		myDevice.isBusy = IDLE; //Set idle status for device
 8001d26:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <W25Q16_Init+0x110>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	765a      	strb	r2, [r3, #25]

		return true;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200011e4 	.word	0x200011e4
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	0800dd44 	.word	0x0800dd44
 8001d44:	0800dd50 	.word	0x0800dd50
 8001d48:	0800dd60 	.word	0x0800dd60
 8001d4c:	0800dd74 	.word	0x0800dd74
 8001d50:	0800dd84 	.word	0x0800dd84
 8001d54:	0800dd94 	.word	0x0800dd94
 8001d58:	0800dda8 	.word	0x0800dda8

08001d5c <W25Q16_Erase_Chip>:
 * @brief erase full chip
 *
 * @param[in] none
 */
void W25Q16_Erase_Chip(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
		6. Disable SPI
		7. Wait for end operation
		8. Set idle status for device
		******************************************************************************
		*/
		while(myDevice.isBusy == BUSY); //Wait end busy status
 8001d60:	bf00      	nop
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <W25Q16_Erase_Chip+0x54>)
 8001d64:	7e5b      	ldrb	r3, [r3, #25]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d0fb      	beq.n	8001d62 <W25Q16_Erase_Chip+0x6>
		myDevice.isBusy  = BUSY;	//Set busy status for device
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <W25Q16_Erase_Chip+0x54>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	765a      	strb	r2, [r3, #25]
		W25Q16_Enable_Write();	//Write enable
 8001d70:	f7ff fed4 	bl	8001b1c <W25Q16_Enable_Write>
		W25Q16_CS_EN; //Enable SPI
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7a:	480e      	ldr	r0, [pc, #56]	; (8001db4 <W25Q16_Erase_Chip+0x58>)
 8001d7c:	f004 f8f8 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(CHIP_ERASE); //Send CHIP_ERASE instruction
 8001d80:	20c7      	movs	r0, #199	; 0xc7
 8001d82:	f7ff fe7b 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_CS_DIS; //Disable SPI
 8001d86:	2201      	movs	r2, #1
 8001d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8c:	4809      	ldr	r0, [pc, #36]	; (8001db4 <W25Q16_Erase_Chip+0x58>)
 8001d8e:	f004 f8ef 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy(); //Wait for end operation
 8001d92:	f7ff ff21 	bl	8001bd8 <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Erase chip success!!\r\n", 22);
 8001d96:	2116      	movs	r1, #22
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <W25Q16_Erase_Chip+0x5c>)
 8001d9a:	f7ff fe4d 	bl	8001a38 <Log_Info>
		HAL_Delay(10);
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f003 fbae 	bl	8005500 <HAL_Delay>

		myDevice.isBusy = IDLE; //Set idle status for device
 8001da4:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <W25Q16_Erase_Chip+0x54>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	765a      	strb	r2, [r3, #25]
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200011e4 	.word	0x200011e4
 8001db4:	40020400 	.word	0x40020400
 8001db8:	0800ddbc 	.word	0x0800ddbc

08001dbc <W25Q16_Erase_Sector>:
 * @brief erase sector
 *
 * @param[in] idSector: id of sector to erase (0,1,...511)
 */
void W25Q16_Erase_Sector(uint16_t idSector)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
		8. Disable SPI
		9. Wait for end operation
		10. Set idle status for device
		******************************************************************************
		*/
		uint32_t addrSector = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]

		while(myDevice.isBusy == BUSY);
 8001dca:	bf00      	nop
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <W25Q16_Erase_Sector+0x94>)
 8001dce:	7e5b      	ldrb	r3, [r3, #25]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d0fb      	beq.n	8001dcc <W25Q16_Erase_Sector+0x10>
		myDevice.isBusy = BUSY;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <W25Q16_Erase_Sector+0x94>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	765a      	strb	r2, [r3, #25]
		W25Q16_Wait_EndBusy();
 8001dda:	f7ff fefd 	bl	8001bd8 <W25Q16_Wait_EndBusy>
		addrSector = idSector * myDevice.sizeSector;
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <W25Q16_Erase_Sector+0x94>)
 8001de2:	8992      	ldrh	r2, [r2, #12]
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	60fb      	str	r3, [r7, #12]
		W25Q16_Enable_Write();	//Write enable
 8001dea:	f7ff fe97 	bl	8001b1c <W25Q16_Enable_Write>
		W25Q16_CS_EN;
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <W25Q16_Erase_Sector+0x98>)
 8001df6:	f004 f8bb 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(SECTOR_ERASE);
 8001dfa:	2020      	movs	r0, #32
 8001dfc:	f7ff fe3e 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrSector  & 0xFF0000) >> 16);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0c1b      	lsrs	r3, r3, #16
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fe38 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrSector  & 0xFF00) >> 8);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fe32 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrSector  & 0xFF) >> 0);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fe2d 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_CS_DIS;
 8001e22:	2201      	movs	r2, #1
 8001e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e28:	480a      	ldr	r0, [pc, #40]	; (8001e54 <W25Q16_Erase_Sector+0x98>)
 8001e2a:	f004 f8a1 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy();
 8001e2e:	f7ff fed3 	bl	8001bd8 <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Erase sector success!!\r\n", 24);
 8001e32:	2118      	movs	r1, #24
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <W25Q16_Erase_Sector+0x9c>)
 8001e36:	f7ff fdff 	bl	8001a38 <Log_Info>
		HAL_Delay(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f003 fb60 	bl	8005500 <HAL_Delay>

		myDevice.isBusy = IDLE;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <W25Q16_Erase_Sector+0x94>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	765a      	strb	r2, [r3, #25]
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200011e4 	.word	0x200011e4
 8001e54:	40020400 	.word	0x40020400
 8001e58:	0800ddd4 	.word	0x0800ddd4

08001e5c <W25Q16_WritePage>:
 * @param[in] number: number of datas to write
 * @param[in] offSet: offset value of start address (byte)
 */
void W25Q16_WritePage(uint8_t* pData,
											uint16_t idPage, uint8_t offSet, uint8_t number)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	807b      	strh	r3, [r7, #2]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	707b      	strb	r3, [r7, #1]
 8001e72:	4613      	mov	r3, r2
 8001e74:	703b      	strb	r3, [r7, #0]
		7. Disable SPI
		8. Wait for end operation
		9. Set idle status for device
		******************************************************************************
		*/
		uint32_t addrPage = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
		while(myDevice.isBusy == BUSY);
 8001e7a:	bf00      	nop
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <W25Q16_WritePage+0xc8>)
 8001e7e:	7e5b      	ldrb	r3, [r3, #25]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d0fb      	beq.n	8001e7c <W25Q16_WritePage+0x20>
		myDevice.isBusy  = BUSY;
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <W25Q16_WritePage+0xc8>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	765a      	strb	r2, [r3, #25]
		if((number + offSet) > myDevice.sizePage) number = myDevice.sizePage - offSet;
 8001e8a:	783a      	ldrb	r2, [r7, #0]
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <W25Q16_WritePage+0xc8>)
 8001e92:	8912      	ldrh	r2, [r2, #8]
 8001e94:	4293      	cmp	r3, r2
 8001e96:	dd05      	ble.n	8001ea4 <W25Q16_WritePage+0x48>
 8001e98:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <W25Q16_WritePage+0xc8>)
 8001e9a:	891b      	ldrh	r3, [r3, #8]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	703b      	strb	r3, [r7, #0]

		W25Q16_Wait_EndBusy();
 8001ea4:	f7ff fe98 	bl	8001bd8 <W25Q16_Wait_EndBusy>
		addrPage = (idPage * myDevice.sizePage) + offSet;
 8001ea8:	887b      	ldrh	r3, [r7, #2]
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <W25Q16_WritePage+0xc8>)
 8001eac:	8912      	ldrh	r2, [r2, #8]
 8001eae:	fb02 f203 	mul.w	r2, r2, r3
 8001eb2:	787b      	ldrb	r3, [r7, #1]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
		W25Q16_Enable_Write();	//Write enable
 8001eb8:	f7ff fe30 	bl	8001b1c <W25Q16_Enable_Write>
		W25Q16_CS_EN;
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec2:	4819      	ldr	r0, [pc, #100]	; (8001f28 <W25Q16_WritePage+0xcc>)
 8001ec4:	f004 f854 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(PAGE_PROGRAM);
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f7ff fdd7 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF0000) >> 16);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fdd1 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF00) >> 8);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fdcb 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF) >> 0);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fdc6 	bl	8001a7c <W25Q16_Trans_Recv>
		HAL_SPI_Transmit(&W25Q16_SPI, pData, number, 100);
 8001ef0:	783b      	ldrb	r3, [r7, #0]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	2364      	movs	r3, #100	; 0x64
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	480c      	ldr	r0, [pc, #48]	; (8001f2c <W25Q16_WritePage+0xd0>)
 8001efa:	f005 fcc1 	bl	8007880 <HAL_SPI_Transmit>
		W25Q16_CS_DIS;
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4808      	ldr	r0, [pc, #32]	; (8001f28 <W25Q16_WritePage+0xcc>)
 8001f06:	f004 f833 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy();
 8001f0a:	f7ff fe65 	bl	8001bd8 <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Write page SUCCESS\r\n", 22);
 8001f0e:	2116      	movs	r1, #22
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <W25Q16_WritePage+0xd4>)
 8001f12:	f7ff fd91 	bl	8001a38 <Log_Info>
		myDevice.isBusy = IDLE;
 8001f16:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <W25Q16_WritePage+0xc8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	765a      	strb	r2, [r3, #25]
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200011e4 	.word	0x200011e4
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	20001048 	.word	0x20001048
 8001f30:	0800de20 	.word	0x0800de20

08001f34 <W25Q16_ReadSomeBytes>:
 * @param[in] addrToRead: address of byte to write
 * @param[in] number: number of bytes to read
 */
void W25Q16_ReadSomeBytes(uint8_t* pBuffer,
													uint32_t addrToRead, uint32_t number)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
		8. Wait for end operation
		9. Set idle status for device
		******************************************************************************
		*/
		//char buffer_to_log[30];
		while(myDevice.isBusy == BUSY);
 8001f40:	bf00      	nop
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <W25Q16_ReadSomeBytes+0x84>)
 8001f44:	7e5b      	ldrb	r3, [r3, #25]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d0fb      	beq.n	8001f42 <W25Q16_ReadSomeBytes+0xe>
		myDevice.isBusy  = BUSY;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <W25Q16_ReadSomeBytes+0x84>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	765a      	strb	r2, [r3, #25]
		W25Q16_Wait_EndBusy();
 8001f50:	f7ff fe42 	bl	8001bd8 <W25Q16_Wait_EndBusy>
		W25Q16_CS_EN;
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5a:	4818      	ldr	r0, [pc, #96]	; (8001fbc <W25Q16_ReadSomeBytes+0x88>)
 8001f5c:	f004 f808 	bl	8005f70 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(FAST_READ);
 8001f60:	200b      	movs	r0, #11
 8001f62:	f7ff fd8b 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF0000) >> 16);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fd85 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF00) >> 8);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fd7f 	bl	8001a7c <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF) >> 0);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fd7a 	bl	8001a7c <W25Q16_Trans_Recv>
		//W25Q16_Trans_Recv(DUMMY_BYTE);
		W25Q16_Trans_Recv(0);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fd77 	bl	8001a7c <W25Q16_Trans_Recv>
		HAL_SPI_Receive(&W25Q16_SPI, pBuffer, number, 1000);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <W25Q16_ReadSomeBytes+0x8c>)
 8001f9a:	f005 fda5 	bl	8007ae8 <HAL_SPI_Receive>

		W25Q16_CS_DIS;
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <W25Q16_ReadSomeBytes+0x88>)
 8001fa6:	f003 ffe3 	bl	8005f70 <HAL_GPIO_WritePin>
				sprintf(buffer_to_log, "Read a byte %02x\r\n", pBuffer[i]);
				Log_Info((uint8_t*)buffer_to_log, 16);
		}
		#endif

		myDevice.isBusy = IDLE;
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <W25Q16_ReadSomeBytes+0x84>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	765a      	strb	r2, [r3, #25]
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	200011e4 	.word	0x200011e4
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	20001048 	.word	0x20001048

08001fc4 <LTE_PWRCRL_OFF>:
		HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_SET);
		HAL_Delay(550);
		HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_RESET);
}
void LTE_PWRCRL_OFF(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	/* keep Power Key at high level */
	HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2120      	movs	r1, #32
 8001fcc:	480f      	ldr	r0, [pc, #60]	; (800200c <LTE_PWRCRL_OFF+0x48>)
 8001fce:	f003 ffcf 	bl	8005f70 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd6:	f003 fa93 	bl	8005500 <HAL_Delay>
	Trans_Data(&UartEmulHandle, (uint8_t*)"0AT+QPOWD\r", 10);
 8001fda:	220a      	movs	r2, #10
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <LTE_PWRCRL_OFF+0x4c>)
 8001fde:	480d      	ldr	r0, [pc, #52]	; (8002014 <LTE_PWRCRL_OFF+0x50>)
 8001fe0:	f000 fc94 	bl	800290c <Trans_Data>
	if(Recv_Response(&UartEmulHandle, 2000) == RESPONSE_OK) Log_Info((uint8_t*)"RES_OK\n", 7);
 8001fe4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001fe8:	480a      	ldr	r0, [pc, #40]	; (8002014 <LTE_PWRCRL_OFF+0x50>)
 8001fea:	f000 fd41 	bl	8002a70 <Recv_Response>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d104      	bne.n	8001ffe <LTE_PWRCRL_OFF+0x3a>
 8001ff4:	2107      	movs	r1, #7
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <LTE_PWRCRL_OFF+0x54>)
 8001ff8:	f7ff fd1e 	bl	8001a38 <Log_Info>
	else Log_Info((uint8_t*)"RES_ERR\n", 8);
}
 8001ffc:	e003      	b.n	8002006 <LTE_PWRCRL_OFF+0x42>
	else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8001ffe:	2108      	movs	r1, #8
 8002000:	4806      	ldr	r0, [pc, #24]	; (800201c <LTE_PWRCRL_OFF+0x58>)
 8002002:	f7ff fd19 	bl	8001a38 <Log_Info>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40020400 	.word	0x40020400
 8002010:	0800de4c 	.word	0x0800de4c
 8002014:	20001174 	.word	0x20001174
 8002018:	0800de58 	.word	0x0800de58
 800201c:	0800de60 	.word	0x0800de60

08002020 <Enable_LTE>:
void Enable_LTE(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(PWR_EN_PORT, PWR_EN_PIN, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800202a:	4802      	ldr	r0, [pc, #8]	; (8002034 <Enable_LTE+0x14>)
 800202c:	f003 ffa0 	bl	8005f70 <HAL_GPIO_WritePin>
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40020800 	.word	0x40020800

08002038 <MQTT_Recv_Mode>:
	* @param  msgLenEnabe:  Whether length of MQTT message received from server will be contained in URC (0 or 1)
  * @retval OK or ERR
  */
response_t MQTT_Recv_Mode(uint8_t clientIndex,
													uint8_t msgRecvMode, uint8_t msgLenEnabe)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af02      	add	r7, sp, #8
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	460b      	mov	r3, r1
 8002044:	71bb      	strb	r3, [r7, #6]
 8002046:	4613      	mov	r3, r2
 8002048:	717b      	strb	r3, [r7, #5]
		HAL_Delay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f003 fa57 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=recv/mode,%d,%d,%d\r", clientIndex, msgRecvMode, msgLenEnabe);
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	79b9      	ldrb	r1, [r7, #6]
 8002056:	797b      	ldrb	r3, [r7, #5]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	460b      	mov	r3, r1
 800205c:	490f      	ldr	r1, [pc, #60]	; (800209c <MQTT_Recv_Mode+0x64>)
 800205e:	4810      	ldr	r0, [pc, #64]	; (80020a0 <MQTT_Recv_Mode+0x68>)
 8002060:	f008 fb24 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 27);
 8002064:	221b      	movs	r2, #27
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <MQTT_Recv_Mode+0x68>)
 8002068:	480e      	ldr	r0, [pc, #56]	; (80020a4 <MQTT_Recv_Mode+0x6c>)
 800206a:	f000 fc4f 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 800206e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MQTT_Recv_Mode+0x6c>)
 8002074:	f000 fcfc 	bl	8002a70 <Recv_Response>
 8002078:	4603      	mov	r3, r0
 800207a:	2b01      	cmp	r3, #1
 800207c:	d105      	bne.n	800208a <MQTT_Recv_Mode+0x52>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 800207e:	2107      	movs	r1, #7
 8002080:	4809      	ldr	r0, [pc, #36]	; (80020a8 <MQTT_Recv_Mode+0x70>)
 8002082:	f7ff fcd9 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 8002086:	2301      	movs	r3, #1
 8002088:	e004      	b.n	8002094 <MQTT_Recv_Mode+0x5c>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800208a:	2108      	movs	r1, #8
 800208c:	4807      	ldr	r0, [pc, #28]	; (80020ac <MQTT_Recv_Mode+0x74>)
 800208e:	f7ff fcd3 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	0800dedc 	.word	0x0800dedc
 80020a0:	20000744 	.word	0x20000744
 80020a4:	20001174 	.word	0x20001174
 80020a8:	0800de58 	.word	0x0800de58
 80020ac:	0800de60 	.word	0x0800de60

080020b0 <MQTT_Session>:
	* @param  sessionMode: Configure the session type (0 or 1)
  * @retval OK or ERR
  */
response_t MQTT_Session(uint8_t clientIndex,
												uint8_t sessionMode)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	460a      	mov	r2, r1
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	4613      	mov	r3, r2
 80020be:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 80020c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020c4:	f003 fa1c 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=session,%d,%d\r", clientIndex, sessionMode);
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	490f      	ldr	r1, [pc, #60]	; (800210c <MQTT_Session+0x5c>)
 80020ce:	4810      	ldr	r0, [pc, #64]	; (8002110 <MQTT_Session+0x60>)
 80020d0:	f008 faec 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 23);
 80020d4:	2217      	movs	r2, #23
 80020d6:	490e      	ldr	r1, [pc, #56]	; (8002110 <MQTT_Session+0x60>)
 80020d8:	480e      	ldr	r0, [pc, #56]	; (8002114 <MQTT_Session+0x64>)
 80020da:	f000 fc17 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80020de:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80020e2:	480c      	ldr	r0, [pc, #48]	; (8002114 <MQTT_Session+0x64>)
 80020e4:	f000 fcc4 	bl	8002a70 <Recv_Response>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <MQTT_Session+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80020ee:	2107      	movs	r1, #7
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <MQTT_Session+0x68>)
 80020f2:	f7ff fca1 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e004      	b.n	8002104 <MQTT_Session+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80020fa:	2108      	movs	r1, #8
 80020fc:	4807      	ldr	r0, [pc, #28]	; (800211c <MQTT_Session+0x6c>)
 80020fe:	f7ff fc9b 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	0800defc 	.word	0x0800defc
 8002110:	20000744 	.word	0x20000744
 8002114:	20001174 	.word	0x20001174
 8002118:	0800de58 	.word	0x0800de58
 800211c:	0800de60 	.word	0x0800de60

08002120 <MQTT_Open>:
	* @param  port: port id (4 digits)
  * @retval OK or ERR
  */
response_t MQTT_Open(uint8_t clientIndex,
										 uint8_t* hostName, uint16_t port)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af02      	add	r7, sp, #8
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	4613      	mov	r3, r2
 800212e:	80bb      	strh	r3, [r7, #4]
		HAL_Delay(1000);
 8002130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002134:	f003 f9e4 	bl	8005500 <HAL_Delay>
//		uint8_t lenBuffTrans = 20+lenHostName;	
		uint8_t lenBuffTrans = 20 + strlen((char*)hostName);
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f7fe f851 	bl	80001e0 <strlen>
 800213e:	4603      	mov	r3, r0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3314      	adds	r3, #20
 8002144:	73fb      	strb	r3, [r7, #15]
		sprintf((char*) g_buff_temp, "0AT+QMTOPEN=%d,%s,%d\r", clientIndex, hostName, port);
 8002146:	79fa      	ldrb	r2, [r7, #7]
 8002148:	88bb      	ldrh	r3, [r7, #4]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4924      	ldr	r1, [pc, #144]	; (80021e0 <MQTT_Open+0xc0>)
 8002150:	4824      	ldr	r0, [pc, #144]	; (80021e4 <MQTT_Open+0xc4>)
 8002152:	f008 faab 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	b29b      	uxth	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	4921      	ldr	r1, [pc, #132]	; (80021e4 <MQTT_Open+0xc4>)
 800215e:	4822      	ldr	r0, [pc, #136]	; (80021e8 <MQTT_Open+0xc8>)
 8002160:	f000 fbd4 	bl	800290c <Trans_Data>
		/*wait response of +QMTOPEN*/
		Recv_Response(&UartEmulHandle, WAIT_OPEN);
 8002164:	f241 3188 	movw	r1, #5000	; 0x1388
 8002168:	481f      	ldr	r0, [pc, #124]	; (80021e8 <MQTT_Open+0xc8>)
 800216a:	f000 fc81 	bl	8002a70 <Recv_Response>
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <MQTT_Open+0xcc>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3b03      	subs	r3, #3
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <MQTT_Open+0xcc>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	3b03      	subs	r3, #3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	491c      	ldr	r1, [pc, #112]	; (80021f0 <MQTT_Open+0xd0>)
 8002180:	4818      	ldr	r0, [pc, #96]	; (80021e4 <MQTT_Open+0xc4>)
 8002182:	f000 fccf 	bl	8002b24 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8002186:	2201      	movs	r2, #1
 8002188:	491a      	ldr	r1, [pc, #104]	; (80021f4 <MQTT_Open+0xd4>)
 800218a:	4816      	ldr	r0, [pc, #88]	; (80021e4 <MQTT_Open+0xc4>)
 800218c:	f000 fc22 	bl	80029d4 <Compare_Str>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <MQTT_Open+0x8a>
		{
				Log_Info((uint8_t*)"Open Success!\n", 14);
 8002196:	210e      	movs	r1, #14
 8002198:	4817      	ldr	r0, [pc, #92]	; (80021f8 <MQTT_Open+0xd8>)
 800219a:	f7ff fc4d 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 800219e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021a2:	f003 f9ad 	bl	8005500 <HAL_Delay>
				return RESPONSE_OK;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e016      	b.n	80021d8 <MQTT_Open+0xb8>
		}
		if(Compare_Str(g_buff_temp, (uint8_t*)"2", 1))
 80021aa:	2201      	movs	r2, #1
 80021ac:	4913      	ldr	r1, [pc, #76]	; (80021fc <MQTT_Open+0xdc>)
 80021ae:	480d      	ldr	r0, [pc, #52]	; (80021e4 <MQTT_Open+0xc4>)
 80021b0:	f000 fc10 	bl	80029d4 <Compare_Str>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <MQTT_Open+0xae>
		{
				Log_Info((uint8_t*)"Open Before!\n", 13);
 80021ba:	210d      	movs	r1, #13
 80021bc:	4810      	ldr	r0, [pc, #64]	; (8002200 <MQTT_Open+0xe0>)
 80021be:	f7ff fc3b 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80021c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021c6:	f003 f99b 	bl	8005500 <HAL_Delay>
				return RESPONSE_MQTT_EXIST;
 80021ca:	2304      	movs	r3, #4
 80021cc:	e004      	b.n	80021d8 <MQTT_Open+0xb8>
		}
		HAL_Delay(MAX_WAIT_TIME);
 80021ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021d2:	f003 f995 	bl	8005500 <HAL_Delay>
		return RESPONSE_ERR;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	0800df18 	.word	0x0800df18
 80021e4:	20000744 	.word	0x20000744
 80021e8:	20001174 	.word	0x20001174
 80021ec:	20000641 	.word	0x20000641
 80021f0:	20000644 	.word	0x20000644
 80021f4:	0800df30 	.word	0x0800df30
 80021f8:	0800df34 	.word	0x0800df34
 80021fc:	0800df44 	.word	0x0800df44
 8002200:	0800df48 	.word	0x0800df48

08002204 <MQTT_Close>:
  * @brief  Close a Network for MQTT Client
    * @param  clientIndex: MQTT client identifier (0-5)
  * @retval OK or ERR
  */
response_t MQTT_Close(uint8_t clientIndex)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(1000);
 800220e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002212:	f003 f975 	bl	8005500 <HAL_Delay>

        uint8_t lenBuffTrans = 15;
 8002216:	230f      	movs	r3, #15
 8002218:	73fb      	strb	r3, [r7, #15]
        sprintf((char*) g_buff_temp, "0AT+QMTCLOSE=%d\r", clientIndex);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	461a      	mov	r2, r3
 800221e:	491b      	ldr	r1, [pc, #108]	; (800228c <MQTT_Close+0x88>)
 8002220:	481b      	ldr	r0, [pc, #108]	; (8002290 <MQTT_Close+0x8c>)
 8002222:	f008 fa43 	bl	800a6ac <siprintf>
        Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	4918      	ldr	r1, [pc, #96]	; (8002290 <MQTT_Close+0x8c>)
 800222e:	4819      	ldr	r0, [pc, #100]	; (8002294 <MQTT_Close+0x90>)
 8002230:	f000 fb6c 	bl	800290c <Trans_Data>
        /*wait response of + QMTCLOSE*/
        Recv_Response(&UartEmulHandle, WAIT_OPEN);
 8002234:	f241 3188 	movw	r1, #5000	; 0x1388
 8002238:	4816      	ldr	r0, [pc, #88]	; (8002294 <MQTT_Close+0x90>)
 800223a:	f000 fc19 	bl	8002a70 <Recv_Response>
        Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MQTT_Close+0x94>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	3b03      	subs	r3, #3
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <MQTT_Close+0x94>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3b03      	subs	r3, #3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4913      	ldr	r1, [pc, #76]	; (800229c <MQTT_Close+0x98>)
 8002250:	480f      	ldr	r0, [pc, #60]	; (8002290 <MQTT_Close+0x8c>)
 8002252:	f000 fc67 	bl	8002b24 <Get_Paragraph>
        if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8002256:	2201      	movs	r2, #1
 8002258:	4911      	ldr	r1, [pc, #68]	; (80022a0 <MQTT_Close+0x9c>)
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MQTT_Close+0x8c>)
 800225c:	f000 fbba 	bl	80029d4 <Compare_Str>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <MQTT_Close+0x76>
        {
                Log_Info((uint8_t*)"Close Success!\n", 14);
 8002266:	210e      	movs	r1, #14
 8002268:	480e      	ldr	r0, [pc, #56]	; (80022a4 <MQTT_Close+0xa0>)
 800226a:	f7ff fbe5 	bl	8001a38 <Log_Info>
                HAL_Delay(MAX_WAIT_TIME);
 800226e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002272:	f003 f945 	bl	8005500 <HAL_Delay>
                return RESPONSE_OK;
 8002276:	2301      	movs	r3, #1
 8002278:	e004      	b.n	8002284 <MQTT_Close+0x80>
        }
        HAL_Delay(MAX_WAIT_TIME);
 800227a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800227e:	f003 f93f 	bl	8005500 <HAL_Delay>
        return RESPONSE_ERR;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0800df58 	.word	0x0800df58
 8002290:	20000744 	.word	0x20000744
 8002294:	20001174 	.word	0x20001174
 8002298:	20000641 	.word	0x20000641
 800229c:	20000644 	.word	0x20000644
 80022a0:	0800df30 	.word	0x0800df30
 80022a4:	0800df6c 	.word	0x0800df6c

080022a8 <MQTT_Connect>:
	* @param  passWord: password corresponding to the user name of the client
  * @retval OK or ERR
  */
response_t MQTT_Connect(uint8_t clientIndex,
												uint8_t* clientID, uint8_t* userName, uint8_t* passWord)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4603      	mov	r3, r0
 80022b6:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(MAX_WAIT_TIME);
 80022b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022bc:	f003 f920 	bl	8005500 <HAL_Delay>
//		uint8_t lenBuffTrans = 18 + lenUser + lenPass;
		uint8_t lenBuffTrans = 17 + strlen((char*)clientID) + strlen((char*)userName) + strlen((char*)passWord);
 80022c0:	68b8      	ldr	r0, [r7, #8]
 80022c2:	f7fd ff8d 	bl	80001e0 <strlen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b2dc      	uxtb	r4, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fd ff88 	bl	80001e0 <strlen>
 80022d0:	4603      	mov	r3, r0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4423      	add	r3, r4
 80022d6:	b2dc      	uxtb	r4, r3
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f7fd ff81 	bl	80001e0 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4423      	add	r3, r4
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3311      	adds	r3, #17
 80022e8:	75fb      	strb	r3, [r7, #23]
		sprintf((char*) g_buff_temp, "0AT+QMTCONN=%d,%s,%s,%s\r", clientIndex, clientID, userName, passWord);
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4922      	ldr	r1, [pc, #136]	; (8002380 <MQTT_Connect+0xd8>)
 80022f8:	4822      	ldr	r0, [pc, #136]	; (8002384 <MQTT_Connect+0xdc>)
 80022fa:	f008 f9d7 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	491f      	ldr	r1, [pc, #124]	; (8002384 <MQTT_Connect+0xdc>)
 8002306:	4820      	ldr	r0, [pc, #128]	; (8002388 <MQTT_Connect+0xe0>)
 8002308:	f000 fb00 	bl	800290c <Trans_Data>
		/*wait response of +QMTCONN*/
		if(Recv_Response(&UartEmulHandle, WAIT_CONNECT) == RESPONSE_MQTT_CLOSE) 
 800230c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002310:	481d      	ldr	r0, [pc, #116]	; (8002388 <MQTT_Connect+0xe0>)
 8002312:	f000 fbad 	bl	8002a70 <Recv_Response>
 8002316:	4603      	mov	r3, r0
 8002318:	2b03      	cmp	r3, #3
 800231a:	d109      	bne.n	8002330 <MQTT_Connect+0x88>
		{
				Log_Info((uint8_t*)"CONNECT-CLOSE\n", 14);
 800231c:	210e      	movs	r1, #14
 800231e:	481b      	ldr	r0, [pc, #108]	; (800238c <MQTT_Connect+0xe4>)
 8002320:	f7ff fb8a 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8002324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002328:	f003 f8ea 	bl	8005500 <HAL_Delay>
				return RESPONSE_MQTT_CLOSE;
 800232c:	2303      	movs	r3, #3
 800232e:	e022      	b.n	8002376 <MQTT_Connect+0xce>
		}
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MQTT_Connect+0xe8>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	3b03      	subs	r3, #3
 8002336:	b2da      	uxtb	r2, r3
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MQTT_Connect+0xe8>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3b03      	subs	r3, #3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4914      	ldr	r1, [pc, #80]	; (8002394 <MQTT_Connect+0xec>)
 8002342:	4810      	ldr	r0, [pc, #64]	; (8002384 <MQTT_Connect+0xdc>)
 8002344:	f000 fbee 	bl	8002b24 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8002348:	2201      	movs	r2, #1
 800234a:	4913      	ldr	r1, [pc, #76]	; (8002398 <MQTT_Connect+0xf0>)
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <MQTT_Connect+0xdc>)
 800234e:	f000 fb41 	bl	80029d4 <Compare_Str>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <MQTT_Connect+0xc4>
		{
				Log_Info((uint8_t*)"Connect Success!\n", 17);
 8002358:	2111      	movs	r1, #17
 800235a:	4810      	ldr	r0, [pc, #64]	; (800239c <MQTT_Connect+0xf4>)
 800235c:	f7ff fb6c 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8002360:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002364:	f003 f8cc 	bl	8005500 <HAL_Delay>
				return RESPONSE_OK;
 8002368:	2301      	movs	r3, #1
 800236a:	e004      	b.n	8002376 <MQTT_Connect+0xce>
		}
		HAL_Delay(MAX_WAIT_TIME);
 800236c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002370:	f003 f8c6 	bl	8005500 <HAL_Delay>
		return RESPONSE_ERR;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}
 800237e:	bf00      	nop
 8002380:	0800df7c 	.word	0x0800df7c
 8002384:	20000744 	.word	0x20000744
 8002388:	20001174 	.word	0x20001174
 800238c:	0800df98 	.word	0x0800df98
 8002390:	20000641 	.word	0x20000641
 8002394:	20000644 	.word	0x20000644
 8002398:	0800df30 	.word	0x0800df30
 800239c:	0800dfa8 	.word	0x0800dfa8

080023a0 <MQTT_Check_Connect>:
/**
  * @brief  Check MQTT Connect
  * @retval OK or ERR
  */
response_t MQTT_Check_Connect(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
		Trans_Data(&UartEmulHandle, (uint8_t*)"0AT+QMTCONN?\r", 13);
 80023a4:	220d      	movs	r2, #13
 80023a6:	4919      	ldr	r1, [pc, #100]	; (800240c <MQTT_Check_Connect+0x6c>)
 80023a8:	4819      	ldr	r0, [pc, #100]	; (8002410 <MQTT_Check_Connect+0x70>)
 80023aa:	f000 faaf 	bl	800290c <Trans_Data>
		Recv_Response(&UartEmulHandle, 300);
 80023ae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023b2:	4817      	ldr	r0, [pc, #92]	; (8002410 <MQTT_Check_Connect+0x70>)
 80023b4:	f000 fb5c 	bl	8002a70 <Recv_Response>
		if(g_count_temp < 20)
 80023b8:	4b16      	ldr	r3, [pc, #88]	; (8002414 <MQTT_Check_Connect+0x74>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b13      	cmp	r3, #19
 80023be:	d809      	bhi.n	80023d4 <MQTT_Check_Connect+0x34>
		{
				Log_Info((uint8_t*)"Not connect!\n", 13);
 80023c0:	210d      	movs	r1, #13
 80023c2:	4815      	ldr	r0, [pc, #84]	; (8002418 <MQTT_Check_Connect+0x78>)
 80023c4:	f7ff fb38 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80023c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023cc:	f003 f898 	bl	8005500 <HAL_Delay>
				return RESPONSE_ERR; //not connect
 80023d0:	2300      	movs	r3, #0
 80023d2:	e018      	b.n	8002406 <MQTT_Check_Connect+0x66>
		}
		Get_Paragraph(g_buff_temp, g_recv_buff, 26, 26);
 80023d4:	231a      	movs	r3, #26
 80023d6:	221a      	movs	r2, #26
 80023d8:	4910      	ldr	r1, [pc, #64]	; (800241c <MQTT_Check_Connect+0x7c>)
 80023da:	4811      	ldr	r0, [pc, #68]	; (8002420 <MQTT_Check_Connect+0x80>)
 80023dc:	f000 fba2 	bl	8002b24 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"3", 1))
 80023e0:	2201      	movs	r2, #1
 80023e2:	4910      	ldr	r1, [pc, #64]	; (8002424 <MQTT_Check_Connect+0x84>)
 80023e4:	480e      	ldr	r0, [pc, #56]	; (8002420 <MQTT_Check_Connect+0x80>)
 80023e6:	f000 faf5 	bl	80029d4 <Compare_Str>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <MQTT_Check_Connect+0x64>
		{
				Log_Info((uint8_t*)"Connect Exist!\n", 15);
 80023f0:	210f      	movs	r1, #15
 80023f2:	480d      	ldr	r0, [pc, #52]	; (8002428 <MQTT_Check_Connect+0x88>)
 80023f4:	f7ff fb20 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 80023f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023fc:	f003 f880 	bl	8005500 <HAL_Delay>
				return RESPONSE_OK;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <MQTT_Check_Connect+0x66>
		}
		return RESPONSE_ERR; //not connect
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	0800dfbc 	.word	0x0800dfbc
 8002410:	20001174 	.word	0x20001174
 8002414:	20000641 	.word	0x20000641
 8002418:	0800dfcc 	.word	0x0800dfcc
 800241c:	20000644 	.word	0x20000644
 8002420:	20000744 	.word	0x20000744
 8002424:	0800dfdc 	.word	0x0800dfdc
 8002428:	0800dfe0 	.word	0x0800dfe0

0800242c <MQTT_Publish>:
  * @retval OK or ERR
  */
response_t MQTT_Publish(uint8_t clientIndex,
												uint8_t msgId, uint8_t QoS, uint8_t retain, 
												uint8_t* topic, uint8_t lenData, uint8_t* pData)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af04      	add	r7, sp, #16
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4623      	mov	r3, r4
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	4603      	mov	r3, r0
 8002440:	71bb      	strb	r3, [r7, #6]
 8002442:	460b      	mov	r3, r1
 8002444:	717b      	strb	r3, [r7, #5]
 8002446:	4613      	mov	r3, r2
 8002448:	713b      	strb	r3, [r7, #4]
		HAL_Delay(MAX_WAIT_TIME);
 800244a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800244e:	f003 f857 	bl	8005500 <HAL_Delay>
		uint8_t lenOfLenData;
		if(lenData <= 9 ) lenOfLenData = 1;
 8002452:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002456:	2b09      	cmp	r3, #9
 8002458:	d802      	bhi.n	8002460 <MQTT_Publish+0x34>
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e010      	b.n	8002482 <MQTT_Publish+0x56>
		else if(lenData > 9 && lenData < 100) lenOfLenData = 2;
 8002460:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002464:	2b09      	cmp	r3, #9
 8002466:	d906      	bls.n	8002476 <MQTT_Publish+0x4a>
 8002468:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800246c:	2b63      	cmp	r3, #99	; 0x63
 800246e:	d802      	bhi.n	8002476 <MQTT_Publish+0x4a>
 8002470:	2302      	movs	r3, #2
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e005      	b.n	8002482 <MQTT_Publish+0x56>
		else if(lenData >= 100) lenOfLenData = 3;
 8002476:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800247a:	2b63      	cmp	r3, #99	; 0x63
 800247c:	d901      	bls.n	8002482 <MQTT_Publish+0x56>
 800247e:	2303      	movs	r3, #3
 8002480:	73fb      	strb	r3, [r7, #15]
		uint8_t lenBuffTrans = 23 + strlen((char*)topic) + lenOfLenData;
 8002482:	6a38      	ldr	r0, [r7, #32]
 8002484:	f7fd feac 	bl	80001e0 <strlen>
 8002488:	4603      	mov	r3, r0
 800248a:	b2da      	uxtb	r2, r3
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	4413      	add	r3, r2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3317      	adds	r3, #23
 8002494:	73bb      	strb	r3, [r7, #14]
		sprintf((char*) g_buff_temp, "0AT+QMTPUBEX=%d,%d,%d,%d,%s,%d\r", clientIndex, msgId, QoS, retain, topic, lenData);
 8002496:	79f8      	ldrb	r0, [r7, #7]
 8002498:	79bc      	ldrb	r4, [r7, #6]
 800249a:	797b      	ldrb	r3, [r7, #5]
 800249c:	793a      	ldrb	r2, [r7, #4]
 800249e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80024a2:	9103      	str	r1, [sp, #12]
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	9102      	str	r1, [sp, #8]
 80024a8:	9201      	str	r2, [sp, #4]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4623      	mov	r3, r4
 80024ae:	4602      	mov	r2, r0
 80024b0:	4923      	ldr	r1, [pc, #140]	; (8002540 <MQTT_Publish+0x114>)
 80024b2:	4824      	ldr	r0, [pc, #144]	; (8002544 <MQTT_Publish+0x118>)
 80024b4:	f008 f8fa 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4921      	ldr	r1, [pc, #132]	; (8002544 <MQTT_Publish+0x118>)
 80024c0:	4821      	ldr	r0, [pc, #132]	; (8002548 <MQTT_Publish+0x11c>)
 80024c2:	f000 fa23 	bl	800290c <Trans_Data>
		Recv_Response(&UartEmulHandle, 200);
 80024c6:	21c8      	movs	r1, #200	; 0xc8
 80024c8:	481f      	ldr	r0, [pc, #124]	; (8002548 <MQTT_Publish+0x11c>)
 80024ca:	f000 fad1 	bl	8002a70 <Recv_Response>
	
		/*transmit data buffer*/
		Trans_Data(&UartEmulHandle, pData, lenData);
 80024ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024d8:	481b      	ldr	r0, [pc, #108]	; (8002548 <MQTT_Publish+0x11c>)
 80024da:	f000 fa17 	bl	800290c <Trans_Data>
		/*wait response of +QMTCONN*/
		Recv_Response(&UartEmulHandle, MAX_WAIT_TIME);
 80024de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <MQTT_Publish+0x11c>)
 80024e4:	f000 fac4 	bl	8002a70 <Recv_Response>
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 80024e8:	4b18      	ldr	r3, [pc, #96]	; (800254c <MQTT_Publish+0x120>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <MQTT_Publish+0x120>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	4915      	ldr	r1, [pc, #84]	; (8002550 <MQTT_Publish+0x124>)
 80024fa:	4812      	ldr	r0, [pc, #72]	; (8002544 <MQTT_Publish+0x118>)
 80024fc:	f000 fb12 	bl	8002b24 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8002500:	2201      	movs	r2, #1
 8002502:	4914      	ldr	r1, [pc, #80]	; (8002554 <MQTT_Publish+0x128>)
 8002504:	480f      	ldr	r0, [pc, #60]	; (8002544 <MQTT_Publish+0x118>)
 8002506:	f000 fa65 	bl	80029d4 <Compare_Str>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <MQTT_Publish+0xf8>
		{
				Log_Info((uint8_t*)"Publish Success!\n", 17);
 8002510:	2111      	movs	r1, #17
 8002512:	4811      	ldr	r0, [pc, #68]	; (8002558 <MQTT_Publish+0x12c>)
 8002514:	f7ff fa90 	bl	8001a38 <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8002518:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800251c:	f002 fff0 	bl	8005500 <HAL_Delay>
				return RESPONSE_OK;
 8002520:	2301      	movs	r3, #1
 8002522:	e008      	b.n	8002536 <MQTT_Publish+0x10a>
		}
		else
		{
			Log_Info((uint8_t*)"Publish not Success!\n", 21);
 8002524:	2115      	movs	r1, #21
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <MQTT_Publish+0x130>)
 8002528:	f7ff fa86 	bl	8001a38 <Log_Info>
		}
		HAL_Delay(MAX_WAIT_TIME);
 800252c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002530:	f002 ffe6 	bl	8005500 <HAL_Delay>
		return RESPONSE_ERR;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	0800dff0 	.word	0x0800dff0
 8002544:	20000744 	.word	0x20000744
 8002548:	20001174 	.word	0x20001174
 800254c:	20000641 	.word	0x20000641
 8002550:	20000644 	.word	0x20000644
 8002554:	0800df30 	.word	0x0800df30
 8002558:	0800e010 	.word	0x0800e010
 800255c:	0800e024 	.word	0x0800e024

08002560 <MQTT_SSL_Mode>:
  * @param  sslIndex: SSL context index (0-5)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Mode(uint8_t clientIndex,
												 uint8_t mode, uint8_t sslIndex)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af02      	add	r7, sp, #8
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	460b      	mov	r3, r1
 800256c:	71bb      	strb	r3, [r7, #6]
 800256e:	4613      	mov	r3, r2
 8002570:	717b      	strb	r3, [r7, #5]
		HAL_Delay(1000);
 8002572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002576:	f002 ffc3 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=ssl,%d,%d,%d\r", clientIndex, mode, sslIndex);
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	79b9      	ldrb	r1, [r7, #6]
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	490f      	ldr	r1, [pc, #60]	; (80025c4 <MQTT_SSL_Mode+0x64>)
 8002586:	4810      	ldr	r0, [pc, #64]	; (80025c8 <MQTT_SSL_Mode+0x68>)
 8002588:	f008 f890 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 21);
 800258c:	2215      	movs	r2, #21
 800258e:	490e      	ldr	r1, [pc, #56]	; (80025c8 <MQTT_SSL_Mode+0x68>)
 8002590:	480e      	ldr	r0, [pc, #56]	; (80025cc <MQTT_SSL_Mode+0x6c>)
 8002592:	f000 f9bb 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8002596:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800259a:	480c      	ldr	r0, [pc, #48]	; (80025cc <MQTT_SSL_Mode+0x6c>)
 800259c:	f000 fa68 	bl	8002a70 <Recv_Response>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <MQTT_SSL_Mode+0x52>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80025a6:	2107      	movs	r1, #7
 80025a8:	4809      	ldr	r0, [pc, #36]	; (80025d0 <MQTT_SSL_Mode+0x70>)
 80025aa:	f7ff fa45 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e004      	b.n	80025bc <MQTT_SSL_Mode+0x5c>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80025b2:	2108      	movs	r1, #8
 80025b4:	4807      	ldr	r0, [pc, #28]	; (80025d4 <MQTT_SSL_Mode+0x74>)
 80025b6:	f7ff fa3f 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	0800e03c 	.word	0x0800e03c
 80025c8:	20000744 	.word	0x20000744
 80025cc:	20001174 	.word	0x20001174
 80025d0:	0800de58 	.word	0x0800de58
 80025d4:	0800de60 	.word	0x0800de60

080025d8 <MQTT_SSL_Certificate>:
  * @brief  Config Certificates of SSL from file in UFS
	* @param  sslIndex: SSL context index (0-5)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Certificate(uint8_t sslIndex)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80025e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025e6:	f002 ff8b 	bl	8005500 <HAL_Delay>
		/*Send CA*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=cacert,%d,cacert.pem\r", sslIndex);
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4929      	ldr	r1, [pc, #164]	; (8002694 <MQTT_SSL_Certificate+0xbc>)
 80025f0:	4829      	ldr	r0, [pc, #164]	; (8002698 <MQTT_SSL_Certificate+0xc0>)
 80025f2:	f008 f85b 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 33);
 80025f6:	2221      	movs	r2, #33	; 0x21
 80025f8:	4927      	ldr	r1, [pc, #156]	; (8002698 <MQTT_SSL_Certificate+0xc0>)
 80025fa:	4828      	ldr	r0, [pc, #160]	; (800269c <MQTT_SSL_Certificate+0xc4>)
 80025fc:	f000 f986 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK) 
 8002600:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002604:	4825      	ldr	r0, [pc, #148]	; (800269c <MQTT_SSL_Certificate+0xc4>)
 8002606:	f000 fa33 	bl	8002a70 <Recv_Response>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d005      	beq.n	800261c <MQTT_SSL_Certificate+0x44>
		{
				Log_Info((uint8_t*)"CA_ERR\n", 7);
 8002610:	2107      	movs	r1, #7
 8002612:	4823      	ldr	r0, [pc, #140]	; (80026a0 <MQTT_SSL_Certificate+0xc8>)
 8002614:	f7ff fa10 	bl	8001a38 <Log_Info>
				return RESPONSE_ERR;
 8002618:	2300      	movs	r3, #0
 800261a:	e036      	b.n	800268a <MQTT_SSL_Certificate+0xb2>
		}
		
		/*Send CC*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=clientcert,%d,client.pem\r", sslIndex);
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	461a      	mov	r2, r3
 8002620:	4920      	ldr	r1, [pc, #128]	; (80026a4 <MQTT_SSL_Certificate+0xcc>)
 8002622:	481d      	ldr	r0, [pc, #116]	; (8002698 <MQTT_SSL_Certificate+0xc0>)
 8002624:	f008 f842 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 36);
 8002628:	2224      	movs	r2, #36	; 0x24
 800262a:	491b      	ldr	r1, [pc, #108]	; (8002698 <MQTT_SSL_Certificate+0xc0>)
 800262c:	481b      	ldr	r0, [pc, #108]	; (800269c <MQTT_SSL_Certificate+0xc4>)
 800262e:	f000 f96d 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK) 
 8002632:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002636:	4819      	ldr	r0, [pc, #100]	; (800269c <MQTT_SSL_Certificate+0xc4>)
 8002638:	f000 fa1a 	bl	8002a70 <Recv_Response>
 800263c:	4603      	mov	r3, r0
 800263e:	2b01      	cmp	r3, #1
 8002640:	d005      	beq.n	800264e <MQTT_SSL_Certificate+0x76>
		{
				Log_Info((uint8_t*)"CC_ERR\n", 7);
 8002642:	2107      	movs	r1, #7
 8002644:	4818      	ldr	r0, [pc, #96]	; (80026a8 <MQTT_SSL_Certificate+0xd0>)
 8002646:	f7ff f9f7 	bl	8001a38 <Log_Info>
				return RESPONSE_ERR;
 800264a:	2300      	movs	r3, #0
 800264c:	e01d      	b.n	800268a <MQTT_SSL_Certificate+0xb2>
		}
		
		/*Send CK*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=clientkey,%d,user_key.pem\r", sslIndex);
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	461a      	mov	r2, r3
 8002652:	4916      	ldr	r1, [pc, #88]	; (80026ac <MQTT_SSL_Certificate+0xd4>)
 8002654:	4810      	ldr	r0, [pc, #64]	; (8002698 <MQTT_SSL_Certificate+0xc0>)
 8002656:	f008 f829 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 37);
 800265a:	2225      	movs	r2, #37	; 0x25
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <MQTT_SSL_Certificate+0xc0>)
 800265e:	480f      	ldr	r0, [pc, #60]	; (800269c <MQTT_SSL_Certificate+0xc4>)
 8002660:	f000 f954 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK)
 8002664:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002668:	480c      	ldr	r0, [pc, #48]	; (800269c <MQTT_SSL_Certificate+0xc4>)
 800266a:	f000 fa01 	bl	8002a70 <Recv_Response>
 800266e:	4603      	mov	r3, r0
 8002670:	2b01      	cmp	r3, #1
 8002672:	d005      	beq.n	8002680 <MQTT_SSL_Certificate+0xa8>
		{
				Log_Info((uint8_t*)"CK_ERR\n", 7);
 8002674:	2107      	movs	r1, #7
 8002676:	480e      	ldr	r0, [pc, #56]	; (80026b0 <MQTT_SSL_Certificate+0xd8>)
 8002678:	f7ff f9de 	bl	8001a38 <Log_Info>
				return RESPONSE_ERR;
 800267c:	2300      	movs	r3, #0
 800267e:	e004      	b.n	800268a <MQTT_SSL_Certificate+0xb2>
		}
		else Log_Info((uint8_t*)"RES_OK\n", 7);
 8002680:	2107      	movs	r1, #7
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <MQTT_SSL_Certificate+0xdc>)
 8002684:	f7ff f9d8 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	0800e058 	.word	0x0800e058
 8002698:	20000744 	.word	0x20000744
 800269c:	20001174 	.word	0x20001174
 80026a0:	0800e07c 	.word	0x0800e07c
 80026a4:	0800e084 	.word	0x0800e084
 80026a8:	0800e0ac 	.word	0x0800e0ac
 80026ac:	0800e0b4 	.word	0x0800e0b4
 80026b0:	0800e0dc 	.word	0x0800e0dc
 80026b4:	0800de58 	.word	0x0800de58

080026b8 <MQTT_SSL_Level>:
  * @param  level: SSL level (0-2)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Level(uint8_t sslIndex,
												  uint8_t level)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	460a      	mov	r2, r1
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 80026c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026cc:	f002 ff18 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=seclevel,%d,%d\r", sslIndex, level);
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	490f      	ldr	r1, [pc, #60]	; (8002714 <MQTT_SSL_Level+0x5c>)
 80026d6:	4810      	ldr	r0, [pc, #64]	; (8002718 <MQTT_SSL_Level+0x60>)
 80026d8:	f007 ffe8 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 25);
 80026dc:	2219      	movs	r2, #25
 80026de:	490e      	ldr	r1, [pc, #56]	; (8002718 <MQTT_SSL_Level+0x60>)
 80026e0:	480e      	ldr	r0, [pc, #56]	; (800271c <MQTT_SSL_Level+0x64>)
 80026e2:	f000 f913 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80026e6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80026ea:	480c      	ldr	r0, [pc, #48]	; (800271c <MQTT_SSL_Level+0x64>)
 80026ec:	f000 f9c0 	bl	8002a70 <Recv_Response>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d105      	bne.n	8002702 <MQTT_SSL_Level+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80026f6:	2107      	movs	r1, #7
 80026f8:	4809      	ldr	r0, [pc, #36]	; (8002720 <MQTT_SSL_Level+0x68>)
 80026fa:	f7ff f99d 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 80026fe:	2301      	movs	r3, #1
 8002700:	e004      	b.n	800270c <MQTT_SSL_Level+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8002702:	2108      	movs	r1, #8
 8002704:	4807      	ldr	r0, [pc, #28]	; (8002724 <MQTT_SSL_Level+0x6c>)
 8002706:	f7ff f997 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0800e0e4 	.word	0x0800e0e4
 8002718:	20000744 	.word	0x20000744
 800271c:	20001174 	.word	0x20001174
 8002720:	0800de58 	.word	0x0800de58
 8002724:	0800de60 	.word	0x0800de60

08002728 <MQTT_SSL_Version>:
  * @param  version: SSL version (0-4)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Version(uint8_t sslIndex,
												    uint8_t version)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	460a      	mov	r2, r1
 8002732:	71fb      	strb	r3, [r7, #7]
 8002734:	4613      	mov	r3, r2
 8002736:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 8002738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800273c:	f002 fee0 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=sslversion,%d,%d\r", sslIndex, version);
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	79bb      	ldrb	r3, [r7, #6]
 8002744:	490f      	ldr	r1, [pc, #60]	; (8002784 <MQTT_SSL_Version+0x5c>)
 8002746:	4810      	ldr	r0, [pc, #64]	; (8002788 <MQTT_SSL_Version+0x60>)
 8002748:	f007 ffb0 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 27);
 800274c:	221b      	movs	r2, #27
 800274e:	490e      	ldr	r1, [pc, #56]	; (8002788 <MQTT_SSL_Version+0x60>)
 8002750:	480e      	ldr	r0, [pc, #56]	; (800278c <MQTT_SSL_Version+0x64>)
 8002752:	f000 f8db 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8002756:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <MQTT_SSL_Version+0x64>)
 800275c:	f000 f988 	bl	8002a70 <Recv_Response>
 8002760:	4603      	mov	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <MQTT_SSL_Version+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8002766:	2107      	movs	r1, #7
 8002768:	4809      	ldr	r0, [pc, #36]	; (8002790 <MQTT_SSL_Version+0x68>)
 800276a:	f7ff f965 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 800276e:	2301      	movs	r3, #1
 8002770:	e004      	b.n	800277c <MQTT_SSL_Version+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8002772:	2108      	movs	r1, #8
 8002774:	4807      	ldr	r0, [pc, #28]	; (8002794 <MQTT_SSL_Version+0x6c>)
 8002776:	f7ff f95f 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	0800e100 	.word	0x0800e100
 8002788:	20000744 	.word	0x20000744
 800278c:	20001174 	.word	0x20001174
 8002790:	0800de58 	.word	0x0800de58
 8002794:	0800de60 	.word	0x0800de60

08002798 <MQTT_SSL_Ciphersuite>:
  * @param  cipherSuite: string type format 0xYYYY
  * @retval OK or ERR
  */
response_t MQTT_SSL_Ciphersuite(uint8_t sslIndex,
																uint8_t* cipherSuite)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80027a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a8:	f002 feaa 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=ciphersuite,%d,%s\r", sslIndex, cipherSuite);
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	490f      	ldr	r1, [pc, #60]	; (80027f0 <MQTT_SSL_Ciphersuite+0x58>)
 80027b2:	4810      	ldr	r0, [pc, #64]	; (80027f4 <MQTT_SSL_Ciphersuite+0x5c>)
 80027b4:	f007 ff7a 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 33);
 80027b8:	2221      	movs	r2, #33	; 0x21
 80027ba:	490e      	ldr	r1, [pc, #56]	; (80027f4 <MQTT_SSL_Ciphersuite+0x5c>)
 80027bc:	480e      	ldr	r0, [pc, #56]	; (80027f8 <MQTT_SSL_Ciphersuite+0x60>)
 80027be:	f000 f8a5 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80027c2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80027c6:	480c      	ldr	r0, [pc, #48]	; (80027f8 <MQTT_SSL_Ciphersuite+0x60>)
 80027c8:	f000 f952 	bl	8002a70 <Recv_Response>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <MQTT_SSL_Ciphersuite+0x46>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80027d2:	2107      	movs	r1, #7
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <MQTT_SSL_Ciphersuite+0x64>)
 80027d6:	f7ff f92f 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 80027da:	2301      	movs	r3, #1
 80027dc:	e004      	b.n	80027e8 <MQTT_SSL_Ciphersuite+0x50>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80027de:	2108      	movs	r1, #8
 80027e0:	4807      	ldr	r0, [pc, #28]	; (8002800 <MQTT_SSL_Ciphersuite+0x68>)
 80027e2:	f7ff f929 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	0800e120 	.word	0x0800e120
 80027f4:	20000744 	.word	0x20000744
 80027f8:	20001174 	.word	0x20001174
 80027fc:	0800de58 	.word	0x0800de58
 8002800:	0800de60 	.word	0x0800de60

08002804 <MQTT_SSL_Ignore>:
  * @param  ignoreltime: 0 (care about validity check for certificate) or 1 (ignore)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Ignore(uint8_t sslIndex,
													 uint8_t ignoreltime)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	460a      	mov	r2, r1
 800280e:	71fb      	strb	r3, [r7, #7]
 8002810:	4613      	mov	r3, r2
 8002812:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 8002814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002818:	f002 fe72 	bl	8005500 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=ignorelocaltime,%d,%d\r", sslIndex, ignoreltime);
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	79bb      	ldrb	r3, [r7, #6]
 8002820:	490f      	ldr	r1, [pc, #60]	; (8002860 <MQTT_SSL_Ignore+0x5c>)
 8002822:	4810      	ldr	r0, [pc, #64]	; (8002864 <MQTT_SSL_Ignore+0x60>)
 8002824:	f007 ff42 	bl	800a6ac <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 32);
 8002828:	2220      	movs	r2, #32
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <MQTT_SSL_Ignore+0x60>)
 800282c:	480e      	ldr	r0, [pc, #56]	; (8002868 <MQTT_SSL_Ignore+0x64>)
 800282e:	f000 f86d 	bl	800290c <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8002832:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002836:	480c      	ldr	r0, [pc, #48]	; (8002868 <MQTT_SSL_Ignore+0x64>)
 8002838:	f000 f91a 	bl	8002a70 <Recv_Response>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <MQTT_SSL_Ignore+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8002842:	2107      	movs	r1, #7
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <MQTT_SSL_Ignore+0x68>)
 8002846:	f7ff f8f7 	bl	8001a38 <Log_Info>
				return RESPONSE_OK;
 800284a:	2301      	movs	r3, #1
 800284c:	e004      	b.n	8002858 <MQTT_SSL_Ignore+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800284e:	2108      	movs	r1, #8
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <MQTT_SSL_Ignore+0x6c>)
 8002852:	f7ff f8f1 	bl	8001a38 <Log_Info>
		return RESPONSE_ERR;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	0800e140 	.word	0x0800e140
 8002864:	20000744 	.word	0x20000744
 8002868:	20001174 	.word	0x20001174
 800286c:	0800de58 	.word	0x0800de58
 8002870:	0800de60 	.word	0x0800de60

08002874 <UartEmul_Init>:
  * @brief  Initializes the UART Emulation 
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void UartEmul_Init(UART_Emul_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
		huart->Init.Mode        = UART_EMUL_MODE_TX_RX;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2203      	movs	r2, #3
 8002880:	711a      	strb	r2, [r3, #4]
		huart->Init.BaudRate    = 4800; //9600; //115200;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002888:	609a      	str	r2, [r3, #8]
		huart->Init.StopBits    = UART_EMUL_STOPBITS_1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	735a      	strb	r2, [r3, #13]
		huart->Init.Parity      = UART_EMUL_PARITY_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	739a      	strb	r2, [r3, #14]
		huart->Init.WordLength  = UART_EMUL_WORDLENGTH_8B;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2208      	movs	r2, #8
 800289a:	731a      	strb	r2, [r3, #12]
		
		if (HAL_UART_Emul_Init(huart) != HAL_OK)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f98b 	bl	8002bb8 <HAL_UART_Emul_Init>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <UartEmul_Init+0x3c>
		{
				HAL_Delay(500);
 80028a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028ac:	f002 fe28 	bl	8005500 <HAL_Delay>
		}
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Emul_RxCpltCallback>:
  * @brief  Receive data complete callback
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void HAL_UART_Emul_RxCpltCallback(UART_Emul_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
		g_recv_buff[g_count++] = g_recv_byte;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_UART_Emul_RxCpltCallback+0x2c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	b2d1      	uxtb	r1, r2
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <HAL_UART_Emul_RxCpltCallback+0x2c>)
 80028ca:	7011      	strb	r1, [r2, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_UART_Emul_RxCpltCallback+0x30>)
 80028d0:	7819      	ldrb	r1, [r3, #0]
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_UART_Emul_RxCpltCallback+0x34>)
 80028d4:	5499      	strb	r1, [r3, r2]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000640 	.word	0x20000640
 80028e8:	2000063f 	.word	0x2000063f
 80028ec:	20000644 	.word	0x20000644

080028f0 <HAL_UART_Emul_ErrorCallback>:
  * @brief  UART Emul error callback
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void HAL_UART_Emul_ErrorCallback(UART_Emul_HandleTypeDef *UartEmulHandle)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
		Log_Info((uint8_t*)"BUG\n", 4);
 80028f8:	2104      	movs	r1, #4
 80028fa:	4803      	ldr	r0, [pc, #12]	; (8002908 <HAL_UART_Emul_ErrorCallback+0x18>)
 80028fc:	f7ff f89c 	bl	8001a38 <Log_Info>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	0800e258 	.word	0x0800e258

0800290c <Trans_Data>:
	* @param  pData: pointer to data string
	* @param  Size: size of data
  * @retval None
  */
void Trans_Data(UART_Emul_HandleTypeDef * huart, uint8_t *pData, uint16_t Size)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
		UartEmul_Init(huart);
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff ffaa 	bl	8002874 <UartEmul_Init>
		HAL_Delay(10);
 8002920:	200a      	movs	r0, #10
 8002922:	f002 fded 	bl	8005500 <HAL_Delay>
		UartEmul_Init(huart);
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff ffa4 	bl	8002874 <UartEmul_Init>
		HAL_Delay(10);
 800292c:	200a      	movs	r0, #10
 800292e:	f002 fde7 	bl	8005500 <HAL_Delay>
		if (HAL_UART_Emul_Transmit_DMA(huart, pData, Size) != HAL_OK)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	461a      	mov	r2, r3
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f969 	bl	8002c10 <HAL_UART_Emul_Transmit_DMA>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <Trans_Data+0x40>
		{
				Log_Info((uint8_t*)"Error_Handler\n", 14);
 8002944:	210e      	movs	r1, #14
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <Trans_Data+0x58>)
 8002948:	f7ff f876 	bl	8001a38 <Log_Info>
		}
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_TC) != SET){};
 800294c:	bf00      	nop
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d1f8      	bne.n	800294e <Trans_Data+0x42>
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	0800e260 	.word	0x0800e260

08002968 <Recv_Data>:
	* @param  timeNow: tick value of moment call this function
	* @param  timeOut: time to wait response
  * @retval none
  */
void Recv_Data(UART_Emul_HandleTypeDef * huart, uint32_t timeNow, uint32_t timeOut)
{		
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
//		UartEmul_Init(huart);
		if (HAL_UART_Emul_Receive_DMA(huart, &g_recv_byte, 1) != HAL_OK)
 8002974:	2201      	movs	r2, #1
 8002976:	4915      	ldr	r1, [pc, #84]	; (80029cc <Recv_Data+0x64>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f9c3 	bl	8002d04 <HAL_UART_Emul_Receive_DMA>
		{
//				HAL_Delay(500);
//				Log_Info((uint8_t*)"Error_Handler\n", 14);
		}
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_RC) != SET)
 800297e:	e012      	b.n	80029a6 <Recv_Data+0x3e>
		{
				if ((HAL_GetTick() - timeNow) > timeOut)
 8002980:	f002 fdb2 	bl	80054e8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d20a      	bcs.n	80029a6 <Recv_Data+0x3e>
				{
						__HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_RC);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	701a      	strb	r2, [r3, #0]
						g_isDone = RX_TRUE;	
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <Recv_Data+0x68>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_RC) != SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d1e5      	bne.n	8002980 <Recv_Data+0x18>
				}
		}
		__HAL_UART_EMUL_CLEAR_FLAG(huart, UART_EMUL_FLAG_RC);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	701a      	strb	r2, [r3, #0]
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	2000063f 	.word	0x2000063f
 80029d0:	20000642 	.word	0x20000642

080029d4 <Compare_Str>:
  * @param  str1, str2: pointer to 2 addresses of strings
	* @param  len: length of datas to compare
  * @retval true(1) or false(0)
  */
uint8_t Compare_Str(uint8_t* str1, uint8_t* str2, uint8_t len)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	71fb      	strb	r3, [r7, #7]
		while(len)
 80029e2:	e00e      	b.n	8002a02 <Compare_Str+0x2e>
		{
				if(*str1++ != *str2++)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	60fa      	str	r2, [r7, #12]
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <Compare_Str+0x28>
				{
						return 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e006      	b.n	8002a0a <Compare_Str+0x36>
				}
				len--;
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	71fb      	strb	r3, [r7, #7]
		while(len)
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ed      	bne.n	80029e4 <Compare_Str+0x10>
		}
		return 1;
 8002a08:	2301      	movs	r3, #1
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <Confirm_OK>:
  * @brief  Compare string with "\r\nOK\r\n" 
  * @param  inputStr: pointer to addres of string input
  * @retval true(1) or false(0)
  */
uint8_t Confirm_OK(uint8_t* inputStr)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
		if(Compare_Str(inputStr, (uint8_t*)"\r\nOK\r\n", 6)) return 1;
 8002a20:	2206      	movs	r2, #6
 8002a22:	4907      	ldr	r1, [pc, #28]	; (8002a40 <Confirm_OK+0x28>)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ffd5 	bl	80029d4 <Compare_Str>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <Confirm_OK+0x1c>
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <Confirm_OK+0x1e>
		return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	0800e270 	.word	0x0800e270

08002a44 <Check_MQTT>:
  * @brief  Check response from UART, if MQTT Status is close
	* @param  inputStr: pointer to input string
  * @retval true(1) or false(0)
  */
uint8_t Check_MQTT(uint8_t* inputStr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
		if(Compare_Str(inputStr, (uint8_t*)"\r\n+QMTSTAT: 0,1\r\n", 17)) return 1;
 8002a4c:	2211      	movs	r2, #17
 8002a4e:	4907      	ldr	r1, [pc, #28]	; (8002a6c <Check_MQTT+0x28>)
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffbf 	bl	80029d4 <Compare_Str>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <Check_MQTT+0x1c>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <Check_MQTT+0x1e>
		return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	0800e278 	.word	0x0800e278

08002a70 <Recv_Response>:
  * @param  huart: UART Emulation Handle
	* @param  timeOut: time to wait response
  * @retval RESPONSE_OK, RESPONSE_ERR or RESPONSE_NEW_MSG
  */
response_t Recv_Response(UART_Emul_HandleTypeDef *huart, uint32_t timeOut)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
			response_t retValue = RESPONSE_ERR;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]
			while(!g_isDone)
 8002a7e:	e00b      	b.n	8002a98 <Recv_Response+0x28>
			{		
					g_timeNow = HAL_GetTick();		
 8002a80:	f002 fd32 	bl	80054e8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <Recv_Response+0xa0>)
 8002a88:	601a      	str	r2, [r3, #0]
					Recv_Data(huart, g_timeNow, timeOut);
 8002a8a:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <Recv_Response+0xa0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff68 	bl	8002968 <Recv_Data>
			while(!g_isDone)
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <Recv_Response+0xa4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <Recv_Response+0x10>
			}
			Log_Info(g_recv_buff, g_count);
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <Recv_Response+0xa8>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	481d      	ldr	r0, [pc, #116]	; (8002b1c <Recv_Response+0xac>)
 8002aa8:	f7fe ffc6 	bl	8001a38 <Log_Info>
			g_isDone = RX_FALSE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <Recv_Response+0xa4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
			
			if(Confirm_OK(&g_recv_buff[g_count-6])) //if response stop by "\r\nOK\r\n"
 8002ab2:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <Recv_Response+0xa8>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	3b06      	subs	r3, #6
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <Recv_Response+0xac>)
 8002aba:	4413      	add	r3, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ffab 	bl	8002a18 <Confirm_OK>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <Recv_Response+0x5c>
			{
				retValue = RESPONSE_OK;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
			}
			if(Check_New_Msg(g_recv_buff))	//if response start by "\r\n+CTMI"
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <Recv_Response+0xac>)
 8002ace:	f000 f855 	bl	8002b7c <Check_New_Msg>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <Recv_Response+0x6c>
			{
				retValue = RESPONSE_NEW_MSG;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	73fb      	strb	r3, [r7, #15]
			}
			if(Check_MQTT(&g_recv_buff[g_count-17]))
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <Recv_Response+0xa8>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3b11      	subs	r3, #17
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <Recv_Response+0xac>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ffac 	bl	8002a44 <Check_MQTT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <Recv_Response+0x86>
			{
					retValue = RESPONSE_MQTT_CLOSE;
 8002af2:	2303      	movs	r3, #3
 8002af4:	73fb      	strb	r3, [r7, #15]
			}
			g_count_temp = g_count;	//pass value of 'g_count' into 'g_count_temp' to use in user file
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <Recv_Response+0xa8>)
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <Recv_Response+0xb0>)
 8002afc:	701a      	strb	r2, [r3, #0]
			g_count = 0;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <Recv_Response+0xa8>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
			return retValue;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000848 	.word	0x20000848
 8002b14:	20000642 	.word	0x20000642
 8002b18:	20000640 	.word	0x20000640
 8002b1c:	20000644 	.word	0x20000644
 8002b20:	20000641 	.word	0x20000641

08002b24 <Get_Paragraph>:
	* @param  idStartSource: id start copy of source str
	* @param  idStopSource: id stop copy of source str
  * @retval none
  */
void Get_Paragraph(uint8_t* strTarget, uint8_t* strSource, uint8_t idStartSource, uint8_t idStopSource)
{	
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	460b      	mov	r3, r1
 8002b34:	71fb      	strb	r3, [r7, #7]
 8002b36:	4613      	mov	r3, r2
 8002b38:	71bb      	strb	r3, [r7, #6]
		uint8_t number = idStopSource - idStartSource + 1;
 8002b3a:	79ba      	ldrb	r2, [r7, #6]
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 0; i < number; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
 8002b4a:	e00c      	b.n	8002b66 <Get_Paragraph+0x42>
		{
				*(strTarget + i) = *(strSource + idStartSource + i);
 8002b4c:	79fa      	ldrb	r2, [r7, #7]
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	4413      	add	r3, r2
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	441a      	add	r2, r3
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	440b      	add	r3, r1
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < number; i++)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	3301      	adds	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
 8002b66:	7dfa      	ldrb	r2, [r7, #23]
 8002b68:	7dbb      	ldrb	r3, [r7, #22]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d3ee      	bcc.n	8002b4c <Get_Paragraph+0x28>
		}
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <Check_New_Msg>:
  * @brief  Check response from UART, is a new message or not
	* @param  inputStr: pointer to input string
  * @retval true(1) or false(0)
  */
uint8_t Check_New_Msg(uint8_t* inputStr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    Get_Paragraph(g_buff_temp, inputStr, 0, 6);
 8002b84:	2306      	movs	r3, #6
 8002b86:	2200      	movs	r2, #0
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4809      	ldr	r0, [pc, #36]	; (8002bb0 <Check_New_Msg+0x34>)
 8002b8c:	f7ff ffca 	bl	8002b24 <Get_Paragraph>
    if(Compare_Str(g_buff_temp, (uint8_t*)"\r\n+CMTI", 7)) return 1;
 8002b90:	2207      	movs	r2, #7
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <Check_New_Msg+0x38>)
 8002b94:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <Check_New_Msg+0x34>)
 8002b96:	f7ff ff1d 	bl	80029d4 <Compare_Str>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <Check_New_Msg+0x28>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <Check_New_Msg+0x2a>
        else return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000744 	.word	0x20000744
 8002bb4:	0800e28c 	.word	0x0800e28c

08002bb8 <HAL_UART_Emul_Init>:
  *         the UART_Emul_InitTypeDef and create the associated handle.
  * @param  huart: UART Emulation handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Emul_Init(UART_Emul_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Emul_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e01b      	b.n	8002c02 <HAL_UART_Emul_Init+0x4a>
  }

  if (huart->State == HAL_UART_EMUL_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <HAL_UART_Emul_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_Emul_MspInit(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fd86 	bl	80016e8 <HAL_UART_Emul_MspInit>
  }

  /* Get Structure for uart emul Handle */
  huart_emul = huart;
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_UART_Emul_Init+0x54>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]

  /* Set the TIM state */
  huart->State = HAL_UART_EMUL_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the UART Emulation Communication parameters */
  UART_Emul_SetConfig(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f001 face 	bl	800418c <UART_Emul_SetConfig>

  /* Initialize the UART Emulation state */
  huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  huart->State = HAL_UART_EMUL_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000300 	.word	0x20000300

08002c10 <HAL_UART_Emul_Transmit_DMA>:
 * @param  pData: Pointer to data buffer
 * @param  Size: Amount of data to be sent
 * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Emul_Transmit_DMA(UART_Emul_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  tmp = huart->State;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	617b      	str	r3, [r7, #20]
  if ((tmp == HAL_UART_EMUL_STATE_READY) || (tmp == HAL_UART_EMUL_STATE_BUSY_RX))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d002      	beq.n	8002c38 <HAL_UART_Emul_Transmit_DMA+0x28>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d154      	bne.n	8002ce2 <HAL_UART_Emul_Transmit_DMA+0xd2>
  {
    if ((pData == NULL ) || (Size == 0))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_UART_Emul_Transmit_DMA+0x34>
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_UART_Emul_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e04d      	b.n	8002ce4 <HAL_UART_Emul_Transmit_DMA+0xd4>
    }

    huart->TxXferSize = Size;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	831a      	strh	r2, [r3, #24]
    huart->pTxBuffPtr = pData;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	615a      	str	r2, [r3, #20]
    huart->TxXferCount = 1;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	835a      	strh	r2, [r3, #26]
    huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a receive process is ongoing or not */
    if (huart->State == HAL_UART_EMUL_STATE_BUSY_RX)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d104      	bne.n	8002c78 <HAL_UART_Emul_Transmit_DMA+0x68>
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX_RX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2210      	movs	r2, #16
 8002c72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002c76:	e003      	b.n	8002c80 <HAL_UART_Emul_Transmit_DMA+0x70>
    }
    else
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Set the UART Emulation DMA transfer complete callback */
    TimHandle.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = UART_Emul_DMATransmitCplt;
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_UART_Emul_Transmit_DMA+0xdc>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_UART_Emul_Transmit_DMA+0xe0>)
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    TimHandle.hdma[TIM_DMA_ID_CC1]->XferErrorCallback = UART_Emul_DMAError;
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_UART_Emul_Transmit_DMA+0xdc>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_UART_Emul_Transmit_DMA+0xe4>)
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Format first Frame to be sent */
    if (huart->TxXferCount == FIRST_BYTE)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8b5b      	ldrh	r3, [r3, #26]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d10e      	bne.n	8002cb6 <HAL_UART_Emul_Transmit_DMA+0xa6>
    {
      /* Format Frame to be sent */
      UART_Emul_TransmitFormatFrame(huart, *(pData), (uint32_t*)pFirstBuffer_Tx);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <HAL_UART_Emul_Transmit_DMA+0xe8>)
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 fc43 	bl	800452c <UART_Emul_TransmitFormatFrame>

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4814      	ldr	r0, [pc, #80]	; (8002cfc <HAL_UART_Emul_Transmit_DMA+0xec>)
 8002cac:	f005 fcd4 	bl	8008658 <TIM_CCxChannelCmd>

      /* Send Frames */
      UART_Emul_TransmitFrame(huart);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 fcf3 	bl	800469c <UART_Emul_TransmitFrame>
    }

    if ((huart->TxXferCount == FIRST_BYTE) && (huart->TxXferCount < Size))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8b5b      	ldrh	r3, [r3, #26]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10f      	bne.n	8002cde <HAL_UART_Emul_Transmit_DMA+0xce>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8b5b      	ldrh	r3, [r3, #26]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d90a      	bls.n	8002cde <HAL_UART_Emul_Transmit_DMA+0xce>
    { 
      /* Format Second Frame to be sent */
      UART_Emul_TransmitFormatFrame(huart, *(pData + huart->TxXferCount), (uint32_t*)pSecondBuffer_Tx);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8b5b      	ldrh	r3, [r3, #26]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_UART_Emul_Transmit_DMA+0xf0>)
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f001 fc27 	bl	800452c <UART_Emul_TransmitFormatFrame>
    }

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_UART_Emul_Transmit_DMA+0xd4>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	200002c0 	.word	0x200002c0
 8002cf0:	08004771 	.word	0x08004771
 8002cf4:	08004881 	.word	0x08004881
 8002cf8:	20000364 	.word	0x20000364
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	20000394 	.word	0x20000394

08002d04 <HAL_UART_Emul_Receive_DMA>:
 * @param  Size: Amount of data to be received
 * @retval HAL status
*/

HAL_StatusTypeDef HAL_UART_Emul_Receive_DMA(UART_Emul_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]

  tmp = huart->State;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	617b      	str	r3, [r7, #20]
//	sprintf((char*)log_buff, "State = %x\n", huart->State);
//	Log_Info((uint8_t*)log_buff, 11);
//	sprintf((char*)log_buff, "SR = %x\n", huart->Instance.SR);
//	Log_Info((uint8_t*)log_buff, 7);
  if ((tmp == HAL_UART_EMUL_STATE_READY) || (tmp == HAL_UART_EMUL_STATE_BUSY_TX))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Emul_Receive_DMA+0x28>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d132      	bne.n	8002d92 <HAL_UART_Emul_Receive_DMA+0x8e>
  {
    if ((pData == NULL ) || (Size == 0))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_UART_Emul_Receive_DMA+0x34>
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_UART_Emul_Receive_DMA+0x38>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e02b      	b.n	8002d94 <HAL_UART_Emul_Receive_DMA+0x90>
    }

    huart->pRxBuffPtr = pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	61da      	str	r2, [r3, #28]
    huart->RxXferSize = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	841a      	strh	r2, [r3, #32]
    huart->RxXferCount = 1;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	845a      	strh	r2, [r3, #34]	; 0x22

    huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a transmit process is ongoing or not */
    if (huart->State == HAL_UART_EMUL_STATE_BUSY_TX)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d104      	bne.n	8002d6c <HAL_UART_Emul_Receive_DMA+0x68>
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX_RX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2210      	movs	r2, #16
 8002d66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002d6a:	e003      	b.n	8002d74 <HAL_UART_Emul_Receive_DMA+0x70>
    }
    else
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_RX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }
//		sprintf((char*)log_buff, "State = %x\n", huart->State);
//		Log_Info((uint8_t*)log_buff, 11);
    /* Set the UART Emulation DMA transfer complete callback */
    TimHandle.hdma[TIM_DMA_ID_CC2]->XferCpltCallback = UART_Emul_DMAReceiveCplt;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_UART_Emul_Receive_DMA+0x98>)
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_UART_Emul_Receive_DMA+0x9c>)
 8002d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    TimHandle.hdma[TIM_DMA_ID_CC2]->XferErrorCallback = UART_Emul_DMAError;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_UART_Emul_Receive_DMA+0x98>)
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_UART_Emul_Receive_DMA+0xa0>)
 8002d82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d84:	2201      	movs	r2, #1
 8002d86:	2104      	movs	r1, #4
 8002d88:	4807      	ldr	r0, [pc, #28]	; (8002da8 <HAL_UART_Emul_Receive_DMA+0xa4>)
 8002d8a:	f005 fc65 	bl	8008658 <TIM_CCxChannelCmd>
//		sprintf((char*)log_buff, "SR = %x\n", huart->Instance.SR);
//		Log_Info((uint8_t*)log_buff, 7);
    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_UART_Emul_Receive_DMA+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200002c0 	.word	0x200002c0
 8002da0:	08003fa5 	.word	0x08003fa5
 8002da4:	08004881 	.word	0x08004881
 8002da8:	40010000 	.word	0x40010000

08002dac <DMA2_Stream2_IRQHandler>:
* @brief  This function handles DMA interrupt request for TC.
* @param  None
* @retval None
*/
void UART_EMUL_RX_DMA_IRQHandler(void)
{ 
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Increment Counter of Frame */
  huart_emul->RxXferCount ++;
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <DMA2_Stream2_IRQHandler+0x20c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002db6:	3201      	adds	r2, #1
 8002db8:	b292      	uxth	r2, r2
 8002dba:	845a      	strh	r2, [r3, #34]	; 0x22

  /* Enable External interrupt for next Frame */
  EXTI->IMR |= huart_emul->Init.RxPinNumber;
 8002dbc:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <DMA2_Stream2_IRQHandler+0x210>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7d      	ldr	r2, [pc, #500]	; (8002fb8 <DMA2_Stream2_IRQHandler+0x20c>)
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	8a12      	ldrh	r2, [r2, #16]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4a7c      	ldr	r2, [pc, #496]	; (8002fbc <DMA2_Stream2_IRQHandler+0x210>)
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	6013      	str	r3, [r2, #0]

  if (__HAL_DMA_GET_FLAG(TimHandle.hdma[TIM_DMA_ID_CC2], __HAL_DMA_GET_TE_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC2])) != RESET)
 8002dce:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <DMA2_Stream2_IRQHandler+0x218>)
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d972      	bls.n	8002ec2 <DMA2_Stream2_IRQHandler+0x116>
 8002ddc:	4b7a      	ldr	r3, [pc, #488]	; (8002fc8 <DMA2_Stream2_IRQHandler+0x21c>)
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4979      	ldr	r1, [pc, #484]	; (8002fcc <DMA2_Stream2_IRQHandler+0x220>)
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d062      	beq.n	8002eb2 <DMA2_Stream2_IRQHandler+0x106>
 8002dec:	4b74      	ldr	r3, [pc, #464]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4977      	ldr	r1, [pc, #476]	; (8002fd0 <DMA2_Stream2_IRQHandler+0x224>)
 8002df4:	428b      	cmp	r3, r1
 8002df6:	d05a      	beq.n	8002eae <DMA2_Stream2_IRQHandler+0x102>
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4975      	ldr	r1, [pc, #468]	; (8002fd4 <DMA2_Stream2_IRQHandler+0x228>)
 8002e00:	428b      	cmp	r3, r1
 8002e02:	d052      	beq.n	8002eaa <DMA2_Stream2_IRQHandler+0xfe>
 8002e04:	4b6e      	ldr	r3, [pc, #440]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4973      	ldr	r1, [pc, #460]	; (8002fd8 <DMA2_Stream2_IRQHandler+0x22c>)
 8002e0c:	428b      	cmp	r3, r1
 8002e0e:	d04a      	beq.n	8002ea6 <DMA2_Stream2_IRQHandler+0xfa>
 8002e10:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4971      	ldr	r1, [pc, #452]	; (8002fdc <DMA2_Stream2_IRQHandler+0x230>)
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	d041      	beq.n	8002ea0 <DMA2_Stream2_IRQHandler+0xf4>
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	496f      	ldr	r1, [pc, #444]	; (8002fe0 <DMA2_Stream2_IRQHandler+0x234>)
 8002e24:	428b      	cmp	r3, r1
 8002e26:	d038      	beq.n	8002e9a <DMA2_Stream2_IRQHandler+0xee>
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	496d      	ldr	r1, [pc, #436]	; (8002fe4 <DMA2_Stream2_IRQHandler+0x238>)
 8002e30:	428b      	cmp	r3, r1
 8002e32:	d02f      	beq.n	8002e94 <DMA2_Stream2_IRQHandler+0xe8>
 8002e34:	4b62      	ldr	r3, [pc, #392]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	496b      	ldr	r1, [pc, #428]	; (8002fe8 <DMA2_Stream2_IRQHandler+0x23c>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d026      	beq.n	8002e8e <DMA2_Stream2_IRQHandler+0xe2>
 8002e40:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4969      	ldr	r1, [pc, #420]	; (8002fec <DMA2_Stream2_IRQHandler+0x240>)
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	d01d      	beq.n	8002e88 <DMA2_Stream2_IRQHandler+0xdc>
 8002e4c:	4b5c      	ldr	r3, [pc, #368]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4967      	ldr	r1, [pc, #412]	; (8002ff0 <DMA2_Stream2_IRQHandler+0x244>)
 8002e54:	428b      	cmp	r3, r1
 8002e56:	d014      	beq.n	8002e82 <DMA2_Stream2_IRQHandler+0xd6>
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4965      	ldr	r1, [pc, #404]	; (8002ff4 <DMA2_Stream2_IRQHandler+0x248>)
 8002e60:	428b      	cmp	r3, r1
 8002e62:	d00b      	beq.n	8002e7c <DMA2_Stream2_IRQHandler+0xd0>
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4963      	ldr	r1, [pc, #396]	; (8002ff8 <DMA2_Stream2_IRQHandler+0x24c>)
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d102      	bne.n	8002e76 <DMA2_Stream2_IRQHandler+0xca>
 8002e70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e74:	e01e      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7a:	e01b      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e80:	e018      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e86:	e015      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002e8c:	e012      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e92:	e00f      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e98:	e00c      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e9e:	e009      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	e006      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	e004      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	e002      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	e000      	b.n	8002eb4 <DMA2_Stream2_IRQHandler+0x108>
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	e1a9      	b.n	8003216 <DMA2_Stream2_IRQHandler+0x46a>
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <DMA2_Stream2_IRQHandler+0x250>)
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	f240 8097 	bls.w	8003000 <DMA2_Stream2_IRQHandler+0x254>
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <DMA2_Stream2_IRQHandler+0x21c>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	493b      	ldr	r1, [pc, #236]	; (8002fcc <DMA2_Stream2_IRQHandler+0x220>)
 8002ede:	428b      	cmp	r3, r1
 8002ee0:	d062      	beq.n	8002fa8 <DMA2_Stream2_IRQHandler+0x1fc>
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4939      	ldr	r1, [pc, #228]	; (8002fd0 <DMA2_Stream2_IRQHandler+0x224>)
 8002eea:	428b      	cmp	r3, r1
 8002eec:	d05a      	beq.n	8002fa4 <DMA2_Stream2_IRQHandler+0x1f8>
 8002eee:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4937      	ldr	r1, [pc, #220]	; (8002fd4 <DMA2_Stream2_IRQHandler+0x228>)
 8002ef6:	428b      	cmp	r3, r1
 8002ef8:	d052      	beq.n	8002fa0 <DMA2_Stream2_IRQHandler+0x1f4>
 8002efa:	4b31      	ldr	r3, [pc, #196]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <DMA2_Stream2_IRQHandler+0x22c>)
 8002f02:	428b      	cmp	r3, r1
 8002f04:	d04a      	beq.n	8002f9c <DMA2_Stream2_IRQHandler+0x1f0>
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4933      	ldr	r1, [pc, #204]	; (8002fdc <DMA2_Stream2_IRQHandler+0x230>)
 8002f0e:	428b      	cmp	r3, r1
 8002f10:	d041      	beq.n	8002f96 <DMA2_Stream2_IRQHandler+0x1ea>
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4931      	ldr	r1, [pc, #196]	; (8002fe0 <DMA2_Stream2_IRQHandler+0x234>)
 8002f1a:	428b      	cmp	r3, r1
 8002f1c:	d038      	beq.n	8002f90 <DMA2_Stream2_IRQHandler+0x1e4>
 8002f1e:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	492f      	ldr	r1, [pc, #188]	; (8002fe4 <DMA2_Stream2_IRQHandler+0x238>)
 8002f26:	428b      	cmp	r3, r1
 8002f28:	d02f      	beq.n	8002f8a <DMA2_Stream2_IRQHandler+0x1de>
 8002f2a:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	492d      	ldr	r1, [pc, #180]	; (8002fe8 <DMA2_Stream2_IRQHandler+0x23c>)
 8002f32:	428b      	cmp	r3, r1
 8002f34:	d026      	beq.n	8002f84 <DMA2_Stream2_IRQHandler+0x1d8>
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	492b      	ldr	r1, [pc, #172]	; (8002fec <DMA2_Stream2_IRQHandler+0x240>)
 8002f3e:	428b      	cmp	r3, r1
 8002f40:	d01d      	beq.n	8002f7e <DMA2_Stream2_IRQHandler+0x1d2>
 8002f42:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4929      	ldr	r1, [pc, #164]	; (8002ff0 <DMA2_Stream2_IRQHandler+0x244>)
 8002f4a:	428b      	cmp	r3, r1
 8002f4c:	d014      	beq.n	8002f78 <DMA2_Stream2_IRQHandler+0x1cc>
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <DMA2_Stream2_IRQHandler+0x248>)
 8002f56:	428b      	cmp	r3, r1
 8002f58:	d00b      	beq.n	8002f72 <DMA2_Stream2_IRQHandler+0x1c6>
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <DMA2_Stream2_IRQHandler+0x214>)
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <DMA2_Stream2_IRQHandler+0x24c>)
 8002f62:	428b      	cmp	r3, r1
 8002f64:	d102      	bne.n	8002f6c <DMA2_Stream2_IRQHandler+0x1c0>
 8002f66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f6a:	e01e      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f70:	e01b      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f76:	e018      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f7c:	e015      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f7e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f82:	e012      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f88:	e00f      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f8e:	e00c      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f94:	e009      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9a:	e006      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	e004      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	e002      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	e000      	b.n	8002faa <DMA2_Stream2_IRQHandler+0x1fe>
 8002fa8:	2308      	movs	r3, #8
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e12e      	b.n	8003216 <DMA2_Stream2_IRQHandler+0x46a>
 8002fb8:	20000300 	.word	0x20000300
 8002fbc:	40013c00 	.word	0x40013c00
 8002fc0:	200002c0 	.word	0x200002c0
 8002fc4:	40026458 	.word	0x40026458
 8002fc8:	40026400 	.word	0x40026400
 8002fcc:	40026010 	.word	0x40026010
 8002fd0:	40026410 	.word	0x40026410
 8002fd4:	40026070 	.word	0x40026070
 8002fd8:	40026470 	.word	0x40026470
 8002fdc:	40026028 	.word	0x40026028
 8002fe0:	40026428 	.word	0x40026428
 8002fe4:	40026088 	.word	0x40026088
 8002fe8:	40026488 	.word	0x40026488
 8002fec:	40026040 	.word	0x40026040
 8002ff0:	40026440 	.word	0x40026440
 8002ff4:	400260a0 	.word	0x400260a0
 8002ff8:	400264a0 	.word	0x400264a0
 8002ffc:	400260b8 	.word	0x400260b8
 8003000:	4b72      	ldr	r3, [pc, #456]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b71      	ldr	r3, [pc, #452]	; (80031d0 <DMA2_Stream2_IRQHandler+0x424>)
 800300a:	429a      	cmp	r2, r3
 800300c:	d972      	bls.n	80030f4 <DMA2_Stream2_IRQHandler+0x348>
 800300e:	4b71      	ldr	r3, [pc, #452]	; (80031d4 <DMA2_Stream2_IRQHandler+0x428>)
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b6e      	ldr	r3, [pc, #440]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	496f      	ldr	r1, [pc, #444]	; (80031d8 <DMA2_Stream2_IRQHandler+0x42c>)
 800301a:	428b      	cmp	r3, r1
 800301c:	d062      	beq.n	80030e4 <DMA2_Stream2_IRQHandler+0x338>
 800301e:	4b6b      	ldr	r3, [pc, #428]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	496d      	ldr	r1, [pc, #436]	; (80031dc <DMA2_Stream2_IRQHandler+0x430>)
 8003026:	428b      	cmp	r3, r1
 8003028:	d05a      	beq.n	80030e0 <DMA2_Stream2_IRQHandler+0x334>
 800302a:	4b68      	ldr	r3, [pc, #416]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	496b      	ldr	r1, [pc, #428]	; (80031e0 <DMA2_Stream2_IRQHandler+0x434>)
 8003032:	428b      	cmp	r3, r1
 8003034:	d052      	beq.n	80030dc <DMA2_Stream2_IRQHandler+0x330>
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4969      	ldr	r1, [pc, #420]	; (80031e4 <DMA2_Stream2_IRQHandler+0x438>)
 800303e:	428b      	cmp	r3, r1
 8003040:	d04a      	beq.n	80030d8 <DMA2_Stream2_IRQHandler+0x32c>
 8003042:	4b62      	ldr	r3, [pc, #392]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4967      	ldr	r1, [pc, #412]	; (80031e8 <DMA2_Stream2_IRQHandler+0x43c>)
 800304a:	428b      	cmp	r3, r1
 800304c:	d041      	beq.n	80030d2 <DMA2_Stream2_IRQHandler+0x326>
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4965      	ldr	r1, [pc, #404]	; (80031ec <DMA2_Stream2_IRQHandler+0x440>)
 8003056:	428b      	cmp	r3, r1
 8003058:	d038      	beq.n	80030cc <DMA2_Stream2_IRQHandler+0x320>
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4963      	ldr	r1, [pc, #396]	; (80031f0 <DMA2_Stream2_IRQHandler+0x444>)
 8003062:	428b      	cmp	r3, r1
 8003064:	d02f      	beq.n	80030c6 <DMA2_Stream2_IRQHandler+0x31a>
 8003066:	4b59      	ldr	r3, [pc, #356]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4961      	ldr	r1, [pc, #388]	; (80031f4 <DMA2_Stream2_IRQHandler+0x448>)
 800306e:	428b      	cmp	r3, r1
 8003070:	d026      	beq.n	80030c0 <DMA2_Stream2_IRQHandler+0x314>
 8003072:	4b56      	ldr	r3, [pc, #344]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	495f      	ldr	r1, [pc, #380]	; (80031f8 <DMA2_Stream2_IRQHandler+0x44c>)
 800307a:	428b      	cmp	r3, r1
 800307c:	d01d      	beq.n	80030ba <DMA2_Stream2_IRQHandler+0x30e>
 800307e:	4b53      	ldr	r3, [pc, #332]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	495d      	ldr	r1, [pc, #372]	; (80031fc <DMA2_Stream2_IRQHandler+0x450>)
 8003086:	428b      	cmp	r3, r1
 8003088:	d014      	beq.n	80030b4 <DMA2_Stream2_IRQHandler+0x308>
 800308a:	4b50      	ldr	r3, [pc, #320]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	495b      	ldr	r1, [pc, #364]	; (8003200 <DMA2_Stream2_IRQHandler+0x454>)
 8003092:	428b      	cmp	r3, r1
 8003094:	d00b      	beq.n	80030ae <DMA2_Stream2_IRQHandler+0x302>
 8003096:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4959      	ldr	r1, [pc, #356]	; (8003204 <DMA2_Stream2_IRQHandler+0x458>)
 800309e:	428b      	cmp	r3, r1
 80030a0:	d102      	bne.n	80030a8 <DMA2_Stream2_IRQHandler+0x2fc>
 80030a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030a6:	e01e      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ac:	e01b      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030b2:	e018      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030b8:	e015      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80030be:	e012      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c4:	e00f      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030ca:	e00c      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d0:	e009      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d6:	e006      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030d8:	2308      	movs	r3, #8
 80030da:	e004      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030dc:	2308      	movs	r3, #8
 80030de:	e002      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030e0:	2308      	movs	r3, #8
 80030e2:	e000      	b.n	80030e6 <DMA2_Stream2_IRQHandler+0x33a>
 80030e4:	2308      	movs	r3, #8
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e090      	b.n	8003216 <DMA2_Stream2_IRQHandler+0x46a>
 80030f4:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <DMA2_Stream2_IRQHandler+0x428>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b34      	ldr	r3, [pc, #208]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4936      	ldr	r1, [pc, #216]	; (80031d8 <DMA2_Stream2_IRQHandler+0x42c>)
 8003100:	428b      	cmp	r3, r1
 8003102:	f000 8081 	beq.w	8003208 <DMA2_Stream2_IRQHandler+0x45c>
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4933      	ldr	r1, [pc, #204]	; (80031dc <DMA2_Stream2_IRQHandler+0x430>)
 800310e:	428b      	cmp	r3, r1
 8003110:	d05a      	beq.n	80031c8 <DMA2_Stream2_IRQHandler+0x41c>
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4931      	ldr	r1, [pc, #196]	; (80031e0 <DMA2_Stream2_IRQHandler+0x434>)
 800311a:	428b      	cmp	r3, r1
 800311c:	d052      	beq.n	80031c4 <DMA2_Stream2_IRQHandler+0x418>
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	492f      	ldr	r1, [pc, #188]	; (80031e4 <DMA2_Stream2_IRQHandler+0x438>)
 8003126:	428b      	cmp	r3, r1
 8003128:	d04a      	beq.n	80031c0 <DMA2_Stream2_IRQHandler+0x414>
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	492d      	ldr	r1, [pc, #180]	; (80031e8 <DMA2_Stream2_IRQHandler+0x43c>)
 8003132:	428b      	cmp	r3, r1
 8003134:	d041      	beq.n	80031ba <DMA2_Stream2_IRQHandler+0x40e>
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	492b      	ldr	r1, [pc, #172]	; (80031ec <DMA2_Stream2_IRQHandler+0x440>)
 800313e:	428b      	cmp	r3, r1
 8003140:	d038      	beq.n	80031b4 <DMA2_Stream2_IRQHandler+0x408>
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4929      	ldr	r1, [pc, #164]	; (80031f0 <DMA2_Stream2_IRQHandler+0x444>)
 800314a:	428b      	cmp	r3, r1
 800314c:	d02f      	beq.n	80031ae <DMA2_Stream2_IRQHandler+0x402>
 800314e:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4927      	ldr	r1, [pc, #156]	; (80031f4 <DMA2_Stream2_IRQHandler+0x448>)
 8003156:	428b      	cmp	r3, r1
 8003158:	d026      	beq.n	80031a8 <DMA2_Stream2_IRQHandler+0x3fc>
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4925      	ldr	r1, [pc, #148]	; (80031f8 <DMA2_Stream2_IRQHandler+0x44c>)
 8003162:	428b      	cmp	r3, r1
 8003164:	d01d      	beq.n	80031a2 <DMA2_Stream2_IRQHandler+0x3f6>
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4923      	ldr	r1, [pc, #140]	; (80031fc <DMA2_Stream2_IRQHandler+0x450>)
 800316e:	428b      	cmp	r3, r1
 8003170:	d014      	beq.n	800319c <DMA2_Stream2_IRQHandler+0x3f0>
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4921      	ldr	r1, [pc, #132]	; (8003200 <DMA2_Stream2_IRQHandler+0x454>)
 800317a:	428b      	cmp	r3, r1
 800317c:	d00b      	beq.n	8003196 <DMA2_Stream2_IRQHandler+0x3ea>
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <DMA2_Stream2_IRQHandler+0x420>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	491f      	ldr	r1, [pc, #124]	; (8003204 <DMA2_Stream2_IRQHandler+0x458>)
 8003186:	428b      	cmp	r3, r1
 8003188:	d102      	bne.n	8003190 <DMA2_Stream2_IRQHandler+0x3e4>
 800318a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800318e:	e03c      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 8003190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003194:	e039      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 8003196:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800319a:	e036      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 800319c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031a0:	e033      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80031a6:	e030      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ac:	e02d      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b2:	e02a      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031b8:	e027      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031be:	e024      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031c0:	2308      	movs	r3, #8
 80031c2:	e022      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031c4:	2308      	movs	r3, #8
 80031c6:	e020      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031c8:	2308      	movs	r3, #8
 80031ca:	e01e      	b.n	800320a <DMA2_Stream2_IRQHandler+0x45e>
 80031cc:	200002c0 	.word	0x200002c0
 80031d0:	40026058 	.word	0x40026058
 80031d4:	40026000 	.word	0x40026000
 80031d8:	40026010 	.word	0x40026010
 80031dc:	40026410 	.word	0x40026410
 80031e0:	40026070 	.word	0x40026070
 80031e4:	40026470 	.word	0x40026470
 80031e8:	40026028 	.word	0x40026028
 80031ec:	40026428 	.word	0x40026428
 80031f0:	40026088 	.word	0x40026088
 80031f4:	40026488 	.word	0x40026488
 80031f8:	40026040 	.word	0x40026040
 80031fc:	40026440 	.word	0x40026440
 8003200:	400260a0 	.word	0x400260a0
 8003204:	400264a0 	.word	0x400264a0
 8003208:	2308      	movs	r3, #8
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <DMA2_Stream2_IRQHandler+0x474>
  {
    UART_Emul_DMAError(&hdma_rx);
 800321a:	4876      	ldr	r0, [pc, #472]	; (80033f4 <DMA2_Stream2_IRQHandler+0x648>)
 800321c:	f001 fb30 	bl	8004880 <UART_Emul_DMAError>
  }

  /* Clear the transfer complete flag */
  __HAL_DMA_CLEAR_FLAG(TimHandle.hdma[TIM_DMA_ID_CC2], __HAL_DMA_GET_TC_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC2]));
 8003220:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b74      	ldr	r3, [pc, #464]	; (80033fc <DMA2_Stream2_IRQHandler+0x650>)
 800322a:	429a      	cmp	r2, r3
 800322c:	d96c      	bls.n	8003308 <DMA2_Stream2_IRQHandler+0x55c>
 800322e:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a72      	ldr	r2, [pc, #456]	; (8003400 <DMA2_Stream2_IRQHandler+0x654>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d062      	beq.n	8003300 <DMA2_Stream2_IRQHandler+0x554>
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a70      	ldr	r2, [pc, #448]	; (8003404 <DMA2_Stream2_IRQHandler+0x658>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d05a      	beq.n	80032fc <DMA2_Stream2_IRQHandler+0x550>
 8003246:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6e      	ldr	r2, [pc, #440]	; (8003408 <DMA2_Stream2_IRQHandler+0x65c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d052      	beq.n	80032f8 <DMA2_Stream2_IRQHandler+0x54c>
 8003252:	4b69      	ldr	r3, [pc, #420]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a6c      	ldr	r2, [pc, #432]	; (800340c <DMA2_Stream2_IRQHandler+0x660>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d04a      	beq.n	80032f4 <DMA2_Stream2_IRQHandler+0x548>
 800325e:	4b66      	ldr	r3, [pc, #408]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <DMA2_Stream2_IRQHandler+0x664>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d041      	beq.n	80032ee <DMA2_Stream2_IRQHandler+0x542>
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <DMA2_Stream2_IRQHandler+0x668>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d038      	beq.n	80032e8 <DMA2_Stream2_IRQHandler+0x53c>
 8003276:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a66      	ldr	r2, [pc, #408]	; (8003418 <DMA2_Stream2_IRQHandler+0x66c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02f      	beq.n	80032e2 <DMA2_Stream2_IRQHandler+0x536>
 8003282:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a64      	ldr	r2, [pc, #400]	; (800341c <DMA2_Stream2_IRQHandler+0x670>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d026      	beq.n	80032dc <DMA2_Stream2_IRQHandler+0x530>
 800328e:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a62      	ldr	r2, [pc, #392]	; (8003420 <DMA2_Stream2_IRQHandler+0x674>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01d      	beq.n	80032d6 <DMA2_Stream2_IRQHandler+0x52a>
 800329a:	4b57      	ldr	r3, [pc, #348]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a60      	ldr	r2, [pc, #384]	; (8003424 <DMA2_Stream2_IRQHandler+0x678>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d014      	beq.n	80032d0 <DMA2_Stream2_IRQHandler+0x524>
 80032a6:	4b54      	ldr	r3, [pc, #336]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5e      	ldr	r2, [pc, #376]	; (8003428 <DMA2_Stream2_IRQHandler+0x67c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <DMA2_Stream2_IRQHandler+0x51e>
 80032b2:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5c      	ldr	r2, [pc, #368]	; (800342c <DMA2_Stream2_IRQHandler+0x680>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d102      	bne.n	80032c4 <DMA2_Stream2_IRQHandler+0x518>
 80032be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032c2:	e01e      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032c8:	e01b      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032ce:	e018      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d4:	e015      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032da:	e012      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032e0:	e00f      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032e6:	e00c      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032ec:	e009      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032f2:	e006      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032f4:	2320      	movs	r3, #32
 80032f6:	e004      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032f8:	2320      	movs	r3, #32
 80032fa:	e002      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 80032fc:	2320      	movs	r3, #32
 80032fe:	e000      	b.n	8003302 <DMA2_Stream2_IRQHandler+0x556>
 8003300:	2320      	movs	r3, #32
 8003302:	4a4b      	ldr	r2, [pc, #300]	; (8003430 <DMA2_Stream2_IRQHandler+0x684>)
 8003304:	60d3      	str	r3, [r2, #12]
 8003306:	e177      	b.n	80035f8 <DMA2_Stream2_IRQHandler+0x84c>
 8003308:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	4b48      	ldr	r3, [pc, #288]	; (8003434 <DMA2_Stream2_IRQHandler+0x688>)
 8003312:	429a      	cmp	r2, r3
 8003314:	f240 8090 	bls.w	8003438 <DMA2_Stream2_IRQHandler+0x68c>
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a38      	ldr	r2, [pc, #224]	; (8003400 <DMA2_Stream2_IRQHandler+0x654>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d062      	beq.n	80033ea <DMA2_Stream2_IRQHandler+0x63e>
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a36      	ldr	r2, [pc, #216]	; (8003404 <DMA2_Stream2_IRQHandler+0x658>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d05a      	beq.n	80033e6 <DMA2_Stream2_IRQHandler+0x63a>
 8003330:	4b31      	ldr	r3, [pc, #196]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a34      	ldr	r2, [pc, #208]	; (8003408 <DMA2_Stream2_IRQHandler+0x65c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d052      	beq.n	80033e2 <DMA2_Stream2_IRQHandler+0x636>
 800333c:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a32      	ldr	r2, [pc, #200]	; (800340c <DMA2_Stream2_IRQHandler+0x660>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <DMA2_Stream2_IRQHandler+0x632>
 8003348:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a30      	ldr	r2, [pc, #192]	; (8003410 <DMA2_Stream2_IRQHandler+0x664>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d041      	beq.n	80033d8 <DMA2_Stream2_IRQHandler+0x62c>
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a2e      	ldr	r2, [pc, #184]	; (8003414 <DMA2_Stream2_IRQHandler+0x668>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d038      	beq.n	80033d2 <DMA2_Stream2_IRQHandler+0x626>
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2c      	ldr	r2, [pc, #176]	; (8003418 <DMA2_Stream2_IRQHandler+0x66c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02f      	beq.n	80033cc <DMA2_Stream2_IRQHandler+0x620>
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2a      	ldr	r2, [pc, #168]	; (800341c <DMA2_Stream2_IRQHandler+0x670>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d026      	beq.n	80033c6 <DMA2_Stream2_IRQHandler+0x61a>
 8003378:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a28      	ldr	r2, [pc, #160]	; (8003420 <DMA2_Stream2_IRQHandler+0x674>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d01d      	beq.n	80033c0 <DMA2_Stream2_IRQHandler+0x614>
 8003384:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a26      	ldr	r2, [pc, #152]	; (8003424 <DMA2_Stream2_IRQHandler+0x678>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d014      	beq.n	80033ba <DMA2_Stream2_IRQHandler+0x60e>
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a24      	ldr	r2, [pc, #144]	; (8003428 <DMA2_Stream2_IRQHandler+0x67c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00b      	beq.n	80033b4 <DMA2_Stream2_IRQHandler+0x608>
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <DMA2_Stream2_IRQHandler+0x64c>)
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a22      	ldr	r2, [pc, #136]	; (800342c <DMA2_Stream2_IRQHandler+0x680>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d102      	bne.n	80033ae <DMA2_Stream2_IRQHandler+0x602>
 80033a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033ac:	e01e      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033b2:	e01b      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033b8:	e018      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033be:	e015      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033c4:	e012      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033ca:	e00f      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d0:	e00c      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033d6:	e009      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033dc:	e006      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033de:	2320      	movs	r3, #32
 80033e0:	e004      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033e2:	2320      	movs	r3, #32
 80033e4:	e002      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033e6:	2320      	movs	r3, #32
 80033e8:	e000      	b.n	80033ec <DMA2_Stream2_IRQHandler+0x640>
 80033ea:	2320      	movs	r3, #32
 80033ec:	4a10      	ldr	r2, [pc, #64]	; (8003430 <DMA2_Stream2_IRQHandler+0x684>)
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	e102      	b.n	80035f8 <DMA2_Stream2_IRQHandler+0x84c>
 80033f2:	bf00      	nop
 80033f4:	20000260 	.word	0x20000260
 80033f8:	200002c0 	.word	0x200002c0
 80033fc:	40026458 	.word	0x40026458
 8003400:	40026010 	.word	0x40026010
 8003404:	40026410 	.word	0x40026410
 8003408:	40026070 	.word	0x40026070
 800340c:	40026470 	.word	0x40026470
 8003410:	40026028 	.word	0x40026028
 8003414:	40026428 	.word	0x40026428
 8003418:	40026088 	.word	0x40026088
 800341c:	40026488 	.word	0x40026488
 8003420:	40026040 	.word	0x40026040
 8003424:	40026440 	.word	0x40026440
 8003428:	400260a0 	.word	0x400260a0
 800342c:	400264a0 	.word	0x400264a0
 8003430:	40026400 	.word	0x40026400
 8003434:	400260b8 	.word	0x400260b8
 8003438:	4b74      	ldr	r3, [pc, #464]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	4b73      	ldr	r3, [pc, #460]	; (8003610 <DMA2_Stream2_IRQHandler+0x864>)
 8003442:	429a      	cmp	r2, r3
 8003444:	d96c      	bls.n	8003520 <DMA2_Stream2_IRQHandler+0x774>
 8003446:	4b71      	ldr	r3, [pc, #452]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a71      	ldr	r2, [pc, #452]	; (8003614 <DMA2_Stream2_IRQHandler+0x868>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d062      	beq.n	8003518 <DMA2_Stream2_IRQHandler+0x76c>
 8003452:	4b6e      	ldr	r3, [pc, #440]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6f      	ldr	r2, [pc, #444]	; (8003618 <DMA2_Stream2_IRQHandler+0x86c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d05a      	beq.n	8003514 <DMA2_Stream2_IRQHandler+0x768>
 800345e:	4b6b      	ldr	r3, [pc, #428]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6d      	ldr	r2, [pc, #436]	; (800361c <DMA2_Stream2_IRQHandler+0x870>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d052      	beq.n	8003510 <DMA2_Stream2_IRQHandler+0x764>
 800346a:	4b68      	ldr	r3, [pc, #416]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6b      	ldr	r2, [pc, #428]	; (8003620 <DMA2_Stream2_IRQHandler+0x874>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d04a      	beq.n	800350c <DMA2_Stream2_IRQHandler+0x760>
 8003476:	4b65      	ldr	r3, [pc, #404]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a69      	ldr	r2, [pc, #420]	; (8003624 <DMA2_Stream2_IRQHandler+0x878>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d041      	beq.n	8003506 <DMA2_Stream2_IRQHandler+0x75a>
 8003482:	4b62      	ldr	r3, [pc, #392]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a67      	ldr	r2, [pc, #412]	; (8003628 <DMA2_Stream2_IRQHandler+0x87c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d038      	beq.n	8003500 <DMA2_Stream2_IRQHandler+0x754>
 800348e:	4b5f      	ldr	r3, [pc, #380]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a65      	ldr	r2, [pc, #404]	; (800362c <DMA2_Stream2_IRQHandler+0x880>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02f      	beq.n	80034fa <DMA2_Stream2_IRQHandler+0x74e>
 800349a:	4b5c      	ldr	r3, [pc, #368]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a63      	ldr	r2, [pc, #396]	; (8003630 <DMA2_Stream2_IRQHandler+0x884>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d026      	beq.n	80034f4 <DMA2_Stream2_IRQHandler+0x748>
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a61      	ldr	r2, [pc, #388]	; (8003634 <DMA2_Stream2_IRQHandler+0x888>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <DMA2_Stream2_IRQHandler+0x742>
 80034b2:	4b56      	ldr	r3, [pc, #344]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a5f      	ldr	r2, [pc, #380]	; (8003638 <DMA2_Stream2_IRQHandler+0x88c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d014      	beq.n	80034e8 <DMA2_Stream2_IRQHandler+0x73c>
 80034be:	4b53      	ldr	r3, [pc, #332]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a5d      	ldr	r2, [pc, #372]	; (800363c <DMA2_Stream2_IRQHandler+0x890>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <DMA2_Stream2_IRQHandler+0x736>
 80034ca:	4b50      	ldr	r3, [pc, #320]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <DMA2_Stream2_IRQHandler+0x894>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d102      	bne.n	80034dc <DMA2_Stream2_IRQHandler+0x730>
 80034d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034da:	e01e      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 80034dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034e0:	e01b      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 80034e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034e6:	e018      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 80034e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034ec:	e015      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 80034ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034f2:	e012      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 80034f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034f8:	e00f      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 80034fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034fe:	e00c      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 8003500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003504:	e009      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 8003506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800350a:	e006      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 8003510:	2320      	movs	r3, #32
 8003512:	e002      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 8003514:	2320      	movs	r3, #32
 8003516:	e000      	b.n	800351a <DMA2_Stream2_IRQHandler+0x76e>
 8003518:	2320      	movs	r3, #32
 800351a:	4a4a      	ldr	r2, [pc, #296]	; (8003644 <DMA2_Stream2_IRQHandler+0x898>)
 800351c:	60d3      	str	r3, [r2, #12]
 800351e:	e06b      	b.n	80035f8 <DMA2_Stream2_IRQHandler+0x84c>
 8003520:	4b3a      	ldr	r3, [pc, #232]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <DMA2_Stream2_IRQHandler+0x868>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d062      	beq.n	80035f2 <DMA2_Stream2_IRQHandler+0x846>
 800352c:	4b37      	ldr	r3, [pc, #220]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a39      	ldr	r2, [pc, #228]	; (8003618 <DMA2_Stream2_IRQHandler+0x86c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d05a      	beq.n	80035ee <DMA2_Stream2_IRQHandler+0x842>
 8003538:	4b34      	ldr	r3, [pc, #208]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a37      	ldr	r2, [pc, #220]	; (800361c <DMA2_Stream2_IRQHandler+0x870>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d052      	beq.n	80035ea <DMA2_Stream2_IRQHandler+0x83e>
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a35      	ldr	r2, [pc, #212]	; (8003620 <DMA2_Stream2_IRQHandler+0x874>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04a      	beq.n	80035e6 <DMA2_Stream2_IRQHandler+0x83a>
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a33      	ldr	r2, [pc, #204]	; (8003624 <DMA2_Stream2_IRQHandler+0x878>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d041      	beq.n	80035e0 <DMA2_Stream2_IRQHandler+0x834>
 800355c:	4b2b      	ldr	r3, [pc, #172]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a31      	ldr	r2, [pc, #196]	; (8003628 <DMA2_Stream2_IRQHandler+0x87c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d038      	beq.n	80035da <DMA2_Stream2_IRQHandler+0x82e>
 8003568:	4b28      	ldr	r3, [pc, #160]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2f      	ldr	r2, [pc, #188]	; (800362c <DMA2_Stream2_IRQHandler+0x880>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02f      	beq.n	80035d4 <DMA2_Stream2_IRQHandler+0x828>
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2d      	ldr	r2, [pc, #180]	; (8003630 <DMA2_Stream2_IRQHandler+0x884>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d026      	beq.n	80035ce <DMA2_Stream2_IRQHandler+0x822>
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <DMA2_Stream2_IRQHandler+0x888>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d01d      	beq.n	80035c8 <DMA2_Stream2_IRQHandler+0x81c>
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <DMA2_Stream2_IRQHandler+0x88c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d014      	beq.n	80035c2 <DMA2_Stream2_IRQHandler+0x816>
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a27      	ldr	r2, [pc, #156]	; (800363c <DMA2_Stream2_IRQHandler+0x890>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00b      	beq.n	80035bc <DMA2_Stream2_IRQHandler+0x810>
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <DMA2_Stream2_IRQHandler+0x894>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d102      	bne.n	80035b6 <DMA2_Stream2_IRQHandler+0x80a>
 80035b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035b4:	e01e      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035ba:	e01b      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035c0:	e018      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035c6:	e015      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035cc:	e012      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035d2:	e00f      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035d8:	e00c      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035de:	e009      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035e4:	e006      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035e6:	2320      	movs	r3, #32
 80035e8:	e004      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035ea:	2320      	movs	r3, #32
 80035ec:	e002      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035ee:	2320      	movs	r3, #32
 80035f0:	e000      	b.n	80035f4 <DMA2_Stream2_IRQHandler+0x848>
 80035f2:	2320      	movs	r3, #32
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <DMA2_Stream2_IRQHandler+0x898>)
 80035f6:	6093      	str	r3, [r2, #8]
 
  /* Transfer complete callback */
  TimHandle.hdma[TIM_DMA_ID_CC2]->XferCpltCallback(TimHandle.hdma[TIM_DMA_ID_CC2]);
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	4a03      	ldr	r2, [pc, #12]	; (800360c <DMA2_Stream2_IRQHandler+0x860>)
 8003600:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003602:	4610      	mov	r0, r2
 8003604:	4798      	blx	r3
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200002c0 	.word	0x200002c0
 8003610:	40026058 	.word	0x40026058
 8003614:	40026010 	.word	0x40026010
 8003618:	40026410 	.word	0x40026410
 800361c:	40026070 	.word	0x40026070
 8003620:	40026470 	.word	0x40026470
 8003624:	40026028 	.word	0x40026028
 8003628:	40026428 	.word	0x40026428
 800362c:	40026088 	.word	0x40026088
 8003630:	40026488 	.word	0x40026488
 8003634:	40026040 	.word	0x40026040
 8003638:	40026440 	.word	0x40026440
 800363c:	400260a0 	.word	0x400260a0
 8003640:	400264a0 	.word	0x400264a0
 8003644:	40026000 	.word	0x40026000

08003648 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void UART_EMUL_EXTI_RX(uint16_t GPIO_Pin)
{ 	
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
	  uint32_t tmpreceive = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
	  uint32_t tmpformat = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
	  uint32_t tmpdata = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]

   //TRUNG's callback function
	   //Prevent unused argument(s) compilation warning
		if (GPIO_Pin == GPIO_PIN_0)
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d111      	bne.n	8003688 <HAL_GPIO_EXTI_Callback+0x40>
		{
			g_u8StatusInt1++;
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <HAL_GPIO_EXTI_Callback+0xc4>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_GPIO_EXTI_Callback+0xc4>)
 800366e:	701a      	strb	r2, [r3, #0]
			g_u32CurrentTime = HAL_GetTick();
 8003670:	f001 ff3a 	bl	80054e8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	4b26      	ldr	r3, [pc, #152]	; (8003710 <HAL_GPIO_EXTI_Callback+0xc8>)
 8003678:	601a      	str	r2, [r3, #0]
			g_bIsMotion = true;
 800367a:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_GPIO_EXTI_Callback+0xcc>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
			g_bIsSetGPS = true;
 8003680:	4b25      	ldr	r3, [pc, #148]	; (8003718 <HAL_GPIO_EXTI_Callback+0xd0>)
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
			  {
			  // Format frame
				*(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
			  }
		}
}
 8003686:	e03c      	b.n	8003702 <HAL_GPIO_EXTI_Callback+0xba>
		else if (GPIO_Pin == UART_EMUL_RX_PIN)
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368e:	d138      	bne.n	8003702 <HAL_GPIO_EXTI_Callback+0xba>
			  EXTI->IMR &= ~huart_emul->Init.RxPinNumber;
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <HAL_GPIO_EXTI_Callback+0xd4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	8a12      	ldrh	r2, [r2, #16]
 800369a:	43d2      	mvns	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_GPIO_EXTI_Callback+0xd4>)
 80036a0:	400b      	ands	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]
			  if ((huart_emul->RxXferCount % 2) != 0)
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_GPIO_EXTI_Callback+0x76>
				tmpreceive = (uint32_t)pFirstBuffer_Rx;
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_GPIO_EXTI_Callback+0xdc>)
 80036b6:	617b      	str	r3, [r7, #20]
				tmpformat = (uint32_t)pSecondBuffer_Rx;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_GPIO_EXTI_Callback+0xe0>)
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	e003      	b.n	80036c6 <HAL_GPIO_EXTI_Callback+0x7e>
				tmpreceive = (uint32_t)pSecondBuffer_Rx;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_GPIO_EXTI_Callback+0xe0>)
 80036c0:	617b      	str	r3, [r7, #20]
				tmpformat = (uint32_t)pFirstBuffer_Rx;
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <HAL_GPIO_EXTI_Callback+0xdc>)
 80036c4:	613b      	str	r3, [r7, #16]
			  UART_Emul_ReceiveFrame(huart_emul, (uint32_t*)tmpreceive);
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fce0 	bl	8004094 <UART_Emul_ReceiveFrame>
			  if (huart_emul->RxXferCount > 1)
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d911      	bls.n	8003702 <HAL_GPIO_EXTI_Callback+0xba>
				*(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	6939      	ldr	r1, [r7, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	b2dd      	uxtb	r5, r3
 80036e8:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_GPIO_EXTI_Callback+0xd8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f4:	3b02      	subs	r3, #2
 80036f6:	18d4      	adds	r4, r2, r3
 80036f8:	462a      	mov	r2, r5
 80036fa:	f000 fe4f 	bl	800439c <UART_Emul_ReceiveFormatFrame>
 80036fe:	4603      	mov	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]
}
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bdb0      	pop	{r4, r5, r7, pc}
 800370a:	bf00      	nop
 800370c:	200003c4 	.word	0x200003c4
 8003710:	200003c8 	.word	0x200003c8
 8003714:	200003c5 	.word	0x200003c5
 8003718:	200003c6 	.word	0x200003c6
 800371c:	40013c00 	.word	0x40013c00
 8003720:	20000300 	.word	0x20000300
 8003724:	20000304 	.word	0x20000304
 8003728:	20000334 	.word	0x20000334

0800372c <DMA2_Stream1_IRQHandler>:
* @brief  This function handles DMA interrupt request for TC.
* @param  None
* @retval None
*/
void UART_EMUL_TX_DMA_IRQHandler(void)
{ 
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  if (__HAL_DMA_GET_FLAG(TimHandle.hdma[TIM_DMA_ID_CC1], __HAL_DMA_GET_TE_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC1])) != RESET)
 8003730:	4b7a      	ldr	r3, [pc, #488]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	4b79      	ldr	r3, [pc, #484]	; (8003920 <DMA2_Stream1_IRQHandler+0x1f4>)
 800373a:	429a      	cmp	r2, r3
 800373c:	d972      	bls.n	8003824 <DMA2_Stream1_IRQHandler+0xf8>
 800373e:	4b79      	ldr	r3, [pc, #484]	; (8003924 <DMA2_Stream1_IRQHandler+0x1f8>)
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b76      	ldr	r3, [pc, #472]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4977      	ldr	r1, [pc, #476]	; (8003928 <DMA2_Stream1_IRQHandler+0x1fc>)
 800374a:	428b      	cmp	r3, r1
 800374c:	d062      	beq.n	8003814 <DMA2_Stream1_IRQHandler+0xe8>
 800374e:	4b73      	ldr	r3, [pc, #460]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4975      	ldr	r1, [pc, #468]	; (800392c <DMA2_Stream1_IRQHandler+0x200>)
 8003756:	428b      	cmp	r3, r1
 8003758:	d05a      	beq.n	8003810 <DMA2_Stream1_IRQHandler+0xe4>
 800375a:	4b70      	ldr	r3, [pc, #448]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4973      	ldr	r1, [pc, #460]	; (8003930 <DMA2_Stream1_IRQHandler+0x204>)
 8003762:	428b      	cmp	r3, r1
 8003764:	d052      	beq.n	800380c <DMA2_Stream1_IRQHandler+0xe0>
 8003766:	4b6d      	ldr	r3, [pc, #436]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4971      	ldr	r1, [pc, #452]	; (8003934 <DMA2_Stream1_IRQHandler+0x208>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d04a      	beq.n	8003808 <DMA2_Stream1_IRQHandler+0xdc>
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	496f      	ldr	r1, [pc, #444]	; (8003938 <DMA2_Stream1_IRQHandler+0x20c>)
 800377a:	428b      	cmp	r3, r1
 800377c:	d041      	beq.n	8003802 <DMA2_Stream1_IRQHandler+0xd6>
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	496d      	ldr	r1, [pc, #436]	; (800393c <DMA2_Stream1_IRQHandler+0x210>)
 8003786:	428b      	cmp	r3, r1
 8003788:	d038      	beq.n	80037fc <DMA2_Stream1_IRQHandler+0xd0>
 800378a:	4b64      	ldr	r3, [pc, #400]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	496b      	ldr	r1, [pc, #428]	; (8003940 <DMA2_Stream1_IRQHandler+0x214>)
 8003792:	428b      	cmp	r3, r1
 8003794:	d02f      	beq.n	80037f6 <DMA2_Stream1_IRQHandler+0xca>
 8003796:	4b61      	ldr	r3, [pc, #388]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4969      	ldr	r1, [pc, #420]	; (8003944 <DMA2_Stream1_IRQHandler+0x218>)
 800379e:	428b      	cmp	r3, r1
 80037a0:	d026      	beq.n	80037f0 <DMA2_Stream1_IRQHandler+0xc4>
 80037a2:	4b5e      	ldr	r3, [pc, #376]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4967      	ldr	r1, [pc, #412]	; (8003948 <DMA2_Stream1_IRQHandler+0x21c>)
 80037aa:	428b      	cmp	r3, r1
 80037ac:	d01d      	beq.n	80037ea <DMA2_Stream1_IRQHandler+0xbe>
 80037ae:	4b5b      	ldr	r3, [pc, #364]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4965      	ldr	r1, [pc, #404]	; (800394c <DMA2_Stream1_IRQHandler+0x220>)
 80037b6:	428b      	cmp	r3, r1
 80037b8:	d014      	beq.n	80037e4 <DMA2_Stream1_IRQHandler+0xb8>
 80037ba:	4b58      	ldr	r3, [pc, #352]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4963      	ldr	r1, [pc, #396]	; (8003950 <DMA2_Stream1_IRQHandler+0x224>)
 80037c2:	428b      	cmp	r3, r1
 80037c4:	d00b      	beq.n	80037de <DMA2_Stream1_IRQHandler+0xb2>
 80037c6:	4b55      	ldr	r3, [pc, #340]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4961      	ldr	r1, [pc, #388]	; (8003954 <DMA2_Stream1_IRQHandler+0x228>)
 80037ce:	428b      	cmp	r3, r1
 80037d0:	d102      	bne.n	80037d8 <DMA2_Stream1_IRQHandler+0xac>
 80037d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037d6:	e01e      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037dc:	e01b      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037e2:	e018      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037e8:	e015      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037ee:	e012      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f4:	e00f      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037fa:	e00c      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 80037fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003800:	e009      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 8003802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003806:	e006      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 8003808:	2308      	movs	r3, #8
 800380a:	e004      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 800380c:	2308      	movs	r3, #8
 800380e:	e002      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 8003810:	2308      	movs	r3, #8
 8003812:	e000      	b.n	8003816 <DMA2_Stream1_IRQHandler+0xea>
 8003814:	2308      	movs	r3, #8
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e1a6      	b.n	8003b72 <DMA2_Stream1_IRQHandler+0x446>
 8003824:	4b3d      	ldr	r3, [pc, #244]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <DMA2_Stream1_IRQHandler+0x22c>)
 800382e:	429a      	cmp	r2, r3
 8003830:	f240 8094 	bls.w	800395c <DMA2_Stream1_IRQHandler+0x230>
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <DMA2_Stream1_IRQHandler+0x1f8>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b38      	ldr	r3, [pc, #224]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	493a      	ldr	r1, [pc, #232]	; (8003928 <DMA2_Stream1_IRQHandler+0x1fc>)
 8003840:	428b      	cmp	r3, r1
 8003842:	d062      	beq.n	800390a <DMA2_Stream1_IRQHandler+0x1de>
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4938      	ldr	r1, [pc, #224]	; (800392c <DMA2_Stream1_IRQHandler+0x200>)
 800384c:	428b      	cmp	r3, r1
 800384e:	d05a      	beq.n	8003906 <DMA2_Stream1_IRQHandler+0x1da>
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4936      	ldr	r1, [pc, #216]	; (8003930 <DMA2_Stream1_IRQHandler+0x204>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d052      	beq.n	8003902 <DMA2_Stream1_IRQHandler+0x1d6>
 800385c:	4b2f      	ldr	r3, [pc, #188]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4934      	ldr	r1, [pc, #208]	; (8003934 <DMA2_Stream1_IRQHandler+0x208>)
 8003864:	428b      	cmp	r3, r1
 8003866:	d04a      	beq.n	80038fe <DMA2_Stream1_IRQHandler+0x1d2>
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4932      	ldr	r1, [pc, #200]	; (8003938 <DMA2_Stream1_IRQHandler+0x20c>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d041      	beq.n	80038f8 <DMA2_Stream1_IRQHandler+0x1cc>
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4930      	ldr	r1, [pc, #192]	; (800393c <DMA2_Stream1_IRQHandler+0x210>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d038      	beq.n	80038f2 <DMA2_Stream1_IRQHandler+0x1c6>
 8003880:	4b26      	ldr	r3, [pc, #152]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	492e      	ldr	r1, [pc, #184]	; (8003940 <DMA2_Stream1_IRQHandler+0x214>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d02f      	beq.n	80038ec <DMA2_Stream1_IRQHandler+0x1c0>
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	492c      	ldr	r1, [pc, #176]	; (8003944 <DMA2_Stream1_IRQHandler+0x218>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d026      	beq.n	80038e6 <DMA2_Stream1_IRQHandler+0x1ba>
 8003898:	4b20      	ldr	r3, [pc, #128]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	492a      	ldr	r1, [pc, #168]	; (8003948 <DMA2_Stream1_IRQHandler+0x21c>)
 80038a0:	428b      	cmp	r3, r1
 80038a2:	d01d      	beq.n	80038e0 <DMA2_Stream1_IRQHandler+0x1b4>
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4928      	ldr	r1, [pc, #160]	; (800394c <DMA2_Stream1_IRQHandler+0x220>)
 80038ac:	428b      	cmp	r3, r1
 80038ae:	d014      	beq.n	80038da <DMA2_Stream1_IRQHandler+0x1ae>
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4926      	ldr	r1, [pc, #152]	; (8003950 <DMA2_Stream1_IRQHandler+0x224>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d00b      	beq.n	80038d4 <DMA2_Stream1_IRQHandler+0x1a8>
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <DMA2_Stream1_IRQHandler+0x1f0>)
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4924      	ldr	r1, [pc, #144]	; (8003954 <DMA2_Stream1_IRQHandler+0x228>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d102      	bne.n	80038ce <DMA2_Stream1_IRQHandler+0x1a2>
 80038c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038cc:	e01e      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d2:	e01b      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038d8:	e018      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038de:	e015      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80038e4:	e012      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ea:	e00f      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f0:	e00c      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f6:	e009      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038fc:	e006      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 80038fe:	2308      	movs	r3, #8
 8003900:	e004      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 8003902:	2308      	movs	r3, #8
 8003904:	e002      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 8003906:	2308      	movs	r3, #8
 8003908:	e000      	b.n	800390c <DMA2_Stream1_IRQHandler+0x1e0>
 800390a:	2308      	movs	r3, #8
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	e12b      	b.n	8003b72 <DMA2_Stream1_IRQHandler+0x446>
 800391a:	bf00      	nop
 800391c:	200002c0 	.word	0x200002c0
 8003920:	40026458 	.word	0x40026458
 8003924:	40026400 	.word	0x40026400
 8003928:	40026010 	.word	0x40026010
 800392c:	40026410 	.word	0x40026410
 8003930:	40026070 	.word	0x40026070
 8003934:	40026470 	.word	0x40026470
 8003938:	40026028 	.word	0x40026028
 800393c:	40026428 	.word	0x40026428
 8003940:	40026088 	.word	0x40026088
 8003944:	40026488 	.word	0x40026488
 8003948:	40026040 	.word	0x40026040
 800394c:	40026440 	.word	0x40026440
 8003950:	400260a0 	.word	0x400260a0
 8003954:	400264a0 	.word	0x400264a0
 8003958:	400260b8 	.word	0x400260b8
 800395c:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <DMA2_Stream1_IRQHandler+0x400>)
 8003966:	429a      	cmp	r2, r3
 8003968:	d972      	bls.n	8003a50 <DMA2_Stream1_IRQHandler+0x324>
 800396a:	4b71      	ldr	r3, [pc, #452]	; (8003b30 <DMA2_Stream1_IRQHandler+0x404>)
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	496f      	ldr	r1, [pc, #444]	; (8003b34 <DMA2_Stream1_IRQHandler+0x408>)
 8003976:	428b      	cmp	r3, r1
 8003978:	d062      	beq.n	8003a40 <DMA2_Stream1_IRQHandler+0x314>
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	496d      	ldr	r1, [pc, #436]	; (8003b38 <DMA2_Stream1_IRQHandler+0x40c>)
 8003982:	428b      	cmp	r3, r1
 8003984:	d05a      	beq.n	8003a3c <DMA2_Stream1_IRQHandler+0x310>
 8003986:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	496b      	ldr	r1, [pc, #428]	; (8003b3c <DMA2_Stream1_IRQHandler+0x410>)
 800398e:	428b      	cmp	r3, r1
 8003990:	d052      	beq.n	8003a38 <DMA2_Stream1_IRQHandler+0x30c>
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4969      	ldr	r1, [pc, #420]	; (8003b40 <DMA2_Stream1_IRQHandler+0x414>)
 800399a:	428b      	cmp	r3, r1
 800399c:	d04a      	beq.n	8003a34 <DMA2_Stream1_IRQHandler+0x308>
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4967      	ldr	r1, [pc, #412]	; (8003b44 <DMA2_Stream1_IRQHandler+0x418>)
 80039a6:	428b      	cmp	r3, r1
 80039a8:	d041      	beq.n	8003a2e <DMA2_Stream1_IRQHandler+0x302>
 80039aa:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4965      	ldr	r1, [pc, #404]	; (8003b48 <DMA2_Stream1_IRQHandler+0x41c>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d038      	beq.n	8003a28 <DMA2_Stream1_IRQHandler+0x2fc>
 80039b6:	4b5c      	ldr	r3, [pc, #368]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4963      	ldr	r1, [pc, #396]	; (8003b4c <DMA2_Stream1_IRQHandler+0x420>)
 80039be:	428b      	cmp	r3, r1
 80039c0:	d02f      	beq.n	8003a22 <DMA2_Stream1_IRQHandler+0x2f6>
 80039c2:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4961      	ldr	r1, [pc, #388]	; (8003b50 <DMA2_Stream1_IRQHandler+0x424>)
 80039ca:	428b      	cmp	r3, r1
 80039cc:	d026      	beq.n	8003a1c <DMA2_Stream1_IRQHandler+0x2f0>
 80039ce:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	495f      	ldr	r1, [pc, #380]	; (8003b54 <DMA2_Stream1_IRQHandler+0x428>)
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d01d      	beq.n	8003a16 <DMA2_Stream1_IRQHandler+0x2ea>
 80039da:	4b53      	ldr	r3, [pc, #332]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	495d      	ldr	r1, [pc, #372]	; (8003b58 <DMA2_Stream1_IRQHandler+0x42c>)
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d014      	beq.n	8003a10 <DMA2_Stream1_IRQHandler+0x2e4>
 80039e6:	4b50      	ldr	r3, [pc, #320]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	495b      	ldr	r1, [pc, #364]	; (8003b5c <DMA2_Stream1_IRQHandler+0x430>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d00b      	beq.n	8003a0a <DMA2_Stream1_IRQHandler+0x2de>
 80039f2:	4b4d      	ldr	r3, [pc, #308]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4959      	ldr	r1, [pc, #356]	; (8003b60 <DMA2_Stream1_IRQHandler+0x434>)
 80039fa:	428b      	cmp	r3, r1
 80039fc:	d102      	bne.n	8003a04 <DMA2_Stream1_IRQHandler+0x2d8>
 80039fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a02:	e01e      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a08:	e01b      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a0e:	e018      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a14:	e015      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a1a:	e012      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a20:	e00f      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a26:	e00c      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a2c:	e009      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a32:	e006      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a34:	2308      	movs	r3, #8
 8003a36:	e004      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	e002      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	e000      	b.n	8003a42 <DMA2_Stream1_IRQHandler+0x316>
 8003a40:	2308      	movs	r3, #8
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e090      	b.n	8003b72 <DMA2_Stream1_IRQHandler+0x446>
 8003a50:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <DMA2_Stream1_IRQHandler+0x404>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4936      	ldr	r1, [pc, #216]	; (8003b34 <DMA2_Stream1_IRQHandler+0x408>)
 8003a5c:	428b      	cmp	r3, r1
 8003a5e:	f000 8081 	beq.w	8003b64 <DMA2_Stream1_IRQHandler+0x438>
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4933      	ldr	r1, [pc, #204]	; (8003b38 <DMA2_Stream1_IRQHandler+0x40c>)
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	d05a      	beq.n	8003b24 <DMA2_Stream1_IRQHandler+0x3f8>
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4931      	ldr	r1, [pc, #196]	; (8003b3c <DMA2_Stream1_IRQHandler+0x410>)
 8003a76:	428b      	cmp	r3, r1
 8003a78:	d052      	beq.n	8003b20 <DMA2_Stream1_IRQHandler+0x3f4>
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	492f      	ldr	r1, [pc, #188]	; (8003b40 <DMA2_Stream1_IRQHandler+0x414>)
 8003a82:	428b      	cmp	r3, r1
 8003a84:	d04a      	beq.n	8003b1c <DMA2_Stream1_IRQHandler+0x3f0>
 8003a86:	4b28      	ldr	r3, [pc, #160]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	492d      	ldr	r1, [pc, #180]	; (8003b44 <DMA2_Stream1_IRQHandler+0x418>)
 8003a8e:	428b      	cmp	r3, r1
 8003a90:	d041      	beq.n	8003b16 <DMA2_Stream1_IRQHandler+0x3ea>
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	492b      	ldr	r1, [pc, #172]	; (8003b48 <DMA2_Stream1_IRQHandler+0x41c>)
 8003a9a:	428b      	cmp	r3, r1
 8003a9c:	d038      	beq.n	8003b10 <DMA2_Stream1_IRQHandler+0x3e4>
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4929      	ldr	r1, [pc, #164]	; (8003b4c <DMA2_Stream1_IRQHandler+0x420>)
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d02f      	beq.n	8003b0a <DMA2_Stream1_IRQHandler+0x3de>
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4927      	ldr	r1, [pc, #156]	; (8003b50 <DMA2_Stream1_IRQHandler+0x424>)
 8003ab2:	428b      	cmp	r3, r1
 8003ab4:	d026      	beq.n	8003b04 <DMA2_Stream1_IRQHandler+0x3d8>
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4925      	ldr	r1, [pc, #148]	; (8003b54 <DMA2_Stream1_IRQHandler+0x428>)
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d01d      	beq.n	8003afe <DMA2_Stream1_IRQHandler+0x3d2>
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4923      	ldr	r1, [pc, #140]	; (8003b58 <DMA2_Stream1_IRQHandler+0x42c>)
 8003aca:	428b      	cmp	r3, r1
 8003acc:	d014      	beq.n	8003af8 <DMA2_Stream1_IRQHandler+0x3cc>
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4921      	ldr	r1, [pc, #132]	; (8003b5c <DMA2_Stream1_IRQHandler+0x430>)
 8003ad6:	428b      	cmp	r3, r1
 8003ad8:	d00b      	beq.n	8003af2 <DMA2_Stream1_IRQHandler+0x3c6>
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <DMA2_Stream1_IRQHandler+0x3fc>)
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	491f      	ldr	r1, [pc, #124]	; (8003b60 <DMA2_Stream1_IRQHandler+0x434>)
 8003ae2:	428b      	cmp	r3, r1
 8003ae4:	d102      	bne.n	8003aec <DMA2_Stream1_IRQHandler+0x3c0>
 8003ae6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003aea:	e03c      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af0:	e039      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003af2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003af6:	e036      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003af8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003afc:	e033      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003afe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b02:	e030      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b08:	e02d      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0e:	e02a      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b14:	e027      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b1a:	e024      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	e022      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b20:	2308      	movs	r3, #8
 8003b22:	e020      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b24:	2308      	movs	r3, #8
 8003b26:	e01e      	b.n	8003b66 <DMA2_Stream1_IRQHandler+0x43a>
 8003b28:	200002c0 	.word	0x200002c0
 8003b2c:	40026058 	.word	0x40026058
 8003b30:	40026000 	.word	0x40026000
 8003b34:	40026010 	.word	0x40026010
 8003b38:	40026410 	.word	0x40026410
 8003b3c:	40026070 	.word	0x40026070
 8003b40:	40026470 	.word	0x40026470
 8003b44:	40026028 	.word	0x40026028
 8003b48:	40026428 	.word	0x40026428
 8003b4c:	40026088 	.word	0x40026088
 8003b50:	40026488 	.word	0x40026488
 8003b54:	40026040 	.word	0x40026040
 8003b58:	40026440 	.word	0x40026440
 8003b5c:	400260a0 	.word	0x400260a0
 8003b60:	400264a0 	.word	0x400264a0
 8003b64:	2308      	movs	r3, #8
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <DMA2_Stream1_IRQHandler+0x450>
  {
    UART_Emul_DMAError(&hdma_tx);
 8003b76:	4876      	ldr	r0, [pc, #472]	; (8003d50 <DMA2_Stream1_IRQHandler+0x624>)
 8003b78:	f000 fe82 	bl	8004880 <UART_Emul_DMAError>
  }

  /* Clear the transfer complete flag */
  __HAL_DMA_CLEAR_FLAG(TimHandle.hdma[TIM_DMA_ID_CC1], __HAL_DMA_GET_TC_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC1]));
 8003b7c:	4b75      	ldr	r3, [pc, #468]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b74      	ldr	r3, [pc, #464]	; (8003d58 <DMA2_Stream1_IRQHandler+0x62c>)
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d96c      	bls.n	8003c64 <DMA2_Stream1_IRQHandler+0x538>
 8003b8a:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <DMA2_Stream1_IRQHandler+0x630>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d062      	beq.n	8003c5c <DMA2_Stream1_IRQHandler+0x530>
 8003b96:	4b6f      	ldr	r3, [pc, #444]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a70      	ldr	r2, [pc, #448]	; (8003d60 <DMA2_Stream1_IRQHandler+0x634>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d05a      	beq.n	8003c58 <DMA2_Stream1_IRQHandler+0x52c>
 8003ba2:	4b6c      	ldr	r3, [pc, #432]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <DMA2_Stream1_IRQHandler+0x638>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d052      	beq.n	8003c54 <DMA2_Stream1_IRQHandler+0x528>
 8003bae:	4b69      	ldr	r3, [pc, #420]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a6c      	ldr	r2, [pc, #432]	; (8003d68 <DMA2_Stream1_IRQHandler+0x63c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d04a      	beq.n	8003c50 <DMA2_Stream1_IRQHandler+0x524>
 8003bba:	4b66      	ldr	r3, [pc, #408]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a6a      	ldr	r2, [pc, #424]	; (8003d6c <DMA2_Stream1_IRQHandler+0x640>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d041      	beq.n	8003c4a <DMA2_Stream1_IRQHandler+0x51e>
 8003bc6:	4b63      	ldr	r3, [pc, #396]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <DMA2_Stream1_IRQHandler+0x644>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d038      	beq.n	8003c44 <DMA2_Stream1_IRQHandler+0x518>
 8003bd2:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a66      	ldr	r2, [pc, #408]	; (8003d74 <DMA2_Stream1_IRQHandler+0x648>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d02f      	beq.n	8003c3e <DMA2_Stream1_IRQHandler+0x512>
 8003bde:	4b5d      	ldr	r3, [pc, #372]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a64      	ldr	r2, [pc, #400]	; (8003d78 <DMA2_Stream1_IRQHandler+0x64c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d026      	beq.n	8003c38 <DMA2_Stream1_IRQHandler+0x50c>
 8003bea:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a62      	ldr	r2, [pc, #392]	; (8003d7c <DMA2_Stream1_IRQHandler+0x650>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01d      	beq.n	8003c32 <DMA2_Stream1_IRQHandler+0x506>
 8003bf6:	4b57      	ldr	r3, [pc, #348]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a60      	ldr	r2, [pc, #384]	; (8003d80 <DMA2_Stream1_IRQHandler+0x654>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d014      	beq.n	8003c2c <DMA2_Stream1_IRQHandler+0x500>
 8003c02:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5e      	ldr	r2, [pc, #376]	; (8003d84 <DMA2_Stream1_IRQHandler+0x658>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <DMA2_Stream1_IRQHandler+0x4fa>
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <DMA2_Stream1_IRQHandler+0x65c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d102      	bne.n	8003c20 <DMA2_Stream1_IRQHandler+0x4f4>
 8003c1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c1e:	e01e      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c24:	e01b      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c2a:	e018      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c30:	e015      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c36:	e012      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c3c:	e00f      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c42:	e00c      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c48:	e009      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c4e:	e006      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c50:	2320      	movs	r3, #32
 8003c52:	e004      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c54:	2320      	movs	r3, #32
 8003c56:	e002      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c58:	2320      	movs	r3, #32
 8003c5a:	e000      	b.n	8003c5e <DMA2_Stream1_IRQHandler+0x532>
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <DMA2_Stream1_IRQHandler+0x660>)
 8003c60:	60d3      	str	r3, [r2, #12]
 8003c62:	e177      	b.n	8003f54 <DMA2_Stream1_IRQHandler+0x828>
 8003c64:	4b3b      	ldr	r3, [pc, #236]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <DMA2_Stream1_IRQHandler+0x664>)
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	f240 8090 	bls.w	8003d94 <DMA2_Stream1_IRQHandler+0x668>
 8003c74:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a38      	ldr	r2, [pc, #224]	; (8003d5c <DMA2_Stream1_IRQHandler+0x630>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d062      	beq.n	8003d46 <DMA2_Stream1_IRQHandler+0x61a>
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <DMA2_Stream1_IRQHandler+0x634>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d05a      	beq.n	8003d42 <DMA2_Stream1_IRQHandler+0x616>
 8003c8c:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <DMA2_Stream1_IRQHandler+0x638>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d052      	beq.n	8003d3e <DMA2_Stream1_IRQHandler+0x612>
 8003c98:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a32      	ldr	r2, [pc, #200]	; (8003d68 <DMA2_Stream1_IRQHandler+0x63c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d04a      	beq.n	8003d3a <DMA2_Stream1_IRQHandler+0x60e>
 8003ca4:	4b2b      	ldr	r3, [pc, #172]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <DMA2_Stream1_IRQHandler+0x640>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d041      	beq.n	8003d34 <DMA2_Stream1_IRQHandler+0x608>
 8003cb0:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2e      	ldr	r2, [pc, #184]	; (8003d70 <DMA2_Stream1_IRQHandler+0x644>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d038      	beq.n	8003d2e <DMA2_Stream1_IRQHandler+0x602>
 8003cbc:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2c      	ldr	r2, [pc, #176]	; (8003d74 <DMA2_Stream1_IRQHandler+0x648>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d02f      	beq.n	8003d28 <DMA2_Stream1_IRQHandler+0x5fc>
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <DMA2_Stream1_IRQHandler+0x64c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d026      	beq.n	8003d22 <DMA2_Stream1_IRQHandler+0x5f6>
 8003cd4:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <DMA2_Stream1_IRQHandler+0x650>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d01d      	beq.n	8003d1c <DMA2_Stream1_IRQHandler+0x5f0>
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <DMA2_Stream1_IRQHandler+0x654>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d014      	beq.n	8003d16 <DMA2_Stream1_IRQHandler+0x5ea>
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <DMA2_Stream1_IRQHandler+0x658>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <DMA2_Stream1_IRQHandler+0x5e4>
 8003cf8:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <DMA2_Stream1_IRQHandler+0x628>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <DMA2_Stream1_IRQHandler+0x65c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d102      	bne.n	8003d0a <DMA2_Stream1_IRQHandler+0x5de>
 8003d04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d08:	e01e      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d0e:	e01b      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d14:	e018      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d1a:	e015      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d20:	e012      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d26:	e00f      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d2c:	e00c      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d32:	e009      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d38:	e006      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	e004      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e002      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d42:	2320      	movs	r3, #32
 8003d44:	e000      	b.n	8003d48 <DMA2_Stream1_IRQHandler+0x61c>
 8003d46:	2320      	movs	r3, #32
 8003d48:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <DMA2_Stream1_IRQHandler+0x660>)
 8003d4a:	6093      	str	r3, [r2, #8]
 8003d4c:	e102      	b.n	8003f54 <DMA2_Stream1_IRQHandler+0x828>
 8003d4e:	bf00      	nop
 8003d50:	20000200 	.word	0x20000200
 8003d54:	200002c0 	.word	0x200002c0
 8003d58:	40026458 	.word	0x40026458
 8003d5c:	40026010 	.word	0x40026010
 8003d60:	40026410 	.word	0x40026410
 8003d64:	40026070 	.word	0x40026070
 8003d68:	40026470 	.word	0x40026470
 8003d6c:	40026028 	.word	0x40026028
 8003d70:	40026428 	.word	0x40026428
 8003d74:	40026088 	.word	0x40026088
 8003d78:	40026488 	.word	0x40026488
 8003d7c:	40026040 	.word	0x40026040
 8003d80:	40026440 	.word	0x40026440
 8003d84:	400260a0 	.word	0x400260a0
 8003d88:	400264a0 	.word	0x400264a0
 8003d8c:	40026400 	.word	0x40026400
 8003d90:	400260b8 	.word	0x400260b8
 8003d94:	4b74      	ldr	r3, [pc, #464]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b73      	ldr	r3, [pc, #460]	; (8003f6c <DMA2_Stream1_IRQHandler+0x840>)
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d96c      	bls.n	8003e7c <DMA2_Stream1_IRQHandler+0x750>
 8003da2:	4b71      	ldr	r3, [pc, #452]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a71      	ldr	r2, [pc, #452]	; (8003f70 <DMA2_Stream1_IRQHandler+0x844>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d062      	beq.n	8003e74 <DMA2_Stream1_IRQHandler+0x748>
 8003dae:	4b6e      	ldr	r3, [pc, #440]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a6f      	ldr	r2, [pc, #444]	; (8003f74 <DMA2_Stream1_IRQHandler+0x848>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d05a      	beq.n	8003e70 <DMA2_Stream1_IRQHandler+0x744>
 8003dba:	4b6b      	ldr	r3, [pc, #428]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6d      	ldr	r2, [pc, #436]	; (8003f78 <DMA2_Stream1_IRQHandler+0x84c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d052      	beq.n	8003e6c <DMA2_Stream1_IRQHandler+0x740>
 8003dc6:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6b      	ldr	r2, [pc, #428]	; (8003f7c <DMA2_Stream1_IRQHandler+0x850>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d04a      	beq.n	8003e68 <DMA2_Stream1_IRQHandler+0x73c>
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a69      	ldr	r2, [pc, #420]	; (8003f80 <DMA2_Stream1_IRQHandler+0x854>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d041      	beq.n	8003e62 <DMA2_Stream1_IRQHandler+0x736>
 8003dde:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <DMA2_Stream1_IRQHandler+0x858>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d038      	beq.n	8003e5c <DMA2_Stream1_IRQHandler+0x730>
 8003dea:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <DMA2_Stream1_IRQHandler+0x85c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02f      	beq.n	8003e56 <DMA2_Stream1_IRQHandler+0x72a>
 8003df6:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a63      	ldr	r2, [pc, #396]	; (8003f8c <DMA2_Stream1_IRQHandler+0x860>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d026      	beq.n	8003e50 <DMA2_Stream1_IRQHandler+0x724>
 8003e02:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a61      	ldr	r2, [pc, #388]	; (8003f90 <DMA2_Stream1_IRQHandler+0x864>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <DMA2_Stream1_IRQHandler+0x71e>
 8003e0e:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5f      	ldr	r2, [pc, #380]	; (8003f94 <DMA2_Stream1_IRQHandler+0x868>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d014      	beq.n	8003e44 <DMA2_Stream1_IRQHandler+0x718>
 8003e1a:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5d      	ldr	r2, [pc, #372]	; (8003f98 <DMA2_Stream1_IRQHandler+0x86c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <DMA2_Stream1_IRQHandler+0x712>
 8003e26:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <DMA2_Stream1_IRQHandler+0x870>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d102      	bne.n	8003e38 <DMA2_Stream1_IRQHandler+0x70c>
 8003e32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e36:	e01e      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e3c:	e01b      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e42:	e018      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e48:	e015      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e4e:	e012      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e54:	e00f      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e5a:	e00c      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e60:	e009      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e66:	e006      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e68:	2320      	movs	r3, #32
 8003e6a:	e004      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	e002      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e70:	2320      	movs	r3, #32
 8003e72:	e000      	b.n	8003e76 <DMA2_Stream1_IRQHandler+0x74a>
 8003e74:	2320      	movs	r3, #32
 8003e76:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <DMA2_Stream1_IRQHandler+0x874>)
 8003e78:	60d3      	str	r3, [r2, #12]
 8003e7a:	e06b      	b.n	8003f54 <DMA2_Stream1_IRQHandler+0x828>
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <DMA2_Stream1_IRQHandler+0x844>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d062      	beq.n	8003f4e <DMA2_Stream1_IRQHandler+0x822>
 8003e88:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <DMA2_Stream1_IRQHandler+0x848>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d05a      	beq.n	8003f4a <DMA2_Stream1_IRQHandler+0x81e>
 8003e94:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a37      	ldr	r2, [pc, #220]	; (8003f78 <DMA2_Stream1_IRQHandler+0x84c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d052      	beq.n	8003f46 <DMA2_Stream1_IRQHandler+0x81a>
 8003ea0:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a35      	ldr	r2, [pc, #212]	; (8003f7c <DMA2_Stream1_IRQHandler+0x850>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d04a      	beq.n	8003f42 <DMA2_Stream1_IRQHandler+0x816>
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <DMA2_Stream1_IRQHandler+0x854>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d041      	beq.n	8003f3c <DMA2_Stream1_IRQHandler+0x810>
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <DMA2_Stream1_IRQHandler+0x858>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d038      	beq.n	8003f36 <DMA2_Stream1_IRQHandler+0x80a>
 8003ec4:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <DMA2_Stream1_IRQHandler+0x85c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d02f      	beq.n	8003f30 <DMA2_Stream1_IRQHandler+0x804>
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <DMA2_Stream1_IRQHandler+0x860>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d026      	beq.n	8003f2a <DMA2_Stream1_IRQHandler+0x7fe>
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <DMA2_Stream1_IRQHandler+0x864>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01d      	beq.n	8003f24 <DMA2_Stream1_IRQHandler+0x7f8>
 8003ee8:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <DMA2_Stream1_IRQHandler+0x868>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d014      	beq.n	8003f1e <DMA2_Stream1_IRQHandler+0x7f2>
 8003ef4:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <DMA2_Stream1_IRQHandler+0x86c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <DMA2_Stream1_IRQHandler+0x7ec>
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <DMA2_Stream1_IRQHandler+0x870>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d102      	bne.n	8003f12 <DMA2_Stream1_IRQHandler+0x7e6>
 8003f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f10:	e01e      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f16:	e01b      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f1c:	e018      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f22:	e015      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f28:	e012      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f2e:	e00f      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f34:	e00c      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f3a:	e009      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f40:	e006      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f42:	2320      	movs	r3, #32
 8003f44:	e004      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f46:	2320      	movs	r3, #32
 8003f48:	e002      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	e000      	b.n	8003f50 <DMA2_Stream1_IRQHandler+0x824>
 8003f4e:	2320      	movs	r3, #32
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <DMA2_Stream1_IRQHandler+0x874>)
 8003f52:	6093      	str	r3, [r2, #8]
   
  /* Transfer complete callback */
  TimHandle.hdma[TIM_DMA_ID_CC1]->XferCpltCallback(TimHandle.hdma[TIM_DMA_ID_CC1]);
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	4a03      	ldr	r2, [pc, #12]	; (8003f68 <DMA2_Stream1_IRQHandler+0x83c>)
 8003f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4798      	blx	r3
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200002c0 	.word	0x200002c0
 8003f6c:	40026058 	.word	0x40026058
 8003f70:	40026010 	.word	0x40026010
 8003f74:	40026410 	.word	0x40026410
 8003f78:	40026070 	.word	0x40026070
 8003f7c:	40026470 	.word	0x40026470
 8003f80:	40026028 	.word	0x40026028
 8003f84:	40026428 	.word	0x40026428
 8003f88:	40026088 	.word	0x40026088
 8003f8c:	40026488 	.word	0x40026488
 8003f90:	40026040 	.word	0x40026040
 8003f94:	40026440 	.word	0x40026440
 8003f98:	400260a0 	.word	0x400260a0
 8003f9c:	400264a0 	.word	0x400264a0
 8003fa0:	40026000 	.word	0x40026000

08003fa4 <UART_Emul_DMAReceiveCplt>:
  * @brief  This function is executed in case of Receive Complete for last frame.
  * @param  None
  * @retval None
  */
static void UART_Emul_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpformat = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpdata = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
//	Log_Info((uint8_t*)"x",1);
  if (huart_emul->RxXferCount > huart_emul->RxXferSize)
 8003fb4:	4b32      	ldr	r3, [pc, #200]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8003fba:	4b31      	ldr	r3, [pc, #196]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	8c1b      	ldrh	r3, [r3, #32]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d958      	bls.n	8004076 <UART_Emul_DMAReceiveCplt+0xd2>
  {
    /*Disable EXTI line Rx  */
//    EXTI->IMR &= ~huart_emul->Init.RxPinNumber;
    /* Disable the Peripheral */
    __HAL_DMA_DISABLE(&hdma_rx);
 8003fc4:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <UART_Emul_DMAReceiveCplt+0xe0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <UART_Emul_DMAReceiveCplt+0xe0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(&TimHandle, TIM_DMA_CC2);
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <UART_Emul_DMAReceiveCplt+0xe4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <UART_Emul_DMAReceiveCplt+0xe4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	60da      	str	r2, [r3, #12]
    if ((huart_emul->RxXferCount % 2) == 0)
 8003fe4:	4b26      	ldr	r3, [pc, #152]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <UART_Emul_DMAReceiveCplt+0x56>
    {
      tmpformat = (uint32_t)pFirstBuffer_Rx;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <UART_Emul_DMAReceiveCplt+0xe8>)
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e001      	b.n	8003ffe <UART_Emul_DMAReceiveCplt+0x5a>
    }
    else
    {
      tmpformat = (uint32_t)pSecondBuffer_Rx;
 8003ffa:	4b25      	ldr	r3, [pc, #148]	; (8004090 <UART_Emul_DMAReceiveCplt+0xec>)
 8003ffc:	60fb      	str	r3, [r7, #12]
    }
 
    /* Formatted Last Frame */
    *(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	b2dd      	uxtb	r5, r3
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004014:	3b02      	subs	r3, #2
 8004016:	18d4      	adds	r4, r2, r3
 8004018:	462a      	mov	r2, r5
 800401a:	f000 f9bf 	bl	800439c <UART_Emul_ReceiveFormatFrame>
 800401e:	4603      	mov	r3, r0
 8004020:	7023      	strb	r3, [r4, #0]

    /* Set RC falg receiver complete */
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_RC);
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* De_Initialize counter frame for Rx */
    huart_emul->RxXferCount = 0;
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Initialize the UART Emulation  state */
    huart_emul->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a transmit process is ongoing or not */
    if (huart_emul->State == HAL_UART_EMUL_STATE_BUSY_TX_RX)
 8004048:	4b0d      	ldr	r3, [pc, #52]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b10      	cmp	r3, #16
 8004054:	d105      	bne.n	8004062 <UART_Emul_DMAReceiveCplt+0xbe>
    {
      huart_emul->State = HAL_UART_EMUL_STATE_BUSY_TX;
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2204      	movs	r2, #4
 800405c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004060:	e004      	b.n	800406c <UART_Emul_DMAReceiveCplt+0xc8>
    }
    else
    {
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Handle for UART Emulation Receive Complete */
//		Log_Info((uint8_t*)"y",1);
    HAL_UART_Emul_RxCpltCallback(huart_emul);
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <UART_Emul_DMAReceiveCplt+0xdc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe fc21 	bl	80028b8 <HAL_UART_Emul_RxCpltCallback>
//		Log_Info((uint8_t*)"z",1);
  }
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bdb0      	pop	{r4, r5, r7, pc}
 800407e:	bf00      	nop
 8004080:	20000300 	.word	0x20000300
 8004084:	20000260 	.word	0x20000260
 8004088:	200002c0 	.word	0x200002c0
 800408c:	20000304 	.word	0x20000304
 8004090:	20000334 	.word	0x20000334

08004094 <UART_Emul_ReceiveFrame>:
 * @param  huart: UART Emulation handle
 * @param  pData: Frame to be Received
 * @retval None
*/
static void UART_Emul_ReceiveFrame(UART_Emul_HandleTypeDef *huart, uint32_t *pData)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_sr =0;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ds =0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
  uint32_t tmp_size =0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_arr =0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]

	tmp_arr = TIM1->ARR;
 80040ae:	4b33      	ldr	r3, [pc, #204]	; (800417c <UART_Emul_ReceiveFrame+0xe8>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	60bb      	str	r3, [r7, #8]
  tmp_ds = (uint32_t)pData;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	613b      	str	r3, [r7, #16]
  tmp_sr = (uint32_t) & (huart->RxPortName->IDR);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	3310      	adds	r3, #16
 80040be:	617b      	str	r3, [r7, #20]
  tmp_size =  __HAL_UART_EMUL_FRAME_LENGTH(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7b1b      	ldrb	r3, [r3, #12]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7b5b      	ldrb	r3, [r3, #13]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_rx, DMA_IT_TC);
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0210 	orr.w	r2, r2, #16
 80040e4:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_rx, DMA_IT_TE);
 80040e6:	4b26      	ldr	r3, [pc, #152]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b24      	ldr	r3, [pc, #144]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0204 	orr.w	r2, r2, #4
 80040f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma_rx.Instance->NDTR = tmp_size;
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Stream source address */
  hdma_rx.Instance->PAR = tmp_sr;
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	609a      	str	r2, [r3, #8]

  /* Configure DMA Stream destination address */
  hdma_rx.Instance->M0AR = tmp_ds;
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(&hdma_rx);
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <UART_Emul_ReceiveFrame+0xec>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

  if ((huart_emul->RxXferCount == 1)||(huart->State != HAL_UART_EMUL_STATE_BUSY_TX_RX))
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <UART_Emul_ReceiveFrame+0xf0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004124:	2b01      	cmp	r3, #1
 8004126:	d005      	beq.n	8004134 <UART_Emul_ReceiveFrame+0xa0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b10      	cmp	r3, #16
 8004132:	d00d      	beq.n	8004150 <UART_Emul_ReceiveFrame+0xbc>
  {
    TIM1->CCR2 = ((TIM1->CNT + (tmp_arr / 2)) % tmp_arr);
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <UART_Emul_ReceiveFrame+0xe8>)
 8004136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	085b      	lsrs	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	480f      	ldr	r0, [pc, #60]	; (800417c <UART_Emul_ReceiveFrame+0xe8>)
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	fbb3 f2f2 	udiv	r2, r3, r2
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	fb01 f202 	mul.w	r2, r1, r2
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(&TimHandle, TIM_DMA_CC2);
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <UART_Emul_ReceiveFrame+0xf4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <UART_Emul_ReceiveFrame+0xf4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415e:	60da      	str	r2, [r3, #12]

  /* Enable Timer */
  __HAL_TIM_ENABLE(&TimHandle);
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <UART_Emul_ReceiveFrame+0xf4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <UART_Emul_ReceiveFrame+0xf4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	40010000 	.word	0x40010000
 8004180:	20000260 	.word	0x20000260
 8004184:	20000300 	.word	0x20000300
 8004188:	200002c0 	.word	0x200002c0

0800418c <UART_Emul_SetConfig>:
             + DMA2 Configuration channel, Stream, Mode,...
  * @param  huart: UART Emulation handle
  * @retval None
  */
static void UART_Emul_SetConfig (UART_Emul_HandleTypeDef *huart)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t bit_time = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_EMUL_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_EMUL_MODE(huart->Init.Mode));
  assert_param(IS_UART_EMUL_MODE(huart->Init.Parity));

  /* Init Bit Time */
if((HAL_RCC_GetSysClockFreq()/HAL_RCC_GetPCLK2Freq()== 1) | (HAL_RCC_GetSysClockFreq()/HAL_RCC_GetPCLK2Freq()== 2))
 8004198:	f003 fa28 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 800419c:	4604      	mov	r4, r0
 800419e:	f003 faf7 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 80041a2:	4603      	mov	r3, r0
 80041a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2dc      	uxtb	r4, r3
 80041b2:	f003 fa1b 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 80041b6:	4605      	mov	r5, r0
 80041b8:	f003 faea 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 80041bc:	4603      	mov	r3, r0
 80041be:	fbb5 f3f3 	udiv	r3, r5, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4323      	orrs	r3, r4
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <UART_Emul_SetConfig+0x5c>
{
  bit_time = ((uint32_t) ((HAL_RCC_GetSysClockFreq()/huart->Init.BaudRate) - 1));	
 80041d4:	f003 fa0a 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	e009      	b.n	80041fc <UART_Emul_SetConfig+0x70>
}
else
{
  bit_time = ((uint32_t) (((HAL_RCC_GetPCLK2Freq()*2)/huart->Init.BaudRate) - 1));
 80041e8:	f003 fad2 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 80041ec:	4603      	mov	r3, r0
 80041ee:	005a      	lsls	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
  + Period = TimerPeriod 
  + Prescaler = 0
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Instance            = TIM1;
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <UART_Emul_SetConfig+0xc0>)
 80041fe:	4a14      	ldr	r2, [pc, #80]	; (8004250 <UART_Emul_SetConfig+0xc4>)
 8004200:	601a      	str	r2, [r3, #0]
  TimHandle.Init.Period         = bit_time;
 8004202:	4a12      	ldr	r2, [pc, #72]	; (800424c <UART_Emul_SetConfig+0xc0>)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	60d3      	str	r3, [r2, #12]
  TimHandle.Init.Prescaler      = 0;
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <UART_Emul_SetConfig+0xc0>)
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision  = 0;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <UART_Emul_SetConfig+0xc0>)
 8004210:	2200      	movs	r2, #0
 8004212:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode    = TIM_COUNTERMODE_UP;
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <UART_Emul_SetConfig+0xc0>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Init(&TimHandle);
 800421a:	480c      	ldr	r0, [pc, #48]	; (800424c <UART_Emul_SetConfig+0xc0>)
 800421c:	f004 f820 	bl	8008260 <HAL_TIM_Base_Init>

  if (huart->Init.Mode == UART_EMUL_MODE_TX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	791b      	ldrb	r3, [r3, #4]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d102      	bne.n	800422e <UART_Emul_SetConfig+0xa2>
  {
    /* Configure UART Emulation in Transmission mode */
    UART_Emul_SetConfig_DMATx();
 8004228:	f000 f814 	bl	8004254 <UART_Emul_SetConfig_DMATx>
  {
    /* Configure UART Emulation in full-duplex mode */
    UART_Emul_SetConfig_DMATx();
    UART_Emul_SetConfig_DMARx();
  }
}
 800422c:	e00a      	b.n	8004244 <UART_Emul_SetConfig+0xb8>
  else if (huart->Init.Mode == UART_EMUL_MODE_RX)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	791b      	ldrb	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <UART_Emul_SetConfig+0xb0>
    UART_Emul_SetConfig_DMARx();
 8004236:	f000 f867 	bl	8004308 <UART_Emul_SetConfig_DMARx>
}
 800423a:	e003      	b.n	8004244 <UART_Emul_SetConfig+0xb8>
    UART_Emul_SetConfig_DMATx();
 800423c:	f000 f80a 	bl	8004254 <UART_Emul_SetConfig_DMATx>
    UART_Emul_SetConfig_DMARx();
 8004240:	f000 f862 	bl	8004308 <UART_Emul_SetConfig_DMARx>
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bdb0      	pop	{r4, r5, r7, pc}
 800424c:	200002c0 	.word	0x200002c0
 8004250:	40010000 	.word	0x40010000

08004254 <UART_Emul_SetConfig_DMATx>:
             + DMA2 Configuration channel, Stream, Mode, ...
  * @param  None
  * @retval None
  */
static void UART_Emul_SetConfig_DMATx(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Init Idle */
  HAL_GPIO_WritePin((huart_emul->TxPortName), (huart_emul->Init.TxPinNumber), GPIO_PIN_SET);
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <UART_Emul_SetConfig_DMATx+0xa4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <UART_Emul_SetConfig_DMATx+0xa4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	8a5b      	ldrh	r3, [r3, #18]
 8004264:	2201      	movs	r2, #1
 8004266:	4619      	mov	r1, r3
 8004268:	f001 fe82 	bl	8005f70 <HAL_GPIO_WritePin>

  /*##-1- Configure  DMA For UART Emulation TX #############################*/
  /* Set the parameters to be configured */
  hdma_tx.Init.Channel             = DMA_CHANNEL_6;                /* DMA_CHANNEL_6                        */
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 800426e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004272:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;         /* Transfer mode                        */
 8004274:	4b21      	ldr	r3, [pc, #132]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004276:	2240      	movs	r2, #64	; 0x40
 8004278:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;             /* Peripheral increment mode Disable    */
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 800427c:	2200      	movs	r2, #0
 800427e:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;              /* Memory increment mode Enable         */
 8004280:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004286:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;         /* Peripheral data alignment : Word     */
 8004288:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 800428a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800428e:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD ;         /* memory data alignment :  Word        */
 8004290:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 8004292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004296:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;                   /* Normal DMA mode                      */
 8004298:	4b18      	ldr	r3, [pc, #96]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 800429a:	2200      	movs	r2, #0
 800429c:	61da      	str	r2, [r3, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;       /* priority level : very high           */
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80042a4:	621a      	str	r2, [r3, #32]
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         /* FIFO mode disabled                   */
 80042a6:	4b15      	ldr	r3, [pc, #84]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;      /* FIFO threshold full configuration    */
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042ae:	2203      	movs	r2, #3
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tx.Init.MemBurst            = DMA_MBURST_SINGLE;            /* Memory burst                         */
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;            /* Peripheral burst                     */
 80042b8:	4b10      	ldr	r3, [pc, #64]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set hdma_tim instance */
  hdma_tx.Instance = DMA2_Stream1;
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042c0:	4a0f      	ldr	r2, [pc, #60]	; (8004300 <UART_Emul_SetConfig_DMATx+0xac>)
 80042c2:	601a      	str	r2, [r3, #0]
  hdma_tx.Parent = TimHandle.hdma[1];
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <UART_Emul_SetConfig_DMATx+0xb0>)
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042ca:	6393      	str	r3, [r2, #56]	; 0x38
  /* Link hdma_tim to hdma[ ] ( channel Tx or Rx) */
  __HAL_LINKDMA(&TimHandle, hdma[1] , hdma_tx);
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <UART_Emul_SetConfig_DMATx+0xb0>)
 80042ce:	4a0b      	ldr	r2, [pc, #44]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <UART_Emul_SetConfig_DMATx+0xa8>)
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <UART_Emul_SetConfig_DMATx+0xb0>)
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(TimHandle.hdma[1]);
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <UART_Emul_SetConfig_DMATx+0xb0>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fa63 	bl	80057a8 <HAL_DMA_Init>

  /*##-2- NVIC configuration for DMA transfer complete interrupt ###########*/
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 3, 3);
 80042e2:	2203      	movs	r2, #3
 80042e4:	2103      	movs	r1, #3
 80042e6:	2039      	movs	r0, #57	; 0x39
 80042e8:	f001 fa27 	bl	800573a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80042ec:	2039      	movs	r0, #57	; 0x39
 80042ee:	f001 fa40 	bl	8005772 <HAL_NVIC_EnableIRQ>
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000300 	.word	0x20000300
 80042fc:	20000200 	.word	0x20000200
 8004300:	40026428 	.word	0x40026428
 8004304:	200002c0 	.word	0x200002c0

08004308 <UART_Emul_SetConfig_DMARx>:
             + DMA2 Configuration channel, Stream, Mode, ...
  * @param  None
  * @retval None
  */
static void UART_Emul_SetConfig_DMARx(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /*##-1- Configure  DMA For UART Emulation RX #############################*/
  /* Set the parameters to be configured */
  hdma_rx.Init.Channel             = DMA_CHANNEL_6;                /* DMA_CHANNEL_6                        */
 800430c:	4b20      	ldr	r3, [pc, #128]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800430e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004312:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;         /* Transfer mode                        */
 8004314:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;             /* Peripheral increment mode Disable    */
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800431c:	2200      	movs	r2, #0
 800431e:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;              /* Memory increment mode Enable         */
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004326:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;          /* Peripheral data alignment :Word      */
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800432a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800432e:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;          /* memory data alignment : Word         */
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004336:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_NORMAL;                   /* Normal DMA mode                      */
 8004338:	4b15      	ldr	r3, [pc, #84]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800433a:	2200      	movs	r2, #0
 800433c:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;       /* priority level : very high           */
 800433e:	4b14      	ldr	r3, [pc, #80]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004340:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004344:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         /* FIFO mode disabled                   */
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004348:	2200      	movs	r2, #0
 800434a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;      /* FIFO threshold full configuration    */
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800434e:	2203      	movs	r2, #3
 8004350:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_SINGLE;            /* Memory burst                         */
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004354:	2200      	movs	r2, #0
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_SINGLE;            /* Peripheral burst                      */
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800435a:	2200      	movs	r2, #0
 800435c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set hdma_tim instance */
  hdma_rx.Instance = DMA2_Stream2;
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <UART_Emul_SetConfig_DMARx+0x8c>)
 8004362:	601a      	str	r2, [r3, #0]

  /* Link hdma_tim to hdma[ ] ( channel Tx or Rx) */
  __HAL_LINKDMA(&TimHandle, hdma[2], hdma_rx);
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <UART_Emul_SetConfig_DMARx+0x90>)
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 8004368:	629a      	str	r2, [r3, #40]	; 0x28
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <UART_Emul_SetConfig_DMARx+0x88>)
 800436c:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <UART_Emul_SetConfig_DMARx+0x90>)
 800436e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(TimHandle.hdma[2]);
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <UART_Emul_SetConfig_DMARx+0x90>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	4618      	mov	r0, r3
 8004376:	f001 fa17 	bl	80057a8 <HAL_DMA_Init>

  /*##-2- NVIC configuration for DMA transfer complete interrupt ###########*/
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 1);
 800437a:	2201      	movs	r2, #1
 800437c:	2100      	movs	r1, #0
 800437e:	203a      	movs	r0, #58	; 0x3a
 8004380:	f001 f9db 	bl	800573a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004384:	203a      	movs	r0, #58	; 0x3a
 8004386:	f001 f9f4 	bl	8005772 <HAL_NVIC_EnableIRQ>
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000260 	.word	0x20000260
 8004394:	40026440 	.word	0x40026440
 8004398:	200002c0 	.word	0x200002c0

0800439c <UART_Emul_ReceiveFormatFrame>:
 * @param  pBuffer: pointer of receiver Buffer
 * @param  pFrame: pointer of Frame
 * @retval None
*/
static uint8_t UART_Emul_ReceiveFormatFrame(UART_Emul_HandleTypeDef *huart, uint32_t *pBuf, uint8_t Data)
{ 
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
  uint32_t length = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  uint32_t cntparity = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]

  if (huart->Init.Parity != UART_EMUL_PARITY_NONE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	7b9b      	ldrb	r3, [r3, #14]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <UART_Emul_ReceiveFormatFrame+0x30>
  {
    /* Get Length of frame */
    length = huart->Init.WordLength -1 ;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	7b1b      	ldrb	r3, [r3, #12]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	e002      	b.n	80043d2 <UART_Emul_ReceiveFormatFrame+0x36>
  }
  else
  {
    /* Get Length of frame */
    length = huart->Init.WordLength ;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	7b1b      	ldrb	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
  }

  if ((pBuf[huart->Init.WordLength+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	7b1b      	ldrb	r3, [r3, #12]
 80043d6:	3301      	adds	r3, #1
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4413      	add	r3, r2
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	8a12      	ldrh	r2, [r2, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	8a12      	ldrh	r2, [r2, #16]
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01f      	beq.n	800442e <UART_Emul_ReceiveFormatFrame+0x92>
  {
    /* UART Emulation frame error occurred */
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_FE);
 80043ee:	4b4d      	ldr	r3, [pc, #308]	; (8004524 <UART_Emul_ReceiveFormatFrame+0x188>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <UART_Emul_ReceiveFormatFrame+0x188>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0204 	orr.w	r2, r2, #4
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    huart->ErrorCode |= HAL_UART_EMUL_ERROR_FE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004408:	b2db      	uxtb	r3, r3
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable External interrupt for next Frame */
    EXTI->IMR &= ~EXTI_EMR_MR3;
 8004416:	4b44      	ldr	r3, [pc, #272]	; (8004528 <UART_Emul_ReceiveFormatFrame+0x18c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a43      	ldr	r2, [pc, #268]	; (8004528 <UART_Emul_ReceiveFormatFrame+0x18c>)
 800441c:	f023 0308 	bic.w	r3, r3, #8
 8004420:	6013      	str	r3, [r2, #0]

    /* Handle for UART Emulation Error */
    HAL_UART_Emul_ErrorCallback(huart);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7fe fa64 	bl	80028f0 <HAL_UART_Emul_ErrorCallback>

    tmp = RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e073      	b.n	8004516 <UART_Emul_ReceiveFormatFrame+0x17a>
  }
  else
  {
    /* format data */
    for (counter = 0; counter < length; counter++)
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e01c      	b.n	800446e <UART_Emul_ReceiveFormatFrame+0xd2>
    {
      if ((pBuf[counter+1]&(huart->Init.RxPinNumber)) == (huart->Init.RxPinNumber))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3301      	adds	r3, #1
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4413      	add	r3, r2
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	8a12      	ldrh	r2, [r2, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	8a12      	ldrh	r2, [r2, #16]
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <UART_Emul_ReceiveFormatFrame+0xcc>
      {
        Data = (0x01 << counter) | Data;
 800444e:	2201      	movs	r2, #1
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	b25a      	sxtb	r2, r3
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4313      	orrs	r3, r2
 800445e:	b25b      	sxtb	r3, r3
 8004460:	71fb      	strb	r3, [r7, #7]
        cntparity ++;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
    for (counter = 0; counter < length; counter++)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	429a      	cmp	r2, r3
 8004474:	d3de      	bcc.n	8004434 <UART_Emul_ReceiveFormatFrame+0x98>
      }
    }
    /* Parity Bit */
    if (huart->Init.Parity == UART_EMUL_PARITY_ODD)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	7b9b      	ldrb	r3, [r3, #14]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d11c      	bne.n	80044b8 <UART_Emul_ReceiveFormatFrame+0x11c>
    {
			
      if (((cntparity % 2) != SET) && ((pBuf[length+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber))
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d117      	bne.n	80044b8 <UART_Emul_ReceiveFormatFrame+0x11c>
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	3301      	adds	r3, #1
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	8a12      	ldrh	r2, [r2, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	8a12      	ldrh	r2, [r2, #16]
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00a      	beq.n	80044b8 <UART_Emul_ReceiveFormatFrame+0x11c>
      {
        /* Set flag PE */
        __HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_PE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	701a      	strb	r2, [r3, #0]

        HAL_UART_Emul_ErrorCallback(huart);
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7fe fa1c 	bl	80028f0 <HAL_UART_Emul_ErrorCallback>
      }
    }
    if (huart->Init.Parity == UART_EMUL_PARITY_EVEN)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	7b9b      	ldrb	r3, [r3, #14]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d126      	bne.n	800450e <UART_Emul_ReceiveFormatFrame+0x172>
    {

      if (((cntparity % 2) != RESET) && ((pBuf[length+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber))
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d021      	beq.n	800450e <UART_Emul_ReceiveFormatFrame+0x172>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3301      	adds	r3, #1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4413      	add	r3, r2
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	8a12      	ldrh	r2, [r2, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	8a12      	ldrh	r2, [r2, #16]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d014      	beq.n	800450e <UART_Emul_ReceiveFormatFrame+0x172>
      {
        /* UART Emulation parity error occurred */
        __HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_PE);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f043 0308 	orr.w	r3, r3, #8
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	701a      	strb	r2, [r3, #0]

        huart->ErrorCode |= HAL_UART_EMUL_ERROR_PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f043 0304 	orr.w	r3, r3, #4
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        HAL_UART_Emul_ErrorCallback(huart);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7fe f9f1 	bl	80028f0 <HAL_UART_Emul_ErrorCallback>
      }
    }

    /* Reset counter parity */
    cntparity = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	613b      	str	r3, [r7, #16]

    tmp = Data;
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	617b      	str	r3, [r7, #20]
  }

  return tmp;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	b2db      	uxtb	r3, r3
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000300 	.word	0x20000300
 8004528:	40013c00 	.word	0x40013c00

0800452c <UART_Emul_TransmitFormatFrame>:
  * @param  UART Emulation Handle
  * @param  pdata pinteur in data
  * @retval None
  */
static void UART_Emul_TransmitFormatFrame(UART_Emul_HandleTypeDef *huart , uint8_t Data, uint32_t *pBuffer_Tx)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	460b      	mov	r3, r1
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	72fb      	strb	r3, [r7, #11]
uint32_t counter = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
uint32_t bitmask = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
uint32_t length = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
uint32_t cntparity = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]


  length = huart->Init.WordLength;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	7b1b      	ldrb	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]

  /* Get the Pin Number */
  bitmask = (uint32_t)huart->Init.TxPinNumber;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8a5b      	ldrh	r3, [r3, #18]
 8004554:	617b      	str	r3, [r7, #20]

/* with no parity */
if(huart->Init.Parity == 0x00)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	7b9b      	ldrb	r3, [r3, #14]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d122      	bne.n	80045a4 <UART_Emul_TransmitFormatFrame+0x78>
{		
  for (counter = 0; counter < length; counter++)
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e01a      	b.n	800459a <UART_Emul_TransmitFormatFrame+0x6e>
  {
    if (((Data >> counter)&BitMask) != 0)
 8004564:	7afa      	ldrb	r2, [r7, #11]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	fa42 f303 	asr.w	r3, r2, r3
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <UART_Emul_TransmitFormatFrame+0x58>
    {
      pBuffer_Tx[counter+1] = bitmask;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e007      	b.n	8004594 <UART_Emul_TransmitFormatFrame+0x68>
    }
    else
    {
      pBuffer_Tx[counter+1] = (bitmask << 16);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	0412      	lsls	r2, r2, #16
 8004592:	601a      	str	r2, [r3, #0]
  for (counter = 0; counter < length; counter++)
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d3e0      	bcc.n	8004564 <UART_Emul_TransmitFormatFrame+0x38>
 80045a2:	e025      	b.n	80045f0 <UART_Emul_TransmitFormatFrame+0xc4>
  }
}
/* with parity */
else
{
  for (counter = 0; counter < length-1; counter++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	e01d      	b.n	80045e6 <UART_Emul_TransmitFormatFrame+0xba>
  {
    if (((Data >> counter)&BitMask) != 0)
 80045aa:	7afa      	ldrb	r2, [r7, #11]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	fa42 f303 	asr.w	r3, r2, r3
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_Emul_TransmitFormatFrame+0xa4>
    {
      pBuffer_Tx[counter+1] = bitmask;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	601a      	str	r2, [r3, #0]
      cntparity ++;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e007      	b.n	80045e0 <UART_Emul_TransmitFormatFrame+0xb4>
    }
    else
    {
      pBuffer_Tx[counter+1] = (bitmask << 16);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	4413      	add	r3, r2
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	0412      	lsls	r2, r2, #16
 80045de:	601a      	str	r2, [r3, #0]
  for (counter = 0; counter < length-1; counter++)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3dc      	bcc.n	80045aa <UART_Emul_TransmitFormatFrame+0x7e>
    }
  }	
}	
	
  switch  (huart->Init.Parity)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	7b9b      	ldrb	r3, [r3, #14]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d016      	beq.n	8004626 <UART_Emul_TransmitFormatFrame+0xfa>
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d000      	beq.n	80045fe <UART_Emul_TransmitFormatFrame+0xd2>
        pBuffer_Tx[length] = bitmask;
      }
    }
    break;
    default:
      break;
 80045fc:	e027      	b.n	800464e <UART_Emul_TransmitFormatFrame+0x122>
      if ((cntparity % 2) != SET)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <UART_Emul_TransmitFormatFrame+0xea>
        pBuffer_Tx[length] = bitmask;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]
    break;
 8004614:	e01b      	b.n	800464e <UART_Emul_TransmitFormatFrame+0x122>
        pBuffer_Tx[length] = (bitmask << 16);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	0412      	lsls	r2, r2, #16
 8004622:	601a      	str	r2, [r3, #0]
    break;
 8004624:	e013      	b.n	800464e <UART_Emul_TransmitFormatFrame+0x122>
      if ((cntparity % 2) != SET)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <UART_Emul_TransmitFormatFrame+0x114>
        pBuffer_Tx[length] = (bitmask << 16);
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	0412      	lsls	r2, r2, #16
 800463c:	601a      	str	r2, [r3, #0]
    break;
 800463e:	e005      	b.n	800464c <UART_Emul_TransmitFormatFrame+0x120>
        pBuffer_Tx[length] = bitmask;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	4413      	add	r3, r2
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	601a      	str	r2, [r3, #0]
    break;
 800464c:	bf00      	nop
  }
  /* Initialize Bit Start */
  pBuffer_Tx[0] = (bitmask << 16);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]

  if (huart->Init.StopBits == UART_EMUL_STOPBITS_1)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	7b5b      	ldrb	r3, [r3, #13]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <UART_Emul_TransmitFormatFrame+0x142>
  {
    /* Initialize Bit Stop  */
    pBuffer_Tx[length+1] = bitmask;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3301      	adds	r3, #1
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4413      	add	r3, r2
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e00d      	b.n	800468a <UART_Emul_TransmitFormatFrame+0x15e>
  }
  else
  {
    /* Initialize Bit Stop  */
    pBuffer_Tx[length+1] = bitmask;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3301      	adds	r3, #1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	601a      	str	r2, [r3, #0]
    pBuffer_Tx[length+2] = bitmask;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3302      	adds	r3, #2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	601a      	str	r2, [r3, #0]
  }
  /* Reset counter parity */
  cntparity = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
}
 800468e:	bf00      	nop
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <UART_Emul_TransmitFrame>:
  * @param  huart: UART Emulation handle
  * @param  pData: Frame to be sent
  * @retval None
  */
static void UART_Emul_TransmitFrame(UART_Emul_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ds = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_size = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]

	
  if ((huart_emul->TxXferCount % 2 ) != 0)
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <UART_Emul_TransmitFrame+0xc0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	8b5b      	ldrh	r3, [r3, #26]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <UART_Emul_TransmitFrame+0x2a>
  {
    tmp_sr = (uint32_t)pFirstBuffer_Tx;
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <UART_Emul_TransmitFrame+0xc4>)
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e001      	b.n	80046ca <UART_Emul_TransmitFrame+0x2e>
  }
  else
  {
    tmp_sr = (uint32_t)pSecondBuffer_Tx;
 80046c6:	4b27      	ldr	r3, [pc, #156]	; (8004764 <UART_Emul_TransmitFrame+0xc8>)
 80046c8:	617b      	str	r3, [r7, #20]
  }

	tmp_ds = (uint32_t) & ((huart->TxPortName)->BSRR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	3318      	adds	r3, #24
 80046d0:	613b      	str	r3, [r7, #16]
	
  tmp_size = __HAL_UART_EMUL_FRAME_LENGTH(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7b1b      	ldrb	r3, [r3, #12]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7b5b      	ldrb	r3, [r3, #13]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4413      	add	r3, r2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Configure DMA Stream data length */
  hdma_tx.Instance->NDTR = tmp_size;
 80046e8:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Stream destination address */
  hdma_tx.Instance->PAR = tmp_ds;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	609a      	str	r2, [r3, #8]

  /* Configure DMA Stream source address */
  hdma_tx.Instance->M0AR = tmp_sr;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	60da      	str	r2, [r3, #12]

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_tx, DMA_IT_TC);
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	4b18      	ldr	r3, [pc, #96]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0210 	orr.w	r2, r2, #16
 800470e:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_tx, DMA_IT_TE);
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0204 	orr.w	r2, r2, #4
 800471e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(&hdma_tx);
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <UART_Emul_TransmitFrame+0xcc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(&TimHandle, TIM_DMA_CC1);
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <UART_Emul_TransmitFrame+0xd0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	4b0d      	ldr	r3, [pc, #52]	; (800476c <UART_Emul_TransmitFrame+0xd0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(&TimHandle);
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <UART_Emul_TransmitFrame+0xd0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b09      	ldr	r3, [pc, #36]	; (800476c <UART_Emul_TransmitFrame+0xd0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

}
 8004750:	bf00      	nop
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	20000300 	.word	0x20000300
 8004760:	20000364 	.word	0x20000364
 8004764:	20000394 	.word	0x20000394
 8004768:	20000200 	.word	0x20000200
 800476c:	200002c0 	.word	0x200002c0

08004770 <UART_Emul_DMATransmitCplt>:
  * @brief  This function is executed in case of Transfer Complete of a Frame.
  * @param  None
  * @retval None
  */
static void UART_Emul_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpbuffer = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]

  /* Incremente Counter of frame */
  huart_emul->TxXferCount++;
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	8b5a      	ldrh	r2, [r3, #26]
 8004782:	3201      	adds	r2, #1
 8004784:	b292      	uxth	r2, r2
 8004786:	835a      	strh	r2, [r3, #26]

  if (huart_emul->TxXferCount <= huart_emul->TxXferSize)
 8004788:	4b38      	ldr	r3, [pc, #224]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	8b5a      	ldrh	r2, [r3, #26]
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	8b1b      	ldrh	r3, [r3, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d820      	bhi.n	80047da <UART_Emul_DMATransmitCplt+0x6a>
  { 

    /* Call UART Emulation Transmit frame for next Frame */
    UART_Emul_TransmitFrame(huart_emul);
 8004798:	4b34      	ldr	r3, [pc, #208]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff7d 	bl	800469c <UART_Emul_TransmitFrame>

    if ((huart_emul->TxXferCount % 2 ) != 0)
 80047a2:	4b32      	ldr	r3, [pc, #200]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	8b5b      	ldrh	r3, [r3, #26]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <UART_Emul_DMATransmitCplt+0x48>
    {
      tmpbuffer = (uint32_t)pSecondBuffer_Tx;
 80047b2:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <UART_Emul_DMATransmitCplt+0x100>)
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e001      	b.n	80047bc <UART_Emul_DMATransmitCplt+0x4c>
    }
    else
    {
      tmpbuffer = (uint32_t)pFirstBuffer_Tx;
 80047b8:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <UART_Emul_DMATransmitCplt+0x104>)
 80047ba:	60fb      	str	r3, [r7, #12]
    }
    /* Format second Data to be sent */
    UART_Emul_TransmitFormatFrame(huart_emul, *(huart_emul->pTxBuffPtr + huart_emul->TxXferCount), (uint32_t*)tmpbuffer);
 80047bc:	4b2b      	ldr	r3, [pc, #172]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4a29      	ldr	r2, [pc, #164]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	8b52      	ldrh	r2, [r2, #26]
 80047cc:	4413      	add	r3, r2
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4619      	mov	r1, r3
 80047d4:	f7ff feaa 	bl	800452c <UART_Emul_TransmitFormatFrame>
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
    }
    /* Handle for UART Emulation Transfer Complete */
    HAL_UART_Emul_TxCpltCallback(huart_emul);
  }
}
 80047d8:	e043      	b.n	8004862 <UART_Emul_DMATransmitCplt+0xf2>
    __HAL_DMA_DISABLE_IT(TimHandle.hdma[TIM_DMA_ID_CC1], DMA_IT_TC);
 80047da:	4b27      	ldr	r3, [pc, #156]	; (8004878 <UART_Emul_DMATransmitCplt+0x108>)
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <UART_Emul_DMATransmitCplt+0x108>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0210 	bic.w	r2, r2, #16
 80047ec:	601a      	str	r2, [r3, #0]
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_TC);
 80047ee:	4b1f      	ldr	r3, [pc, #124]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0202 	orr.w	r2, r2, #2
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
    __HAL_DMA_DISABLE(&hdma_tx);
 8004802:	4b1e      	ldr	r3, [pc, #120]	; (800487c <UART_Emul_DMATransmitCplt+0x10c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <UART_Emul_DMATransmitCplt+0x10c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
    __HAL_TIM_DISABLE_DMA(&TimHandle, TIM_DMA_CC1);
 8004812:	4b19      	ldr	r3, [pc, #100]	; (8004878 <UART_Emul_DMATransmitCplt+0x108>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <UART_Emul_DMATransmitCplt+0x108>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004820:	60da      	str	r2, [r3, #12]
    huart_emul->TxXferCount = 0;
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	835a      	strh	r2, [r3, #26]
    huart_emul->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (huart_emul->State == HAL_UART_EMUL_STATE_BUSY_TX_RX)
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b10      	cmp	r3, #16
 8004840:	d105      	bne.n	800484e <UART_Emul_DMATransmitCplt+0xde>
      huart_emul->State = HAL_UART_EMUL_STATE_BUSY_RX;
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2208      	movs	r2, #8
 8004848:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800484c:	e004      	b.n	8004858 <UART_Emul_DMATransmitCplt+0xe8>
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
 800484e:	4b07      	ldr	r3, [pc, #28]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    HAL_UART_Emul_TxCpltCallback(huart_emul);
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <UART_Emul_DMATransmitCplt+0xfc>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f835 	bl	80048cc <HAL_UART_Emul_TxCpltCallback>
}
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000300 	.word	0x20000300
 8004870:	20000394 	.word	0x20000394
 8004874:	20000364 	.word	0x20000364
 8004878:	200002c0 	.word	0x200002c0
 800487c:	20000200 	.word	0x20000200

08004880 <UART_Emul_DMAError>:
  * @brief  This function is executed in case of error of Transfer occurrence.
  * @param  hdma : DMA Handle
  * @retval None
  */
static void UART_Emul_DMAError(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* UART Emulation frame error occurred */
  __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_FE);
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <UART_Emul_DMAError+0x48>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <UART_Emul_DMAError+0x48>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0204 	orr.w	r2, r2, #4
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

  huart_emul->ErrorCode |= HAL_UART_EMUL_ERROR_FE;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <UART_Emul_DMAError+0x48>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <UART_Emul_DMAError+0x48>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  HAL_UART_Emul_ErrorCallback(huart_emul);
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <UART_Emul_DMAError+0x48>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe f819 	bl	80028f0 <HAL_UART_Emul_ErrorCallback>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20000300 	.word	0x20000300

080048cc <HAL_UART_Emul_TxCpltCallback>:
  * @brief  Initializes the UART Emulation Transfer Complete.
  * @param  huart: UART Emulation Handle
  * @retval None
  */
__weak void HAL_UART_Emul_TxCpltCallback(UART_Emul_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_UART_Emul_TransferComplete could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <gps_read>:

void gps_read(char*	sRxBuffer,
			  L76* pL76,
			  char *seGNGGA,
			  char* seGNRMC)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b0b2      	sub	sp, #200	; 0xc8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
	/* Check for NULL */
	if ((sRxBuffer == NULL) || (pL76 == NULL) || (seGNGGA == NULL) || (seGNRMC == NULL))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <gps_read+0x26>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <gps_read+0x26>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <gps_read+0x26>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <gps_read+0x2a>
	{
		Error_Handler();
 8004906:	f7fc fd89 	bl	800141c <Error_Handler>
	}

	uint8_t u8IsFix = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	uint8_t u8IndexOfComma[20] = {0};
 8004910:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]
	uint8_t u8IndexOfComma2[20] = {0};
 8004920:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	611a      	str	r2, [r3, #16]
	char sUtcTime[15] = {0};
 8004930:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	f8c3 200b 	str.w	r2, [r3, #11]
	char sDate[10]	  = {0};
 8004940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	811a      	strh	r2, [r3, #8]

	memset(pL76, 0, sizeof(L76));
 800494c:	2218      	movs	r2, #24
 800494e:	2100      	movs	r1, #0
 8004950:	68b8      	ldr	r0, [r7, #8]
 8004952:	f005 f9cb 	bl	8009cec <memset>

	/* 2 strings to split the GNGAA and GNRMC from the NMEA sent from the Quectel L76 LB */
	char *sSubGPS  = strstr(sRxBuffer, "$GNGGA");
 8004956:	49c9      	ldr	r1, [pc, #804]	; (8004c7c <gps_read+0x39c>)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f005 fed6 	bl	800a70a <strstr>
 800495e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	char* sSubGPS2 = strstr(sRxBuffer, "$GNRMC");
 8004962:	49c7      	ldr	r1, [pc, #796]	; (8004c80 <gps_read+0x3a0>)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f005 fed0 	bl	800a70a <strstr>
 800496a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	/* Split the GNRMC from the string above */
	for (int i = 0; i < strlen(sSubGPS2); i++)
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004974:	e02d      	b.n	80049d2 <gps_read+0xf2>
	{
		if (sSubGPS2[i] == '\r')
 8004976:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800497a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800497e:	4413      	add	r3, r2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b0d      	cmp	r3, #13
 8004984:	d120      	bne.n	80049c8 <gps_read+0xe8>
		{
			for (int j = 0; j < i; j++)
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800498c:	e00f      	b.n	80049ae <gps_read+0xce>
			{
				seGNRMC[j] = sSubGPS2[j];
 800498e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004992:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004996:	441a      	add	r2, r3
 8004998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	440b      	add	r3, r1
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < i; j++)
 80049a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049a8:	3301      	adds	r3, #1
 80049aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049b6:	429a      	cmp	r2, r3
 80049b8:	dbe9      	blt.n	800498e <gps_read+0xae>
			}
			seGNRMC[i] = '\0';
 80049ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
			break;
 80049c6:	e00d      	b.n	80049e4 <gps_read+0x104>
	for (int i = 0; i < strlen(sSubGPS2); i++)
 80049c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049cc:	3301      	adds	r3, #1
 80049ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80049d6:	f7fb fc03 	bl	80001e0 <strlen>
 80049da:	4602      	mov	r2, r0
 80049dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d8c8      	bhi.n	8004976 <gps_read+0x96>
		}
	}

	/* Test */
	printf("the string of the subGNRMC: %s\r\n", seGNRMC);
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	48a7      	ldr	r0, [pc, #668]	; (8004c84 <gps_read+0x3a4>)
 80049e8:	f005 fde4 	bl	800a5b4 <iprintf>

	/* Split the GNGGA from the string above */
	for (int i = 0; i < strlen(sSubGPS); i++)
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049f2:	e02d      	b.n	8004a50 <gps_read+0x170>
	{
		if (sSubGPS[i] == '\r')
 80049f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b0d      	cmp	r3, #13
 8004a02:	d120      	bne.n	8004a46 <gps_read+0x166>
		{
			for (int j = 0; j < i; j++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a0a:	e00f      	b.n	8004a2c <gps_read+0x14c>
			{
				seGNGGA[j] = sSubGPS[j];
 8004a0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a10:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004a14:	441a      	add	r2, r3
 8004a16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	440b      	add	r3, r1
 8004a1e:	7812      	ldrb	r2, [r2, #0]
 8004a20:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < i; j++)
 8004a22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a26:	3301      	adds	r3, #1
 8004a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a34:	429a      	cmp	r2, r3
 8004a36:	dbe9      	blt.n	8004a0c <gps_read+0x12c>
			}
			seGNGGA[i] = '\0';
 8004a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
			break;
 8004a44:	e00d      	b.n	8004a62 <gps_read+0x182>
	for (int i = 0; i < strlen(sSubGPS); i++)
 8004a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a50:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004a54:	f7fb fbc4 	bl	80001e0 <strlen>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d8c8      	bhi.n	80049f4 <gps_read+0x114>
		}
	}

	/* Test */
	printf("the string of the subGNGGA: %s\r\n", seGNGGA);
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4888      	ldr	r0, [pc, #544]	; (8004c88 <gps_read+0x3a8>)
 8004a66:	f005 fda5 	bl	800a5b4 <iprintf>

	int j = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNGGA string */
	for (int i = 0; i < strlen(seGNGGA); i++)
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a76:	e018      	b.n	8004aaa <gps_read+0x1ca>
	{
		if (seGNGGA[i] == ',')
 8004a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b2c      	cmp	r3, #44	; 0x2c
 8004a84:	d10c      	bne.n	8004aa0 <gps_read+0x1c0>
		{
			u8IndexOfComma[j++] = i;
 8004a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f803 2c44 	strb.w	r2, [r3, #-68]
	for (int i = 0; i < strlen(seGNGGA); i++)
 8004aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fb fb98 	bl	80001e0 <strlen>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d8de      	bhi.n	8004a78 <gps_read+0x198>
		}
	}

	j = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNRMC string */
	for (int i = 0; i < strlen(seGNRMC); i++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ac6:	e018      	b.n	8004afa <gps_read+0x21a>
	{
		if (seGNRMC[i] == ',')
 8004ac8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	4413      	add	r3, r2
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b2c      	cmp	r3, #44	; 0x2c
 8004ad4:	d10c      	bne.n	8004af0 <gps_read+0x210>
		{
			u8IndexOfComma2[j++] = i;
 8004ad6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004ae0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8004aea:	440b      	add	r3, r1
 8004aec:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (int i = 0; i < strlen(seGNRMC); i++)
 8004af0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004af4:	3301      	adds	r3, #1
 8004af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004afa:	6838      	ldr	r0, [r7, #0]
 8004afc:	f7fb fb70 	bl	80001e0 <strlen>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d8de      	bhi.n	8004ac8 <gps_read+0x1e8>
		}
	}

	/* Check whether the GPS is fix or not on GNGGA */
	if (seGNGGA[u8IndexOfComma[5] + 1] == '0' || strlen(seGNGGA) == 0 || seGNGGA[u8IndexOfComma[5]+1] != '1')
 8004b0a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004b0e:	3301      	adds	r3, #1
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b30      	cmp	r3, #48	; 0x30
 8004b18:	d00b      	beq.n	8004b32 <gps_read+0x252>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <gps_read+0x252>
 8004b22:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004b26:	3301      	adds	r3, #1
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b31      	cmp	r3, #49	; 0x31
 8004b30:	d00e      	beq.n	8004b50 <gps_read+0x270>
	{
		if (seGNGGA[u8IndexOfComma[5] + 1] == '0')
 8004b32:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004b36:	3301      	adds	r3, #1
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	d102      	bne.n	8004b48 <gps_read+0x268>
		{
			printf("GPS NOT FIX!!!\r\n");
 8004b42:	4852      	ldr	r0, [pc, #328]	; (8004c8c <gps_read+0x3ac>)
 8004b44:	f005 fdaa 	bl	800a69c <puts>
		}
		u8IsFix = GPS_NOT_FIX;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8004b4e:	e002      	b.n	8004b56 <gps_read+0x276>
	}else
	{
		u8IsFix = GPS_FIX;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	/* If GPS is fix, Get the DATA */
	if (u8IsFix == GPS_NOT_FIX)
 8004b56:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <gps_read+0x290>
	{
		/* Information of NMEA */
		memset(pL76, 0, sizeof(*pL76));
 8004b5e:	2218      	movs	r2, #24
 8004b60:	2100      	movs	r1, #0
 8004b62:	68b8      	ldr	r0, [r7, #8]
 8004b64:	f005 f8c2 	bl	8009cec <memset>
		printf("GPS NOT AVAILABLE\r\n");
 8004b68:	4849      	ldr	r0, [pc, #292]	; (8004c90 <gps_read+0x3b0>)
 8004b6a:	f005 fd97 	bl	800a69c <puts>
		}

		L76_Long_Parse(sLong, pL76, u8E_W);

	}
}
 8004b6e:	e191      	b.n	8004e94 <gps_read+0x5b4>
		char sLat[20] = {0};
 8004b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	611a      	str	r2, [r3, #16]
		char sN_S[3] = {0};
 8004b80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004b84:	2100      	movs	r1, #0
 8004b86:	460a      	mov	r2, r1
 8004b88:	801a      	strh	r2, [r3, #0]
 8004b8a:	460a      	mov	r2, r1
 8004b8c:	709a      	strb	r2, [r3, #2]
		j = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 8004b94:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8004b98:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004b9c:	e016      	b.n	8004bcc <gps_read+0x2ec>
			sUtcTime[j] = seGNGGA[i+1];
 8004b9e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	7819      	ldrb	r1, [r3, #0]
 8004baa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004bae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bb2:	4413      	add	r3, r2
 8004bb4:	460a      	mov	r2, r1
 8004bb6:	701a      	strb	r2, [r3, #0]
			j++;
 8004bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 8004bc2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004bcc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8004bd0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3e2      	bcc.n	8004b9e <gps_read+0x2be>
		sUtcTime[j-1] = '\0';
 8004bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004be2:	4413      	add	r3, r2
 8004be4:	2200      	movs	r2, #0
 8004be6:	f803 2c68 	strb.w	r2, [r3, #-104]
		L76_Time_Parse(sUtcTime, pL76);
 8004bea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 facd 	bl	8005190 <L76_Time_Parse>
		j = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma2[9]; i++)
 8004bfc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8004c00:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8004c04:	e016      	b.n	8004c34 <gps_read+0x354>
			sDate[j] = seGNRMC[i+1];
 8004c06:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	4413      	add	r3, r2
 8004c10:	7819      	ldrb	r1, [r3, #0]
 8004c12:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8004c16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c1a:	4413      	add	r3, r2
 8004c1c:	460a      	mov	r2, r1
 8004c1e:	701a      	strb	r2, [r3, #0]
			j++;
 8004c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c24:	3301      	adds	r3, #1
 8004c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma2[9]; i++)
 8004c2a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8004c34:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004c38:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d3e2      	bcc.n	8004c06 <gps_read+0x326>
		sDate[j-1] = '\0';
 8004c40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c44:	3b01      	subs	r3, #1
 8004c46:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004c4a:	4413      	add	r3, r2
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f803 2c74 	strb.w	r2, [r3, #-116]
		printf("DATE string: %s\r\n",sDate);
 8004c52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c56:	4619      	mov	r1, r3
 8004c58:	480e      	ldr	r0, [pc, #56]	; (8004c94 <gps_read+0x3b4>)
 8004c5a:	f005 fcab 	bl	800a5b4 <iprintf>
		L76_Date_Parse(sDate, pL76);
 8004c5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fae5 	bl	8005234 <L76_Date_Parse>
		j = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 8004c70:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8004c74:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8004c78:	e025      	b.n	8004cc6 <gps_read+0x3e6>
 8004c7a:	bf00      	nop
 8004c7c:	0800e38c 	.word	0x0800e38c
 8004c80:	0800e394 	.word	0x0800e394
 8004c84:	0800e39c 	.word	0x0800e39c
 8004c88:	0800e3c0 	.word	0x0800e3c0
 8004c8c:	0800e3e4 	.word	0x0800e3e4
 8004c90:	0800e3f4 	.word	0x0800e3f4
 8004c94:	0800e408 	.word	0x0800e408
			sLat[j] = seGNGGA[i+1];
 8004c98:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	7819      	ldrb	r1, [r3, #0]
 8004ca4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cac:	4413      	add	r3, r2
 8004cae:	460a      	mov	r2, r1
 8004cb0:	701a      	strb	r2, [r3, #0]
			j++;
 8004cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 8004cbc:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8004cc6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004cca:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3e2      	bcc.n	8004c98 <gps_read+0x3b8>
		sLat[j-1] = '\0';
 8004cd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004cdc:	4413      	add	r3, r2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f803 2c88 	strb.w	r2, [r3, #-136]
		printf("%s\n\r", sLat);
 8004ce4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ce8:	4619      	mov	r1, r3
 8004cea:	486c      	ldr	r0, [pc, #432]	; (8004e9c <gps_read+0x5bc>)
 8004cec:	f005 fc62 	bl	800a5b4 <iprintf>
		j = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8004cf6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004cfa:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8004cfe:	e016      	b.n	8004d2e <gps_read+0x44e>
			sN_S[j] = seGNGGA[i+1];
 8004d00:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004d04:	3301      	adds	r3, #1
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4413      	add	r3, r2
 8004d0a:	7819      	ldrb	r1, [r3, #0]
 8004d0c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d14:	4413      	add	r3, r2
 8004d16:	460a      	mov	r2, r1
 8004d18:	701a      	strb	r2, [r3, #0]
			j++;
 8004d1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d1e:	3301      	adds	r3, #1
 8004d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8004d24:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8004d2e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004d32:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3e2      	bcc.n	8004d00 <gps_read+0x420>
		sN_S[j-1] = '\0';
 8004d3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004d44:	4413      	add	r3, r2
 8004d46:	2200      	movs	r2, #0
 8004d48:	f803 2c8c 	strb.w	r2, [r3, #-140]
		uint8_t u8N_S = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if (sN_S[0] == 'N')
 8004d52:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004d56:	2b4e      	cmp	r3, #78	; 0x4e
 8004d58:	d103      	bne.n	8004d62 <gps_read+0x482>
			u8N_S = GPS_NORTH;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8004d60:	e006      	b.n	8004d70 <gps_read+0x490>
		}else if (sN_S[0] == 'S')
 8004d62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004d66:	2b53      	cmp	r3, #83	; 0x53
 8004d68:	d102      	bne.n	8004d70 <gps_read+0x490>
			u8N_S = GPS_SOUTH;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		L76_Lat_Parse(sLat, pL76, u8N_S);
 8004d70:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8004d74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f892 	bl	8004ea4 <L76_Lat_Parse>
		j = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sLong[20] = {0};
 8004d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
 8004d90:	609a      	str	r2, [r3, #8]
 8004d92:	60da      	str	r2, [r3, #12]
 8004d94:	611a      	str	r2, [r3, #16]
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 8004d96:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004d9a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004d9e:	e016      	b.n	8004dce <gps_read+0x4ee>
			sLong[j] = seGNGGA[i+1];
 8004da0:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004da4:	3301      	adds	r3, #1
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	7819      	ldrb	r1, [r3, #0]
 8004dac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004db0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004db4:	4413      	add	r3, r2
 8004db6:	460a      	mov	r2, r1
 8004db8:	701a      	strb	r2, [r3, #0]
			j++;
 8004dba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 8004dc4:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004dce:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004dd2:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d3e2      	bcc.n	8004da0 <gps_read+0x4c0>
		sLong[j-1] = '\0';
 8004dda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004dde:	3b01      	subs	r3, #1
 8004de0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004de4:	4413      	add	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	f803 2ca0 	strb.w	r2, [r3, #-160]
		printf("%s\r\n",sLong);
 8004dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004df0:	4619      	mov	r1, r3
 8004df2:	482b      	ldr	r0, [pc, #172]	; (8004ea0 <gps_read+0x5c0>)
 8004df4:	f005 fbde 	bl	800a5b4 <iprintf>
		j = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sE_W[20] = {0};
 8004dfe:	f107 0314 	add.w	r3, r7, #20
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	609a      	str	r2, [r3, #8]
 8004e0a:	60da      	str	r2, [r3, #12]
 8004e0c:	611a      	str	r2, [r3, #16]
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8004e0e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004e12:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8004e16:	e016      	b.n	8004e46 <gps_read+0x566>
			sE_W[j] = seGNGGA[i+1];
 8004e18:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4413      	add	r3, r2
 8004e22:	7819      	ldrb	r1, [r3, #0]
 8004e24:	f107 0214 	add.w	r2, r7, #20
 8004e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e2c:	4413      	add	r3, r2
 8004e2e:	460a      	mov	r2, r1
 8004e30:	701a      	strb	r2, [r3, #0]
			j++;
 8004e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e36:	3301      	adds	r3, #1
 8004e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8004e3c:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004e40:	3301      	adds	r3, #1
 8004e42:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8004e46:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004e4a:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3e2      	bcc.n	8004e18 <gps_read+0x538>
		sE_W[j-1] = '\0';
 8004e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e56:	3b01      	subs	r3, #1
 8004e58:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004e5c:	4413      	add	r3, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f803 2cb4 	strb.w	r2, [r3, #-180]
		uint8_t u8E_W = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		if (sE_W[0] == 'E')
 8004e6a:	7d3b      	ldrb	r3, [r7, #20]
 8004e6c:	2b45      	cmp	r3, #69	; 0x45
 8004e6e:	d103      	bne.n	8004e78 <gps_read+0x598>
			u8E_W = GPS_EAST;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8004e76:	e005      	b.n	8004e84 <gps_read+0x5a4>
		else if (sE_W[0] == 'W')
 8004e78:	7d3b      	ldrb	r3, [r7, #20]
 8004e7a:	2b57      	cmp	r3, #87	; 0x57
 8004e7c:	d102      	bne.n	8004e84 <gps_read+0x5a4>
			u8E_W = GPS_WEST;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		L76_Long_Parse(sLong, pL76, u8E_W);
 8004e84:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8004e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f8c6 	bl	8005020 <L76_Long_Parse>
}
 8004e94:	bf00      	nop
 8004e96:	37c8      	adds	r7, #200	; 0xc8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	0800e41c 	.word	0x0800e41c
 8004ea0:	0800e424 	.word	0x0800e424

08004ea4 <L76_Lat_Parse>:

static void L76_Lat_Parse(char* sLat,
						  L76* pL76,
						  uint8_t u8NorS)
{
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea6:	b08f      	sub	sp, #60	; 0x3c
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
	char degree[3];
	char minute[10];

	/* Check for NULL pointer */
	if ((sLat == NULL) || (pL76 == NULL))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <L76_Lat_Parse+0x1a>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <L76_Lat_Parse+0x1e>
	{
		Error_Handler();
 8004ebe:	f7fc faad 	bl	800141c <Error_Handler>
	/* Check the postition of the dot to divide the degrees and minutes
	 * The Latitude NMEA form ddmm.mmmm
	 */

	/* 1. Parse the Degree */
	for (uint8_t i = 0; i < 2; i++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004ec8:	e010      	b.n	8004eec <L76_Lat_Parse+0x48>
	{
		degree[i] = sLat[i];
 8004eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004edc:	440b      	add	r3, r1
 8004ede:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 2; i++)
 8004ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004eec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d9ea      	bls.n	8004eca <L76_Lat_Parse+0x26>
	}
	degree[2] = '\0';
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	77bb      	strb	r3, [r7, #30]

	/* Test */
	printf("Lat Degree: %s\r\n", degree);
 8004ef8:	f107 031c 	add.w	r3, r7, #28
 8004efc:	4619      	mov	r1, r3
 8004efe:	4843      	ldr	r0, [pc, #268]	; (800500c <L76_Lat_Parse+0x168>)
 8004f00:	f005 fb58 	bl	800a5b4 <iprintf>

	double dTempDeg = atof(degree);
 8004f04:	f107 031c 	add.w	r3, r7, #28
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f004 fec1 	bl	8009c90 <atof>
 8004f0e:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minute */
	uint8_t j = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	printf("%s\r\n", sLat);
 8004f18:	68f9      	ldr	r1, [r7, #12]
 8004f1a:	483d      	ldr	r0, [pc, #244]	; (8005010 <L76_Lat_Parse+0x16c>)
 8004f1c:	f005 fb4a 	bl	800a5b4 <iprintf>

	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8004f20:	2302      	movs	r3, #2
 8004f22:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004f26:	e015      	b.n	8004f54 <L76_Lat_Parse+0xb0>
	{
		minute[j] = sLat[i];
 8004f28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	441a      	add	r2, r3
 8004f30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 8004f40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f44:	3301      	adds	r3, #1
 8004f46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8004f4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004f54:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7fb f941 	bl	80001e0 <strlen>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	3b01      	subs	r3, #1
 8004f62:	429e      	cmp	r6, r3
 8004f64:	d3e0      	bcc.n	8004f28 <L76_Lat_Parse+0x84>
	}
	minute[j] = '\0';
 8004f66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004f6a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004f6e:	4413      	add	r3, r2
 8004f70:	2200      	movs	r2, #0
 8004f72:	f803 2c28 	strb.w	r2, [r3, #-40]

	printf("Lat Minute: %s\r\n", minute);
 8004f76:	f107 0310 	add.w	r3, r7, #16
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4825      	ldr	r0, [pc, #148]	; (8005014 <L76_Lat_Parse+0x170>)
 8004f7e:	f005 fb19 	bl	800a5b4 <iprintf>

	double dTempMin = atof(minute);
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 fe82 	bl	8009c90 <atof>
 8004f8c:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form dd.xxxxx */
	if (u8NorS == GPS_NORTH)
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d114      	bne.n	8004fc0 <L76_Lat_Parse+0x11c>
	{
		pL76->dLattitude = dTempDeg + (dTempMin / 60);
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <L76_Lat_Parse+0x174>)
 8004f9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004fa0:	f7fb fc5c 	bl	800085c <__aeabi_ddiv>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4621      	mov	r1, r4
 8004fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fb0:	f7fb f974 	bl	800029c <__adddf3>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8004fbe:	e019      	b.n	8004ff4 <L76_Lat_Parse+0x150>
	}
	else if (u8NorS == GPS_SOUTH)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d116      	bne.n	8004ff4 <L76_Lat_Parse+0x150>
	{
		pL76->dLattitude = -(dTempDeg + (dTempMin / 60));
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	4b13      	ldr	r3, [pc, #76]	; (8005018 <L76_Lat_Parse+0x174>)
 8004fcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004fd0:	f7fb fc44 	bl	800085c <__aeabi_ddiv>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fe0:	f7fb f95c 	bl	800029c <__adddf3>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4614      	mov	r4, r2
 8004fea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	e9c3 4502 	strd	r4, r5, [r3, #8]
	else
	{
		/* Unavailable */
		;
	}
	printf("NMEA latitude: %lf\r\n", pL76->dLattitude);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	4807      	ldr	r0, [pc, #28]	; (800501c <L76_Lat_Parse+0x178>)
 8005000:	f005 fad8 	bl	800a5b4 <iprintf>

}
 8005004:	bf00      	nop
 8005006:	373c      	adds	r7, #60	; 0x3c
 8005008:	46bd      	mov	sp, r7
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500c:	0800e42c 	.word	0x0800e42c
 8005010:	0800e424 	.word	0x0800e424
 8005014:	0800e440 	.word	0x0800e440
 8005018:	404e0000 	.word	0x404e0000
 800501c:	0800e454 	.word	0x0800e454

08005020 <L76_Long_Parse>:

static void L76_Long_Parse(char* sLong,
						   L76* pL76,
						   uint8_t u8EorW)
{
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	b08f      	sub	sp, #60	; 0x3c
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
	char degree[4];
	char minute[10];

	/* Check for NULL pointer */
	if ((sLong == NULL) || (pL76 == NULL))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <L76_Long_Parse+0x1a>
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <L76_Long_Parse+0x1e>
	{
		Error_Handler();
 800503a:	f7fc f9ef 	bl	800141c <Error_Handler>
	/* Check the position of the dot to divide degrees and minutes
	 * The Longtitude NMEA form dddmm.mmmm
	 */

	/* 1. Parse the degrees */
	for (uint8_t i = 0; i < 3; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005044:	e010      	b.n	8005068 <L76_Long_Parse+0x48>
	{
		degree[i] = sLong[i];
 8005046:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	441a      	add	r2, r3
 800504e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8005058:	440b      	add	r3, r1
 800505a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 3; i++)
 800505e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005062:	3301      	adds	r3, #1
 8005064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800506c:	2b02      	cmp	r3, #2
 800506e:	d9ea      	bls.n	8005046 <L76_Long_Parse+0x26>
	}
	degree[3] = '\0';
 8005070:	2300      	movs	r3, #0
 8005072:	77fb      	strb	r3, [r7, #31]

	/* Test */
	printf("Long Degree: %s\r\n", degree);
 8005074:	f107 031c 	add.w	r3, r7, #28
 8005078:	4619      	mov	r1, r3
 800507a:	4841      	ldr	r0, [pc, #260]	; (8005180 <L76_Long_Parse+0x160>)
 800507c:	f005 fa9a 	bl	800a5b4 <iprintf>

	double dTempDeg = atof(degree);
 8005080:	f107 031c 	add.w	r3, r7, #28
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fe03 	bl	8009c90 <atof>
 800508a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minutes */
	uint8_t j = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 8005094:	2303      	movs	r3, #3
 8005096:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800509a:	e015      	b.n	80050c8 <L76_Long_Parse+0xa8>
	{
		minute[j] = sLong[i];
 800509c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	441a      	add	r2, r3
 80050a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050a8:	7812      	ldrb	r2, [r2, #0]
 80050aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80050ae:	440b      	add	r3, r1
 80050b0:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 80050b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050b8:	3301      	adds	r3, #1
 80050ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 80050be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80050c2:	3301      	adds	r3, #1
 80050c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80050c8:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7fb f887 	bl	80001e0 <strlen>
 80050d2:	4603      	mov	r3, r0
 80050d4:	3b01      	subs	r3, #1
 80050d6:	429e      	cmp	r6, r3
 80050d8:	d3e0      	bcc.n	800509c <L76_Long_Parse+0x7c>
	}
	minute[j] = '\0';
 80050da:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80050de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80050e2:	4413      	add	r3, r2
 80050e4:	2200      	movs	r2, #0
 80050e6:	f803 2c28 	strb.w	r2, [r3, #-40]

	/* Test */
	printf("Long minute: %s\r\n", minute);
 80050ea:	f107 0310 	add.w	r3, r7, #16
 80050ee:	4619      	mov	r1, r3
 80050f0:	4824      	ldr	r0, [pc, #144]	; (8005184 <L76_Long_Parse+0x164>)
 80050f2:	f005 fa5f 	bl	800a5b4 <iprintf>

	double dTempMin = atof(minute);
 80050f6:	f107 0310 	add.w	r3, r7, #16
 80050fa:	4618      	mov	r0, r3
 80050fc:	f004 fdc8 	bl	8009c90 <atof>
 8005100:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form of ddd.xxxxx */
	if (u8EorW == GPS_EAST)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d114      	bne.n	8005134 <L76_Long_Parse+0x114>
	{
		pL76->dLongtitude = dTempDeg + (dTempMin / 60);
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <L76_Long_Parse+0x168>)
 8005110:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005114:	f7fb fba2 	bl	800085c <__aeabi_ddiv>
 8005118:	4603      	mov	r3, r0
 800511a:	460c      	mov	r4, r1
 800511c:	4618      	mov	r0, r3
 800511e:	4621      	mov	r1, r4
 8005120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005124:	f7fb f8ba 	bl	800029c <__adddf3>
 8005128:	4603      	mov	r3, r0
 800512a:	460c      	mov	r4, r1
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	e9c2 3400 	strd	r3, r4, [r2]
 8005132:	e019      	b.n	8005168 <L76_Long_Parse+0x148>
	}
	else if (u8EorW == GPS_WEST)
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <L76_Long_Parse+0x148>
	{
		pL76->dLongtitude = -(dTempDeg + (dTempMin / 60));
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <L76_Long_Parse+0x168>)
 8005140:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005144:	f7fb fb8a 	bl	800085c <__aeabi_ddiv>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005154:	f7fb f8a2 	bl	800029c <__adddf3>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4614      	mov	r4, r2
 800515e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	e9c3 4500 	strd	r4, r5, [r3]
		/* Unavailable */
		;
	}

	/* Test */
	printf("NMEA longtitude: %lf\r\n", pL76->dLongtitude);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800516e:	461a      	mov	r2, r3
 8005170:	4623      	mov	r3, r4
 8005172:	4806      	ldr	r0, [pc, #24]	; (800518c <L76_Long_Parse+0x16c>)
 8005174:	f005 fa1e 	bl	800a5b4 <iprintf>

}
 8005178:	bf00      	nop
 800517a:	373c      	adds	r7, #60	; 0x3c
 800517c:	46bd      	mov	sp, r7
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005180:	0800e46c 	.word	0x0800e46c
 8005184:	0800e480 	.word	0x0800e480
 8005188:	404e0000 	.word	0x404e0000
 800518c:	0800e494 	.word	0x0800e494

08005190 <L76_Time_Parse>:

static void L76_Time_Parse(char* sUtcTime,
						   L76* pL76)
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	/* Check for NULL pointer */
	if ((sUtcTime == NULL) || (pL76 == NULL))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <L76_Time_Parse+0x16>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <L76_Time_Parse+0x1a>
	{
		Error_Handler();
 80051a6:	f7fc f939 	bl	800141c <Error_Handler>
	}

	uint32_t dTime = (uint32_t)atof(sUtcTime);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f004 fd70 	bl	8009c90 <atof>
 80051b0:	ec54 3b10 	vmov	r3, r4, d0
 80051b4:	4618      	mov	r0, r3
 80051b6:	4621      	mov	r1, r4
 80051b8:	f7fb fcfe 	bl	8000bb8 <__aeabi_d2uiz>
 80051bc:	4603      	mov	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]

	/* 1. Get the seconds */
	pL76->u8Second = (uint8_t) (dTime % 100);
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4b19      	ldr	r3, [pc, #100]	; (8005228 <L76_Time_Parse+0x98>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	755a      	strb	r2, [r3, #21]

	/* 2. Get the minutes */
	pL76->u8Minute = (uint8_t) ((dTime / 100) % 100);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <L76_Time_Parse+0x98>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095a      	lsrs	r2, r3, #5
 80051e2:	4b11      	ldr	r3, [pc, #68]	; (8005228 <L76_Time_Parse+0x98>)
 80051e4:	fba3 1302 	umull	r1, r3, r3, r2
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	2164      	movs	r1, #100	; 0x64
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	751a      	strb	r2, [r3, #20]

	/* 3. Get the hour */
	pL76->u8Hour = (uint8_t) (dTime / 10000);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a0c      	ldr	r2, [pc, #48]	; (800522c <L76_Time_Parse+0x9c>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	0b5b      	lsrs	r3, r3, #13
 8005202:	b2da      	uxtb	r2, r3
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	74da      	strb	r2, [r3, #19]

	/* Test */
	printf("UTC TIME: %d:%d:%d\r\n", pL76->u8Hour, pL76->u8Minute, pL76->u8Second);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	7cdb      	ldrb	r3, [r3, #19]
 800520c:	4619      	mov	r1, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	7d1b      	ldrb	r3, [r3, #20]
 8005212:	461a      	mov	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	7d5b      	ldrb	r3, [r3, #21]
 8005218:	4805      	ldr	r0, [pc, #20]	; (8005230 <L76_Time_Parse+0xa0>)
 800521a:	f005 f9cb 	bl	800a5b4 <iprintf>
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	bd90      	pop	{r4, r7, pc}
 8005226:	bf00      	nop
 8005228:	51eb851f 	.word	0x51eb851f
 800522c:	d1b71759 	.word	0xd1b71759
 8005230:	0800e4ac 	.word	0x0800e4ac

08005234 <L76_Date_Parse>:

static void L76_Date_Parse(char* sRmcDate,
						   L76* pL76Handle)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	/* Check for NULL pointers */
	if ((sRmcDate == NULL) || (pL76Handle == NULL))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <L76_Date_Parse+0x16>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <L76_Date_Parse+0x1a>
	{
		Error_Handler();
 800524a:	f7fc f8e7 	bl	800141c <Error_Handler>
	}

	uint32_t dDate = (uint32_t)atof(sRmcDate);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f004 fd1e 	bl	8009c90 <atof>
 8005254:	ec54 3b10 	vmov	r3, r4, d0
 8005258:	4618      	mov	r0, r3
 800525a:	4621      	mov	r1, r4
 800525c:	f7fb fcac 	bl	8000bb8 <__aeabi_d2uiz>
 8005260:	4603      	mov	r3, r0
 8005262:	60fb      	str	r3, [r7, #12]

	/* 1. Get the day */
	pL76Handle->u8Day = (uint8_t) (dDate / 10000);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4a19      	ldr	r2, [pc, #100]	; (80052cc <L76_Date_Parse+0x98>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	0b5b      	lsrs	r3, r3, #13
 800526e:	b2da      	uxtb	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	741a      	strb	r2, [r3, #16]

	/* 2. Get the month */
	pL76Handle->u8Month = (uint8_t) ((dDate / 100) % 100);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a16      	ldr	r2, [pc, #88]	; (80052d0 <L76_Date_Parse+0x9c>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	095a      	lsrs	r2, r3, #5
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <L76_Date_Parse+0x9c>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	745a      	strb	r2, [r3, #17]

	/* 3. Get the year */
	pL76Handle->u8Year = (uint8_t)(dDate % 100);
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <L76_Date_Parse+0x9c>)
 8005298:	fba3 1302 	umull	r1, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	2164      	movs	r1, #100	; 0x64
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	749a      	strb	r2, [r3, #18]

	/* Test */
	printf("Date: %d/%d/%d \r\n", pL76Handle->u8Day, pL76Handle->u8Month, pL76Handle->u8Year);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	7c1b      	ldrb	r3, [r3, #16]
 80052b0:	4619      	mov	r1, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	7c5b      	ldrb	r3, [r3, #17]
 80052b6:	461a      	mov	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	7c9b      	ldrb	r3, [r3, #18]
 80052bc:	4805      	ldr	r0, [pc, #20]	; (80052d4 <L76_Date_Parse+0xa0>)
 80052be:	f005 f979 	bl	800a5b4 <iprintf>

}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	d1b71759 	.word	0xd1b71759
 80052d0:	51eb851f 	.word	0x51eb851f
 80052d4:	0800e4c4 	.word	0x0800e4c4

080052d8 <gps_power_EnOrDi>:

void gps_power_EnOrDi(uint8_t u8EnOrDi)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	71fb      	strb	r3, [r7, #7]

	if (u8EnOrDi == ENABLE)
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d105      	bne.n	80052f4 <gps_power_EnOrDi+0x1c>
	{
		/* Enable the power of the GPS module */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80052e8:	2201      	movs	r2, #1
 80052ea:	2110      	movs	r1, #16
 80052ec:	4806      	ldr	r0, [pc, #24]	; (8005308 <gps_power_EnOrDi+0x30>)
 80052ee:	f000 fe3f 	bl	8005f70 <HAL_GPIO_WritePin>
	else
	{
		/* Disable the power of the GPS module */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 80052f2:	e004      	b.n	80052fe <gps_power_EnOrDi+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2110      	movs	r1, #16
 80052f8:	4803      	ldr	r0, [pc, #12]	; (8005308 <gps_power_EnOrDi+0x30>)
 80052fa:	f000 fe39 	bl	8005f70 <HAL_GPIO_WritePin>
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40020000 	.word	0x40020000

0800530c <SC7A20_Init>:
extern void Error_Handler(void);

extern I2C_HandleTypeDef hi2c1;

uint8_t SC7A20_Init()
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
	/* 1. Turn on the sensor with ODR = 400Hz normal mode*/
	SC7A20_write(SC7A20_CR1_NORMAL_400HZ_EN, SC7A20_ADDR_CTRL_REG1);
 8005310:	2120      	movs	r1, #32
 8005312:	2073      	movs	r0, #115	; 0x73
 8005314:	f000 f828 	bl	8005368 <SC7A20_write>

	/* 2. Enable AOI1 Interrupt SIGNAL in INT1*/
	SC7A20_write(SC7A20_CR3_ENABLE_AOI_INT1, SC7A20_ADDR_CTRL_REG3);
 8005318:	2122      	movs	r1, #34	; 0x22
 800531a:	2040      	movs	r0, #64	; 0x40
 800531c:	f000 f824 	bl	8005368 <SC7A20_write>

	/* 3. Enable Reset after Interrupt event and filter used*/
	SC7A20_write(SC7A20_CR2_INT_RST_FILTER, SC7A20_ADDR_CTRL_REG2);
 8005320:	2121      	movs	r1, #33	; 0x21
 8005322:	2000      	movs	r0, #0
 8005324:	f000 f820 	bl	8005368 <SC7A20_write>

	/* 4. Detection */
	SC7A20_write(SC7A20_CR5_4D_DISABLE, SC7A20_ADDR_CTRL_REG5);
 8005328:	2124      	movs	r1, #36	; 0x24
 800532a:	2000      	movs	r0, #0
 800532c:	f000 f81c 	bl	8005368 <SC7A20_write>

	/* 5. Enable 16G range of the SC7A20*/
	SC7A20_write(SC7A20_CR4_2G, SC7A20_ADDR_CTRL_REG4);
 8005330:	2123      	movs	r1, #35	; 0x23
 8005332:	2038      	movs	r0, #56	; 0x38
 8005334:	f000 f818 	bl	8005368 <SC7A20_write>

	/* 6. Enable Interrupt 1 for Motion detection*/
	SC7A20_write(SC7A20_INT1_MOTION_DETECT, SC7A20_ADDR_INT1_CFG);
 8005338:	2130      	movs	r1, #48	; 0x30
 800533a:	200a      	movs	r0, #10
 800533c:	f000 f814 	bl	8005368 <SC7A20_write>

	/* 7. Set motion detection Threshold */
	SC7A20_setMotionTHS(SC7A20_INT_THRESHOLD);
 8005340:	2010      	movs	r0, #16
 8005342:	f000 f84f 	bl	80053e4 <SC7A20_setMotionTHS>

	/* 8. Set duration of INT1 to 10*/
	SC7A20_setInt1Duration(SC7A20_DURATION);
 8005346:	2001      	movs	r0, #1
 8005348:	f000 f85a 	bl	8005400 <SC7A20_setInt1Duration>

	/* 9. Read back the data from CTRL1, if the data is successfully writen, the initialization is successful*/
	if (SC7A20_read(SC7A20_ADDR_CTRL_REG1) == SC7A20_CR1_NORMAL_400HZ_EN)
 800534c:	2020      	movs	r0, #32
 800534e:	f000 f827 	bl	80053a0 <SC7A20_read>
 8005352:	4603      	mov	r3, r0
 8005354:	2b73      	cmp	r3, #115	; 0x73
 8005356:	d104      	bne.n	8005362 <SC7A20_Init+0x56>
	{
		return SC7A20_read(SC7A20_ADDR_CTRL_REG1);
 8005358:	2020      	movs	r0, #32
 800535a:	f000 f821 	bl	80053a0 <SC7A20_read>
 800535e:	4603      	mov	r3, r0
 8005360:	e000      	b.n	8005364 <SC7A20_Init+0x58>
	}else
	{
		return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
	}

}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}

08005368 <SC7A20_write>:

}

static void SC7A20_write(uint8_t u8Value,
						 uint8_t u8RegAddress)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	4603      	mov	r3, r0
 8005370:	460a      	mov	r2, r1
 8005372:	71fb      	strb	r3, [r7, #7]
 8005374:	4613      	mov	r3, r2
 8005376:	71bb      	strb	r3, [r7, #6]
	/* Write the address of the register and then write the data */
	uint8_t u8Tx[2];
	u8Tx[0] = u8RegAddress;
 8005378:	79bb      	ldrb	r3, [r7, #6]
 800537a:	733b      	strb	r3, [r7, #12]
	u8Tx[1] = u8Value;
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, u8Tx, 2, HAL_MAX_DELAY);
 8005380:	f107 020c 	add.w	r2, r7, #12
 8005384:	f04f 33ff 	mov.w	r3, #4294967295
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	2302      	movs	r3, #2
 800538c:	2130      	movs	r1, #48	; 0x30
 800538e:	4803      	ldr	r0, [pc, #12]	; (800539c <SC7A20_write+0x34>)
 8005390:	f000 ff58 	bl	8006244 <HAL_I2C_Master_Transmit>
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	200010a0 	.word	0x200010a0

080053a0 <SC7A20_read>:

uint8_t SC7A20_read(uint8_t u8RegAddress)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Data = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]

	/* 1. First send the address of the register we want to read*/
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8RegAddress, 1, HAL_MAX_DELAY);
 80053ae:	1dfa      	adds	r2, r7, #7
 80053b0:	f04f 33ff 	mov.w	r3, #4294967295
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2301      	movs	r3, #1
 80053b8:	2130      	movs	r1, #48	; 0x30
 80053ba:	4809      	ldr	r0, [pc, #36]	; (80053e0 <SC7A20_read+0x40>)
 80053bc:	f000 ff42 	bl	8006244 <HAL_I2C_Master_Transmit>

	/* 2. Receive the data of the register we want to read*/
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8Data, 1, HAL_MAX_DELAY);
 80053c0:	f107 020f 	add.w	r2, r7, #15
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2301      	movs	r3, #1
 80053cc:	2130      	movs	r1, #48	; 0x30
 80053ce:	4804      	ldr	r0, [pc, #16]	; (80053e0 <SC7A20_read+0x40>)
 80053d0:	f001 f836 	bl	8006440 <HAL_I2C_Master_Receive>

	return u8Data;
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200010a0 	.word	0x200010a0

080053e4 <SC7A20_setMotionTHS>:

static void SC7A20_setMotionTHS(uint8_t u8Threshold)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Threshold, SC7A20_ADDR_INT1_THS);
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	2132      	movs	r1, #50	; 0x32
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff ffb8 	bl	8005368 <SC7A20_write>
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <SC7A20_setInt1Duration>:

static void SC7A20_setInt1Duration(uint8_t u8Time)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Time, SC7A20_ADDR_INT1_DURATION);
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	2133      	movs	r1, #51	; 0x33
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ffaa 	bl	8005368 <SC7A20_write>
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_Init+0x40>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a0d      	ldr	r2, [pc, #52]	; (800545c <HAL_Init+0x40>)
 8005426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800542a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_Init+0x40>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a0a      	ldr	r2, [pc, #40]	; (800545c <HAL_Init+0x40>)
 8005432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005438:	4b08      	ldr	r3, [pc, #32]	; (800545c <HAL_Init+0x40>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a07      	ldr	r2, [pc, #28]	; (800545c <HAL_Init+0x40>)
 800543e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005444:	2003      	movs	r0, #3
 8005446:	f000 f96d 	bl	8005724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800544a:	2000      	movs	r0, #0
 800544c:	f000 f808 	bl	8005460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005450:	f7fb ffec 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023c00 	.word	0x40023c00

08005460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005468:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <HAL_InitTick+0x54>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b12      	ldr	r3, [pc, #72]	; (80054b8 <HAL_InitTick+0x58>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005476:	fbb3 f3f1 	udiv	r3, r3, r1
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f985 	bl	800578e <HAL_SYSTICK_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e00e      	b.n	80054ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b0f      	cmp	r3, #15
 8005492:	d80a      	bhi.n	80054aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005494:	2200      	movs	r2, #0
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	f000 f94d 	bl	800573a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054a0:	4a06      	ldr	r2, [pc, #24]	; (80054bc <HAL_InitTick+0x5c>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000000 	.word	0x20000000
 80054b8:	20000008 	.word	0x20000008
 80054bc:	20000004 	.word	0x20000004

080054c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_IncTick+0x20>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_IncTick+0x24>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4413      	add	r3, r2
 80054d0:	4a04      	ldr	r2, [pc, #16]	; (80054e4 <HAL_IncTick+0x24>)
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000008 	.word	0x20000008
 80054e4:	20001200 	.word	0x20001200

080054e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return uwTick;
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <HAL_GetTick+0x14>)
 80054ee:	681b      	ldr	r3, [r3, #0]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20001200 	.word	0x20001200

08005500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005508:	f7ff ffee 	bl	80054e8 <HAL_GetTick>
 800550c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d005      	beq.n	8005526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_Delay+0x40>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005526:	bf00      	nop
 8005528:	f7ff ffde 	bl	80054e8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d8f7      	bhi.n	8005528 <HAL_Delay+0x28>
  {
  }
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000008 	.word	0x20000008

08005544 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_SuspendTick+0x1c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <HAL_SuspendTick+0x1c>)
 800554e:	f023 0302 	bic.w	r3, r3, #2
 8005552:	6013      	str	r3, [r2, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010

08005564 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_ResumeTick+0x1c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <HAL_ResumeTick+0x1c>)
 800556e:	f043 0302 	orr.w	r3, r3, #2
 8005572:	6013      	str	r3, [r2, #0]
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055a0:	4013      	ands	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055b6:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <__NVIC_SetPriorityGrouping+0x44>)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	60d3      	str	r3, [r2, #12]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055d0:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <__NVIC_GetPriorityGrouping+0x18>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	f003 0307 	and.w	r3, r3, #7
}
 80055da:	4618      	mov	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	db0b      	blt.n	8005612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	f003 021f 	and.w	r2, r3, #31
 8005600:	4907      	ldr	r1, [pc, #28]	; (8005620 <__NVIC_EnableIRQ+0x38>)
 8005602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	2001      	movs	r0, #1
 800560a:	fa00 f202 	lsl.w	r2, r0, r2
 800560e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	e000e100 	.word	0xe000e100

08005624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005634:	2b00      	cmp	r3, #0
 8005636:	db0a      	blt.n	800564e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	490c      	ldr	r1, [pc, #48]	; (8005670 <__NVIC_SetPriority+0x4c>)
 800563e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	440b      	add	r3, r1
 8005648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800564c:	e00a      	b.n	8005664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <__NVIC_SetPriority+0x50>)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	3b04      	subs	r3, #4
 800565c:	0112      	lsls	r2, r2, #4
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	440b      	add	r3, r1
 8005662:	761a      	strb	r2, [r3, #24]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	e000e100 	.word	0xe000e100
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005678:	b480      	push	{r7}
 800567a:	b089      	sub	sp, #36	; 0x24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f1c3 0307 	rsb	r3, r3, #7
 8005692:	2b04      	cmp	r3, #4
 8005694:	bf28      	it	cs
 8005696:	2304      	movcs	r3, #4
 8005698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3304      	adds	r3, #4
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d902      	bls.n	80056a8 <NVIC_EncodePriority+0x30>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	3b03      	subs	r3, #3
 80056a6:	e000      	b.n	80056aa <NVIC_EncodePriority+0x32>
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ac:	f04f 32ff 	mov.w	r2, #4294967295
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43da      	mvns	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	401a      	ands	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056c0:	f04f 31ff 	mov.w	r1, #4294967295
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	43d9      	mvns	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	4313      	orrs	r3, r2
         );
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3724      	adds	r7, #36	; 0x24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056f0:	d301      	bcc.n	80056f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056f2:	2301      	movs	r3, #1
 80056f4:	e00f      	b.n	8005716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f6:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <SysTick_Config+0x40>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056fe:	210f      	movs	r1, #15
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	f7ff ff8e 	bl	8005624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <SysTick_Config+0x40>)
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570e:	4b04      	ldr	r3, [pc, #16]	; (8005720 <SysTick_Config+0x40>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	e000e010 	.word	0xe000e010

08005724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ff29 	bl	8005584 <__NVIC_SetPriorityGrouping>
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	4603      	mov	r3, r0
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
 8005746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800574c:	f7ff ff3e 	bl	80055cc <__NVIC_GetPriorityGrouping>
 8005750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	6978      	ldr	r0, [r7, #20]
 8005758:	f7ff ff8e 	bl	8005678 <NVIC_EncodePriority>
 800575c:	4602      	mov	r2, r0
 800575e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ff5d 	bl	8005624 <__NVIC_SetPriority>
}
 800576a:	bf00      	nop
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	4603      	mov	r3, r0
 800577a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800577c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff ff31 	bl	80055e8 <__NVIC_EnableIRQ>
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b082      	sub	sp, #8
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ffa2 	bl	80056e0 <SysTick_Config>
 800579c:	4603      	mov	r3, r0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057b4:	f7ff fe98 	bl	80054e8 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e099      	b.n	80058f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e4:	e00f      	b.n	8005806 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057e6:	f7ff fe7f 	bl	80054e8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b05      	cmp	r3, #5
 80057f2:	d908      	bls.n	8005806 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2203      	movs	r2, #3
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e078      	b.n	80058f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e8      	bne.n	80057e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <HAL_DMA_Init+0x158>)
 8005820:	4013      	ands	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800583e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800584a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2b04      	cmp	r3, #4
 800585e:	d107      	bne.n	8005870 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	4313      	orrs	r3, r2
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b04      	cmp	r3, #4
 8005898:	d117      	bne.n	80058ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f881 	bl	80059b4 <DMA_CheckFifoParam>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058c6:	2301      	movs	r3, #1
 80058c8:	e016      	b.n	80058f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f838 	bl	8005948 <DMA_CalcBaseAndBitshift>
 80058d8:	4603      	mov	r3, r0
 80058da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	223f      	movs	r2, #63	; 0x3f
 80058e2:	409a      	lsls	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	f010803f 	.word	0xf010803f

08005904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d004      	beq.n	8005922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e00c      	b.n	800593c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2205      	movs	r2, #5
 8005926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	3b10      	subs	r3, #16
 8005958:	4a14      	ldr	r2, [pc, #80]	; (80059ac <DMA_CalcBaseAndBitshift+0x64>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005962:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <DMA_CalcBaseAndBitshift+0x68>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b03      	cmp	r3, #3
 8005974:	d909      	bls.n	800598a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	659a      	str	r2, [r3, #88]	; 0x58
 8005988:	e007      	b.n	800599a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	aaaaaaab 	.word	0xaaaaaaab
 80059b0:	0800e61c 	.word	0x0800e61c

080059b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11f      	bne.n	8005a0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d855      	bhi.n	8005a80 <DMA_CheckFifoParam+0xcc>
 80059d4:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <DMA_CheckFifoParam+0x28>)
 80059d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059da:	bf00      	nop
 80059dc:	080059ed 	.word	0x080059ed
 80059e0:	080059ff 	.word	0x080059ff
 80059e4:	080059ed 	.word	0x080059ed
 80059e8:	08005a81 	.word	0x08005a81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d045      	beq.n	8005a84 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fc:	e042      	b.n	8005a84 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a06:	d13f      	bne.n	8005a88 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a0c:	e03c      	b.n	8005a88 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a16:	d121      	bne.n	8005a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d836      	bhi.n	8005a8c <DMA_CheckFifoParam+0xd8>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <DMA_CheckFifoParam+0x70>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a35 	.word	0x08005a35
 8005a28:	08005a3b 	.word	0x08005a3b
 8005a2c:	08005a35 	.word	0x08005a35
 8005a30:	08005a4d 	.word	0x08005a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
      break;
 8005a38:	e02f      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d024      	beq.n	8005a90 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a4a:	e021      	b.n	8005a90 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a54:	d11e      	bne.n	8005a94 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a5a:	e01b      	b.n	8005a94 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d902      	bls.n	8005a68 <DMA_CheckFifoParam+0xb4>
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d003      	beq.n	8005a6e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a66:	e018      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e015      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7e:	e00b      	b.n	8005a98 <DMA_CheckFifoParam+0xe4>
      break;
 8005a80:	bf00      	nop
 8005a82:	e00a      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      break;
 8005a84:	bf00      	nop
 8005a86:	e008      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      break;
 8005a88:	bf00      	nop
 8005a8a:	e006      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      break;
 8005a8c:	bf00      	nop
 8005a8e:	e004      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      break;
 8005a90:	bf00      	nop
 8005a92:	e002      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      break;   
 8005a94:	bf00      	nop
 8005a96:	e000      	b.n	8005a9a <DMA_CheckFifoParam+0xe6>
      break;
 8005a98:	bf00      	nop
    }
  } 
  
  return status; 
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	; 0x24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	e159      	b.n	8005d78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	f040 8148 	bne.w	8005d72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d00b      	beq.n	8005b02 <HAL_GPIO_Init+0x5a>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d007      	beq.n	8005b02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005af6:	2b11      	cmp	r3, #17
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b12      	cmp	r3, #18
 8005b00:	d130      	bne.n	8005b64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43db      	mvns	r3, r3
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b38:	2201      	movs	r2, #1
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 0201 	and.w	r2, r3, #1
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	2203      	movs	r2, #3
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d003      	beq.n	8005ba4 <HAL_GPIO_Init+0xfc>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b12      	cmp	r3, #18
 8005ba2:	d123      	bne.n	8005bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	08da      	lsrs	r2, r3, #3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3208      	adds	r2, #8
 8005bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	220f      	movs	r2, #15
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	08da      	lsrs	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3208      	adds	r2, #8
 8005be6:	69b9      	ldr	r1, [r7, #24]
 8005be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43db      	mvns	r3, r3
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	4013      	ands	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 0203 	and.w	r2, r3, #3
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80a2 	beq.w	8005d72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <HAL_GPIO_Init+0x2e4>)
 8005c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c36:	4a55      	ldr	r2, [pc, #340]	; (8005d8c <HAL_GPIO_Init+0x2e4>)
 8005c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c3e:	4b53      	ldr	r3, [pc, #332]	; (8005d8c <HAL_GPIO_Init+0x2e4>)
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c4a:	4a51      	ldr	r2, [pc, #324]	; (8005d90 <HAL_GPIO_Init+0x2e8>)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	089b      	lsrs	r3, r3, #2
 8005c50:	3302      	adds	r3, #2
 8005c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	220f      	movs	r2, #15
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a48      	ldr	r2, [pc, #288]	; (8005d94 <HAL_GPIO_Init+0x2ec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d019      	beq.n	8005caa <HAL_GPIO_Init+0x202>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a47      	ldr	r2, [pc, #284]	; (8005d98 <HAL_GPIO_Init+0x2f0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_GPIO_Init+0x1fe>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a46      	ldr	r2, [pc, #280]	; (8005d9c <HAL_GPIO_Init+0x2f4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00d      	beq.n	8005ca2 <HAL_GPIO_Init+0x1fa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a45      	ldr	r2, [pc, #276]	; (8005da0 <HAL_GPIO_Init+0x2f8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <HAL_GPIO_Init+0x1f6>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a44      	ldr	r2, [pc, #272]	; (8005da4 <HAL_GPIO_Init+0x2fc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_GPIO_Init+0x1f2>
 8005c96:	2304      	movs	r3, #4
 8005c98:	e008      	b.n	8005cac <HAL_GPIO_Init+0x204>
 8005c9a:	2307      	movs	r3, #7
 8005c9c:	e006      	b.n	8005cac <HAL_GPIO_Init+0x204>
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e004      	b.n	8005cac <HAL_GPIO_Init+0x204>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e002      	b.n	8005cac <HAL_GPIO_Init+0x204>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <HAL_GPIO_Init+0x204>
 8005caa:	2300      	movs	r3, #0
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	f002 0203 	and.w	r2, r2, #3
 8005cb2:	0092      	lsls	r2, r2, #2
 8005cb4:	4093      	lsls	r3, r2
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cbc:	4934      	ldr	r1, [pc, #208]	; (8005d90 <HAL_GPIO_Init+0x2e8>)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	089b      	lsrs	r3, r3, #2
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cca:	4b37      	ldr	r3, [pc, #220]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cee:	4a2e      	ldr	r2, [pc, #184]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4013      	ands	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d1e:	4b22      	ldr	r3, [pc, #136]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d42:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d48:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4013      	ands	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d6c:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <HAL_GPIO_Init+0x300>)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	f67f aea2 	bls.w	8005ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d80:	bf00      	nop
 8005d82:	3724      	adds	r7, #36	; 0x24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40013800 	.word	0x40013800
 8005d94:	40020000 	.word	0x40020000
 8005d98:	40020400 	.word	0x40020400
 8005d9c:	40020800 	.word	0x40020800
 8005da0:	40020c00 	.word	0x40020c00
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40013c00 	.word	0x40013c00

08005dac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e0bb      	b.n	8005f40 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dc8:	2201      	movs	r2, #1
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	f040 80ab 	bne.w	8005f3a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005de4:	4a5b      	ldr	r2, [pc, #364]	; (8005f54 <HAL_GPIO_DeInit+0x1a8>)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	3302      	adds	r3, #2
 8005dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	220f      	movs	r2, #15
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	4013      	ands	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a53      	ldr	r2, [pc, #332]	; (8005f58 <HAL_GPIO_DeInit+0x1ac>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d019      	beq.n	8005e42 <HAL_GPIO_DeInit+0x96>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a52      	ldr	r2, [pc, #328]	; (8005f5c <HAL_GPIO_DeInit+0x1b0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <HAL_GPIO_DeInit+0x92>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a51      	ldr	r2, [pc, #324]	; (8005f60 <HAL_GPIO_DeInit+0x1b4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00d      	beq.n	8005e3a <HAL_GPIO_DeInit+0x8e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a50      	ldr	r2, [pc, #320]	; (8005f64 <HAL_GPIO_DeInit+0x1b8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <HAL_GPIO_DeInit+0x8a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a4f      	ldr	r2, [pc, #316]	; (8005f68 <HAL_GPIO_DeInit+0x1bc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d101      	bne.n	8005e32 <HAL_GPIO_DeInit+0x86>
 8005e2e:	2304      	movs	r3, #4
 8005e30:	e008      	b.n	8005e44 <HAL_GPIO_DeInit+0x98>
 8005e32:	2307      	movs	r3, #7
 8005e34:	e006      	b.n	8005e44 <HAL_GPIO_DeInit+0x98>
 8005e36:	2303      	movs	r3, #3
 8005e38:	e004      	b.n	8005e44 <HAL_GPIO_DeInit+0x98>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e002      	b.n	8005e44 <HAL_GPIO_DeInit+0x98>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_GPIO_DeInit+0x98>
 8005e42:	2300      	movs	r3, #0
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	f002 0203 	and.w	r2, r2, #3
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	4093      	lsls	r3, r2
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d132      	bne.n	8005eba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e54:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	4943      	ldr	r1, [pc, #268]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e62:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	4940      	ldr	r1, [pc, #256]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005e70:	4b3e      	ldr	r3, [pc, #248]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	493c      	ldr	r1, [pc, #240]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005e7e:	4b3b      	ldr	r3, [pc, #236]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	4939      	ldr	r1, [pc, #228]	; (8005f6c <HAL_GPIO_DeInit+0x1c0>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	220f      	movs	r2, #15
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e9c:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <HAL_GPIO_DeInit+0x1a8>)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	089b      	lsrs	r3, r3, #2
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	43da      	mvns	r2, r3
 8005eac:	4829      	ldr	r0, [pc, #164]	; (8005f54 <HAL_GPIO_DeInit+0x1a8>)
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	2103      	movs	r1, #3
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	08da      	lsrs	r2, r3, #3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3208      	adds	r2, #8
 8005ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	220f      	movs	r2, #15
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	08d2      	lsrs	r2, r2, #3
 8005ef0:	4019      	ands	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3208      	adds	r2, #8
 8005ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	2103      	movs	r1, #3
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	2101      	movs	r1, #1
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	401a      	ands	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	401a      	ands	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	f67f af40 	bls.w	8005dc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40013800 	.word	0x40013800
 8005f58:	40020000 	.word	0x40020000
 8005f5c:	40020400 	.word	0x40020400
 8005f60:	40020800 	.word	0x40020800
 8005f64:	40020c00 	.word	0x40020c00
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40013c00 	.word	0x40013c00

08005f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f80:	787b      	ldrb	r3, [r7, #1]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f86:	887a      	ldrh	r2, [r7, #2]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f8c:	e003      	b.n	8005f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f8e:	887b      	ldrh	r3, [r7, #2]
 8005f90:	041a      	lsls	r2, r3, #16
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	619a      	str	r2, [r3, #24]
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fae:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d006      	beq.n	8005fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fba:	4a05      	ldr	r2, [pc, #20]	; (8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fbc:	88fb      	ldrh	r3, [r7, #6]
 8005fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fd fb40 	bl	8003648 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40013c00 	.word	0x40013c00

08005fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e11f      	b.n	8006226 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb fa3e 	bl	800147c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2224      	movs	r2, #36	; 0x24
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006038:	f001 fb96 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800603c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4a7b      	ldr	r2, [pc, #492]	; (8006230 <HAL_I2C_Init+0x25c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d807      	bhi.n	8006058 <HAL_I2C_Init+0x84>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4a7a      	ldr	r2, [pc, #488]	; (8006234 <HAL_I2C_Init+0x260>)
 800604c:	4293      	cmp	r3, r2
 800604e:	bf94      	ite	ls
 8006050:	2301      	movls	r3, #1
 8006052:	2300      	movhi	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	e006      	b.n	8006066 <HAL_I2C_Init+0x92>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a77      	ldr	r2, [pc, #476]	; (8006238 <HAL_I2C_Init+0x264>)
 800605c:	4293      	cmp	r3, r2
 800605e:	bf94      	ite	ls
 8006060:	2301      	movls	r3, #1
 8006062:	2300      	movhi	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e0db      	b.n	8006226 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a72      	ldr	r2, [pc, #456]	; (800623c <HAL_I2C_Init+0x268>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	0c9b      	lsrs	r3, r3, #18
 8006078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4a64      	ldr	r2, [pc, #400]	; (8006230 <HAL_I2C_Init+0x25c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d802      	bhi.n	80060a8 <HAL_I2C_Init+0xd4>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	3301      	adds	r3, #1
 80060a6:	e009      	b.n	80060bc <HAL_I2C_Init+0xe8>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	4a63      	ldr	r2, [pc, #396]	; (8006240 <HAL_I2C_Init+0x26c>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	099b      	lsrs	r3, r3, #6
 80060ba:	3301      	adds	r3, #1
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	430b      	orrs	r3, r1
 80060c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4956      	ldr	r1, [pc, #344]	; (8006230 <HAL_I2C_Init+0x25c>)
 80060d8:	428b      	cmp	r3, r1
 80060da:	d80d      	bhi.n	80060f8 <HAL_I2C_Init+0x124>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1e59      	subs	r1, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ea:	3301      	adds	r3, #1
 80060ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	bf38      	it	cc
 80060f4:	2304      	movcc	r3, #4
 80060f6:	e04f      	b.n	8006198 <HAL_I2C_Init+0x1c4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d111      	bne.n	8006124 <HAL_I2C_Init+0x150>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1e58      	subs	r0, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	440b      	add	r3, r1
 800610e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006112:	3301      	adds	r3, #1
 8006114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	e012      	b.n	800614a <HAL_I2C_Init+0x176>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	1e58      	subs	r0, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6859      	ldr	r1, [r3, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	0099      	lsls	r1, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	fbb0 f3f3 	udiv	r3, r0, r3
 800613a:	3301      	adds	r3, #1
 800613c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006140:	2b00      	cmp	r3, #0
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Init+0x17e>
 800614e:	2301      	movs	r3, #1
 8006150:	e022      	b.n	8006198 <HAL_I2C_Init+0x1c4>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10e      	bne.n	8006178 <HAL_I2C_Init+0x1a4>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1e58      	subs	r0, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6859      	ldr	r1, [r3, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	440b      	add	r3, r1
 8006168:	fbb0 f3f3 	udiv	r3, r0, r3
 800616c:	3301      	adds	r3, #1
 800616e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	e00f      	b.n	8006198 <HAL_I2C_Init+0x1c4>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1e58      	subs	r0, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6859      	ldr	r1, [r3, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	0099      	lsls	r1, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	fbb0 f3f3 	udiv	r3, r0, r3
 800618e:	3301      	adds	r3, #1
 8006190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006194:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	6809      	ldr	r1, [r1, #0]
 800619c:	4313      	orrs	r3, r2
 800619e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6911      	ldr	r1, [r2, #16]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68d2      	ldr	r2, [r2, #12]
 80061d2:	4311      	orrs	r1, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	430b      	orrs	r3, r1
 80061da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	000186a0 	.word	0x000186a0
 8006234:	001e847f 	.word	0x001e847f
 8006238:	003d08ff 	.word	0x003d08ff
 800623c:	431bde83 	.word	0x431bde83
 8006240:	10624dd3 	.word	0x10624dd3

08006244 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	461a      	mov	r2, r3
 8006250:	460b      	mov	r3, r1
 8006252:	817b      	strh	r3, [r7, #10]
 8006254:	4613      	mov	r3, r2
 8006256:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006258:	f7ff f946 	bl	80054e8 <HAL_GetTick>
 800625c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b20      	cmp	r3, #32
 8006268:	f040 80e0 	bne.w	800642c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	2319      	movs	r3, #25
 8006272:	2201      	movs	r2, #1
 8006274:	4970      	ldr	r1, [pc, #448]	; (8006438 <HAL_I2C_Master_Transmit+0x1f4>)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fc58 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
 8006284:	e0d3      	b.n	800642e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_I2C_Master_Transmit+0x50>
 8006290:	2302      	movs	r3, #2
 8006292:	e0cc      	b.n	800642e <HAL_I2C_Master_Transmit+0x1ea>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d007      	beq.n	80062ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0201 	orr.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2221      	movs	r2, #33	; 0x21
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2210      	movs	r2, #16
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	893a      	ldrh	r2, [r7, #8]
 80062ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a50      	ldr	r2, [pc, #320]	; (800643c <HAL_I2C_Master_Transmit+0x1f8>)
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062fc:	8979      	ldrh	r1, [r7, #10]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 fac2 	bl	800688c <I2C_MasterRequestWrite>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e08d      	b.n	800642e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006328:	e066      	b.n	80063f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	6a39      	ldr	r1, [r7, #32]
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fcd2 	bl	8006cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	2b04      	cmp	r3, #4
 8006340:	d107      	bne.n	8006352 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e06b      	b.n	800642e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	781a      	ldrb	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d11b      	bne.n	80063cc <HAL_I2C_Master_Transmit+0x188>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	d017      	beq.n	80063cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	6a39      	ldr	r1, [r7, #32]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fcc2 	bl	8006d5a <I2C_WaitOnBTFFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00d      	beq.n	80063f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d107      	bne.n	80063f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e01a      	b.n	800642e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d194      	bne.n	800632a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	00100002 	.word	0x00100002
 800643c:	ffff0000 	.word	0xffff0000

08006440 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08c      	sub	sp, #48	; 0x30
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	461a      	mov	r2, r3
 800644c:	460b      	mov	r3, r1
 800644e:	817b      	strh	r3, [r7, #10]
 8006450:	4613      	mov	r3, r2
 8006452:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006454:	f7ff f848 	bl	80054e8 <HAL_GetTick>
 8006458:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b20      	cmp	r3, #32
 8006464:	f040 820b 	bne.w	800687e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2319      	movs	r3, #25
 800646e:	2201      	movs	r2, #1
 8006470:	497c      	ldr	r1, [pc, #496]	; (8006664 <HAL_I2C_Master_Receive+0x224>)
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fb5a 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
 8006480:	e1fe      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_I2C_Master_Receive+0x50>
 800648c:	2302      	movs	r3, #2
 800648e:	e1f7      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d007      	beq.n	80064b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0201 	orr.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2222      	movs	r2, #34	; 0x22
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2210      	movs	r2, #16
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	893a      	ldrh	r2, [r7, #8]
 80064e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a5c      	ldr	r2, [pc, #368]	; (8006668 <HAL_I2C_Master_Receive+0x228>)
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fa46 	bl	8006990 <I2C_MasterRequestRead>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e1b8      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d113      	bne.n	800653e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006516:	2300      	movs	r3, #0
 8006518:	623b      	str	r3, [r7, #32]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	623b      	str	r3, [r7, #32]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	623b      	str	r3, [r7, #32]
 800652a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e18c      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006542:	2b01      	cmp	r3, #1
 8006544:	d11b      	bne.n	800657e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e16c      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	2b02      	cmp	r3, #2
 8006584:	d11b      	bne.n	80065be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006594:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	e14c      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065e4:	e138      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	f200 80f1 	bhi.w	80067d2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d123      	bne.n	8006640 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fbed 	bl	8006ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e139      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800663e:	e10b      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006644:	2b02      	cmp	r3, #2
 8006646:	d14e      	bne.n	80066e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664e:	2200      	movs	r2, #0
 8006650:	4906      	ldr	r1, [pc, #24]	; (800666c <HAL_I2C_Master_Receive+0x22c>)
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 fa6a 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e10e      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
 8006662:	bf00      	nop
 8006664:	00100002 	.word	0x00100002
 8006668:	ffff0000 	.word	0xffff0000
 800666c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800667e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691a      	ldr	r2, [r3, #16]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066e4:	e0b8      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	2200      	movs	r2, #0
 80066ee:	4966      	ldr	r1, [pc, #408]	; (8006888 <HAL_I2C_Master_Receive+0x448>)
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 fa1b 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e0bf      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691a      	ldr	r2, [r3, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	2200      	movs	r2, #0
 800674a:	494f      	ldr	r1, [pc, #316]	; (8006888 <HAL_I2C_Master_Receive+0x448>)
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f9ed 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e091      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067d0:	e042      	b.n	8006858 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fb00 	bl	8006ddc <I2C_WaitOnRXNEFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e04c      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b04      	cmp	r3, #4
 8006824:	d118      	bne.n	8006858 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685c:	2b00      	cmp	r3, #0
 800685e:	f47f aec2 	bne.w	80065e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3728      	adds	r7, #40	; 0x28
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	00010004 	.word	0x00010004

0800688c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	460b      	mov	r3, r1
 800689a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d006      	beq.n	80068b6 <I2C_MasterRequestWrite+0x2a>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d003      	beq.n	80068b6 <I2C_MasterRequestWrite+0x2a>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068b4:	d108      	bne.n	80068c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e00b      	b.n	80068e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	2b12      	cmp	r3, #18
 80068ce:	d107      	bne.n	80068e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f91d 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00d      	beq.n	8006914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006906:	d103      	bne.n	8006910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e035      	b.n	8006980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800691c:	d108      	bne.n	8006930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800691e:	897b      	ldrh	r3, [r7, #10]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800692c:	611a      	str	r2, [r3, #16]
 800692e:	e01b      	b.n	8006968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006930:	897b      	ldrh	r3, [r7, #10]
 8006932:	11db      	asrs	r3, r3, #7
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0306 	and.w	r3, r3, #6
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f063 030f 	orn	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	490e      	ldr	r1, [pc, #56]	; (8006988 <I2C_MasterRequestWrite+0xfc>)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f943 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e010      	b.n	8006980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4907      	ldr	r1, [pc, #28]	; (800698c <I2C_MasterRequestWrite+0x100>)
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f933 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	00010008 	.word	0x00010008
 800698c:	00010002 	.word	0x00010002

08006990 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	460b      	mov	r3, r1
 800699e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d006      	beq.n	80069ca <I2C_MasterRequestRead+0x3a>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d003      	beq.n	80069ca <I2C_MasterRequestRead+0x3a>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069c8:	d108      	bne.n	80069dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e00b      	b.n	80069f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	2b11      	cmp	r3, #17
 80069e2:	d107      	bne.n	80069f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f893 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d103      	bne.n	8006a24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e079      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a30:	d108      	bne.n	8006a44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a32:	897b      	ldrh	r3, [r7, #10]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	611a      	str	r2, [r3, #16]
 8006a42:	e05f      	b.n	8006b04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a44:	897b      	ldrh	r3, [r7, #10]
 8006a46:	11db      	asrs	r3, r3, #7
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 0306 	and.w	r3, r3, #6
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f063 030f 	orn	r3, r3, #15
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4930      	ldr	r1, [pc, #192]	; (8006b24 <I2C_MasterRequestRead+0x194>)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f8b9 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e054      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a72:	897b      	ldrh	r3, [r7, #10]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4929      	ldr	r1, [pc, #164]	; (8006b28 <I2C_MasterRequestRead+0x198>)
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f8a9 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e044      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a92:	2300      	movs	r3, #0
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f831 	bl	8006b2c <I2C_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ade:	d103      	bne.n	8006ae8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e017      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006aec:	897b      	ldrh	r3, [r7, #10]
 8006aee:	11db      	asrs	r3, r3, #7
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0306 	and.w	r3, r3, #6
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f063 030e 	orn	r3, r3, #14
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4907      	ldr	r1, [pc, #28]	; (8006b28 <I2C_MasterRequestRead+0x198>)
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f865 	bl	8006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	00010008 	.word	0x00010008
 8006b28:	00010002 	.word	0x00010002

08006b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b3c:	e025      	b.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d021      	beq.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b46:	f7fe fccf 	bl	80054e8 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d116      	bne.n	8006b8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f043 0220 	orr.w	r2, r3, #32
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e023      	b.n	8006bd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	0c1b      	lsrs	r3, r3, #16
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d10d      	bne.n	8006bb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	43da      	mvns	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	e00c      	b.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	43da      	mvns	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d0b6      	beq.n	8006b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006be8:	e051      	b.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf8:	d123      	bne.n	8006c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	f043 0204 	orr.w	r2, r3, #4
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e046      	b.n	8006cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d021      	beq.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4a:	f7fe fc4d 	bl	80054e8 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d302      	bcc.n	8006c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d116      	bne.n	8006c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e020      	b.n	8006cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	0c1b      	lsrs	r3, r3, #16
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d10c      	bne.n	8006cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	e00b      	b.n	8006cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	43da      	mvns	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d18d      	bne.n	8006bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ce4:	e02d      	b.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f8ce 	bl	8006e88 <I2C_IsAcknowledgeFailed>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e02d      	b.n	8006d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d021      	beq.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfe:	f7fe fbf3 	bl	80054e8 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d302      	bcc.n	8006d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d116      	bne.n	8006d42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	f043 0220 	orr.w	r2, r3, #32
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e007      	b.n	8006d52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4c:	2b80      	cmp	r3, #128	; 0x80
 8006d4e:	d1ca      	bne.n	8006ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d66:	e02d      	b.n	8006dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f88d 	bl	8006e88 <I2C_IsAcknowledgeFailed>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e02d      	b.n	8006dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d021      	beq.n	8006dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d80:	f7fe fbb2 	bl	80054e8 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d116      	bne.n	8006dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	f043 0220 	orr.w	r2, r3, #32
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e007      	b.n	8006dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d1ca      	bne.n	8006d68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006de8:	e042      	b.n	8006e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d119      	bne.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0210 	mvn.w	r2, #16
 8006e00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e029      	b.n	8006e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2c:	f7fe fb5c 	bl	80054e8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d302      	bcc.n	8006e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d116      	bne.n	8006e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	f043 0220 	orr.w	r2, r3, #32
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e007      	b.n	8006e80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d1b5      	bne.n	8006dea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d11b      	bne.n	8006ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f043 0204 	orr.w	r2, r3, #4
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8006ef4:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_PWR_EnterSTOPMode+0x50>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f023 0203 	bic.w	r2, r3, #3
 8006efc:	490e      	ldr	r1, [pc, #56]	; (8006f38 <HAL_PWR_EnterSTOPMode+0x50>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006f04:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <HAL_PWR_EnterSTOPMode+0x54>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	4a0c      	ldr	r2, [pc, #48]	; (8006f3c <HAL_PWR_EnterSTOPMode+0x54>)
 8006f0a:	f043 0304 	orr.w	r3, r3, #4
 8006f0e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8006f16:	bf30      	wfi
 8006f18:	e002      	b.n	8006f20 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006f1a:	bf40      	sev
    __WFE();
 8006f1c:	bf20      	wfe
    __WFE();
 8006f1e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <HAL_PWR_EnterSTOPMode+0x54>)
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	4a05      	ldr	r2, [pc, #20]	; (8006f3c <HAL_PWR_EnterSTOPMode+0x54>)
 8006f26:	f023 0304 	bic.w	r3, r3, #4
 8006f2a:	6113      	str	r3, [r2, #16]
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40007000 	.word	0x40007000
 8006f3c:	e000ed00 	.word	0xe000ed00

08006f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e25b      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d075      	beq.n	800704a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f5e:	4ba3      	ldr	r3, [pc, #652]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f003 030c 	and.w	r3, r3, #12
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d00c      	beq.n	8006f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f6a:	4ba0      	ldr	r3, [pc, #640]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d112      	bne.n	8006f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f76:	4b9d      	ldr	r3, [pc, #628]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f82:	d10b      	bne.n	8006f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f84:	4b99      	ldr	r3, [pc, #612]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05b      	beq.n	8007048 <HAL_RCC_OscConfig+0x108>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d157      	bne.n	8007048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e236      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa4:	d106      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x74>
 8006fa6:	4b91      	ldr	r3, [pc, #580]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a90      	ldr	r2, [pc, #576]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e01d      	b.n	8006ff0 <HAL_RCC_OscConfig+0xb0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fbc:	d10c      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x98>
 8006fbe:	4b8b      	ldr	r3, [pc, #556]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a8a      	ldr	r2, [pc, #552]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	4b88      	ldr	r3, [pc, #544]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a87      	ldr	r2, [pc, #540]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	e00b      	b.n	8006ff0 <HAL_RCC_OscConfig+0xb0>
 8006fd8:	4b84      	ldr	r3, [pc, #528]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a83      	ldr	r2, [pc, #524]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	4b81      	ldr	r3, [pc, #516]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a80      	ldr	r2, [pc, #512]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8006fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d013      	beq.n	8007020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff8:	f7fe fa76 	bl	80054e8 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007000:	f7fe fa72 	bl	80054e8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b64      	cmp	r3, #100	; 0x64
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e1fb      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007012:	4b76      	ldr	r3, [pc, #472]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0xc0>
 800701e:	e014      	b.n	800704a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7fe fa62 	bl	80054e8 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007028:	f7fe fa5e 	bl	80054e8 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e1e7      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800703a:	4b6c      	ldr	r3, [pc, #432]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0xe8>
 8007046:	e000      	b.n	800704a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d063      	beq.n	800711e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007056:	4b65      	ldr	r3, [pc, #404]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 030c 	and.w	r3, r3, #12
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007062:	4b62      	ldr	r3, [pc, #392]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800706a:	2b08      	cmp	r3, #8
 800706c:	d11c      	bne.n	80070a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800706e:	4b5f      	ldr	r3, [pc, #380]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d116      	bne.n	80070a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800707a:	4b5c      	ldr	r3, [pc, #368]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <HAL_RCC_OscConfig+0x152>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d001      	beq.n	8007092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e1bb      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007092:	4b56      	ldr	r3, [pc, #344]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4952      	ldr	r1, [pc, #328]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a6:	e03a      	b.n	800711e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d020      	beq.n	80070f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070b0:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <HAL_RCC_OscConfig+0x2b0>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b6:	f7fe fa17 	bl	80054e8 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070be:	f7fe fa13 	bl	80054e8 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e19c      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d0:	4b46      	ldr	r3, [pc, #280]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070dc:	4b43      	ldr	r3, [pc, #268]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4940      	ldr	r1, [pc, #256]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	600b      	str	r3, [r1, #0]
 80070f0:	e015      	b.n	800711e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070f2:	4b3f      	ldr	r3, [pc, #252]	; (80071f0 <HAL_RCC_OscConfig+0x2b0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fe f9f6 	bl	80054e8 <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007100:	f7fe f9f2 	bl	80054e8 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e17b      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007112:	4b36      	ldr	r3, [pc, #216]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1f0      	bne.n	8007100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d030      	beq.n	800718c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d016      	beq.n	8007160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007132:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <HAL_RCC_OscConfig+0x2b4>)
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007138:	f7fe f9d6 	bl	80054e8 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007140:	f7fe f9d2 	bl	80054e8 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e15b      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007152:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x200>
 800715e:	e015      	b.n	800718c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007160:	4b24      	ldr	r3, [pc, #144]	; (80071f4 <HAL_RCC_OscConfig+0x2b4>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007166:	f7fe f9bf 	bl	80054e8 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800716e:	f7fe f9bb 	bl	80054e8 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e144      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f0      	bne.n	800716e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	f000 80a0 	beq.w	80072da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10f      	bne.n	80071ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60bb      	str	r3, [r7, #8]
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ba:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_RCC_OscConfig+0x2b8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d121      	bne.n	800721a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <HAL_RCC_OscConfig+0x2b8>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a07      	ldr	r2, [pc, #28]	; (80071f8 <HAL_RCC_OscConfig+0x2b8>)
 80071dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071e2:	f7fe f981 	bl	80054e8 <HAL_GetTick>
 80071e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e8:	e011      	b.n	800720e <HAL_RCC_OscConfig+0x2ce>
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800
 80071f0:	42470000 	.word	0x42470000
 80071f4:	42470e80 	.word	0x42470e80
 80071f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071fc:	f7fe f974 	bl	80054e8 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d901      	bls.n	800720e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e0fd      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800720e:	4b81      	ldr	r3, [pc, #516]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0f0      	beq.n	80071fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d106      	bne.n	8007230 <HAL_RCC_OscConfig+0x2f0>
 8007222:	4b7d      	ldr	r3, [pc, #500]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	4a7c      	ldr	r2, [pc, #496]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	6713      	str	r3, [r2, #112]	; 0x70
 800722e:	e01c      	b.n	800726a <HAL_RCC_OscConfig+0x32a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b05      	cmp	r3, #5
 8007236:	d10c      	bne.n	8007252 <HAL_RCC_OscConfig+0x312>
 8007238:	4b77      	ldr	r3, [pc, #476]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 800723a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723c:	4a76      	ldr	r2, [pc, #472]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 800723e:	f043 0304 	orr.w	r3, r3, #4
 8007242:	6713      	str	r3, [r2, #112]	; 0x70
 8007244:	4b74      	ldr	r3, [pc, #464]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	4a73      	ldr	r2, [pc, #460]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6713      	str	r3, [r2, #112]	; 0x70
 8007250:	e00b      	b.n	800726a <HAL_RCC_OscConfig+0x32a>
 8007252:	4b71      	ldr	r3, [pc, #452]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007256:	4a70      	ldr	r2, [pc, #448]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007258:	f023 0301 	bic.w	r3, r3, #1
 800725c:	6713      	str	r3, [r2, #112]	; 0x70
 800725e:	4b6e      	ldr	r3, [pc, #440]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	4a6d      	ldr	r2, [pc, #436]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007264:	f023 0304 	bic.w	r3, r3, #4
 8007268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d015      	beq.n	800729e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007272:	f7fe f939 	bl	80054e8 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007278:	e00a      	b.n	8007290 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f7fe f935 	bl	80054e8 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	f241 3288 	movw	r2, #5000	; 0x1388
 8007288:	4293      	cmp	r3, r2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e0bc      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007290:	4b61      	ldr	r3, [pc, #388]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0ee      	beq.n	800727a <HAL_RCC_OscConfig+0x33a>
 800729c:	e014      	b.n	80072c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800729e:	f7fe f923 	bl	80054e8 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072a4:	e00a      	b.n	80072bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a6:	f7fe f91f 	bl	80054e8 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e0a6      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072bc:	4b56      	ldr	r3, [pc, #344]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1ee      	bne.n	80072a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d105      	bne.n	80072da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ce:	4b52      	ldr	r3, [pc, #328]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	4a51      	ldr	r2, [pc, #324]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 80072d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8092 	beq.w	8007408 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072e4:	4b4c      	ldr	r3, [pc, #304]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d05c      	beq.n	80073aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d141      	bne.n	800737c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f8:	4b48      	ldr	r3, [pc, #288]	; (800741c <HAL_RCC_OscConfig+0x4dc>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fe:	f7fe f8f3 	bl	80054e8 <HAL_GetTick>
 8007302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007304:	e008      	b.n	8007318 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007306:	f7fe f8ef 	bl	80054e8 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e078      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007318:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f0      	bne.n	8007306 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	019b      	lsls	r3, r3, #6
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	3b01      	subs	r3, #1
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007346:	061b      	lsls	r3, r3, #24
 8007348:	4933      	ldr	r1, [pc, #204]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 800734a:	4313      	orrs	r3, r2
 800734c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800734e:	4b33      	ldr	r3, [pc, #204]	; (800741c <HAL_RCC_OscConfig+0x4dc>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007354:	f7fe f8c8 	bl	80054e8 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800735c:	f7fe f8c4 	bl	80054e8 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e04d      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736e:	4b2a      	ldr	r3, [pc, #168]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0x41c>
 800737a:	e045      	b.n	8007408 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <HAL_RCC_OscConfig+0x4dc>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007382:	f7fe f8b1 	bl	80054e8 <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800738a:	f7fe f8ad 	bl	80054e8 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e036      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f0      	bne.n	800738a <HAL_RCC_OscConfig+0x44a>
 80073a8:	e02e      	b.n	8007408 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e029      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073b6:	4b18      	ldr	r3, [pc, #96]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d11c      	bne.n	8007404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d115      	bne.n	8007404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073de:	4013      	ands	r3, r2
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d10d      	bne.n	8007404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d106      	bne.n	8007404 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40007000 	.word	0x40007000
 8007418:	40023800 	.word	0x40023800
 800741c:	42470060 	.word	0x42470060

08007420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0cc      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007434:	4b68      	ldr	r3, [pc, #416]	; (80075d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	683a      	ldr	r2, [r7, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d90c      	bls.n	800745c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007442:	4b65      	ldr	r3, [pc, #404]	; (80075d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800744a:	4b63      	ldr	r3, [pc, #396]	; (80075d8 <HAL_RCC_ClockConfig+0x1b8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d001      	beq.n	800745c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0b8      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d020      	beq.n	80074aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007474:	4b59      	ldr	r3, [pc, #356]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	4a58      	ldr	r2, [pc, #352]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 800747a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800747e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d005      	beq.n	8007498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800748c:	4b53      	ldr	r3, [pc, #332]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4a52      	ldr	r2, [pc, #328]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007498:	4b50      	ldr	r3, [pc, #320]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	494d      	ldr	r1, [pc, #308]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d044      	beq.n	8007540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d107      	bne.n	80074ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074be:	4b47      	ldr	r3, [pc, #284]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d119      	bne.n	80074fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e07f      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d003      	beq.n	80074de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d107      	bne.n	80074ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074de:	4b3f      	ldr	r3, [pc, #252]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e06f      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ee:	4b3b      	ldr	r3, [pc, #236]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e067      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074fe:	4b37      	ldr	r3, [pc, #220]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f023 0203 	bic.w	r2, r3, #3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	4934      	ldr	r1, [pc, #208]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007510:	f7fd ffea 	bl	80054e8 <HAL_GetTick>
 8007514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007516:	e00a      	b.n	800752e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007518:	f7fd ffe6 	bl	80054e8 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e04f      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800752e:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 020c 	and.w	r2, r3, #12
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	429a      	cmp	r2, r3
 800753e:	d1eb      	bne.n	8007518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d20c      	bcs.n	8007568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754e:	4b22      	ldr	r3, [pc, #136]	; (80075d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e032      	b.n	80075ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0304 	and.w	r3, r3, #4
 8007570:	2b00      	cmp	r3, #0
 8007572:	d008      	beq.n	8007586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	4916      	ldr	r1, [pc, #88]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007582:	4313      	orrs	r3, r2
 8007584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007592:	4b12      	ldr	r3, [pc, #72]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	490e      	ldr	r1, [pc, #56]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075a6:	f000 f821 	bl	80075ec <HAL_RCC_GetSysClockFreq>
 80075aa:	4601      	mov	r1, r0
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	4a0a      	ldr	r2, [pc, #40]	; (80075e0 <HAL_RCC_ClockConfig+0x1c0>)
 80075b8:	5cd3      	ldrb	r3, [r2, r3]
 80075ba:	fa21 f303 	lsr.w	r3, r1, r3
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <HAL_RCC_ClockConfig+0x1c8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd ff4a 	bl	8005460 <HAL_InitTick>

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40023c00 	.word	0x40023c00
 80075dc:	40023800 	.word	0x40023800
 80075e0:	0800e604 	.word	0x0800e604
 80075e4:	20000000 	.word	0x20000000
 80075e8:	20000004 	.word	0x20000004

080075ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	2300      	movs	r3, #0
 80075fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007602:	4b50      	ldr	r3, [pc, #320]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
 800760a:	2b04      	cmp	r3, #4
 800760c:	d007      	beq.n	800761e <HAL_RCC_GetSysClockFreq+0x32>
 800760e:	2b08      	cmp	r3, #8
 8007610:	d008      	beq.n	8007624 <HAL_RCC_GetSysClockFreq+0x38>
 8007612:	2b00      	cmp	r3, #0
 8007614:	f040 808d 	bne.w	8007732 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007618:	4b4b      	ldr	r3, [pc, #300]	; (8007748 <HAL_RCC_GetSysClockFreq+0x15c>)
 800761a:	60bb      	str	r3, [r7, #8]
       break;
 800761c:	e08c      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800761e:	4b4b      	ldr	r3, [pc, #300]	; (800774c <HAL_RCC_GetSysClockFreq+0x160>)
 8007620:	60bb      	str	r3, [r7, #8]
      break;
 8007622:	e089      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007624:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800762e:	4b45      	ldr	r3, [pc, #276]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d023      	beq.n	8007682 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800763a:	4b42      	ldr	r3, [pc, #264]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	099b      	lsrs	r3, r3, #6
 8007640:	f04f 0400 	mov.w	r4, #0
 8007644:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	ea03 0501 	and.w	r5, r3, r1
 8007650:	ea04 0602 	and.w	r6, r4, r2
 8007654:	4a3d      	ldr	r2, [pc, #244]	; (800774c <HAL_RCC_GetSysClockFreq+0x160>)
 8007656:	fb02 f106 	mul.w	r1, r2, r6
 800765a:	2200      	movs	r2, #0
 800765c:	fb02 f205 	mul.w	r2, r2, r5
 8007660:	440a      	add	r2, r1
 8007662:	493a      	ldr	r1, [pc, #232]	; (800774c <HAL_RCC_GetSysClockFreq+0x160>)
 8007664:	fba5 0101 	umull	r0, r1, r5, r1
 8007668:	1853      	adds	r3, r2, r1
 800766a:	4619      	mov	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f04f 0400 	mov.w	r4, #0
 8007672:	461a      	mov	r2, r3
 8007674:	4623      	mov	r3, r4
 8007676:	f7f9 fabf 	bl	8000bf8 <__aeabi_uldivmod>
 800767a:	4603      	mov	r3, r0
 800767c:	460c      	mov	r4, r1
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e049      	b.n	8007716 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007682:	4b30      	ldr	r3, [pc, #192]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	099b      	lsrs	r3, r3, #6
 8007688:	f04f 0400 	mov.w	r4, #0
 800768c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	ea03 0501 	and.w	r5, r3, r1
 8007698:	ea04 0602 	and.w	r6, r4, r2
 800769c:	4629      	mov	r1, r5
 800769e:	4632      	mov	r2, r6
 80076a0:	f04f 0300 	mov.w	r3, #0
 80076a4:	f04f 0400 	mov.w	r4, #0
 80076a8:	0154      	lsls	r4, r2, #5
 80076aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076ae:	014b      	lsls	r3, r1, #5
 80076b0:	4619      	mov	r1, r3
 80076b2:	4622      	mov	r2, r4
 80076b4:	1b49      	subs	r1, r1, r5
 80076b6:	eb62 0206 	sbc.w	r2, r2, r6
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	f04f 0400 	mov.w	r4, #0
 80076c2:	0194      	lsls	r4, r2, #6
 80076c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076c8:	018b      	lsls	r3, r1, #6
 80076ca:	1a5b      	subs	r3, r3, r1
 80076cc:	eb64 0402 	sbc.w	r4, r4, r2
 80076d0:	f04f 0100 	mov.w	r1, #0
 80076d4:	f04f 0200 	mov.w	r2, #0
 80076d8:	00e2      	lsls	r2, r4, #3
 80076da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076de:	00d9      	lsls	r1, r3, #3
 80076e0:	460b      	mov	r3, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	195b      	adds	r3, r3, r5
 80076e6:	eb44 0406 	adc.w	r4, r4, r6
 80076ea:	f04f 0100 	mov.w	r1, #0
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	02a2      	lsls	r2, r4, #10
 80076f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80076f8:	0299      	lsls	r1, r3, #10
 80076fa:	460b      	mov	r3, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	4621      	mov	r1, r4
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f04f 0400 	mov.w	r4, #0
 8007708:	461a      	mov	r2, r3
 800770a:	4623      	mov	r3, r4
 800770c:	f7f9 fa74 	bl	8000bf8 <__aeabi_uldivmod>
 8007710:	4603      	mov	r3, r0
 8007712:	460c      	mov	r4, r1
 8007714:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCC_GetSysClockFreq+0x158>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	3301      	adds	r3, #1
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	fbb2 f3f3 	udiv	r3, r2, r3
 800772e:	60bb      	str	r3, [r7, #8]
      break;
 8007730:	e002      	b.n	8007738 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007734:	60bb      	str	r3, [r7, #8]
      break;
 8007736:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007738:	68bb      	ldr	r3, [r7, #8]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	bf00      	nop
 8007744:	40023800 	.word	0x40023800
 8007748:	00f42400 	.word	0x00f42400
 800774c:	017d7840 	.word	0x017d7840

08007750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007754:	4b03      	ldr	r3, [pc, #12]	; (8007764 <HAL_RCC_GetHCLKFreq+0x14>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20000000 	.word	0x20000000

08007768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800776c:	f7ff fff0 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007770:	4601      	mov	r1, r0
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	0a9b      	lsrs	r3, r3, #10
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	4a03      	ldr	r2, [pc, #12]	; (800778c <HAL_RCC_GetPCLK1Freq+0x24>)
 800777e:	5cd3      	ldrb	r3, [r2, r3]
 8007780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007784:	4618      	mov	r0, r3
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40023800 	.word	0x40023800
 800778c:	0800e614 	.word	0x0800e614

08007790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007794:	f7ff ffdc 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007798:	4601      	mov	r1, r0
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0b5b      	lsrs	r3, r3, #13
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4a03      	ldr	r2, [pc, #12]	; (80077b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a6:	5cd3      	ldrb	r3, [r2, r3]
 80077a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40023800 	.word	0x40023800
 80077b4:	0800e614 	.word	0x0800e614

080077b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e056      	b.n	8007878 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d106      	bne.n	80077ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7f9 fe91 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007800:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	ea42 0103 	orr.w	r1, r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	0c1b      	lsrs	r3, r3, #16
 8007848:	f003 0104 	and.w	r1, r3, #4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69da      	ldr	r2, [r3, #28]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_SPI_Transmit+0x22>
 800789e:	2302      	movs	r3, #2
 80078a0:	e11e      	b.n	8007ae0 <HAL_SPI_Transmit+0x260>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078aa:	f7fd fe1d 	bl	80054e8 <HAL_GetTick>
 80078ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078b0:	88fb      	ldrh	r3, [r7, #6]
 80078b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d002      	beq.n	80078c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
 80078c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078c4:	e103      	b.n	8007ace <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <HAL_SPI_Transmit+0x52>
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078d6:	e0fa      	b.n	8007ace <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2203      	movs	r2, #3
 80078dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	88fa      	ldrh	r2, [r7, #6]
 80078f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	88fa      	ldrh	r2, [r7, #6]
 80078f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791e:	d107      	bne.n	8007930 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800792e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793a:	2b40      	cmp	r3, #64	; 0x40
 800793c:	d007      	beq.n	800794e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800794c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007956:	d14b      	bne.n	80079f0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_Transmit+0xe6>
 8007960:	8afb      	ldrh	r3, [r7, #22]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d13e      	bne.n	80079e4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	881a      	ldrh	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	1c9a      	adds	r2, r3, #2
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800798a:	e02b      	b.n	80079e4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b02      	cmp	r3, #2
 8007998:	d112      	bne.n	80079c0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	881a      	ldrh	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079aa:	1c9a      	adds	r2, r3, #2
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	3b01      	subs	r3, #1
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80079be:	e011      	b.n	80079e4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079c0:	f7fd fd92 	bl	80054e8 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d803      	bhi.n	80079d8 <HAL_SPI_Transmit+0x158>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d102      	bne.n	80079de <HAL_SPI_Transmit+0x15e>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079e2:	e074      	b.n	8007ace <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1ce      	bne.n	800798c <HAL_SPI_Transmit+0x10c>
 80079ee:	e04c      	b.n	8007a8a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_SPI_Transmit+0x17e>
 80079f8:	8afb      	ldrh	r3, [r7, #22]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d140      	bne.n	8007a80 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	330c      	adds	r3, #12
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a24:	e02c      	b.n	8007a80 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d113      	bne.n	8007a5c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	7812      	ldrb	r2, [r2, #0]
 8007a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a5a:	e011      	b.n	8007a80 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a5c:	f7fd fd44 	bl	80054e8 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d803      	bhi.n	8007a74 <HAL_SPI_Transmit+0x1f4>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a72:	d102      	bne.n	8007a7a <HAL_SPI_Transmit+0x1fa>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d102      	bne.n	8007a80 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a7e:	e026      	b.n	8007ace <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1cd      	bne.n	8007a26 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fba4 	bl	80081dc <SPI_EndRxTxTransaction>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	613b      	str	r3, [r7, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	77fb      	strb	r3, [r7, #31]
 8007aca:	e000      	b.n	8007ace <HAL_SPI_Transmit+0x24e>
  }

error:
 8007acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b04:	d112      	bne.n	8007b2c <HAL_SPI_Receive+0x44>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10e      	bne.n	8007b2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2204      	movs	r2, #4
 8007b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f8e9 	bl	8007cfa <HAL_SPI_TransmitReceive>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	e0e2      	b.n	8007cf2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_SPI_Receive+0x52>
 8007b36:	2302      	movs	r3, #2
 8007b38:	e0db      	b.n	8007cf2 <HAL_SPI_Receive+0x20a>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b42:	f7fd fcd1 	bl	80054e8 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d002      	beq.n	8007b5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b54:	2302      	movs	r3, #2
 8007b56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b58:	e0c2      	b.n	8007ce0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_SPI_Receive+0x7e>
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d102      	bne.n	8007b6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b6a:	e0b9      	b.n	8007ce0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2204      	movs	r2, #4
 8007b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	88fa      	ldrh	r2, [r7, #6]
 8007b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb2:	d107      	bne.n	8007bc4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d007      	beq.n	8007be2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d162      	bne.n	8007cb0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bea:	e02e      	b.n	8007c4a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d115      	bne.n	8007c26 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f103 020c 	add.w	r2, r3, #12
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c24:	e011      	b.n	8007c4a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c26:	f7fd fc5f 	bl	80054e8 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d803      	bhi.n	8007c3e <HAL_SPI_Receive+0x156>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d102      	bne.n	8007c44 <HAL_SPI_Receive+0x15c>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c48:	e04a      	b.n	8007ce0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1cb      	bne.n	8007bec <HAL_SPI_Receive+0x104>
 8007c54:	e031      	b.n	8007cba <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d113      	bne.n	8007c8c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	1c9a      	adds	r2, r3, #2
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c8a:	e011      	b.n	8007cb0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8c:	f7fd fc2c 	bl	80054e8 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d803      	bhi.n	8007ca4 <HAL_SPI_Receive+0x1bc>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d102      	bne.n	8007caa <HAL_SPI_Receive+0x1c2>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cae:	e017      	b.n	8007ce0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1cd      	bne.n	8007c56 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fa27 	bl	8008112 <SPI_EndRxTransaction>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
 8007cdc:	e000      	b.n	8007ce0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b08c      	sub	sp, #48	; 0x30
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x26>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e18a      	b.n	8008036 <HAL_SPI_TransmitReceive+0x33c>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d28:	f7fd fbde 	bl	80054e8 <HAL_GetTick>
 8007d2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d3e:	887b      	ldrh	r3, [r7, #2]
 8007d40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d00f      	beq.n	8007d6a <HAL_SPI_TransmitReceive+0x70>
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d50:	d107      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x68>
 8007d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d003      	beq.n	8007d6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d62:	2302      	movs	r3, #2
 8007d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d68:	e15b      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x82>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x82>
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d82:	e14e      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d003      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2205      	movs	r2, #5
 8007d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	887a      	ldrh	r2, [r7, #2]
 8007da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	887a      	ldrh	r2, [r7, #2]
 8007dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	887a      	ldrh	r2, [r7, #2]
 8007dba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	887a      	ldrh	r2, [r7, #2]
 8007dc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d007      	beq.n	8007dec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df4:	d178      	bne.n	8007ee8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <HAL_SPI_TransmitReceive+0x10a>
 8007dfe:	8b7b      	ldrh	r3, [r7, #26]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d166      	bne.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	881a      	ldrh	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	1c9a      	adds	r2, r3, #2
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e28:	e053      	b.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d11b      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x176>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x176>
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d113      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	881a      	ldrh	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	1c9a      	adds	r2, r3, #2
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d119      	bne.n	8007eb2 <HAL_SPI_TransmitReceive+0x1b8>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d014      	beq.n	8007eb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	b292      	uxth	r2, r2
 8007e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	1c9a      	adds	r2, r3, #2
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007eb2:	f7fd fb19 	bl	80054e8 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d807      	bhi.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d003      	beq.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ed0:	e0a7      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1a6      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x130>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1a1      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x130>
 8007ee6:	e07c      	b.n	8007fe2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_SPI_TransmitReceive+0x1fc>
 8007ef0:	8b7b      	ldrh	r3, [r7, #26]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d16b      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1c:	e057      	b.n	8007fce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d11c      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x26c>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d017      	beq.n	8007f66 <HAL_SPI_TransmitReceive+0x26c>
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d114      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d119      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x2ae>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d014      	beq.n	8007fa8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fa8:	f7fd fa9e 	bl	80054e8 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d803      	bhi.n	8007fc0 <HAL_SPI_TransmitReceive+0x2c6>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d102      	bne.n	8007fc6 <HAL_SPI_TransmitReceive+0x2cc>
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fcc:	e029      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1a2      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x224>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d19d      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f8f8 	bl	80081dc <SPI_EndRxTxTransaction>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ffe:	e010      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	e000      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008036:	4618      	mov	r0, r3
 8008038:	3730      	adds	r7, #48	; 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800804e:	e04c      	b.n	80080ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008056:	d048      	beq.n	80080ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008058:	f7fd fa46 	bl	80054e8 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d902      	bls.n	800806e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d13d      	bne.n	80080ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800807c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008086:	d111      	bne.n	80080ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008090:	d004      	beq.n	800809c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800809a:	d107      	bne.n	80080ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b4:	d10f      	bne.n	80080d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e00f      	b.n	800810a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4013      	ands	r3, r2
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	bf0c      	ite	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	2300      	movne	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	429a      	cmp	r2, r3
 8008106:	d1a3      	bne.n	8008050 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af02      	add	r7, sp, #8
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008126:	d111      	bne.n	800814c <SPI_EndRxTransaction+0x3a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008130:	d004      	beq.n	800813c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813a:	d107      	bne.n	800814c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008154:	d12a      	bne.n	80081ac <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815e:	d012      	beq.n	8008186 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2200      	movs	r2, #0
 8008168:	2180      	movs	r1, #128	; 0x80
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff ff67 	bl	800803e <SPI_WaitFlagStateUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d02d      	beq.n	80081d2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817a:	f043 0220 	orr.w	r2, r3, #32
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e026      	b.n	80081d4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	2101      	movs	r1, #1
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff ff54 	bl	800803e <SPI_WaitFlagStateUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01a      	beq.n	80081d2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a0:	f043 0220 	orr.w	r2, r3, #32
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e013      	b.n	80081d4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	2101      	movs	r1, #1
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff ff41 	bl	800803e <SPI_WaitFlagStateUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d007      	beq.n	80081d2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	f043 0220 	orr.w	r2, r3, #32
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e000      	b.n	80081d4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081e8:	4b1b      	ldr	r3, [pc, #108]	; (8008258 <SPI_EndRxTxTransaction+0x7c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a1b      	ldr	r2, [pc, #108]	; (800825c <SPI_EndRxTxTransaction+0x80>)
 80081ee:	fba2 2303 	umull	r2, r3, r2, r3
 80081f2:	0d5b      	lsrs	r3, r3, #21
 80081f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081f8:	fb02 f303 	mul.w	r3, r2, r3
 80081fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008206:	d112      	bne.n	800822e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	2180      	movs	r1, #128	; 0x80
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff ff13 	bl	800803e <SPI_WaitFlagStateUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d016      	beq.n	800824c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e00f      	b.n	800824e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00a      	beq.n	800824a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	3b01      	subs	r3, #1
 8008238:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008244:	2b80      	cmp	r3, #128	; 0x80
 8008246:	d0f2      	beq.n	800822e <SPI_EndRxTxTransaction+0x52>
 8008248:	e000      	b.n	800824c <SPI_EndRxTxTransaction+0x70>
        break;
 800824a:	bf00      	nop
  }

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000000 	.word	0x20000000
 800825c:	165e9f81 	.word	0x165e9f81

08008260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e01d      	b.n	80082ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f9 f988 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3304      	adds	r3, #4
 800829c:	4619      	mov	r1, r3
 800829e:	4610      	mov	r0, r2
 80082a0:	f000 f8c0 	bl	8008424 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_TIM_ConfigClockSource+0x18>
 80082ca:	2302      	movs	r3, #2
 80082cc:	e0a6      	b.n	800841c <HAL_TIM_ConfigClockSource+0x166>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2202      	movs	r2, #2
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d067      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x120>
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d80b      	bhi.n	8008322 <HAL_TIM_ConfigClockSource+0x6c>
 800830a:	2b10      	cmp	r3, #16
 800830c:	d073      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x140>
 800830e:	2b10      	cmp	r3, #16
 8008310:	d802      	bhi.n	8008318 <HAL_TIM_ConfigClockSource+0x62>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d06f      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008316:	e078      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008318:	2b20      	cmp	r3, #32
 800831a:	d06c      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x140>
 800831c:	2b30      	cmp	r3, #48	; 0x30
 800831e:	d06a      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008320:	e073      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008322:	2b70      	cmp	r3, #112	; 0x70
 8008324:	d00d      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x8c>
 8008326:	2b70      	cmp	r3, #112	; 0x70
 8008328:	d804      	bhi.n	8008334 <HAL_TIM_ConfigClockSource+0x7e>
 800832a:	2b50      	cmp	r3, #80	; 0x50
 800832c:	d033      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0xe0>
 800832e:	2b60      	cmp	r3, #96	; 0x60
 8008330:	d041      	beq.n	80083b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008332:	e06a      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008338:	d066      	beq.n	8008408 <HAL_TIM_ConfigClockSource+0x152>
 800833a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800833e:	d017      	beq.n	8008370 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008340:	e063      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	6899      	ldr	r1, [r3, #8]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f000 f961 	bl	8008618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008364:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	609a      	str	r2, [r3, #8]
      break;
 800836e:	e04c      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	6899      	ldr	r1, [r3, #8]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f000 f94a 	bl	8008618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008392:	609a      	str	r2, [r3, #8]
      break;
 8008394:	e039      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6859      	ldr	r1, [r3, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f000 f8be 	bl	8008524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2150      	movs	r1, #80	; 0x50
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f917 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 80083b4:	e029      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6859      	ldr	r1, [r3, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f000 f8dd 	bl	8008582 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2160      	movs	r1, #96	; 0x60
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f907 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 80083d4:	e019      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6859      	ldr	r1, [r3, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f000 f89e 	bl	8008524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f8f7 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 80083f4:	e009      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f000 f8ee 	bl	80085e2 <TIM_ITRx_SetConfig>
      break;
 8008406:	e000      	b.n	800840a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008408:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a34      	ldr	r2, [pc, #208]	; (8008508 <TIM_Base_SetConfig+0xe4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00f      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008442:	d00b      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a31      	ldr	r2, [pc, #196]	; (800850c <TIM_Base_SetConfig+0xe8>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d007      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a30      	ldr	r2, [pc, #192]	; (8008510 <TIM_Base_SetConfig+0xec>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0x38>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a2f      	ldr	r2, [pc, #188]	; (8008514 <TIM_Base_SetConfig+0xf0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d108      	bne.n	800846e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a25      	ldr	r2, [pc, #148]	; (8008508 <TIM_Base_SetConfig+0xe4>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01b      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d017      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a22      	ldr	r2, [pc, #136]	; (800850c <TIM_Base_SetConfig+0xe8>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a21      	ldr	r2, [pc, #132]	; (8008510 <TIM_Base_SetConfig+0xec>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00f      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a20      	ldr	r2, [pc, #128]	; (8008514 <TIM_Base_SetConfig+0xf0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a1f      	ldr	r2, [pc, #124]	; (8008518 <TIM_Base_SetConfig+0xf4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d007      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a1e      	ldr	r2, [pc, #120]	; (800851c <TIM_Base_SetConfig+0xf8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_Base_SetConfig+0x8a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <TIM_Base_SetConfig+0xfc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d108      	bne.n	80084c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a08      	ldr	r2, [pc, #32]	; (8008508 <TIM_Base_SetConfig+0xe4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d103      	bne.n	80084f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	615a      	str	r2, [r3, #20]
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	40000400 	.word	0x40000400
 8008510:	40000800 	.word	0x40000800
 8008514:	40000c00 	.word	0x40000c00
 8008518:	40014000 	.word	0x40014000
 800851c:	40014400 	.word	0x40014400
 8008520:	40014800 	.word	0x40014800

08008524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f023 0201 	bic.w	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800854e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 030a 	bic.w	r3, r3, #10
 8008560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	621a      	str	r2, [r3, #32]
}
 8008576:	bf00      	nop
 8008578:	371c      	adds	r7, #28
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008582:	b480      	push	{r7}
 8008584:	b087      	sub	sp, #28
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f023 0210 	bic.w	r2, r3, #16
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	031b      	lsls	r3, r3, #12
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	621a      	str	r2, [r3, #32]
}
 80085d6:	bf00      	nop
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	f043 0307 	orr.w	r3, r3, #7
 8008604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	609a      	str	r2, [r3, #8]
}
 800860c:	bf00      	nop
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	021a      	lsls	r2, r3, #8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	431a      	orrs	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4313      	orrs	r3, r2
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008658:	b480      	push	{r7}
 800865a:	b087      	sub	sp, #28
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	2201      	movs	r2, #1
 800866c:	fa02 f303 	lsl.w	r3, r2, r3
 8008670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a1a      	ldr	r2, [r3, #32]
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	43db      	mvns	r3, r3
 800867a:	401a      	ands	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1a      	ldr	r2, [r3, #32]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	431a      	orrs	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	621a      	str	r2, [r3, #32]
}
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
	...

080086a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e050      	b.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1c      	ldr	r2, [pc, #112]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d018      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008708:	d013      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a18      	ldr	r2, [pc, #96]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a16      	ldr	r2, [pc, #88]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d009      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a13      	ldr	r2, [pc, #76]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d10c      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40014000 	.word	0x40014000

08008780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e03f      	b.n	8008812 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7f8 ff1a 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2224      	movs	r2, #36	; 0x24
 80087b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fb97 	bl	8008ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695a      	ldr	r2, [r3, #20]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b088      	sub	sp, #32
 800881e:	af02      	add	r7, sp, #8
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	603b      	str	r3, [r7, #0]
 8008826:	4613      	mov	r3, r2
 8008828:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b20      	cmp	r3, #32
 8008838:	f040 8083 	bne.w	8008942 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <HAL_UART_Transmit+0x2e>
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e07b      	b.n	8008944 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_UART_Transmit+0x40>
 8008856:	2302      	movs	r3, #2
 8008858:	e074      	b.n	8008944 <HAL_UART_Transmit+0x12a>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2221      	movs	r2, #33	; 0x21
 800886c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008870:	f7fc fe3a 	bl	80054e8 <HAL_GetTick>
 8008874:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	88fa      	ldrh	r2, [r7, #6]
 800887a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88fa      	ldrh	r2, [r7, #6]
 8008880:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800888a:	e042      	b.n	8008912 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008890:	b29b      	uxth	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a2:	d122      	bne.n	80088ea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2200      	movs	r2, #0
 80088ac:	2180      	movs	r1, #128	; 0x80
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f000 f9b6 	bl	8008c20 <UART_WaitOnFlagUntilTimeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e042      	b.n	8008944 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088d0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	3302      	adds	r3, #2
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	e017      	b.n	8008912 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	3301      	adds	r3, #1
 80088e6:	60bb      	str	r3, [r7, #8]
 80088e8:	e013      	b.n	8008912 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2200      	movs	r2, #0
 80088f2:	2180      	movs	r1, #128	; 0x80
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 f993 	bl	8008c20 <UART_WaitOnFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e01f      	b.n	8008944 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	60ba      	str	r2, [r7, #8]
 800890a:	781a      	ldrb	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008916:	b29b      	uxth	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1b7      	bne.n	800888c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2200      	movs	r2, #0
 8008924:	2140      	movs	r1, #64	; 0x40
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f97a 	bl	8008c20 <UART_WaitOnFlagUntilTimeout>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e006      	b.n	8008944 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	e000      	b.n	8008944 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008942:	2302      	movs	r3, #2
  }
}
 8008944:	4618      	mov	r0, r3
 8008946:	3718      	adds	r7, #24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b20      	cmp	r3, #32
 8008964:	d140      	bne.n	80089e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_UART_Receive_IT+0x26>
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e039      	b.n	80089ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_UART_Receive_IT+0x38>
 8008980:	2302      	movs	r3, #2
 8008982:	e032      	b.n	80089ea <HAL_UART_Receive_IT+0x9e>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68ba      	ldr	r2, [r7, #8]
 8008990:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	88fa      	ldrh	r2, [r7, #6]
 800899c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2222      	movs	r2, #34	; 0x22
 80089a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695a      	ldr	r2, [r3, #20]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0201 	orr.w	r2, r2, #1
 80089d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0220 	orr.w	r2, r2, #32
 80089e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	e000      	b.n	80089ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80089e8:	2302      	movs	r3, #2
  }
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
	...

080089f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <HAL_UART_IRQHandler+0x52>
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f9d6 	bl	8008df4 <UART_Receive_IT>
      return;
 8008a48:	e0d1      	b.n	8008bee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80b0 	beq.w	8008bb2 <HAL_UART_IRQHandler+0x1ba>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <HAL_UART_IRQHandler+0x70>
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80a5 	beq.w	8008bb2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <HAL_UART_IRQHandler+0x90>
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d005      	beq.n	8008a88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a80:	f043 0201 	orr.w	r2, r3, #1
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <HAL_UART_IRQHandler+0xb0>
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa0:	f043 0202 	orr.w	r2, r3, #2
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f003 0302 	and.w	r3, r3, #2
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <HAL_UART_IRQHandler+0xd0>
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	f043 0204 	orr.w	r2, r3, #4
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00f      	beq.n	8008af2 <HAL_UART_IRQHandler+0xfa>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <HAL_UART_IRQHandler+0xee>
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	f043 0208 	orr.w	r2, r3, #8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d078      	beq.n	8008bec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <HAL_UART_IRQHandler+0x11c>
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f970 	bl	8008df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b40      	cmp	r3, #64	; 0x40
 8008b20:	bf0c      	ite	eq
 8008b22:	2301      	moveq	r3, #1
 8008b24:	2300      	movne	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <HAL_UART_IRQHandler+0x144>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d031      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f8b9 	bl	8008cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4c:	2b40      	cmp	r3, #64	; 0x40
 8008b4e:	d123      	bne.n	8008b98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695a      	ldr	r2, [r3, #20]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d013      	beq.n	8008b90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6c:	4a21      	ldr	r2, [pc, #132]	; (8008bf4 <HAL_UART_IRQHandler+0x1fc>)
 8008b6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fc fec5 	bl	8005904 <HAL_DMA_Abort_IT>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d016      	beq.n	8008bae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b8e:	e00e      	b.n	8008bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f83b 	bl	8008c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b96:	e00a      	b.n	8008bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f837 	bl	8008c0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9e:	e006      	b.n	8008bae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f833 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008bac:	e01e      	b.n	8008bec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bae:	bf00      	nop
    return;
 8008bb0:	e01c      	b.n	8008bec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_UART_IRQHandler+0x1d6>
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f8a6 	bl	8008d18 <UART_Transmit_IT>
    return;
 8008bcc:	e00f      	b.n	8008bee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <HAL_UART_IRQHandler+0x1f6>
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8ee 	bl	8008dc4 <UART_EndTransmit_IT>
    return;
 8008be8:	bf00      	nop
 8008bea:	e000      	b.n	8008bee <HAL_UART_IRQHandler+0x1f6>
    return;
 8008bec:	bf00      	nop
  }
}
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	08008cf1 	.word	0x08008cf1

08008bf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c30:	e02c      	b.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c38:	d028      	beq.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c40:	f7fc fc52 	bl	80054e8 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d21d      	bcs.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	695a      	ldr	r2, [r3, #20]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0201 	bic.w	r2, r2, #1
 8008c6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e00f      	b.n	8008cac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	bf0c      	ite	eq
 8008c9c:	2301      	moveq	r3, #1
 8008c9e:	2300      	movne	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d0c3      	beq.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695a      	ldr	r2, [r3, #20]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0201 	bic.w	r2, r2, #1
 8008cda:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff ff7e 	bl	8008c0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b21      	cmp	r3, #33	; 0x21
 8008d2a:	d144      	bne.n	8008db6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d34:	d11a      	bne.n	8008d6c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d4a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d105      	bne.n	8008d60 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]
 8008d5e:	e00e      	b.n	8008d7e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	621a      	str	r2, [r3, #32]
 8008d6a:	e008      	b.n	8008d7e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	1c59      	adds	r1, r3, #1
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6211      	str	r1, [r2, #32]
 8008d76:	781a      	ldrb	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10f      	bne.n	8008db2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68da      	ldr	r2, [r3, #12]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68da      	ldr	r2, [r3, #12]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e000      	b.n	8008db8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008db6:	2302      	movs	r3, #2
  }
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7ff ff07 	bl	8008bf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b22      	cmp	r3, #34	; 0x22
 8008e06:	d171      	bne.n	8008eec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e10:	d123      	bne.n	8008e5a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e16:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10e      	bne.n	8008e3e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	1c9a      	adds	r2, r3, #2
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e3c:	e029      	b.n	8008e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	629a      	str	r2, [r3, #40]	; 0x28
 8008e58:	e01b      	b.n	8008e92 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10a      	bne.n	8008e78 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6858      	ldr	r0, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	1c59      	adds	r1, r3, #1
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	6291      	str	r1, [r2, #40]	; 0x28
 8008e72:	b2c2      	uxtb	r2, r0
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e00c      	b.n	8008e92 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	1c58      	adds	r0, r3, #1
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	6288      	str	r0, [r1, #40]	; 0x28
 8008e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d120      	bne.n	8008ee8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0220 	bic.w	r2, r2, #32
 8008eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	695a      	ldr	r2, [r3, #20]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0201 	bic.w	r2, r2, #1
 8008ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7f8 fa8a 	bl	80013f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	e002      	b.n	8008eee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e000      	b.n	8008eee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008eec:	2302      	movs	r3, #2
  }
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f3a:	f023 030c 	bic.w	r3, r3, #12
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	430b      	orrs	r3, r1
 8008f46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699a      	ldr	r2, [r3, #24]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	430a      	orrs	r2, r1
 8008f5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f66:	f040 818b 	bne.w	8009280 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4ac1      	ldr	r2, [pc, #772]	; (8009274 <UART_SetConfig+0x37c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d005      	beq.n	8008f80 <UART_SetConfig+0x88>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4abf      	ldr	r2, [pc, #764]	; (8009278 <UART_SetConfig+0x380>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	f040 80bd 	bne.w	80090fa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f80:	f7fe fc06 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 8008f84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	461d      	mov	r5, r3
 8008f8a:	f04f 0600 	mov.w	r6, #0
 8008f8e:	46a8      	mov	r8, r5
 8008f90:	46b1      	mov	r9, r6
 8008f92:	eb18 0308 	adds.w	r3, r8, r8
 8008f96:	eb49 0409 	adc.w	r4, r9, r9
 8008f9a:	4698      	mov	r8, r3
 8008f9c:	46a1      	mov	r9, r4
 8008f9e:	eb18 0805 	adds.w	r8, r8, r5
 8008fa2:	eb49 0906 	adc.w	r9, r9, r6
 8008fa6:	f04f 0100 	mov.w	r1, #0
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008fb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008fb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008fba:	4688      	mov	r8, r1
 8008fbc:	4691      	mov	r9, r2
 8008fbe:	eb18 0005 	adds.w	r0, r8, r5
 8008fc2:	eb49 0106 	adc.w	r1, r9, r6
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	461d      	mov	r5, r3
 8008fcc:	f04f 0600 	mov.w	r6, #0
 8008fd0:	196b      	adds	r3, r5, r5
 8008fd2:	eb46 0406 	adc.w	r4, r6, r6
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4623      	mov	r3, r4
 8008fda:	f7f7 fe0d 	bl	8000bf8 <__aeabi_uldivmod>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	4ba5      	ldr	r3, [pc, #660]	; (800927c <UART_SetConfig+0x384>)
 8008fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	461d      	mov	r5, r3
 8008ff4:	f04f 0600 	mov.w	r6, #0
 8008ff8:	46a9      	mov	r9, r5
 8008ffa:	46b2      	mov	sl, r6
 8008ffc:	eb19 0309 	adds.w	r3, r9, r9
 8009000:	eb4a 040a 	adc.w	r4, sl, sl
 8009004:	4699      	mov	r9, r3
 8009006:	46a2      	mov	sl, r4
 8009008:	eb19 0905 	adds.w	r9, r9, r5
 800900c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009010:	f04f 0100 	mov.w	r1, #0
 8009014:	f04f 0200 	mov.w	r2, #0
 8009018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800901c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009020:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009024:	4689      	mov	r9, r1
 8009026:	4692      	mov	sl, r2
 8009028:	eb19 0005 	adds.w	r0, r9, r5
 800902c:	eb4a 0106 	adc.w	r1, sl, r6
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	461d      	mov	r5, r3
 8009036:	f04f 0600 	mov.w	r6, #0
 800903a:	196b      	adds	r3, r5, r5
 800903c:	eb46 0406 	adc.w	r4, r6, r6
 8009040:	461a      	mov	r2, r3
 8009042:	4623      	mov	r3, r4
 8009044:	f7f7 fdd8 	bl	8000bf8 <__aeabi_uldivmod>
 8009048:	4603      	mov	r3, r0
 800904a:	460c      	mov	r4, r1
 800904c:	461a      	mov	r2, r3
 800904e:	4b8b      	ldr	r3, [pc, #556]	; (800927c <UART_SetConfig+0x384>)
 8009050:	fba3 1302 	umull	r1, r3, r3, r2
 8009054:	095b      	lsrs	r3, r3, #5
 8009056:	2164      	movs	r1, #100	; 0x64
 8009058:	fb01 f303 	mul.w	r3, r1, r3
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	3332      	adds	r3, #50	; 0x32
 8009062:	4a86      	ldr	r2, [pc, #536]	; (800927c <UART_SetConfig+0x384>)
 8009064:	fba2 2303 	umull	r2, r3, r2, r3
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009070:	4498      	add	r8, r3
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	461d      	mov	r5, r3
 8009076:	f04f 0600 	mov.w	r6, #0
 800907a:	46a9      	mov	r9, r5
 800907c:	46b2      	mov	sl, r6
 800907e:	eb19 0309 	adds.w	r3, r9, r9
 8009082:	eb4a 040a 	adc.w	r4, sl, sl
 8009086:	4699      	mov	r9, r3
 8009088:	46a2      	mov	sl, r4
 800908a:	eb19 0905 	adds.w	r9, r9, r5
 800908e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009092:	f04f 0100 	mov.w	r1, #0
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800909e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090a6:	4689      	mov	r9, r1
 80090a8:	4692      	mov	sl, r2
 80090aa:	eb19 0005 	adds.w	r0, r9, r5
 80090ae:	eb4a 0106 	adc.w	r1, sl, r6
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	461d      	mov	r5, r3
 80090b8:	f04f 0600 	mov.w	r6, #0
 80090bc:	196b      	adds	r3, r5, r5
 80090be:	eb46 0406 	adc.w	r4, r6, r6
 80090c2:	461a      	mov	r2, r3
 80090c4:	4623      	mov	r3, r4
 80090c6:	f7f7 fd97 	bl	8000bf8 <__aeabi_uldivmod>
 80090ca:	4603      	mov	r3, r0
 80090cc:	460c      	mov	r4, r1
 80090ce:	461a      	mov	r2, r3
 80090d0:	4b6a      	ldr	r3, [pc, #424]	; (800927c <UART_SetConfig+0x384>)
 80090d2:	fba3 1302 	umull	r1, r3, r3, r2
 80090d6:	095b      	lsrs	r3, r3, #5
 80090d8:	2164      	movs	r1, #100	; 0x64
 80090da:	fb01 f303 	mul.w	r3, r1, r3
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	3332      	adds	r3, #50	; 0x32
 80090e4:	4a65      	ldr	r2, [pc, #404]	; (800927c <UART_SetConfig+0x384>)
 80090e6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ea:	095b      	lsrs	r3, r3, #5
 80090ec:	f003 0207 	and.w	r2, r3, #7
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4442      	add	r2, r8
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	e26f      	b.n	80095da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090fa:	f7fe fb35 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 80090fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	461d      	mov	r5, r3
 8009104:	f04f 0600 	mov.w	r6, #0
 8009108:	46a8      	mov	r8, r5
 800910a:	46b1      	mov	r9, r6
 800910c:	eb18 0308 	adds.w	r3, r8, r8
 8009110:	eb49 0409 	adc.w	r4, r9, r9
 8009114:	4698      	mov	r8, r3
 8009116:	46a1      	mov	r9, r4
 8009118:	eb18 0805 	adds.w	r8, r8, r5
 800911c:	eb49 0906 	adc.w	r9, r9, r6
 8009120:	f04f 0100 	mov.w	r1, #0
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800912c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009130:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009134:	4688      	mov	r8, r1
 8009136:	4691      	mov	r9, r2
 8009138:	eb18 0005 	adds.w	r0, r8, r5
 800913c:	eb49 0106 	adc.w	r1, r9, r6
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	461d      	mov	r5, r3
 8009146:	f04f 0600 	mov.w	r6, #0
 800914a:	196b      	adds	r3, r5, r5
 800914c:	eb46 0406 	adc.w	r4, r6, r6
 8009150:	461a      	mov	r2, r3
 8009152:	4623      	mov	r3, r4
 8009154:	f7f7 fd50 	bl	8000bf8 <__aeabi_uldivmod>
 8009158:	4603      	mov	r3, r0
 800915a:	460c      	mov	r4, r1
 800915c:	461a      	mov	r2, r3
 800915e:	4b47      	ldr	r3, [pc, #284]	; (800927c <UART_SetConfig+0x384>)
 8009160:	fba3 2302 	umull	r2, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	461d      	mov	r5, r3
 800916e:	f04f 0600 	mov.w	r6, #0
 8009172:	46a9      	mov	r9, r5
 8009174:	46b2      	mov	sl, r6
 8009176:	eb19 0309 	adds.w	r3, r9, r9
 800917a:	eb4a 040a 	adc.w	r4, sl, sl
 800917e:	4699      	mov	r9, r3
 8009180:	46a2      	mov	sl, r4
 8009182:	eb19 0905 	adds.w	r9, r9, r5
 8009186:	eb4a 0a06 	adc.w	sl, sl, r6
 800918a:	f04f 0100 	mov.w	r1, #0
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800919a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800919e:	4689      	mov	r9, r1
 80091a0:	4692      	mov	sl, r2
 80091a2:	eb19 0005 	adds.w	r0, r9, r5
 80091a6:	eb4a 0106 	adc.w	r1, sl, r6
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	461d      	mov	r5, r3
 80091b0:	f04f 0600 	mov.w	r6, #0
 80091b4:	196b      	adds	r3, r5, r5
 80091b6:	eb46 0406 	adc.w	r4, r6, r6
 80091ba:	461a      	mov	r2, r3
 80091bc:	4623      	mov	r3, r4
 80091be:	f7f7 fd1b 	bl	8000bf8 <__aeabi_uldivmod>
 80091c2:	4603      	mov	r3, r0
 80091c4:	460c      	mov	r4, r1
 80091c6:	461a      	mov	r2, r3
 80091c8:	4b2c      	ldr	r3, [pc, #176]	; (800927c <UART_SetConfig+0x384>)
 80091ca:	fba3 1302 	umull	r1, r3, r3, r2
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	2164      	movs	r1, #100	; 0x64
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	3332      	adds	r3, #50	; 0x32
 80091dc:	4a27      	ldr	r2, [pc, #156]	; (800927c <UART_SetConfig+0x384>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091ea:	4498      	add	r8, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	461d      	mov	r5, r3
 80091f0:	f04f 0600 	mov.w	r6, #0
 80091f4:	46a9      	mov	r9, r5
 80091f6:	46b2      	mov	sl, r6
 80091f8:	eb19 0309 	adds.w	r3, r9, r9
 80091fc:	eb4a 040a 	adc.w	r4, sl, sl
 8009200:	4699      	mov	r9, r3
 8009202:	46a2      	mov	sl, r4
 8009204:	eb19 0905 	adds.w	r9, r9, r5
 8009208:	eb4a 0a06 	adc.w	sl, sl, r6
 800920c:	f04f 0100 	mov.w	r1, #0
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800921c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009220:	4689      	mov	r9, r1
 8009222:	4692      	mov	sl, r2
 8009224:	eb19 0005 	adds.w	r0, r9, r5
 8009228:	eb4a 0106 	adc.w	r1, sl, r6
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	461d      	mov	r5, r3
 8009232:	f04f 0600 	mov.w	r6, #0
 8009236:	196b      	adds	r3, r5, r5
 8009238:	eb46 0406 	adc.w	r4, r6, r6
 800923c:	461a      	mov	r2, r3
 800923e:	4623      	mov	r3, r4
 8009240:	f7f7 fcda 	bl	8000bf8 <__aeabi_uldivmod>
 8009244:	4603      	mov	r3, r0
 8009246:	460c      	mov	r4, r1
 8009248:	461a      	mov	r2, r3
 800924a:	4b0c      	ldr	r3, [pc, #48]	; (800927c <UART_SetConfig+0x384>)
 800924c:	fba3 1302 	umull	r1, r3, r3, r2
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	2164      	movs	r1, #100	; 0x64
 8009254:	fb01 f303 	mul.w	r3, r1, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	3332      	adds	r3, #50	; 0x32
 800925e:	4a07      	ldr	r2, [pc, #28]	; (800927c <UART_SetConfig+0x384>)
 8009260:	fba2 2303 	umull	r2, r3, r2, r3
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	f003 0207 	and.w	r2, r3, #7
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4442      	add	r2, r8
 8009270:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009272:	e1b2      	b.n	80095da <UART_SetConfig+0x6e2>
 8009274:	40011000 	.word	0x40011000
 8009278:	40011400 	.word	0x40011400
 800927c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4ad7      	ldr	r2, [pc, #860]	; (80095e4 <UART_SetConfig+0x6ec>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d005      	beq.n	8009296 <UART_SetConfig+0x39e>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4ad6      	ldr	r2, [pc, #856]	; (80095e8 <UART_SetConfig+0x6f0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	f040 80d1 	bne.w	8009438 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009296:	f7fe fa7b 	bl	8007790 <HAL_RCC_GetPCLK2Freq>
 800929a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	469a      	mov	sl, r3
 80092a0:	f04f 0b00 	mov.w	fp, #0
 80092a4:	46d0      	mov	r8, sl
 80092a6:	46d9      	mov	r9, fp
 80092a8:	eb18 0308 	adds.w	r3, r8, r8
 80092ac:	eb49 0409 	adc.w	r4, r9, r9
 80092b0:	4698      	mov	r8, r3
 80092b2:	46a1      	mov	r9, r4
 80092b4:	eb18 080a 	adds.w	r8, r8, sl
 80092b8:	eb49 090b 	adc.w	r9, r9, fp
 80092bc:	f04f 0100 	mov.w	r1, #0
 80092c0:	f04f 0200 	mov.w	r2, #0
 80092c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092d0:	4688      	mov	r8, r1
 80092d2:	4691      	mov	r9, r2
 80092d4:	eb1a 0508 	adds.w	r5, sl, r8
 80092d8:	eb4b 0609 	adc.w	r6, fp, r9
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	4619      	mov	r1, r3
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	f04f 0400 	mov.w	r4, #0
 80092ee:	0094      	lsls	r4, r2, #2
 80092f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092f4:	008b      	lsls	r3, r1, #2
 80092f6:	461a      	mov	r2, r3
 80092f8:	4623      	mov	r3, r4
 80092fa:	4628      	mov	r0, r5
 80092fc:	4631      	mov	r1, r6
 80092fe:	f7f7 fc7b 	bl	8000bf8 <__aeabi_uldivmod>
 8009302:	4603      	mov	r3, r0
 8009304:	460c      	mov	r4, r1
 8009306:	461a      	mov	r2, r3
 8009308:	4bb8      	ldr	r3, [pc, #736]	; (80095ec <UART_SetConfig+0x6f4>)
 800930a:	fba3 2302 	umull	r2, r3, r3, r2
 800930e:	095b      	lsrs	r3, r3, #5
 8009310:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	469b      	mov	fp, r3
 8009318:	f04f 0c00 	mov.w	ip, #0
 800931c:	46d9      	mov	r9, fp
 800931e:	46e2      	mov	sl, ip
 8009320:	eb19 0309 	adds.w	r3, r9, r9
 8009324:	eb4a 040a 	adc.w	r4, sl, sl
 8009328:	4699      	mov	r9, r3
 800932a:	46a2      	mov	sl, r4
 800932c:	eb19 090b 	adds.w	r9, r9, fp
 8009330:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009334:	f04f 0100 	mov.w	r1, #0
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009340:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009344:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009348:	4689      	mov	r9, r1
 800934a:	4692      	mov	sl, r2
 800934c:	eb1b 0509 	adds.w	r5, fp, r9
 8009350:	eb4c 060a 	adc.w	r6, ip, sl
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4619      	mov	r1, r3
 800935a:	f04f 0200 	mov.w	r2, #0
 800935e:	f04f 0300 	mov.w	r3, #0
 8009362:	f04f 0400 	mov.w	r4, #0
 8009366:	0094      	lsls	r4, r2, #2
 8009368:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800936c:	008b      	lsls	r3, r1, #2
 800936e:	461a      	mov	r2, r3
 8009370:	4623      	mov	r3, r4
 8009372:	4628      	mov	r0, r5
 8009374:	4631      	mov	r1, r6
 8009376:	f7f7 fc3f 	bl	8000bf8 <__aeabi_uldivmod>
 800937a:	4603      	mov	r3, r0
 800937c:	460c      	mov	r4, r1
 800937e:	461a      	mov	r2, r3
 8009380:	4b9a      	ldr	r3, [pc, #616]	; (80095ec <UART_SetConfig+0x6f4>)
 8009382:	fba3 1302 	umull	r1, r3, r3, r2
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	2164      	movs	r1, #100	; 0x64
 800938a:	fb01 f303 	mul.w	r3, r1, r3
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	3332      	adds	r3, #50	; 0x32
 8009394:	4a95      	ldr	r2, [pc, #596]	; (80095ec <UART_SetConfig+0x6f4>)
 8009396:	fba2 2303 	umull	r2, r3, r2, r3
 800939a:	095b      	lsrs	r3, r3, #5
 800939c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093a0:	4498      	add	r8, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	469b      	mov	fp, r3
 80093a6:	f04f 0c00 	mov.w	ip, #0
 80093aa:	46d9      	mov	r9, fp
 80093ac:	46e2      	mov	sl, ip
 80093ae:	eb19 0309 	adds.w	r3, r9, r9
 80093b2:	eb4a 040a 	adc.w	r4, sl, sl
 80093b6:	4699      	mov	r9, r3
 80093b8:	46a2      	mov	sl, r4
 80093ba:	eb19 090b 	adds.w	r9, r9, fp
 80093be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093c2:	f04f 0100 	mov.w	r1, #0
 80093c6:	f04f 0200 	mov.w	r2, #0
 80093ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093d6:	4689      	mov	r9, r1
 80093d8:	4692      	mov	sl, r2
 80093da:	eb1b 0509 	adds.w	r5, fp, r9
 80093de:	eb4c 060a 	adc.w	r6, ip, sl
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4619      	mov	r1, r3
 80093e8:	f04f 0200 	mov.w	r2, #0
 80093ec:	f04f 0300 	mov.w	r3, #0
 80093f0:	f04f 0400 	mov.w	r4, #0
 80093f4:	0094      	lsls	r4, r2, #2
 80093f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093fa:	008b      	lsls	r3, r1, #2
 80093fc:	461a      	mov	r2, r3
 80093fe:	4623      	mov	r3, r4
 8009400:	4628      	mov	r0, r5
 8009402:	4631      	mov	r1, r6
 8009404:	f7f7 fbf8 	bl	8000bf8 <__aeabi_uldivmod>
 8009408:	4603      	mov	r3, r0
 800940a:	460c      	mov	r4, r1
 800940c:	461a      	mov	r2, r3
 800940e:	4b77      	ldr	r3, [pc, #476]	; (80095ec <UART_SetConfig+0x6f4>)
 8009410:	fba3 1302 	umull	r1, r3, r3, r2
 8009414:	095b      	lsrs	r3, r3, #5
 8009416:	2164      	movs	r1, #100	; 0x64
 8009418:	fb01 f303 	mul.w	r3, r1, r3
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	3332      	adds	r3, #50	; 0x32
 8009422:	4a72      	ldr	r2, [pc, #456]	; (80095ec <UART_SetConfig+0x6f4>)
 8009424:	fba2 2303 	umull	r2, r3, r2, r3
 8009428:	095b      	lsrs	r3, r3, #5
 800942a:	f003 020f 	and.w	r2, r3, #15
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4442      	add	r2, r8
 8009434:	609a      	str	r2, [r3, #8]
 8009436:	e0d0      	b.n	80095da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009438:	f7fe f996 	bl	8007768 <HAL_RCC_GetPCLK1Freq>
 800943c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	469a      	mov	sl, r3
 8009442:	f04f 0b00 	mov.w	fp, #0
 8009446:	46d0      	mov	r8, sl
 8009448:	46d9      	mov	r9, fp
 800944a:	eb18 0308 	adds.w	r3, r8, r8
 800944e:	eb49 0409 	adc.w	r4, r9, r9
 8009452:	4698      	mov	r8, r3
 8009454:	46a1      	mov	r9, r4
 8009456:	eb18 080a 	adds.w	r8, r8, sl
 800945a:	eb49 090b 	adc.w	r9, r9, fp
 800945e:	f04f 0100 	mov.w	r1, #0
 8009462:	f04f 0200 	mov.w	r2, #0
 8009466:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800946a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800946e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009472:	4688      	mov	r8, r1
 8009474:	4691      	mov	r9, r2
 8009476:	eb1a 0508 	adds.w	r5, sl, r8
 800947a:	eb4b 0609 	adc.w	r6, fp, r9
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	4619      	mov	r1, r3
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	f04f 0400 	mov.w	r4, #0
 8009490:	0094      	lsls	r4, r2, #2
 8009492:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009496:	008b      	lsls	r3, r1, #2
 8009498:	461a      	mov	r2, r3
 800949a:	4623      	mov	r3, r4
 800949c:	4628      	mov	r0, r5
 800949e:	4631      	mov	r1, r6
 80094a0:	f7f7 fbaa 	bl	8000bf8 <__aeabi_uldivmod>
 80094a4:	4603      	mov	r3, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	461a      	mov	r2, r3
 80094aa:	4b50      	ldr	r3, [pc, #320]	; (80095ec <UART_SetConfig+0x6f4>)
 80094ac:	fba3 2302 	umull	r2, r3, r3, r2
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	469b      	mov	fp, r3
 80094ba:	f04f 0c00 	mov.w	ip, #0
 80094be:	46d9      	mov	r9, fp
 80094c0:	46e2      	mov	sl, ip
 80094c2:	eb19 0309 	adds.w	r3, r9, r9
 80094c6:	eb4a 040a 	adc.w	r4, sl, sl
 80094ca:	4699      	mov	r9, r3
 80094cc:	46a2      	mov	sl, r4
 80094ce:	eb19 090b 	adds.w	r9, r9, fp
 80094d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094d6:	f04f 0100 	mov.w	r1, #0
 80094da:	f04f 0200 	mov.w	r2, #0
 80094de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094ea:	4689      	mov	r9, r1
 80094ec:	4692      	mov	sl, r2
 80094ee:	eb1b 0509 	adds.w	r5, fp, r9
 80094f2:	eb4c 060a 	adc.w	r6, ip, sl
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	4619      	mov	r1, r3
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	f04f 0300 	mov.w	r3, #0
 8009504:	f04f 0400 	mov.w	r4, #0
 8009508:	0094      	lsls	r4, r2, #2
 800950a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800950e:	008b      	lsls	r3, r1, #2
 8009510:	461a      	mov	r2, r3
 8009512:	4623      	mov	r3, r4
 8009514:	4628      	mov	r0, r5
 8009516:	4631      	mov	r1, r6
 8009518:	f7f7 fb6e 	bl	8000bf8 <__aeabi_uldivmod>
 800951c:	4603      	mov	r3, r0
 800951e:	460c      	mov	r4, r1
 8009520:	461a      	mov	r2, r3
 8009522:	4b32      	ldr	r3, [pc, #200]	; (80095ec <UART_SetConfig+0x6f4>)
 8009524:	fba3 1302 	umull	r1, r3, r3, r2
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	2164      	movs	r1, #100	; 0x64
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	011b      	lsls	r3, r3, #4
 8009534:	3332      	adds	r3, #50	; 0x32
 8009536:	4a2d      	ldr	r2, [pc, #180]	; (80095ec <UART_SetConfig+0x6f4>)
 8009538:	fba2 2303 	umull	r2, r3, r2, r3
 800953c:	095b      	lsrs	r3, r3, #5
 800953e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009542:	4498      	add	r8, r3
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	469b      	mov	fp, r3
 8009548:	f04f 0c00 	mov.w	ip, #0
 800954c:	46d9      	mov	r9, fp
 800954e:	46e2      	mov	sl, ip
 8009550:	eb19 0309 	adds.w	r3, r9, r9
 8009554:	eb4a 040a 	adc.w	r4, sl, sl
 8009558:	4699      	mov	r9, r3
 800955a:	46a2      	mov	sl, r4
 800955c:	eb19 090b 	adds.w	r9, r9, fp
 8009560:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009564:	f04f 0100 	mov.w	r1, #0
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009578:	4689      	mov	r9, r1
 800957a:	4692      	mov	sl, r2
 800957c:	eb1b 0509 	adds.w	r5, fp, r9
 8009580:	eb4c 060a 	adc.w	r6, ip, sl
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4619      	mov	r1, r3
 800958a:	f04f 0200 	mov.w	r2, #0
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	f04f 0400 	mov.w	r4, #0
 8009596:	0094      	lsls	r4, r2, #2
 8009598:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800959c:	008b      	lsls	r3, r1, #2
 800959e:	461a      	mov	r2, r3
 80095a0:	4623      	mov	r3, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	4631      	mov	r1, r6
 80095a6:	f7f7 fb27 	bl	8000bf8 <__aeabi_uldivmod>
 80095aa:	4603      	mov	r3, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	461a      	mov	r2, r3
 80095b0:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <UART_SetConfig+0x6f4>)
 80095b2:	fba3 1302 	umull	r1, r3, r3, r2
 80095b6:	095b      	lsrs	r3, r3, #5
 80095b8:	2164      	movs	r1, #100	; 0x64
 80095ba:	fb01 f303 	mul.w	r3, r1, r3
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	3332      	adds	r3, #50	; 0x32
 80095c4:	4a09      	ldr	r2, [pc, #36]	; (80095ec <UART_SetConfig+0x6f4>)
 80095c6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	f003 020f 	and.w	r2, r3, #15
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4442      	add	r2, r8
 80095d6:	609a      	str	r2, [r3, #8]
}
 80095d8:	e7ff      	b.n	80095da <UART_SetConfig+0x6e2>
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	40011000 	.word	0x40011000
 80095e8:	40011400 	.word	0x40011400
 80095ec:	51eb851f 	.word	0x51eb851f

080095f0 <MQTT_Open_Connect>:

#include "Middleware.h"

/* MQTT Open Contact */
response_t MQTT_Open_Connect(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
	g_flag = RESPONSE_ERR;
 80095f4:	4b1e      	ldr	r3, [pc, #120]	; (8009670 <MQTT_Open_Connect+0x80>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	701a      	strb	r2, [r3, #0]
	/* Wait to open network port 8883 */
	while(g_flag == RESPONSE_ERR)
 80095fa:	e009      	b.n	8009610 <MQTT_Open_Connect+0x20>
	{
			#if TEST_MQTT_SSL == 1
			g_flag = MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 8883);
 80095fc:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8009600:	491c      	ldr	r1, [pc, #112]	; (8009674 <MQTT_Open_Connect+0x84>)
 8009602:	2000      	movs	r0, #0
 8009604:	f7f8 fd8c 	bl	8002120 <MQTT_Open>
 8009608:	4603      	mov	r3, r0
 800960a:	461a      	mov	r2, r3
 800960c:	4b18      	ldr	r3, [pc, #96]	; (8009670 <MQTT_Open_Connect+0x80>)
 800960e:	701a      	strb	r2, [r3, #0]
	while(g_flag == RESPONSE_ERR)
 8009610:	4b17      	ldr	r3, [pc, #92]	; (8009670 <MQTT_Open_Connect+0x80>)
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d0f1      	beq.n	80095fc <MQTT_Open_Connect+0xc>
			#else
			g_flag = MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 1883);
			#endif
	}
	g_mqtt_isOn = ON;
 8009618:	4b17      	ldr	r3, [pc, #92]	; (8009678 <MQTT_Open_Connect+0x88>)
 800961a:	2201      	movs	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]

	/* Wait to connect to broker*/
	g_flag = RESPONSE_ERR;
 800961e:	4b14      	ldr	r3, [pc, #80]	; (8009670 <MQTT_Open_Connect+0x80>)
 8009620:	2200      	movs	r2, #0
 8009622:	701a      	strb	r2, [r3, #0]
	g_flag = MQTT_Connect(0, (uint8_t*)"quang", (uint8_t*)"qn052289@gmail.com", (uint8_t*)"182739");
 8009624:	4b15      	ldr	r3, [pc, #84]	; (800967c <MQTT_Open_Connect+0x8c>)
 8009626:	4a16      	ldr	r2, [pc, #88]	; (8009680 <MQTT_Open_Connect+0x90>)
 8009628:	4916      	ldr	r1, [pc, #88]	; (8009684 <MQTT_Open_Connect+0x94>)
 800962a:	2000      	movs	r0, #0
 800962c:	f7f8 fe3c 	bl	80022a8 <MQTT_Connect>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <MQTT_Open_Connect+0x80>)
 8009636:	701a      	strb	r2, [r3, #0]
	while(g_flag != RESPONSE_OK)
 8009638:	e00f      	b.n	800965a <MQTT_Open_Connect+0x6a>
	{
			/* Reopen network and reconnect */
			#if TEST_MQTT_SSL == 1
			MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 8883);
 800963a:	f242 22b3 	movw	r2, #8883	; 0x22b3
 800963e:	490d      	ldr	r1, [pc, #52]	; (8009674 <MQTT_Open_Connect+0x84>)
 8009640:	2000      	movs	r0, #0
 8009642:	f7f8 fd6d 	bl	8002120 <MQTT_Open>
			#else
			MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 1883);
			#endif
			g_flag = MQTT_Connect(0, (uint8_t*)"quang", (uint8_t*)"qn052289@gmail.com", (uint8_t*)"182739");
 8009646:	4b0d      	ldr	r3, [pc, #52]	; (800967c <MQTT_Open_Connect+0x8c>)
 8009648:	4a0d      	ldr	r2, [pc, #52]	; (8009680 <MQTT_Open_Connect+0x90>)
 800964a:	490e      	ldr	r1, [pc, #56]	; (8009684 <MQTT_Open_Connect+0x94>)
 800964c:	2000      	movs	r0, #0
 800964e:	f7f8 fe2b 	bl	80022a8 <MQTT_Connect>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	4b06      	ldr	r3, [pc, #24]	; (8009670 <MQTT_Open_Connect+0x80>)
 8009658:	701a      	strb	r2, [r3, #0]
	while(g_flag != RESPONSE_OK)
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <MQTT_Open_Connect+0x80>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b01      	cmp	r3, #1
 8009660:	d1eb      	bne.n	800963a <MQTT_Open_Connect+0x4a>
	}
	g_flag = RESPONSE_ERR;
 8009662:	4b03      	ldr	r3, [pc, #12]	; (8009670 <MQTT_Open_Connect+0x80>)
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
	return RESPONSE_OK;
 8009668:	2301      	movs	r3, #1
}
 800966a:	4618      	mov	r0, r3
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2000063e 	.word	0x2000063e
 8009674:	0800e4d8 	.word	0x0800e4d8
 8009678:	20000844 	.word	0x20000844
 800967c:	0800e4ec 	.word	0x0800e4ec
 8009680:	0800e4f4 	.word	0x0800e4f4
 8009684:	0800e508 	.word	0x0800e508

08009688 <LTE_Disable>:
static void Convert_U8_To_Str(char* res, uint8_t inputValue);
static void Write_Read_Pub(void);
extern void SystemClock_Config(void);

static void LTE_Disable(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
	/* Set the pin to disable the the LTE power */
	HAL_GPIO_WritePin(PWR_EN_PORT, PWR_EN_PIN, GPIO_PIN_SET);
 800968c:	2201      	movs	r2, #1
 800968e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009692:	4802      	ldr	r0, [pc, #8]	; (800969c <LTE_Disable+0x14>)
 8009694:	f7fc fc6c 	bl	8005f70 <HAL_GPIO_WritePin>
}
 8009698:	bf00      	nop
 800969a:	bd80      	pop	{r7, pc}
 800969c:	40020800 	.word	0x40020800

080096a0 <softUART_DeInit>:

static void softUART_DeInit(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(UART_EMUL_RX_PORT, UART_EMUL_RX_PIN);
 80096a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80096a8:	4802      	ldr	r0, [pc, #8]	; (80096b4 <softUART_DeInit+0x14>)
 80096aa:	f7fc fb7f 	bl	8005dac <HAL_GPIO_DeInit>
}
 80096ae:	bf00      	nop
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	40020000 	.word	0x40020000

080096b8 <softUART_ReInit>:


static void softUART_ReInit(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStruct;

	/* Configure GPIOC for UART Emulation Rx */
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80096be:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <softUART_ReInit+0x34>)
 80096c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin  = UART_EMUL_RX_PIN;
 80096c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80096c6:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(UART_EMUL_RX_PORT, &GPIO_InitStruct);
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	4619      	mov	r1, r3
 80096cc:	4808      	ldr	r0, [pc, #32]	; (80096f0 <softUART_ReInit+0x38>)
 80096ce:	f7fc f9eb 	bl	8005aa8 <HAL_GPIO_Init>

	/*##-2- Enable NVIC for line Rx  #################################*/
	/* Enable and set EXTI Line Interrupt to the highest priority */
	HAL_NVIC_SetPriority(UART_EMUL_EXTI_IRQ, 0, 0);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	2028      	movs	r0, #40	; 0x28
 80096d8:	f7fc f82f 	bl	800573a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_EMUL_EXTI_IRQ);
 80096dc:	2028      	movs	r0, #40	; 0x28
 80096de:	f7fc f848 	bl	8005772 <HAL_NVIC_EnableIRQ>
}
 80096e2:	bf00      	nop
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	10210000 	.word	0x10210000
 80096f0:	40020000 	.word	0x40020000

080096f4 <MQTT_Config>:


static void MQTT_Config(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
	/* Config the MQTT */
	MQTT_Recv_Mode(0, 0, 1);
 80096f8:	2201      	movs	r2, #1
 80096fa:	2100      	movs	r1, #0
 80096fc:	2000      	movs	r0, #0
 80096fe:	f7f8 fc9b 	bl	8002038 <MQTT_Recv_Mode>
	MQTT_Session(0, 0);
 8009702:	2100      	movs	r1, #0
 8009704:	2000      	movs	r0, #0
 8009706:	f7f8 fcd3 	bl	80020b0 <MQTT_Session>

	/*Connect with SSL*/
	MQTT_SSL_Mode(0, 1, 0);
 800970a:	2200      	movs	r2, #0
 800970c:	2101      	movs	r1, #1
 800970e:	2000      	movs	r0, #0
 8009710:	f7f8 ff26 	bl	8002560 <MQTT_SSL_Mode>
	MQTT_SSL_Certificate(0);
 8009714:	2000      	movs	r0, #0
 8009716:	f7f8 ff5f 	bl	80025d8 <MQTT_SSL_Certificate>
	MQTT_SSL_Level(0, 0);
 800971a:	2100      	movs	r1, #0
 800971c:	2000      	movs	r0, #0
 800971e:	f7f8 ffcb 	bl	80026b8 <MQTT_SSL_Level>
	MQTT_SSL_Version(0, 4);
 8009722:	2104      	movs	r1, #4
 8009724:	2000      	movs	r0, #0
 8009726:	f7f8 ffff 	bl	8002728 <MQTT_SSL_Version>
	MQTT_SSL_Ciphersuite(0, (uint8_t*)"0xFFFF");
 800972a:	4905      	ldr	r1, [pc, #20]	; (8009740 <MQTT_Config+0x4c>)
 800972c:	2000      	movs	r0, #0
 800972e:	f7f9 f833 	bl	8002798 <MQTT_SSL_Ciphersuite>
	MQTT_SSL_Ignore(0, 1);
 8009732:	2101      	movs	r1, #1
 8009734:	2000      	movs	r0, #0
 8009736:	f7f9 f865 	bl	8002804 <MQTT_SSL_Ignore>
}
 800973a:	bf00      	nop
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	0800e510 	.word	0x0800e510

08009744 <Flash_Init>:

static void Flash_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
	Log_Info((uint8_t*)"Inited Flash\n", 13);
 8009748:	210d      	movs	r1, #13
 800974a:	4804      	ldr	r0, [pc, #16]	; (800975c <Flash_Init+0x18>)
 800974c:	f7f8 f974 	bl	8001a38 <Log_Info>
	W25Q16_Init();
 8009750:	f7f8 fa6a 	bl	8001c28 <W25Q16_Init>
	W25Q16_Erase_Chip();
 8009754:	f7f8 fb02 	bl	8001d5c <W25Q16_Erase_Chip>
}
 8009758:	bf00      	nop
 800975a:	bd80      	pop	{r7, pc}
 800975c:	0800e518 	.word	0x0800e518

08009760 <Convert_U8_To_Str>:

static void Convert_U8_To_Str(char* res, uint8_t inputValue)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
    if(inputValue < 10)
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	2b09      	cmp	r3, #9
 8009770:	d80a      	bhi.n	8009788 <Convert_U8_To_Str+0x28>
		{
		    res[0] = '0';
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2230      	movs	r2, #48	; 0x30
 8009776:	701a      	strb	r2, [r3, #0]
			  sprintf(&res[1], "%d", inputValue);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3301      	adds	r3, #1
 800977c:	78fa      	ldrb	r2, [r7, #3]
 800977e:	4907      	ldr	r1, [pc, #28]	; (800979c <Convert_U8_To_Str+0x3c>)
 8009780:	4618      	mov	r0, r3
 8009782:	f000 ff93 	bl	800a6ac <siprintf>
		}
		else sprintf(res, "%d", inputValue);
}
 8009786:	e005      	b.n	8009794 <Convert_U8_To_Str+0x34>
		else sprintf(res, "%d", inputValue);
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	461a      	mov	r2, r3
 800978c:	4903      	ldr	r1, [pc, #12]	; (800979c <Convert_U8_To_Str+0x3c>)
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 ff8c 	bl	800a6ac <siprintf>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	0800e528 	.word	0x0800e528

080097a0 <Write_Read_Pub>:

static void Write_Read_Pub(void)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af04      	add	r7, sp, #16
		/*Test Write, Read Flash and pub data to Broker using Union*/
		W25Q16_Erase_Sector(0);
 80097a6:	2000      	movs	r0, #0
 80097a8:	f7f8 fb08 	bl	8001dbc <W25Q16_Erase_Sector>

		/* Set data to write into flash */
		g_gps_data.long_t.dLongRaw = g_test_L76.dLongtitude;
 80097ac:	4b68      	ldr	r3, [pc, #416]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097b2:	4a68      	ldr	r2, [pc, #416]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097b4:	e9c2 3400 	strd	r3, r4, [r2]
		g_gps_data.lat_t.dLatRaw = g_test_L76.dLattitude;
 80097b8:	4b65      	ldr	r3, [pc, #404]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097ba:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80097be:	4a65      	ldr	r2, [pc, #404]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
		g_gps_data.u8Day = g_test_L76.u8Day;
 80097c4:	4b62      	ldr	r3, [pc, #392]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097c6:	7c1a      	ldrb	r2, [r3, #16]
 80097c8:	4b62      	ldr	r3, [pc, #392]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097ca:	741a      	strb	r2, [r3, #16]
		g_gps_data.u8Month = g_test_L76.u8Month;
 80097cc:	4b60      	ldr	r3, [pc, #384]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097ce:	7c5a      	ldrb	r2, [r3, #17]
 80097d0:	4b60      	ldr	r3, [pc, #384]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097d2:	745a      	strb	r2, [r3, #17]
		g_gps_data.u8Year  = g_year;
 80097d4:	4b60      	ldr	r3, [pc, #384]	; (8009958 <Write_Read_Pub+0x1b8>)
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	4b5e      	ldr	r3, [pc, #376]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097da:	749a      	strb	r2, [r3, #18]
		g_gps_data.u8Hour = g_test_L76.u8Hour;
 80097dc:	4b5c      	ldr	r3, [pc, #368]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097de:	7cda      	ldrb	r2, [r3, #19]
 80097e0:	4b5c      	ldr	r3, [pc, #368]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097e2:	74da      	strb	r2, [r3, #19]
		g_gps_data.u8Minute = g_test_L76.u8Minute;
 80097e4:	4b5a      	ldr	r3, [pc, #360]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097e6:	7d1a      	ldrb	r2, [r3, #20]
 80097e8:	4b5a      	ldr	r3, [pc, #360]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097ea:	751a      	strb	r2, [r3, #20]
		g_gps_data.u8Second = g_test_L76.u8Second;
 80097ec:	4b58      	ldr	r3, [pc, #352]	; (8009950 <Write_Read_Pub+0x1b0>)
 80097ee:	7d5a      	ldrb	r2, [r3, #21]
 80097f0:	4b58      	ldr	r3, [pc, #352]	; (8009954 <Write_Read_Pub+0x1b4>)
 80097f2:	755a      	strb	r2, [r3, #21]

		Log_Info((uint8_t*)"Write Data\n", 11);
 80097f4:	210b      	movs	r1, #11
 80097f6:	4859      	ldr	r0, [pc, #356]	; (800995c <Write_Read_Pub+0x1bc>)
 80097f8:	f7f8 f91e 	bl	8001a38 <Log_Info>
		for(uint8_t i = 0; i < 8; i++)
 80097fc:	2300      	movs	r3, #0
 80097fe:	71fb      	strb	r3, [r7, #7]
 8009800:	e008      	b.n	8009814 <Write_Read_Pub+0x74>
		{
				g_write_buffer[i] = g_gps_data.long_t.longBytes[i];
 8009802:	79fa      	ldrb	r2, [r7, #7]
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	4953      	ldr	r1, [pc, #332]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009808:	5c89      	ldrb	r1, [r1, r2]
 800980a:	4a55      	ldr	r2, [pc, #340]	; (8009960 <Write_Read_Pub+0x1c0>)
 800980c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	3301      	adds	r3, #1
 8009812:	71fb      	strb	r3, [r7, #7]
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b07      	cmp	r3, #7
 8009818:	d9f3      	bls.n	8009802 <Write_Read_Pub+0x62>
		}
		for(uint8_t i = 8; i < 16; i++)
 800981a:	2308      	movs	r3, #8
 800981c:	71bb      	strb	r3, [r7, #6]
 800981e:	e00b      	b.n	8009838 <Write_Read_Pub+0x98>
		{
				g_write_buffer[i] = g_gps_data.lat_t.latBytes[i - 8];
 8009820:	79bb      	ldrb	r3, [r7, #6]
 8009822:	f1a3 0208 	sub.w	r2, r3, #8
 8009826:	79bb      	ldrb	r3, [r7, #6]
 8009828:	494a      	ldr	r1, [pc, #296]	; (8009954 <Write_Read_Pub+0x1b4>)
 800982a:	440a      	add	r2, r1
 800982c:	7a11      	ldrb	r1, [r2, #8]
 800982e:	4a4c      	ldr	r2, [pc, #304]	; (8009960 <Write_Read_Pub+0x1c0>)
 8009830:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 8; i < 16; i++)
 8009832:	79bb      	ldrb	r3, [r7, #6]
 8009834:	3301      	adds	r3, #1
 8009836:	71bb      	strb	r3, [r7, #6]
 8009838:	79bb      	ldrb	r3, [r7, #6]
 800983a:	2b0f      	cmp	r3, #15
 800983c:	d9f0      	bls.n	8009820 <Write_Read_Pub+0x80>
		}
		g_write_buffer[16] = g_gps_data.u8Day;
 800983e:	4b45      	ldr	r3, [pc, #276]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009840:	7c1a      	ldrb	r2, [r3, #16]
 8009842:	4b47      	ldr	r3, [pc, #284]	; (8009960 <Write_Read_Pub+0x1c0>)
 8009844:	741a      	strb	r2, [r3, #16]
		g_write_buffer[17] = g_gps_data.u8Month;
 8009846:	4b43      	ldr	r3, [pc, #268]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009848:	7c5a      	ldrb	r2, [r3, #17]
 800984a:	4b45      	ldr	r3, [pc, #276]	; (8009960 <Write_Read_Pub+0x1c0>)
 800984c:	745a      	strb	r2, [r3, #17]
		g_write_buffer[18] = g_gps_data.u8Year;
 800984e:	4b41      	ldr	r3, [pc, #260]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009850:	7c9a      	ldrb	r2, [r3, #18]
 8009852:	4b43      	ldr	r3, [pc, #268]	; (8009960 <Write_Read_Pub+0x1c0>)
 8009854:	749a      	strb	r2, [r3, #18]
		g_write_buffer[19] = g_gps_data.u8Hour;
 8009856:	4b3f      	ldr	r3, [pc, #252]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009858:	7cda      	ldrb	r2, [r3, #19]
 800985a:	4b41      	ldr	r3, [pc, #260]	; (8009960 <Write_Read_Pub+0x1c0>)
 800985c:	74da      	strb	r2, [r3, #19]
		g_write_buffer[20] = g_gps_data.u8Minute;
 800985e:	4b3d      	ldr	r3, [pc, #244]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009860:	7d1a      	ldrb	r2, [r3, #20]
 8009862:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <Write_Read_Pub+0x1c0>)
 8009864:	751a      	strb	r2, [r3, #20]
		g_write_buffer[21] = g_gps_data.u8Second;
 8009866:	4b3b      	ldr	r3, [pc, #236]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009868:	7d5a      	ldrb	r2, [r3, #21]
 800986a:	4b3d      	ldr	r3, [pc, #244]	; (8009960 <Write_Read_Pub+0x1c0>)
 800986c:	755a      	strb	r2, [r3, #21]

		W25Q16_WritePage(g_write_buffer, 0, 0x00, 22);
 800986e:	2316      	movs	r3, #22
 8009870:	2200      	movs	r2, #0
 8009872:	2100      	movs	r1, #0
 8009874:	483a      	ldr	r0, [pc, #232]	; (8009960 <Write_Read_Pub+0x1c0>)
 8009876:	f7f8 faf1 	bl	8001e5c <W25Q16_WritePage>

		HAL_Delay(500);
 800987a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800987e:	f7fb fe3f 	bl	8005500 <HAL_Delay>
		Log_Info((uint8_t*)"ReadSomeByte\n", 13);
 8009882:	210d      	movs	r1, #13
 8009884:	4837      	ldr	r0, [pc, #220]	; (8009964 <Write_Read_Pub+0x1c4>)
 8009886:	f7f8 f8d7 	bl	8001a38 <Log_Info>
		W25Q16_ReadSomeBytes(g_read_buffer, 0x00, 22);
 800988a:	2216      	movs	r2, #22
 800988c:	2100      	movs	r1, #0
 800988e:	4836      	ldr	r0, [pc, #216]	; (8009968 <Write_Read_Pub+0x1c8>)
 8009890:	f7f8 fb50 	bl	8001f34 <W25Q16_ReadSomeBytes>
		/*Publish Raw data*/

		/*Test send string type to MQTT*/
		HAL_Delay(500);
 8009894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009898:	f7fb fe32 	bl	8005500 <HAL_Delay>
		//clear data of gps variables
		g_gps_data.long_t.dLongRaw = 0;
 800989c:	4a2d      	ldr	r2, [pc, #180]	; (8009954 <Write_Read_Pub+0x1b4>)
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	f04f 0400 	mov.w	r4, #0
 80098a6:	e9c2 3400 	strd	r3, r4, [r2]
		g_gps_data.lat_t.dLatRaw = 0;
 80098aa:	4a2a      	ldr	r2, [pc, #168]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098ac:	f04f 0300 	mov.w	r3, #0
 80098b0:	f04f 0400 	mov.w	r4, #0
 80098b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
		g_gps_data.u8Day = 0;
 80098b8:	4b26      	ldr	r3, [pc, #152]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	741a      	strb	r2, [r3, #16]
		g_gps_data.u8Month = 0;
 80098be:	4b25      	ldr	r3, [pc, #148]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	745a      	strb	r2, [r3, #17]
		g_gps_data.u8Year = 0;
 80098c4:	4b23      	ldr	r3, [pc, #140]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	749a      	strb	r2, [r3, #18]
		g_gps_data.u8Hour = 0;
 80098ca:	4b22      	ldr	r3, [pc, #136]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	74da      	strb	r2, [r3, #19]
		g_gps_data.u8Minute = 0;
 80098d0:	4b20      	ldr	r3, [pc, #128]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	751a      	strb	r2, [r3, #20]
		g_gps_data.u8Second = 0;
 80098d6:	4b1f      	ldr	r3, [pc, #124]	; (8009954 <Write_Read_Pub+0x1b4>)
 80098d8:	2200      	movs	r2, #0
 80098da:	755a      	strb	r2, [r3, #21]

		/*read and pub longitude*/
		memset(g_buff_send, '\0', 60); //clear buffer send
 80098dc:	223c      	movs	r2, #60	; 0x3c
 80098de:	2100      	movs	r1, #0
 80098e0:	4822      	ldr	r0, [pc, #136]	; (800996c <Write_Read_Pub+0x1cc>)
 80098e2:	f000 fa03 	bl	8009cec <memset>

		memset(g_buff_send_long_lat, '\0', 30); //clear buffer long_lat
 80098e6:	221e      	movs	r2, #30
 80098e8:	2100      	movs	r1, #0
 80098ea:	4821      	ldr	r0, [pc, #132]	; (8009970 <Write_Read_Pub+0x1d0>)
 80098ec:	f000 f9fe 	bl	8009cec <memset>
		for(uint8_t i = 0; i < 8; i++)
 80098f0:	2300      	movs	r3, #0
 80098f2:	717b      	strb	r3, [r7, #5]
 80098f4:	e008      	b.n	8009908 <Write_Read_Pub+0x168>
		{
				g_gps_data.long_t.longBytes[i] = g_read_buffer[i];
 80098f6:	797a      	ldrb	r2, [r7, #5]
 80098f8:	797b      	ldrb	r3, [r7, #5]
 80098fa:	491b      	ldr	r1, [pc, #108]	; (8009968 <Write_Read_Pub+0x1c8>)
 80098fc:	5c89      	ldrb	r1, [r1, r2]
 80098fe:	4a15      	ldr	r2, [pc, #84]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009900:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8009902:	797b      	ldrb	r3, [r7, #5]
 8009904:	3301      	adds	r3, #1
 8009906:	717b      	strb	r3, [r7, #5]
 8009908:	797b      	ldrb	r3, [r7, #5]
 800990a:	2b07      	cmp	r3, #7
 800990c:	d9f3      	bls.n	80098f6 <Write_Read_Pub+0x156>
		}

		sprintf(g_buff_send_long_lat,  "%lf", g_gps_data.long_t.dLongRaw);
 800990e:	4b11      	ldr	r3, [pc, #68]	; (8009954 <Write_Read_Pub+0x1b4>)
 8009910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009914:	461a      	mov	r2, r3
 8009916:	4623      	mov	r3, r4
 8009918:	4916      	ldr	r1, [pc, #88]	; (8009974 <Write_Read_Pub+0x1d4>)
 800991a:	4815      	ldr	r0, [pc, #84]	; (8009970 <Write_Read_Pub+0x1d0>)
 800991c:	f000 fec6 	bl	800a6ac <siprintf>
		strcat(g_buff_send, g_buff_send_long_lat);
 8009920:	4913      	ldr	r1, [pc, #76]	; (8009970 <Write_Read_Pub+0x1d0>)
 8009922:	4812      	ldr	r0, [pc, #72]	; (800996c <Write_Read_Pub+0x1cc>)
 8009924:	f000 fee2 	bl	800a6ec <strcat>
		strcat(g_buff_send, (const char*)",");
 8009928:	4810      	ldr	r0, [pc, #64]	; (800996c <Write_Read_Pub+0x1cc>)
 800992a:	f7f6 fc59 	bl	80001e0 <strlen>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	4b0e      	ldr	r3, [pc, #56]	; (800996c <Write_Read_Pub+0x1cc>)
 8009934:	4413      	add	r3, r2
 8009936:	4910      	ldr	r1, [pc, #64]	; (8009978 <Write_Read_Pub+0x1d8>)
 8009938:	461a      	mov	r2, r3
 800993a:	460b      	mov	r3, r1
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	8013      	strh	r3, [r2, #0]

		/*read and pub latitude*/
		memset(g_buff_send_long_lat, '\0', 30); //clear buffer long_lat
 8009940:	221e      	movs	r2, #30
 8009942:	2100      	movs	r1, #0
 8009944:	480a      	ldr	r0, [pc, #40]	; (8009970 <Write_Read_Pub+0x1d0>)
 8009946:	f000 f9d1 	bl	8009cec <memset>
		for(uint8_t i = 0; i < 8; i++)
 800994a:	2300      	movs	r3, #0
 800994c:	713b      	strb	r3, [r7, #4]
 800994e:	e022      	b.n	8009996 <Write_Read_Pub+0x1f6>
 8009950:	20000c48 	.word	0x20000c48
 8009954:	200005d0 	.word	0x200005d0
 8009958:	2000000a 	.word	0x2000000a
 800995c:	0800e52c 	.word	0x0800e52c
 8009960:	200003cc 	.word	0x200003cc
 8009964:	0800e538 	.word	0x0800e538
 8009968:	200004cc 	.word	0x200004cc
 800996c:	200005e8 	.word	0x200005e8
 8009970:	20000624 	.word	0x20000624
 8009974:	0800e548 	.word	0x0800e548
 8009978:	0800e54c 	.word	0x0800e54c
		{
				g_gps_data.lat_t.latBytes[i] = g_read_buffer[i+8];
 800997c:	793b      	ldrb	r3, [r7, #4]
 800997e:	f103 0208 	add.w	r2, r3, #8
 8009982:	793b      	ldrb	r3, [r7, #4]
 8009984:	495b      	ldr	r1, [pc, #364]	; (8009af4 <Write_Read_Pub+0x354>)
 8009986:	5c89      	ldrb	r1, [r1, r2]
 8009988:	4a5b      	ldr	r2, [pc, #364]	; (8009af8 <Write_Read_Pub+0x358>)
 800998a:	4413      	add	r3, r2
 800998c:	460a      	mov	r2, r1
 800998e:	721a      	strb	r2, [r3, #8]
		for(uint8_t i = 0; i < 8; i++)
 8009990:	793b      	ldrb	r3, [r7, #4]
 8009992:	3301      	adds	r3, #1
 8009994:	713b      	strb	r3, [r7, #4]
 8009996:	793b      	ldrb	r3, [r7, #4]
 8009998:	2b07      	cmp	r3, #7
 800999a:	d9ef      	bls.n	800997c <Write_Read_Pub+0x1dc>
		}
		sprintf(g_buff_send_long_lat,  "%lf", g_gps_data.lat_t.dLatRaw);
 800999c:	4b56      	ldr	r3, [pc, #344]	; (8009af8 <Write_Read_Pub+0x358>)
 800999e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80099a2:	461a      	mov	r2, r3
 80099a4:	4623      	mov	r3, r4
 80099a6:	4955      	ldr	r1, [pc, #340]	; (8009afc <Write_Read_Pub+0x35c>)
 80099a8:	4855      	ldr	r0, [pc, #340]	; (8009b00 <Write_Read_Pub+0x360>)
 80099aa:	f000 fe7f 	bl	800a6ac <siprintf>
		strcat(g_buff_send, g_buff_send_long_lat);
 80099ae:	4954      	ldr	r1, [pc, #336]	; (8009b00 <Write_Read_Pub+0x360>)
 80099b0:	4854      	ldr	r0, [pc, #336]	; (8009b04 <Write_Read_Pub+0x364>)
 80099b2:	f000 fe9b 	bl	800a6ec <strcat>
		strcat(g_buff_send, (const char*)",");
 80099b6:	4853      	ldr	r0, [pc, #332]	; (8009b04 <Write_Read_Pub+0x364>)
 80099b8:	f7f6 fc12 	bl	80001e0 <strlen>
 80099bc:	4603      	mov	r3, r0
 80099be:	461a      	mov	r2, r3
 80099c0:	4b50      	ldr	r3, [pc, #320]	; (8009b04 <Write_Read_Pub+0x364>)
 80099c2:	4413      	add	r3, r2
 80099c4:	4950      	ldr	r1, [pc, #320]	; (8009b08 <Write_Read_Pub+0x368>)
 80099c6:	461a      	mov	r2, r3
 80099c8:	460b      	mov	r3, r1
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	8013      	strh	r3, [r2, #0]

		/* Read and pub date */
		memset(g_buff_send_date, '\0', 2); //clear buffer date
 80099ce:	2202      	movs	r2, #2
 80099d0:	2100      	movs	r1, #0
 80099d2:	484e      	ldr	r0, [pc, #312]	; (8009b0c <Write_Read_Pub+0x36c>)
 80099d4:	f000 f98a 	bl	8009cec <memset>
		g_gps_data.u8Day = g_read_buffer[16];
 80099d8:	4b46      	ldr	r3, [pc, #280]	; (8009af4 <Write_Read_Pub+0x354>)
 80099da:	7c1a      	ldrb	r2, [r3, #16]
 80099dc:	4b46      	ldr	r3, [pc, #280]	; (8009af8 <Write_Read_Pub+0x358>)
 80099de:	741a      	strb	r2, [r3, #16]
		Convert_U8_To_Str(g_buff_send_date, g_gps_data.u8Day);
 80099e0:	4b45      	ldr	r3, [pc, #276]	; (8009af8 <Write_Read_Pub+0x358>)
 80099e2:	7c1b      	ldrb	r3, [r3, #16]
 80099e4:	4619      	mov	r1, r3
 80099e6:	4849      	ldr	r0, [pc, #292]	; (8009b0c <Write_Read_Pub+0x36c>)
 80099e8:	f7ff feba 	bl	8009760 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_date);
 80099ec:	4947      	ldr	r1, [pc, #284]	; (8009b0c <Write_Read_Pub+0x36c>)
 80099ee:	4845      	ldr	r0, [pc, #276]	; (8009b04 <Write_Read_Pub+0x364>)
 80099f0:	f000 fe7c 	bl	800a6ec <strcat>

		memset(g_buff_send_date, '\0', 2); //clear buffer date
 80099f4:	2202      	movs	r2, #2
 80099f6:	2100      	movs	r1, #0
 80099f8:	4844      	ldr	r0, [pc, #272]	; (8009b0c <Write_Read_Pub+0x36c>)
 80099fa:	f000 f977 	bl	8009cec <memset>
		g_gps_data.u8Month = g_read_buffer[17];
 80099fe:	4b3d      	ldr	r3, [pc, #244]	; (8009af4 <Write_Read_Pub+0x354>)
 8009a00:	7c5a      	ldrb	r2, [r3, #17]
 8009a02:	4b3d      	ldr	r3, [pc, #244]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a04:	745a      	strb	r2, [r3, #17]
		Convert_U8_To_Str(g_buff_send_date, g_gps_data.u8Month);
 8009a06:	4b3c      	ldr	r3, [pc, #240]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a08:	7c5b      	ldrb	r3, [r3, #17]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	483f      	ldr	r0, [pc, #252]	; (8009b0c <Write_Read_Pub+0x36c>)
 8009a0e:	f7ff fea7 	bl	8009760 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_date);
 8009a12:	493e      	ldr	r1, [pc, #248]	; (8009b0c <Write_Read_Pub+0x36c>)
 8009a14:	483b      	ldr	r0, [pc, #236]	; (8009b04 <Write_Read_Pub+0x364>)
 8009a16:	f000 fe69 	bl	800a6ec <strcat>

		memset(g_buff_send_date, '\0', 2); //clear buffer date
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	483b      	ldr	r0, [pc, #236]	; (8009b0c <Write_Read_Pub+0x36c>)
 8009a20:	f000 f964 	bl	8009cec <memset>
		g_gps_data.u8Year =  g_read_buffer[18];
 8009a24:	4b33      	ldr	r3, [pc, #204]	; (8009af4 <Write_Read_Pub+0x354>)
 8009a26:	7c9a      	ldrb	r2, [r3, #18]
 8009a28:	4b33      	ldr	r3, [pc, #204]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a2a:	749a      	strb	r2, [r3, #18]
		Convert_U8_To_Str(g_buff_send_date, g_gps_data.u8Year);
 8009a2c:	4b32      	ldr	r3, [pc, #200]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a2e:	7c9b      	ldrb	r3, [r3, #18]
 8009a30:	4619      	mov	r1, r3
 8009a32:	4836      	ldr	r0, [pc, #216]	; (8009b0c <Write_Read_Pub+0x36c>)
 8009a34:	f7ff fe94 	bl	8009760 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_date);
 8009a38:	4934      	ldr	r1, [pc, #208]	; (8009b0c <Write_Read_Pub+0x36c>)
 8009a3a:	4832      	ldr	r0, [pc, #200]	; (8009b04 <Write_Read_Pub+0x364>)
 8009a3c:	f000 fe56 	bl	800a6ec <strcat>
		strcat(g_buff_send, (const char*)",");
 8009a40:	4830      	ldr	r0, [pc, #192]	; (8009b04 <Write_Read_Pub+0x364>)
 8009a42:	f7f6 fbcd 	bl	80001e0 <strlen>
 8009a46:	4603      	mov	r3, r0
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4b2e      	ldr	r3, [pc, #184]	; (8009b04 <Write_Read_Pub+0x364>)
 8009a4c:	4413      	add	r3, r2
 8009a4e:	492e      	ldr	r1, [pc, #184]	; (8009b08 <Write_Read_Pub+0x368>)
 8009a50:	461a      	mov	r2, r3
 8009a52:	460b      	mov	r3, r1
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	8013      	strh	r3, [r2, #0]

		/* Read and pub time */
		memset(g_buff_send_time, '\0', 2); //clear buffer time
 8009a58:	2202      	movs	r2, #2
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	482c      	ldr	r0, [pc, #176]	; (8009b10 <Write_Read_Pub+0x370>)
 8009a5e:	f000 f945 	bl	8009cec <memset>
		g_gps_data.u8Hour = g_read_buffer[19];
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <Write_Read_Pub+0x354>)
 8009a64:	7cda      	ldrb	r2, [r3, #19]
 8009a66:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a68:	74da      	strb	r2, [r3, #19]
		Convert_U8_To_Str(g_buff_send_time, g_gps_data.u8Hour);
 8009a6a:	4b23      	ldr	r3, [pc, #140]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a6c:	7cdb      	ldrb	r3, [r3, #19]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4827      	ldr	r0, [pc, #156]	; (8009b10 <Write_Read_Pub+0x370>)
 8009a72:	f7ff fe75 	bl	8009760 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_time);
 8009a76:	4926      	ldr	r1, [pc, #152]	; (8009b10 <Write_Read_Pub+0x370>)
 8009a78:	4822      	ldr	r0, [pc, #136]	; (8009b04 <Write_Read_Pub+0x364>)
 8009a7a:	f000 fe37 	bl	800a6ec <strcat>

		memset(g_buff_send_time, '\0', 2); //clear buffer time
 8009a7e:	2202      	movs	r2, #2
 8009a80:	2100      	movs	r1, #0
 8009a82:	4823      	ldr	r0, [pc, #140]	; (8009b10 <Write_Read_Pub+0x370>)
 8009a84:	f000 f932 	bl	8009cec <memset>
		g_gps_data.u8Minute = g_read_buffer[20];
 8009a88:	4b1a      	ldr	r3, [pc, #104]	; (8009af4 <Write_Read_Pub+0x354>)
 8009a8a:	7d1a      	ldrb	r2, [r3, #20]
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a8e:	751a      	strb	r2, [r3, #20]
		Convert_U8_To_Str(g_buff_send_time, g_gps_data.u8Minute);
 8009a90:	4b19      	ldr	r3, [pc, #100]	; (8009af8 <Write_Read_Pub+0x358>)
 8009a92:	7d1b      	ldrb	r3, [r3, #20]
 8009a94:	4619      	mov	r1, r3
 8009a96:	481e      	ldr	r0, [pc, #120]	; (8009b10 <Write_Read_Pub+0x370>)
 8009a98:	f7ff fe62 	bl	8009760 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_time);
 8009a9c:	491c      	ldr	r1, [pc, #112]	; (8009b10 <Write_Read_Pub+0x370>)
 8009a9e:	4819      	ldr	r0, [pc, #100]	; (8009b04 <Write_Read_Pub+0x364>)
 8009aa0:	f000 fe24 	bl	800a6ec <strcat>

		memset(g_buff_send_time, '\0', 2); //clear buffer time
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4819      	ldr	r0, [pc, #100]	; (8009b10 <Write_Read_Pub+0x370>)
 8009aaa:	f000 f91f 	bl	8009cec <memset>
		g_gps_data.u8Second = g_read_buffer[21];
 8009aae:	4b11      	ldr	r3, [pc, #68]	; (8009af4 <Write_Read_Pub+0x354>)
 8009ab0:	7d5a      	ldrb	r2, [r3, #21]
 8009ab2:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <Write_Read_Pub+0x358>)
 8009ab4:	755a      	strb	r2, [r3, #21]
		Convert_U8_To_Str(g_buff_send_time, g_gps_data.u8Second);
 8009ab6:	4b10      	ldr	r3, [pc, #64]	; (8009af8 <Write_Read_Pub+0x358>)
 8009ab8:	7d5b      	ldrb	r3, [r3, #21]
 8009aba:	4619      	mov	r1, r3
 8009abc:	4814      	ldr	r0, [pc, #80]	; (8009b10 <Write_Read_Pub+0x370>)
 8009abe:	f7ff fe4f 	bl	8009760 <Convert_U8_To_Str>
		strcat(g_buff_send, g_buff_send_time);
 8009ac2:	4913      	ldr	r1, [pc, #76]	; (8009b10 <Write_Read_Pub+0x370>)
 8009ac4:	480f      	ldr	r0, [pc, #60]	; (8009b04 <Write_Read_Pub+0x364>)
 8009ac6:	f000 fe11 	bl	800a6ec <strcat>

		MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send), (uint8_t*)g_buff_send);
 8009aca:	480e      	ldr	r0, [pc, #56]	; (8009b04 <Write_Read_Pub+0x364>)
 8009acc:	f7f6 fb88 	bl	80001e0 <strlen>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	4a0b      	ldr	r2, [pc, #44]	; (8009b04 <Write_Read_Pub+0x364>)
 8009ad6:	9202      	str	r2, [sp, #8]
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <Write_Read_Pub+0x374>)
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	2301      	movs	r3, #1
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	f7f8 fca1 	bl	800242c <MQTT_Publish>
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd90      	pop	{r4, r7, pc}
 8009af2:	bf00      	nop
 8009af4:	200004cc 	.word	0x200004cc
 8009af8:	200005d0 	.word	0x200005d0
 8009afc:	0800e548 	.word	0x0800e548
 8009b00:	20000624 	.word	0x20000624
 8009b04:	200005e8 	.word	0x200005e8
 8009b08:	0800e54c 	.word	0x0800e54c
 8009b0c:	20000638 	.word	0x20000638
 8009b10:	2000063c 	.word	0x2000063c
 8009b14:	0800e550 	.word	0x0800e550

08009b18 <Wakeup_CallBack>:

void Wakeup_CallBack(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
	/* Reconfig the system clock after waking up from stop mode */
	SystemClock_Config();
 8009b1c:	f7f7 fa54 	bl	8000fc8 <SystemClock_Config>

	printf("Wake up from stop mode\r\n");
 8009b20:	4818      	ldr	r0, [pc, #96]	; (8009b84 <Wakeup_CallBack+0x6c>)
 8009b22:	f000 fdbb 	bl	800a69c <puts>

	HAL_ResumeTick();
 8009b26:	f7fb fd1d 	bl	8005564 <HAL_ResumeTick>

	/* GPS enable */
	gps_power_EnOrDi(ENABLE);
 8009b2a:	2001      	movs	r0, #1
 8009b2c:	f7fb fbd4 	bl	80052d8 <gps_power_EnOrDi>

	/* Re Init GPS UART */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 8009b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b34:	4914      	ldr	r1, [pc, #80]	; (8009b88 <Wakeup_CallBack+0x70>)
 8009b36:	4815      	ldr	r0, [pc, #84]	; (8009b8c <Wakeup_CallBack+0x74>)
 8009b38:	f7fe ff08 	bl	800894c <HAL_UART_Receive_IT>

	/* LTE RX pin enable */
	softUART_ReInit();
 8009b3c:	f7ff fdbc 	bl	80096b8 <softUART_ReInit>

	/* LTE enable */
	Enable_LTE();
 8009b40:	f7f8 fa6e 	bl	8002020 <Enable_LTE>

	/* Wait until the LTE finishs initialization */
	HAL_Delay(15000);
 8009b44:	f643 2098 	movw	r0, #15000	; 0x3a98
 8009b48:	f7fb fcda 	bl	8005500 <HAL_Delay>

	/* Config the MQTT */
	MQTT_Config();
 8009b4c:	f7ff fdd2 	bl	80096f4 <MQTT_Config>

	#if TEST_CONNECT == 1
		/* Check whether the mqtt server is connected or not. If not, reconnected! */
		if(MQTT_Check_Connect() != RESPONSE_OK)
 8009b50:	f7f8 fc26 	bl	80023a0 <MQTT_Check_Connect>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d005      	beq.n	8009b66 <Wakeup_CallBack+0x4e>
		{
			MQTT_Open_Connect();
 8009b5a:	f7ff fd49 	bl	80095f0 <MQTT_Open_Connect>
			HAL_Delay(500);
 8009b5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b62:	f7fb fccd 	bl	8005500 <HAL_Delay>
		}
	#endif

	/* Print log */
	printf("!!!!MOTION DETECTED !!!!!\n\r");
 8009b66:	480a      	ldr	r0, [pc, #40]	; (8009b90 <Wakeup_CallBack+0x78>)
 8009b68:	f000 fd24 	bl	800a5b4 <iprintf>

	/* Quectel initialization */
	//Quectel_Init();

	/* Change 2 flags */
	g_bIsMotion = false;
 8009b6c:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <Wakeup_CallBack+0x7c>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
	g_bIsSetGPS = true;
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <Wakeup_CallBack+0x80>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	701a      	strb	r2, [r3, #0]
	g_bIsStop = false;
 8009b78:	4b08      	ldr	r3, [pc, #32]	; (8009b9c <Wakeup_CallBack+0x84>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
}
 8009b7e:	bf00      	nop
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	0800e56c 	.word	0x0800e56c
 8009b88:	20000858 	.word	0x20000858
 8009b8c:	200011a4 	.word	0x200011a4
 8009b90:	0800e584 	.word	0x0800e584
 8009b94:	200003c5 	.word	0x200003c5
 8009b98:	200003c6 	.word	0x200003c6
 8009b9c:	200003c7 	.word	0x200003c7

08009ba0 <Stop_Callback>:

void Stop_Callback(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
	printf("MOTION NOT DETECTED YET !!\r\n");
 8009ba4:	480e      	ldr	r0, [pc, #56]	; (8009be0 <Stop_Callback+0x40>)
 8009ba6:	f000 fd79 	bl	800a69c <puts>

	/* Close a Network for MQTT Client */
	MQTT_Close(0);
 8009baa:	2000      	movs	r0, #0
 8009bac:	f7f8 fb2a 	bl	8002204 <MQTT_Close>

	/* Power off Module LTE */
	LTE_PWRCRL_OFF();
 8009bb0:	f7f8 fa08 	bl	8001fc4 <LTE_PWRCRL_OFF>

	/* LTE POWER SUPPY DISABLE */
	LTE_Disable();
 8009bb4:	f7ff fd68 	bl	8009688 <LTE_Disable>

	/* Disable GPS Module */
	gps_power_EnOrDi(DISABLE);
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f7fb fb8d 	bl	80052d8 <gps_power_EnOrDi>

	/* DeInit the RX pin of UART */
	softUART_DeInit();
 8009bbe:	f7ff fd6f 	bl	80096a0 <softUART_DeInit>

	/* Enter sleep mode */
	printf("Enter Stop Mode:\r\n");
 8009bc2:	4808      	ldr	r0, [pc, #32]	; (8009be4 <Stop_Callback+0x44>)
 8009bc4:	f000 fd6a 	bl	800a69c <puts>

	g_bIsStop = true;
 8009bc8:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <Stop_Callback+0x48>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	701a      	strb	r2, [r3, #0]

	HAL_SuspendTick();
 8009bce:	f7fb fcb9 	bl	8005544 <HAL_SuspendTick>

	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	f7fd f987 	bl	8006ee8 <HAL_PWR_EnterSTOPMode>
}
 8009bda:	bf00      	nop
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	0800e5a0 	.word	0x0800e5a0
 8009be4:	0800e5bc 	.word	0x0800e5bc
 8009be8:	200003c7 	.word	0x200003c7

08009bec <Data_Process>:

void Data_Process(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b0b2      	sub	sp, #200	; 0xc8
 8009bf0:	af00      	add	r7, sp, #0
	char test_GNGGA[100] = {0};
 8009bf2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009bf6:	2264      	movs	r2, #100	; 0x64
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f876 	bl	8009cec <memset>
	char test_GNRMC[100] = {0};
 8009c00:	463b      	mov	r3, r7
 8009c02:	2264      	movs	r2, #100	; 0x64
 8009c04:	2100      	movs	r1, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f870 	bl	8009cec <memset>

	/* If the motion is detected, the GPS will get data and then publish the data to MQTT server */

	/* Ensure that the power of GPS module is turned on */
	gps_power_EnOrDi(ENABLE);
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	f7fb fb63 	bl	80052d8 <gps_power_EnOrDi>

	printf("\r\n****START THE CONVERSION******\r\n\n");
 8009c12:	480e      	ldr	r0, [pc, #56]	; (8009c4c <Data_Process+0x60>)
 8009c14:	f000 fd42 	bl	800a69c <puts>

	/* 2 strings to split the GNGAA from the NMEA sent from the Quectel L76 LB */
	printf("%s\r\n\n", g_rxBuffer);
 8009c18:	490d      	ldr	r1, [pc, #52]	; (8009c50 <Data_Process+0x64>)
 8009c1a:	480e      	ldr	r0, [pc, #56]	; (8009c54 <Data_Process+0x68>)
 8009c1c:	f000 fcca 	bl	800a5b4 <iprintf>
	printf("%d\r\n\n", strlen(g_rxBuffer));
 8009c20:	480b      	ldr	r0, [pc, #44]	; (8009c50 <Data_Process+0x64>)
 8009c22:	f7f6 fadd 	bl	80001e0 <strlen>
 8009c26:	4603      	mov	r3, r0
 8009c28:	4619      	mov	r1, r3
 8009c2a:	480b      	ldr	r0, [pc, #44]	; (8009c58 <Data_Process+0x6c>)
 8009c2c:	f000 fcc2 	bl	800a5b4 <iprintf>

	/* Parse the NMEA string */
	gps_read(g_rxBuffer, &g_test_L76, test_GNGGA, test_GNRMC);
 8009c30:	463b      	mov	r3, r7
 8009c32:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009c36:	4909      	ldr	r1, [pc, #36]	; (8009c5c <Data_Process+0x70>)
 8009c38:	4805      	ldr	r0, [pc, #20]	; (8009c50 <Data_Process+0x64>)
 8009c3a:	f7fa fe51 	bl	80048e0 <gps_read>

	/* Write to Flash, Read from Flash and then publish the infos to MQTT serser */
	Write_Read_Pub();
 8009c3e:	f7ff fdaf 	bl	80097a0 <Write_Read_Pub>
}
 8009c42:	bf00      	nop
 8009c44:	37c8      	adds	r7, #200	; 0xc8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	0800e5d0 	.word	0x0800e5d0
 8009c50:	20000858 	.word	0x20000858
 8009c54:	0800e5f4 	.word	0x0800e5f4
 8009c58:	0800e5fc 	.word	0x0800e5fc
 8009c5c:	20000c48 	.word	0x20000c48

08009c60 <System_Initialization>:

void System_Initialization(void)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	af00      	add	r7, sp, #0
	/* Flash memory init */
	Flash_Init();
 8009c64:	f7ff fd6e 	bl	8009744 <Flash_Init>

	/* Acce init */
	g_u8Test = SC7A20_Init();
 8009c68:	f7fb fb50 	bl	800530c <SC7A20_Init>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <System_Initialization+0x24>)
 8009c72:	701a      	strb	r2, [r3, #0]

	/* Enable UART2 Receive Interrupt */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 8009c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c78:	4903      	ldr	r1, [pc, #12]	; (8009c88 <System_Initialization+0x28>)
 8009c7a:	4804      	ldr	r0, [pc, #16]	; (8009c8c <System_Initialization+0x2c>)
 8009c7c:	f7fe fe66 	bl	800894c <HAL_UART_Receive_IT>

	/* Initialize GPS module */
	//Quectel_Init();
}
 8009c80:	bf00      	nop
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20000009 	.word	0x20000009
 8009c88:	20000858 	.word	0x20000858
 8009c8c:	200011a4 	.word	0x200011a4

08009c90 <atof>:
 8009c90:	2100      	movs	r1, #0
 8009c92:	f001 bb65 	b.w	800b360 <strtod>
	...

08009c98 <__errno>:
 8009c98:	4b01      	ldr	r3, [pc, #4]	; (8009ca0 <__errno+0x8>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	2000000c 	.word	0x2000000c

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4e0d      	ldr	r6, [pc, #52]	; (8009cdc <__libc_init_array+0x38>)
 8009ca8:	4c0d      	ldr	r4, [pc, #52]	; (8009ce0 <__libc_init_array+0x3c>)
 8009caa:	1ba4      	subs	r4, r4, r6
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	2500      	movs	r5, #0
 8009cb0:	42a5      	cmp	r5, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4e0b      	ldr	r6, [pc, #44]	; (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	4c0c      	ldr	r4, [pc, #48]	; (8009ce8 <__libc_init_array+0x44>)
 8009cb8:	f004 f80e 	bl	800dcd8 <_init>
 8009cbc:	1ba4      	subs	r4, r4, r6
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	42a5      	cmp	r5, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ccc:	4798      	blx	r3
 8009cce:	3501      	adds	r5, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cd6:	4798      	blx	r3
 8009cd8:	3501      	adds	r5, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800e948 	.word	0x0800e948
 8009ce0:	0800e948 	.word	0x0800e948
 8009ce4:	0800e948 	.word	0x0800e948
 8009ce8:	0800e94c 	.word	0x0800e94c

08009cec <memset>:
 8009cec:	4402      	add	r2, r0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d100      	bne.n	8009cf6 <memset+0xa>
 8009cf4:	4770      	bx	lr
 8009cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cfa:	e7f9      	b.n	8009cf0 <memset+0x4>

08009cfc <__cvt>:
 8009cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	ec55 4b10 	vmov	r4, r5, d0
 8009d04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009d06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d0a:	2d00      	cmp	r5, #0
 8009d0c:	460e      	mov	r6, r1
 8009d0e:	4691      	mov	r9, r2
 8009d10:	4619      	mov	r1, r3
 8009d12:	bfb8      	it	lt
 8009d14:	4622      	movlt	r2, r4
 8009d16:	462b      	mov	r3, r5
 8009d18:	f027 0720 	bic.w	r7, r7, #32
 8009d1c:	bfbb      	ittet	lt
 8009d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d22:	461d      	movlt	r5, r3
 8009d24:	2300      	movge	r3, #0
 8009d26:	232d      	movlt	r3, #45	; 0x2d
 8009d28:	bfb8      	it	lt
 8009d2a:	4614      	movlt	r4, r2
 8009d2c:	2f46      	cmp	r7, #70	; 0x46
 8009d2e:	700b      	strb	r3, [r1, #0]
 8009d30:	d004      	beq.n	8009d3c <__cvt+0x40>
 8009d32:	2f45      	cmp	r7, #69	; 0x45
 8009d34:	d100      	bne.n	8009d38 <__cvt+0x3c>
 8009d36:	3601      	adds	r6, #1
 8009d38:	2102      	movs	r1, #2
 8009d3a:	e000      	b.n	8009d3e <__cvt+0x42>
 8009d3c:	2103      	movs	r1, #3
 8009d3e:	ab03      	add	r3, sp, #12
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	ab02      	add	r3, sp, #8
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	4632      	mov	r2, r6
 8009d48:	4653      	mov	r3, sl
 8009d4a:	ec45 4b10 	vmov	d0, r4, r5
 8009d4e:	f001 fc67 	bl	800b620 <_dtoa_r>
 8009d52:	2f47      	cmp	r7, #71	; 0x47
 8009d54:	4680      	mov	r8, r0
 8009d56:	d102      	bne.n	8009d5e <__cvt+0x62>
 8009d58:	f019 0f01 	tst.w	r9, #1
 8009d5c:	d026      	beq.n	8009dac <__cvt+0xb0>
 8009d5e:	2f46      	cmp	r7, #70	; 0x46
 8009d60:	eb08 0906 	add.w	r9, r8, r6
 8009d64:	d111      	bne.n	8009d8a <__cvt+0x8e>
 8009d66:	f898 3000 	ldrb.w	r3, [r8]
 8009d6a:	2b30      	cmp	r3, #48	; 0x30
 8009d6c:	d10a      	bne.n	8009d84 <__cvt+0x88>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2300      	movs	r3, #0
 8009d72:	4620      	mov	r0, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d7a:	b918      	cbnz	r0, 8009d84 <__cvt+0x88>
 8009d7c:	f1c6 0601 	rsb	r6, r6, #1
 8009d80:	f8ca 6000 	str.w	r6, [sl]
 8009d84:	f8da 3000 	ldr.w	r3, [sl]
 8009d88:	4499      	add	r9, r3
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d96:	b938      	cbnz	r0, 8009da8 <__cvt+0xac>
 8009d98:	2230      	movs	r2, #48	; 0x30
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	454b      	cmp	r3, r9
 8009d9e:	d205      	bcs.n	8009dac <__cvt+0xb0>
 8009da0:	1c59      	adds	r1, r3, #1
 8009da2:	9103      	str	r1, [sp, #12]
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	e7f8      	b.n	8009d9a <__cvt+0x9e>
 8009da8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009db0:	eba3 0308 	sub.w	r3, r3, r8
 8009db4:	4640      	mov	r0, r8
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	b004      	add	sp, #16
 8009dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009dbe <__exponent>:
 8009dbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dc0:	2900      	cmp	r1, #0
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	bfba      	itte	lt
 8009dc6:	4249      	neglt	r1, r1
 8009dc8:	232d      	movlt	r3, #45	; 0x2d
 8009dca:	232b      	movge	r3, #43	; 0x2b
 8009dcc:	2909      	cmp	r1, #9
 8009dce:	f804 2b02 	strb.w	r2, [r4], #2
 8009dd2:	7043      	strb	r3, [r0, #1]
 8009dd4:	dd20      	ble.n	8009e18 <__exponent+0x5a>
 8009dd6:	f10d 0307 	add.w	r3, sp, #7
 8009dda:	461f      	mov	r7, r3
 8009ddc:	260a      	movs	r6, #10
 8009dde:	fb91 f5f6 	sdiv	r5, r1, r6
 8009de2:	fb06 1115 	mls	r1, r6, r5, r1
 8009de6:	3130      	adds	r1, #48	; 0x30
 8009de8:	2d09      	cmp	r5, #9
 8009dea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009dee:	f103 32ff 	add.w	r2, r3, #4294967295
 8009df2:	4629      	mov	r1, r5
 8009df4:	dc09      	bgt.n	8009e0a <__exponent+0x4c>
 8009df6:	3130      	adds	r1, #48	; 0x30
 8009df8:	3b02      	subs	r3, #2
 8009dfa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009dfe:	42bb      	cmp	r3, r7
 8009e00:	4622      	mov	r2, r4
 8009e02:	d304      	bcc.n	8009e0e <__exponent+0x50>
 8009e04:	1a10      	subs	r0, r2, r0
 8009e06:	b003      	add	sp, #12
 8009e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	e7e7      	b.n	8009dde <__exponent+0x20>
 8009e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e12:	f804 2b01 	strb.w	r2, [r4], #1
 8009e16:	e7f2      	b.n	8009dfe <__exponent+0x40>
 8009e18:	2330      	movs	r3, #48	; 0x30
 8009e1a:	4419      	add	r1, r3
 8009e1c:	7083      	strb	r3, [r0, #2]
 8009e1e:	1d02      	adds	r2, r0, #4
 8009e20:	70c1      	strb	r1, [r0, #3]
 8009e22:	e7ef      	b.n	8009e04 <__exponent+0x46>

08009e24 <_printf_float>:
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	b08d      	sub	sp, #52	; 0x34
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009e30:	4616      	mov	r6, r2
 8009e32:	461f      	mov	r7, r3
 8009e34:	4605      	mov	r5, r0
 8009e36:	f002 fe4d 	bl	800cad4 <_localeconv_r>
 8009e3a:	6803      	ldr	r3, [r0, #0]
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7f6 f9ce 	bl	80001e0 <strlen>
 8009e44:	2300      	movs	r3, #0
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	f8d8 3000 	ldr.w	r3, [r8]
 8009e4c:	9005      	str	r0, [sp, #20]
 8009e4e:	3307      	adds	r3, #7
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	f103 0208 	add.w	r2, r3, #8
 8009e58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e5c:	f8d4 b000 	ldr.w	fp, [r4]
 8009e60:	f8c8 2000 	str.w	r2, [r8]
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e74:	9307      	str	r3, [sp, #28]
 8009e76:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7e:	4ba7      	ldr	r3, [pc, #668]	; (800a11c <_printf_float+0x2f8>)
 8009e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e84:	f7f6 fe5a 	bl	8000b3c <__aeabi_dcmpun>
 8009e88:	bb70      	cbnz	r0, 8009ee8 <_printf_float+0xc4>
 8009e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8e:	4ba3      	ldr	r3, [pc, #652]	; (800a11c <_printf_float+0x2f8>)
 8009e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e94:	f7f6 fe34 	bl	8000b00 <__aeabi_dcmple>
 8009e98:	bb30      	cbnz	r0, 8009ee8 <_printf_float+0xc4>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	4649      	mov	r1, r9
 8009ea2:	f7f6 fe23 	bl	8000aec <__aeabi_dcmplt>
 8009ea6:	b110      	cbz	r0, 8009eae <_printf_float+0x8a>
 8009ea8:	232d      	movs	r3, #45	; 0x2d
 8009eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eae:	4a9c      	ldr	r2, [pc, #624]	; (800a120 <_printf_float+0x2fc>)
 8009eb0:	4b9c      	ldr	r3, [pc, #624]	; (800a124 <_printf_float+0x300>)
 8009eb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009eb6:	bf8c      	ite	hi
 8009eb8:	4690      	movhi	r8, r2
 8009eba:	4698      	movls	r8, r3
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	f02b 0204 	bic.w	r2, fp, #4
 8009ec2:	6123      	str	r3, [r4, #16]
 8009ec4:	6022      	str	r2, [r4, #0]
 8009ec6:	f04f 0900 	mov.w	r9, #0
 8009eca:	9700      	str	r7, [sp, #0]
 8009ecc:	4633      	mov	r3, r6
 8009ece:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 f9e6 	bl	800a2a4 <_printf_common>
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f040 808d 	bne.w	8009ff8 <_printf_float+0x1d4>
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee2:	b00d      	add	sp, #52	; 0x34
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	4640      	mov	r0, r8
 8009eee:	4649      	mov	r1, r9
 8009ef0:	f7f6 fe24 	bl	8000b3c <__aeabi_dcmpun>
 8009ef4:	b110      	cbz	r0, 8009efc <_printf_float+0xd8>
 8009ef6:	4a8c      	ldr	r2, [pc, #560]	; (800a128 <_printf_float+0x304>)
 8009ef8:	4b8c      	ldr	r3, [pc, #560]	; (800a12c <_printf_float+0x308>)
 8009efa:	e7da      	b.n	8009eb2 <_printf_float+0x8e>
 8009efc:	6861      	ldr	r1, [r4, #4]
 8009efe:	1c4b      	adds	r3, r1, #1
 8009f00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009f04:	a80a      	add	r0, sp, #40	; 0x28
 8009f06:	d13e      	bne.n	8009f86 <_printf_float+0x162>
 8009f08:	2306      	movs	r3, #6
 8009f0a:	6063      	str	r3, [r4, #4]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f12:	ab09      	add	r3, sp, #36	; 0x24
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	ec49 8b10 	vmov	d0, r8, r9
 8009f1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	f8cd a004 	str.w	sl, [sp, #4]
 8009f24:	6861      	ldr	r1, [r4, #4]
 8009f26:	4628      	mov	r0, r5
 8009f28:	f7ff fee8 	bl	8009cfc <__cvt>
 8009f2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009f30:	2b47      	cmp	r3, #71	; 0x47
 8009f32:	4680      	mov	r8, r0
 8009f34:	d109      	bne.n	8009f4a <_printf_float+0x126>
 8009f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f38:	1cd8      	adds	r0, r3, #3
 8009f3a:	db02      	blt.n	8009f42 <_printf_float+0x11e>
 8009f3c:	6862      	ldr	r2, [r4, #4]
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	dd47      	ble.n	8009fd2 <_printf_float+0x1ae>
 8009f42:	f1aa 0a02 	sub.w	sl, sl, #2
 8009f46:	fa5f fa8a 	uxtb.w	sl, sl
 8009f4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f50:	d824      	bhi.n	8009f9c <_printf_float+0x178>
 8009f52:	3901      	subs	r1, #1
 8009f54:	4652      	mov	r2, sl
 8009f56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f5a:	9109      	str	r1, [sp, #36]	; 0x24
 8009f5c:	f7ff ff2f 	bl	8009dbe <__exponent>
 8009f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f62:	1813      	adds	r3, r2, r0
 8009f64:	2a01      	cmp	r2, #1
 8009f66:	4681      	mov	r9, r0
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	dc02      	bgt.n	8009f72 <_printf_float+0x14e>
 8009f6c:	6822      	ldr	r2, [r4, #0]
 8009f6e:	07d1      	lsls	r1, r2, #31
 8009f70:	d501      	bpl.n	8009f76 <_printf_float+0x152>
 8009f72:	3301      	adds	r3, #1
 8009f74:	6123      	str	r3, [r4, #16]
 8009f76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0a5      	beq.n	8009eca <_printf_float+0xa6>
 8009f7e:	232d      	movs	r3, #45	; 0x2d
 8009f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f84:	e7a1      	b.n	8009eca <_printf_float+0xa6>
 8009f86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009f8a:	f000 8177 	beq.w	800a27c <_printf_float+0x458>
 8009f8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009f92:	d1bb      	bne.n	8009f0c <_printf_float+0xe8>
 8009f94:	2900      	cmp	r1, #0
 8009f96:	d1b9      	bne.n	8009f0c <_printf_float+0xe8>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e7b6      	b.n	8009f0a <_printf_float+0xe6>
 8009f9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009fa0:	d119      	bne.n	8009fd6 <_printf_float+0x1b2>
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	dd0c      	ble.n	8009fc2 <_printf_float+0x19e>
 8009fa8:	6121      	str	r1, [r4, #16]
 8009faa:	b913      	cbnz	r3, 8009fb2 <_printf_float+0x18e>
 8009fac:	6822      	ldr	r2, [r4, #0]
 8009fae:	07d2      	lsls	r2, r2, #31
 8009fb0:	d502      	bpl.n	8009fb8 <_printf_float+0x194>
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	440b      	add	r3, r1
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fbc:	f04f 0900 	mov.w	r9, #0
 8009fc0:	e7d9      	b.n	8009f76 <_printf_float+0x152>
 8009fc2:	b913      	cbnz	r3, 8009fca <_printf_float+0x1a6>
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	07d0      	lsls	r0, r2, #31
 8009fc8:	d501      	bpl.n	8009fce <_printf_float+0x1aa>
 8009fca:	3302      	adds	r3, #2
 8009fcc:	e7f3      	b.n	8009fb6 <_printf_float+0x192>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e7f1      	b.n	8009fb6 <_printf_float+0x192>
 8009fd2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009fd6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	db05      	blt.n	8009fea <_printf_float+0x1c6>
 8009fde:	6822      	ldr	r2, [r4, #0]
 8009fe0:	6123      	str	r3, [r4, #16]
 8009fe2:	07d1      	lsls	r1, r2, #31
 8009fe4:	d5e8      	bpl.n	8009fb8 <_printf_float+0x194>
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	e7e5      	b.n	8009fb6 <_printf_float+0x192>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bfd4      	ite	le
 8009fee:	f1c3 0302 	rsble	r3, r3, #2
 8009ff2:	2301      	movgt	r3, #1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	e7de      	b.n	8009fb6 <_printf_float+0x192>
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	055a      	lsls	r2, r3, #21
 8009ffc:	d407      	bmi.n	800a00e <_printf_float+0x1ea>
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	4642      	mov	r2, r8
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	d12b      	bne.n	800a064 <_printf_float+0x240>
 800a00c:	e767      	b.n	8009ede <_printf_float+0xba>
 800a00e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a012:	f240 80dc 	bls.w	800a1ce <_printf_float+0x3aa>
 800a016:	2200      	movs	r2, #0
 800a018:	2300      	movs	r3, #0
 800a01a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a01e:	f7f6 fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a022:	2800      	cmp	r0, #0
 800a024:	d033      	beq.n	800a08e <_printf_float+0x26a>
 800a026:	2301      	movs	r3, #1
 800a028:	4a41      	ldr	r2, [pc, #260]	; (800a130 <_printf_float+0x30c>)
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	f43f af54 	beq.w	8009ede <_printf_float+0xba>
 800a036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a03a:	429a      	cmp	r2, r3
 800a03c:	db02      	blt.n	800a044 <_printf_float+0x220>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07d8      	lsls	r0, r3, #31
 800a042:	d50f      	bpl.n	800a064 <_printf_float+0x240>
 800a044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a048:	4631      	mov	r1, r6
 800a04a:	4628      	mov	r0, r5
 800a04c:	47b8      	blx	r7
 800a04e:	3001      	adds	r0, #1
 800a050:	f43f af45 	beq.w	8009ede <_printf_float+0xba>
 800a054:	f04f 0800 	mov.w	r8, #0
 800a058:	f104 091a 	add.w	r9, r4, #26
 800a05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05e:	3b01      	subs	r3, #1
 800a060:	4543      	cmp	r3, r8
 800a062:	dc09      	bgt.n	800a078 <_printf_float+0x254>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	079b      	lsls	r3, r3, #30
 800a068:	f100 8103 	bmi.w	800a272 <_printf_float+0x44e>
 800a06c:	68e0      	ldr	r0, [r4, #12]
 800a06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a070:	4298      	cmp	r0, r3
 800a072:	bfb8      	it	lt
 800a074:	4618      	movlt	r0, r3
 800a076:	e734      	b.n	8009ee2 <_printf_float+0xbe>
 800a078:	2301      	movs	r3, #1
 800a07a:	464a      	mov	r2, r9
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f af2b 	beq.w	8009ede <_printf_float+0xba>
 800a088:	f108 0801 	add.w	r8, r8, #1
 800a08c:	e7e6      	b.n	800a05c <_printf_float+0x238>
 800a08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	dc2b      	bgt.n	800a0ec <_printf_float+0x2c8>
 800a094:	2301      	movs	r3, #1
 800a096:	4a26      	ldr	r2, [pc, #152]	; (800a130 <_printf_float+0x30c>)
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f af1d 	beq.w	8009ede <_printf_float+0xba>
 800a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a6:	b923      	cbnz	r3, 800a0b2 <_printf_float+0x28e>
 800a0a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0aa:	b913      	cbnz	r3, 800a0b2 <_printf_float+0x28e>
 800a0ac:	6823      	ldr	r3, [r4, #0]
 800a0ae:	07d9      	lsls	r1, r3, #31
 800a0b0:	d5d8      	bpl.n	800a064 <_printf_float+0x240>
 800a0b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	47b8      	blx	r7
 800a0bc:	3001      	adds	r0, #1
 800a0be:	f43f af0e 	beq.w	8009ede <_printf_float+0xba>
 800a0c2:	f04f 0900 	mov.w	r9, #0
 800a0c6:	f104 0a1a 	add.w	sl, r4, #26
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	425b      	negs	r3, r3
 800a0ce:	454b      	cmp	r3, r9
 800a0d0:	dc01      	bgt.n	800a0d6 <_printf_float+0x2b2>
 800a0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d4:	e794      	b.n	800a000 <_printf_float+0x1dc>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4652      	mov	r2, sl
 800a0da:	4631      	mov	r1, r6
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b8      	blx	r7
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	f43f aefc 	beq.w	8009ede <_printf_float+0xba>
 800a0e6:	f109 0901 	add.w	r9, r9, #1
 800a0ea:	e7ee      	b.n	800a0ca <_printf_float+0x2a6>
 800a0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	bfa8      	it	ge
 800a0f4:	461a      	movge	r2, r3
 800a0f6:	2a00      	cmp	r2, #0
 800a0f8:	4691      	mov	r9, r2
 800a0fa:	dd07      	ble.n	800a10c <_printf_float+0x2e8>
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	4631      	mov	r1, r6
 800a100:	4642      	mov	r2, r8
 800a102:	4628      	mov	r0, r5
 800a104:	47b8      	blx	r7
 800a106:	3001      	adds	r0, #1
 800a108:	f43f aee9 	beq.w	8009ede <_printf_float+0xba>
 800a10c:	f104 031a 	add.w	r3, r4, #26
 800a110:	f04f 0b00 	mov.w	fp, #0
 800a114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a118:	9306      	str	r3, [sp, #24]
 800a11a:	e015      	b.n	800a148 <_printf_float+0x324>
 800a11c:	7fefffff 	.word	0x7fefffff
 800a120:	0800e62c 	.word	0x0800e62c
 800a124:	0800e628 	.word	0x0800e628
 800a128:	0800e634 	.word	0x0800e634
 800a12c:	0800e630 	.word	0x0800e630
 800a130:	0800e638 	.word	0x0800e638
 800a134:	2301      	movs	r3, #1
 800a136:	9a06      	ldr	r2, [sp, #24]
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f aecd 	beq.w	8009ede <_printf_float+0xba>
 800a144:	f10b 0b01 	add.w	fp, fp, #1
 800a148:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a14c:	ebaa 0309 	sub.w	r3, sl, r9
 800a150:	455b      	cmp	r3, fp
 800a152:	dcef      	bgt.n	800a134 <_printf_float+0x310>
 800a154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a158:	429a      	cmp	r2, r3
 800a15a:	44d0      	add	r8, sl
 800a15c:	db15      	blt.n	800a18a <_printf_float+0x366>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	07da      	lsls	r2, r3, #31
 800a162:	d412      	bmi.n	800a18a <_printf_float+0x366>
 800a164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a166:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a168:	eba3 020a 	sub.w	r2, r3, sl
 800a16c:	eba3 0a01 	sub.w	sl, r3, r1
 800a170:	4592      	cmp	sl, r2
 800a172:	bfa8      	it	ge
 800a174:	4692      	movge	sl, r2
 800a176:	f1ba 0f00 	cmp.w	sl, #0
 800a17a:	dc0e      	bgt.n	800a19a <_printf_float+0x376>
 800a17c:	f04f 0800 	mov.w	r8, #0
 800a180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a184:	f104 091a 	add.w	r9, r4, #26
 800a188:	e019      	b.n	800a1be <_printf_float+0x39a>
 800a18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a18e:	4631      	mov	r1, r6
 800a190:	4628      	mov	r0, r5
 800a192:	47b8      	blx	r7
 800a194:	3001      	adds	r0, #1
 800a196:	d1e5      	bne.n	800a164 <_printf_float+0x340>
 800a198:	e6a1      	b.n	8009ede <_printf_float+0xba>
 800a19a:	4653      	mov	r3, sl
 800a19c:	4642      	mov	r2, r8
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d1e9      	bne.n	800a17c <_printf_float+0x358>
 800a1a8:	e699      	b.n	8009ede <_printf_float+0xba>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	464a      	mov	r2, r9
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	f43f ae92 	beq.w	8009ede <_printf_float+0xba>
 800a1ba:	f108 0801 	add.w	r8, r8, #1
 800a1be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1c2:	1a9b      	subs	r3, r3, r2
 800a1c4:	eba3 030a 	sub.w	r3, r3, sl
 800a1c8:	4543      	cmp	r3, r8
 800a1ca:	dcee      	bgt.n	800a1aa <_printf_float+0x386>
 800a1cc:	e74a      	b.n	800a064 <_printf_float+0x240>
 800a1ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1d0:	2a01      	cmp	r2, #1
 800a1d2:	dc01      	bgt.n	800a1d8 <_printf_float+0x3b4>
 800a1d4:	07db      	lsls	r3, r3, #31
 800a1d6:	d53a      	bpl.n	800a24e <_printf_float+0x42a>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4642      	mov	r2, r8
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f ae7b 	beq.w	8009ede <_printf_float+0xba>
 800a1e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	47b8      	blx	r7
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f108 0801 	add.w	r8, r8, #1
 800a1f8:	f43f ae71 	beq.w	8009ede <_printf_float+0xba>
 800a1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fe:	2200      	movs	r2, #0
 800a200:	f103 3aff 	add.w	sl, r3, #4294967295
 800a204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a208:	2300      	movs	r3, #0
 800a20a:	f7f6 fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 800a20e:	b9c8      	cbnz	r0, 800a244 <_printf_float+0x420>
 800a210:	4653      	mov	r3, sl
 800a212:	4642      	mov	r2, r8
 800a214:	4631      	mov	r1, r6
 800a216:	4628      	mov	r0, r5
 800a218:	47b8      	blx	r7
 800a21a:	3001      	adds	r0, #1
 800a21c:	d10e      	bne.n	800a23c <_printf_float+0x418>
 800a21e:	e65e      	b.n	8009ede <_printf_float+0xba>
 800a220:	2301      	movs	r3, #1
 800a222:	4652      	mov	r2, sl
 800a224:	4631      	mov	r1, r6
 800a226:	4628      	mov	r0, r5
 800a228:	47b8      	blx	r7
 800a22a:	3001      	adds	r0, #1
 800a22c:	f43f ae57 	beq.w	8009ede <_printf_float+0xba>
 800a230:	f108 0801 	add.w	r8, r8, #1
 800a234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a236:	3b01      	subs	r3, #1
 800a238:	4543      	cmp	r3, r8
 800a23a:	dcf1      	bgt.n	800a220 <_printf_float+0x3fc>
 800a23c:	464b      	mov	r3, r9
 800a23e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a242:	e6de      	b.n	800a002 <_printf_float+0x1de>
 800a244:	f04f 0800 	mov.w	r8, #0
 800a248:	f104 0a1a 	add.w	sl, r4, #26
 800a24c:	e7f2      	b.n	800a234 <_printf_float+0x410>
 800a24e:	2301      	movs	r3, #1
 800a250:	e7df      	b.n	800a212 <_printf_float+0x3ee>
 800a252:	2301      	movs	r3, #1
 800a254:	464a      	mov	r2, r9
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	f43f ae3e 	beq.w	8009ede <_printf_float+0xba>
 800a262:	f108 0801 	add.w	r8, r8, #1
 800a266:	68e3      	ldr	r3, [r4, #12]
 800a268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	4543      	cmp	r3, r8
 800a26e:	dcf0      	bgt.n	800a252 <_printf_float+0x42e>
 800a270:	e6fc      	b.n	800a06c <_printf_float+0x248>
 800a272:	f04f 0800 	mov.w	r8, #0
 800a276:	f104 0919 	add.w	r9, r4, #25
 800a27a:	e7f4      	b.n	800a266 <_printf_float+0x442>
 800a27c:	2900      	cmp	r1, #0
 800a27e:	f43f ae8b 	beq.w	8009f98 <_printf_float+0x174>
 800a282:	2300      	movs	r3, #0
 800a284:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a288:	ab09      	add	r3, sp, #36	; 0x24
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	ec49 8b10 	vmov	d0, r8, r9
 800a290:	6022      	str	r2, [r4, #0]
 800a292:	f8cd a004 	str.w	sl, [sp, #4]
 800a296:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7ff fd2e 	bl	8009cfc <__cvt>
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	e648      	b.n	8009f36 <_printf_float+0x112>

0800a2a4 <_printf_common>:
 800a2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	4691      	mov	r9, r2
 800a2aa:	461f      	mov	r7, r3
 800a2ac:	688a      	ldr	r2, [r1, #8]
 800a2ae:	690b      	ldr	r3, [r1, #16]
 800a2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	bfb8      	it	lt
 800a2b8:	4613      	movlt	r3, r2
 800a2ba:	f8c9 3000 	str.w	r3, [r9]
 800a2be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	b112      	cbz	r2, 800a2ce <_printf_common+0x2a>
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	f8c9 3000 	str.w	r3, [r9]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	0699      	lsls	r1, r3, #26
 800a2d2:	bf42      	ittt	mi
 800a2d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2d8:	3302      	addmi	r3, #2
 800a2da:	f8c9 3000 	strmi.w	r3, [r9]
 800a2de:	6825      	ldr	r5, [r4, #0]
 800a2e0:	f015 0506 	ands.w	r5, r5, #6
 800a2e4:	d107      	bne.n	800a2f6 <_printf_common+0x52>
 800a2e6:	f104 0a19 	add.w	sl, r4, #25
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	42ab      	cmp	r3, r5
 800a2f4:	dc28      	bgt.n	800a348 <_printf_common+0xa4>
 800a2f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	3300      	adds	r3, #0
 800a2fe:	bf18      	it	ne
 800a300:	2301      	movne	r3, #1
 800a302:	0692      	lsls	r2, r2, #26
 800a304:	d42d      	bmi.n	800a362 <_printf_common+0xbe>
 800a306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a30a:	4639      	mov	r1, r7
 800a30c:	4630      	mov	r0, r6
 800a30e:	47c0      	blx	r8
 800a310:	3001      	adds	r0, #1
 800a312:	d020      	beq.n	800a356 <_printf_common+0xb2>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	68e5      	ldr	r5, [r4, #12]
 800a318:	f8d9 2000 	ldr.w	r2, [r9]
 800a31c:	f003 0306 	and.w	r3, r3, #6
 800a320:	2b04      	cmp	r3, #4
 800a322:	bf08      	it	eq
 800a324:	1aad      	subeq	r5, r5, r2
 800a326:	68a3      	ldr	r3, [r4, #8]
 800a328:	6922      	ldr	r2, [r4, #16]
 800a32a:	bf0c      	ite	eq
 800a32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a330:	2500      	movne	r5, #0
 800a332:	4293      	cmp	r3, r2
 800a334:	bfc4      	itt	gt
 800a336:	1a9b      	subgt	r3, r3, r2
 800a338:	18ed      	addgt	r5, r5, r3
 800a33a:	f04f 0900 	mov.w	r9, #0
 800a33e:	341a      	adds	r4, #26
 800a340:	454d      	cmp	r5, r9
 800a342:	d11a      	bne.n	800a37a <_printf_common+0xd6>
 800a344:	2000      	movs	r0, #0
 800a346:	e008      	b.n	800a35a <_printf_common+0xb6>
 800a348:	2301      	movs	r3, #1
 800a34a:	4652      	mov	r2, sl
 800a34c:	4639      	mov	r1, r7
 800a34e:	4630      	mov	r0, r6
 800a350:	47c0      	blx	r8
 800a352:	3001      	adds	r0, #1
 800a354:	d103      	bne.n	800a35e <_printf_common+0xba>
 800a356:	f04f 30ff 	mov.w	r0, #4294967295
 800a35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35e:	3501      	adds	r5, #1
 800a360:	e7c3      	b.n	800a2ea <_printf_common+0x46>
 800a362:	18e1      	adds	r1, r4, r3
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	2030      	movs	r0, #48	; 0x30
 800a368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a36c:	4422      	add	r2, r4
 800a36e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a372:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a376:	3302      	adds	r3, #2
 800a378:	e7c5      	b.n	800a306 <_printf_common+0x62>
 800a37a:	2301      	movs	r3, #1
 800a37c:	4622      	mov	r2, r4
 800a37e:	4639      	mov	r1, r7
 800a380:	4630      	mov	r0, r6
 800a382:	47c0      	blx	r8
 800a384:	3001      	adds	r0, #1
 800a386:	d0e6      	beq.n	800a356 <_printf_common+0xb2>
 800a388:	f109 0901 	add.w	r9, r9, #1
 800a38c:	e7d8      	b.n	800a340 <_printf_common+0x9c>
	...

0800a390 <_printf_i>:
 800a390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a394:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a398:	460c      	mov	r4, r1
 800a39a:	7e09      	ldrb	r1, [r1, #24]
 800a39c:	b085      	sub	sp, #20
 800a39e:	296e      	cmp	r1, #110	; 0x6e
 800a3a0:	4617      	mov	r7, r2
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	4698      	mov	r8, r3
 800a3a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a8:	f000 80b3 	beq.w	800a512 <_printf_i+0x182>
 800a3ac:	d822      	bhi.n	800a3f4 <_printf_i+0x64>
 800a3ae:	2963      	cmp	r1, #99	; 0x63
 800a3b0:	d036      	beq.n	800a420 <_printf_i+0x90>
 800a3b2:	d80a      	bhi.n	800a3ca <_printf_i+0x3a>
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	f000 80b9 	beq.w	800a52c <_printf_i+0x19c>
 800a3ba:	2958      	cmp	r1, #88	; 0x58
 800a3bc:	f000 8083 	beq.w	800a4c6 <_printf_i+0x136>
 800a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3c8:	e032      	b.n	800a430 <_printf_i+0xa0>
 800a3ca:	2964      	cmp	r1, #100	; 0x64
 800a3cc:	d001      	beq.n	800a3d2 <_printf_i+0x42>
 800a3ce:	2969      	cmp	r1, #105	; 0x69
 800a3d0:	d1f6      	bne.n	800a3c0 <_printf_i+0x30>
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	6813      	ldr	r3, [r2, #0]
 800a3d6:	0605      	lsls	r5, r0, #24
 800a3d8:	f103 0104 	add.w	r1, r3, #4
 800a3dc:	d52a      	bpl.n	800a434 <_printf_i+0xa4>
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6011      	str	r1, [r2, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da03      	bge.n	800a3ee <_printf_i+0x5e>
 800a3e6:	222d      	movs	r2, #45	; 0x2d
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3ee:	486f      	ldr	r0, [pc, #444]	; (800a5ac <_printf_i+0x21c>)
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	e039      	b.n	800a468 <_printf_i+0xd8>
 800a3f4:	2973      	cmp	r1, #115	; 0x73
 800a3f6:	f000 809d 	beq.w	800a534 <_printf_i+0x1a4>
 800a3fa:	d808      	bhi.n	800a40e <_printf_i+0x7e>
 800a3fc:	296f      	cmp	r1, #111	; 0x6f
 800a3fe:	d020      	beq.n	800a442 <_printf_i+0xb2>
 800a400:	2970      	cmp	r1, #112	; 0x70
 800a402:	d1dd      	bne.n	800a3c0 <_printf_i+0x30>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	f043 0320 	orr.w	r3, r3, #32
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	e003      	b.n	800a416 <_printf_i+0x86>
 800a40e:	2975      	cmp	r1, #117	; 0x75
 800a410:	d017      	beq.n	800a442 <_printf_i+0xb2>
 800a412:	2978      	cmp	r1, #120	; 0x78
 800a414:	d1d4      	bne.n	800a3c0 <_printf_i+0x30>
 800a416:	2378      	movs	r3, #120	; 0x78
 800a418:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a41c:	4864      	ldr	r0, [pc, #400]	; (800a5b0 <_printf_i+0x220>)
 800a41e:	e055      	b.n	800a4cc <_printf_i+0x13c>
 800a420:	6813      	ldr	r3, [r2, #0]
 800a422:	1d19      	adds	r1, r3, #4
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6011      	str	r1, [r2, #0]
 800a428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a42c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a430:	2301      	movs	r3, #1
 800a432:	e08c      	b.n	800a54e <_printf_i+0x1be>
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6011      	str	r1, [r2, #0]
 800a438:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a43c:	bf18      	it	ne
 800a43e:	b21b      	sxthne	r3, r3
 800a440:	e7cf      	b.n	800a3e2 <_printf_i+0x52>
 800a442:	6813      	ldr	r3, [r2, #0]
 800a444:	6825      	ldr	r5, [r4, #0]
 800a446:	1d18      	adds	r0, r3, #4
 800a448:	6010      	str	r0, [r2, #0]
 800a44a:	0628      	lsls	r0, r5, #24
 800a44c:	d501      	bpl.n	800a452 <_printf_i+0xc2>
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	e002      	b.n	800a458 <_printf_i+0xc8>
 800a452:	0668      	lsls	r0, r5, #25
 800a454:	d5fb      	bpl.n	800a44e <_printf_i+0xbe>
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	4854      	ldr	r0, [pc, #336]	; (800a5ac <_printf_i+0x21c>)
 800a45a:	296f      	cmp	r1, #111	; 0x6f
 800a45c:	bf14      	ite	ne
 800a45e:	220a      	movne	r2, #10
 800a460:	2208      	moveq	r2, #8
 800a462:	2100      	movs	r1, #0
 800a464:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a468:	6865      	ldr	r5, [r4, #4]
 800a46a:	60a5      	str	r5, [r4, #8]
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	f2c0 8095 	blt.w	800a59c <_printf_i+0x20c>
 800a472:	6821      	ldr	r1, [r4, #0]
 800a474:	f021 0104 	bic.w	r1, r1, #4
 800a478:	6021      	str	r1, [r4, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d13d      	bne.n	800a4fa <_printf_i+0x16a>
 800a47e:	2d00      	cmp	r5, #0
 800a480:	f040 808e 	bne.w	800a5a0 <_printf_i+0x210>
 800a484:	4665      	mov	r5, ip
 800a486:	2a08      	cmp	r2, #8
 800a488:	d10b      	bne.n	800a4a2 <_printf_i+0x112>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	07db      	lsls	r3, r3, #31
 800a48e:	d508      	bpl.n	800a4a2 <_printf_i+0x112>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	6862      	ldr	r2, [r4, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	bfde      	ittt	le
 800a498:	2330      	movle	r3, #48	; 0x30
 800a49a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a49e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4a2:	ebac 0305 	sub.w	r3, ip, r5
 800a4a6:	6123      	str	r3, [r4, #16]
 800a4a8:	f8cd 8000 	str.w	r8, [sp]
 800a4ac:	463b      	mov	r3, r7
 800a4ae:	aa03      	add	r2, sp, #12
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7ff fef6 	bl	800a2a4 <_printf_common>
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d14d      	bne.n	800a558 <_printf_i+0x1c8>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	b005      	add	sp, #20
 800a4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4c6:	4839      	ldr	r0, [pc, #228]	; (800a5ac <_printf_i+0x21c>)
 800a4c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4cc:	6813      	ldr	r3, [r2, #0]
 800a4ce:	6821      	ldr	r1, [r4, #0]
 800a4d0:	1d1d      	adds	r5, r3, #4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6015      	str	r5, [r2, #0]
 800a4d6:	060a      	lsls	r2, r1, #24
 800a4d8:	d50b      	bpl.n	800a4f2 <_printf_i+0x162>
 800a4da:	07ca      	lsls	r2, r1, #31
 800a4dc:	bf44      	itt	mi
 800a4de:	f041 0120 	orrmi.w	r1, r1, #32
 800a4e2:	6021      	strmi	r1, [r4, #0]
 800a4e4:	b91b      	cbnz	r3, 800a4ee <_printf_i+0x15e>
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	f022 0220 	bic.w	r2, r2, #32
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	e7b7      	b.n	800a462 <_printf_i+0xd2>
 800a4f2:	064d      	lsls	r5, r1, #25
 800a4f4:	bf48      	it	mi
 800a4f6:	b29b      	uxthmi	r3, r3
 800a4f8:	e7ef      	b.n	800a4da <_printf_i+0x14a>
 800a4fa:	4665      	mov	r5, ip
 800a4fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a500:	fb02 3311 	mls	r3, r2, r1, r3
 800a504:	5cc3      	ldrb	r3, [r0, r3]
 800a506:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a50a:	460b      	mov	r3, r1
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d1f5      	bne.n	800a4fc <_printf_i+0x16c>
 800a510:	e7b9      	b.n	800a486 <_printf_i+0xf6>
 800a512:	6813      	ldr	r3, [r2, #0]
 800a514:	6825      	ldr	r5, [r4, #0]
 800a516:	6961      	ldr	r1, [r4, #20]
 800a518:	1d18      	adds	r0, r3, #4
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	0628      	lsls	r0, r5, #24
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	d501      	bpl.n	800a526 <_printf_i+0x196>
 800a522:	6019      	str	r1, [r3, #0]
 800a524:	e002      	b.n	800a52c <_printf_i+0x19c>
 800a526:	066a      	lsls	r2, r5, #25
 800a528:	d5fb      	bpl.n	800a522 <_printf_i+0x192>
 800a52a:	8019      	strh	r1, [r3, #0]
 800a52c:	2300      	movs	r3, #0
 800a52e:	6123      	str	r3, [r4, #16]
 800a530:	4665      	mov	r5, ip
 800a532:	e7b9      	b.n	800a4a8 <_printf_i+0x118>
 800a534:	6813      	ldr	r3, [r2, #0]
 800a536:	1d19      	adds	r1, r3, #4
 800a538:	6011      	str	r1, [r2, #0]
 800a53a:	681d      	ldr	r5, [r3, #0]
 800a53c:	6862      	ldr	r2, [r4, #4]
 800a53e:	2100      	movs	r1, #0
 800a540:	4628      	mov	r0, r5
 800a542:	f7f5 fe55 	bl	80001f0 <memchr>
 800a546:	b108      	cbz	r0, 800a54c <_printf_i+0x1bc>
 800a548:	1b40      	subs	r0, r0, r5
 800a54a:	6060      	str	r0, [r4, #4]
 800a54c:	6863      	ldr	r3, [r4, #4]
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	2300      	movs	r3, #0
 800a552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a556:	e7a7      	b.n	800a4a8 <_printf_i+0x118>
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4639      	mov	r1, r7
 800a55e:	4630      	mov	r0, r6
 800a560:	47c0      	blx	r8
 800a562:	3001      	adds	r0, #1
 800a564:	d0aa      	beq.n	800a4bc <_printf_i+0x12c>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	079b      	lsls	r3, r3, #30
 800a56a:	d413      	bmi.n	800a594 <_printf_i+0x204>
 800a56c:	68e0      	ldr	r0, [r4, #12]
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	4298      	cmp	r0, r3
 800a572:	bfb8      	it	lt
 800a574:	4618      	movlt	r0, r3
 800a576:	e7a3      	b.n	800a4c0 <_printf_i+0x130>
 800a578:	2301      	movs	r3, #1
 800a57a:	464a      	mov	r2, r9
 800a57c:	4639      	mov	r1, r7
 800a57e:	4630      	mov	r0, r6
 800a580:	47c0      	blx	r8
 800a582:	3001      	adds	r0, #1
 800a584:	d09a      	beq.n	800a4bc <_printf_i+0x12c>
 800a586:	3501      	adds	r5, #1
 800a588:	68e3      	ldr	r3, [r4, #12]
 800a58a:	9a03      	ldr	r2, [sp, #12]
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	42ab      	cmp	r3, r5
 800a590:	dcf2      	bgt.n	800a578 <_printf_i+0x1e8>
 800a592:	e7eb      	b.n	800a56c <_printf_i+0x1dc>
 800a594:	2500      	movs	r5, #0
 800a596:	f104 0919 	add.w	r9, r4, #25
 800a59a:	e7f5      	b.n	800a588 <_printf_i+0x1f8>
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1ac      	bne.n	800a4fa <_printf_i+0x16a>
 800a5a0:	7803      	ldrb	r3, [r0, #0]
 800a5a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5aa:	e76c      	b.n	800a486 <_printf_i+0xf6>
 800a5ac:	0800e63a 	.word	0x0800e63a
 800a5b0:	0800e64b 	.word	0x0800e64b

0800a5b4 <iprintf>:
 800a5b4:	b40f      	push	{r0, r1, r2, r3}
 800a5b6:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <iprintf+0x2c>)
 800a5b8:	b513      	push	{r0, r1, r4, lr}
 800a5ba:	681c      	ldr	r4, [r3, #0]
 800a5bc:	b124      	cbz	r4, 800a5c8 <iprintf+0x14>
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	b913      	cbnz	r3, 800a5c8 <iprintf+0x14>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f001 fed4 	bl	800c370 <__sinit>
 800a5c8:	ab05      	add	r3, sp, #20
 800a5ca:	9a04      	ldr	r2, [sp, #16]
 800a5cc:	68a1      	ldr	r1, [r4, #8]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f003 f947 	bl	800d864 <_vfiprintf_r>
 800a5d6:	b002      	add	sp, #8
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr
 800a5e0:	2000000c 	.word	0x2000000c

0800a5e4 <_puts_r>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	460e      	mov	r6, r1
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	b118      	cbz	r0, 800a5f4 <_puts_r+0x10>
 800a5ec:	6983      	ldr	r3, [r0, #24]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <_puts_r+0x10>
 800a5f0:	f001 febe 	bl	800c370 <__sinit>
 800a5f4:	69ab      	ldr	r3, [r5, #24]
 800a5f6:	68ac      	ldr	r4, [r5, #8]
 800a5f8:	b913      	cbnz	r3, 800a600 <_puts_r+0x1c>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f001 feb8 	bl	800c370 <__sinit>
 800a600:	4b23      	ldr	r3, [pc, #140]	; (800a690 <_puts_r+0xac>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d117      	bne.n	800a636 <_puts_r+0x52>
 800a606:	686c      	ldr	r4, [r5, #4]
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	071b      	lsls	r3, r3, #28
 800a60c:	d51d      	bpl.n	800a64a <_puts_r+0x66>
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b1db      	cbz	r3, 800a64a <_puts_r+0x66>
 800a612:	3e01      	subs	r6, #1
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a61a:	3b01      	subs	r3, #1
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	b9e9      	cbnz	r1, 800a65c <_puts_r+0x78>
 800a620:	2b00      	cmp	r3, #0
 800a622:	da2e      	bge.n	800a682 <_puts_r+0x9e>
 800a624:	4622      	mov	r2, r4
 800a626:	210a      	movs	r1, #10
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 fead 	bl	800b388 <__swbuf_r>
 800a62e:	3001      	adds	r0, #1
 800a630:	d011      	beq.n	800a656 <_puts_r+0x72>
 800a632:	200a      	movs	r0, #10
 800a634:	e011      	b.n	800a65a <_puts_r+0x76>
 800a636:	4b17      	ldr	r3, [pc, #92]	; (800a694 <_puts_r+0xb0>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	d101      	bne.n	800a640 <_puts_r+0x5c>
 800a63c:	68ac      	ldr	r4, [r5, #8]
 800a63e:	e7e3      	b.n	800a608 <_puts_r+0x24>
 800a640:	4b15      	ldr	r3, [pc, #84]	; (800a698 <_puts_r+0xb4>)
 800a642:	429c      	cmp	r4, r3
 800a644:	bf08      	it	eq
 800a646:	68ec      	ldreq	r4, [r5, #12]
 800a648:	e7de      	b.n	800a608 <_puts_r+0x24>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4628      	mov	r0, r5
 800a64e:	f000 feed 	bl	800b42c <__swsetup_r>
 800a652:	2800      	cmp	r0, #0
 800a654:	d0dd      	beq.n	800a612 <_puts_r+0x2e>
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	da04      	bge.n	800a66a <_puts_r+0x86>
 800a660:	69a2      	ldr	r2, [r4, #24]
 800a662:	429a      	cmp	r2, r3
 800a664:	dc06      	bgt.n	800a674 <_puts_r+0x90>
 800a666:	290a      	cmp	r1, #10
 800a668:	d004      	beq.n	800a674 <_puts_r+0x90>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	6022      	str	r2, [r4, #0]
 800a670:	7019      	strb	r1, [r3, #0]
 800a672:	e7cf      	b.n	800a614 <_puts_r+0x30>
 800a674:	4622      	mov	r2, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 fe86 	bl	800b388 <__swbuf_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	d1c9      	bne.n	800a614 <_puts_r+0x30>
 800a680:	e7e9      	b.n	800a656 <_puts_r+0x72>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	200a      	movs	r0, #10
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	7018      	strb	r0, [r3, #0]
 800a68c:	e7e5      	b.n	800a65a <_puts_r+0x76>
 800a68e:	bf00      	nop
 800a690:	0800e6e0 	.word	0x0800e6e0
 800a694:	0800e700 	.word	0x0800e700
 800a698:	0800e6c0 	.word	0x0800e6c0

0800a69c <puts>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <puts+0xc>)
 800a69e:	4601      	mov	r1, r0
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f7ff bf9f 	b.w	800a5e4 <_puts_r>
 800a6a6:	bf00      	nop
 800a6a8:	2000000c 	.word	0x2000000c

0800a6ac <siprintf>:
 800a6ac:	b40e      	push	{r1, r2, r3}
 800a6ae:	b500      	push	{lr}
 800a6b0:	b09c      	sub	sp, #112	; 0x70
 800a6b2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6b4:	9002      	str	r0, [sp, #8]
 800a6b6:	9006      	str	r0, [sp, #24]
 800a6b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6bc:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <siprintf+0x38>)
 800a6be:	9107      	str	r1, [sp, #28]
 800a6c0:	9104      	str	r1, [sp, #16]
 800a6c2:	4909      	ldr	r1, [pc, #36]	; (800a6e8 <siprintf+0x3c>)
 800a6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c8:	9105      	str	r1, [sp, #20]
 800a6ca:	6800      	ldr	r0, [r0, #0]
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	a902      	add	r1, sp, #8
 800a6d0:	f002 ffa6 	bl	800d620 <_svfiprintf_r>
 800a6d4:	9b02      	ldr	r3, [sp, #8]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	b01c      	add	sp, #112	; 0x70
 800a6dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e0:	b003      	add	sp, #12
 800a6e2:	4770      	bx	lr
 800a6e4:	2000000c 	.word	0x2000000c
 800a6e8:	ffff0208 	.word	0xffff0208

0800a6ec <strcat>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	781a      	ldrb	r2, [r3, #0]
 800a6f2:	1c5c      	adds	r4, r3, #1
 800a6f4:	b93a      	cbnz	r2, 800a706 <strcat+0x1a>
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a700:	2a00      	cmp	r2, #0
 800a702:	d1f9      	bne.n	800a6f8 <strcat+0xc>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	4623      	mov	r3, r4
 800a708:	e7f2      	b.n	800a6f0 <strcat+0x4>

0800a70a <strstr>:
 800a70a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a70c:	7803      	ldrb	r3, [r0, #0]
 800a70e:	b17b      	cbz	r3, 800a730 <strstr+0x26>
 800a710:	4604      	mov	r4, r0
 800a712:	7823      	ldrb	r3, [r4, #0]
 800a714:	4620      	mov	r0, r4
 800a716:	1c66      	adds	r6, r4, #1
 800a718:	b17b      	cbz	r3, 800a73a <strstr+0x30>
 800a71a:	1e4a      	subs	r2, r1, #1
 800a71c:	1e63      	subs	r3, r4, #1
 800a71e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a722:	b14d      	cbz	r5, 800a738 <strstr+0x2e>
 800a724:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a728:	42af      	cmp	r7, r5
 800a72a:	4634      	mov	r4, r6
 800a72c:	d0f7      	beq.n	800a71e <strstr+0x14>
 800a72e:	e7f0      	b.n	800a712 <strstr+0x8>
 800a730:	780b      	ldrb	r3, [r1, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	bf18      	it	ne
 800a736:	2000      	movne	r0, #0
 800a738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73a:	4618      	mov	r0, r3
 800a73c:	e7fc      	b.n	800a738 <strstr+0x2e>

0800a73e <sulp>:
 800a73e:	b570      	push	{r4, r5, r6, lr}
 800a740:	4604      	mov	r4, r0
 800a742:	460d      	mov	r5, r1
 800a744:	ec45 4b10 	vmov	d0, r4, r5
 800a748:	4616      	mov	r6, r2
 800a74a:	f002 fd25 	bl	800d198 <__ulp>
 800a74e:	ec51 0b10 	vmov	r0, r1, d0
 800a752:	b17e      	cbz	r6, 800a774 <sulp+0x36>
 800a754:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a758:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	dd09      	ble.n	800a774 <sulp+0x36>
 800a760:	051b      	lsls	r3, r3, #20
 800a762:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a766:	2400      	movs	r4, #0
 800a768:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a76c:	4622      	mov	r2, r4
 800a76e:	462b      	mov	r3, r5
 800a770:	f7f5 ff4a 	bl	8000608 <__aeabi_dmul>
 800a774:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a778 <_strtod_l>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	461f      	mov	r7, r3
 800a77e:	b0a1      	sub	sp, #132	; 0x84
 800a780:	2300      	movs	r3, #0
 800a782:	4681      	mov	r9, r0
 800a784:	4638      	mov	r0, r7
 800a786:	460e      	mov	r6, r1
 800a788:	9217      	str	r2, [sp, #92]	; 0x5c
 800a78a:	931c      	str	r3, [sp, #112]	; 0x70
 800a78c:	f002 f9a0 	bl	800cad0 <__localeconv_l>
 800a790:	4680      	mov	r8, r0
 800a792:	6800      	ldr	r0, [r0, #0]
 800a794:	f7f5 fd24 	bl	80001e0 <strlen>
 800a798:	f04f 0a00 	mov.w	sl, #0
 800a79c:	4604      	mov	r4, r0
 800a79e:	f04f 0b00 	mov.w	fp, #0
 800a7a2:	961b      	str	r6, [sp, #108]	; 0x6c
 800a7a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7a6:	781a      	ldrb	r2, [r3, #0]
 800a7a8:	2a0d      	cmp	r2, #13
 800a7aa:	d832      	bhi.n	800a812 <_strtod_l+0x9a>
 800a7ac:	2a09      	cmp	r2, #9
 800a7ae:	d236      	bcs.n	800a81e <_strtod_l+0xa6>
 800a7b0:	2a00      	cmp	r2, #0
 800a7b2:	d03e      	beq.n	800a832 <_strtod_l+0xba>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a7b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a7ba:	782b      	ldrb	r3, [r5, #0]
 800a7bc:	2b30      	cmp	r3, #48	; 0x30
 800a7be:	f040 80ac 	bne.w	800a91a <_strtod_l+0x1a2>
 800a7c2:	786b      	ldrb	r3, [r5, #1]
 800a7c4:	2b58      	cmp	r3, #88	; 0x58
 800a7c6:	d001      	beq.n	800a7cc <_strtod_l+0x54>
 800a7c8:	2b78      	cmp	r3, #120	; 0x78
 800a7ca:	d167      	bne.n	800a89c <_strtod_l+0x124>
 800a7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	ab1c      	add	r3, sp, #112	; 0x70
 800a7d2:	9300      	str	r3, [sp, #0]
 800a7d4:	9702      	str	r7, [sp, #8]
 800a7d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7d8:	4a88      	ldr	r2, [pc, #544]	; (800a9fc <_strtod_l+0x284>)
 800a7da:	a91b      	add	r1, sp, #108	; 0x6c
 800a7dc:	4648      	mov	r0, r9
 800a7de:	f001 fea0 	bl	800c522 <__gethex>
 800a7e2:	f010 0407 	ands.w	r4, r0, #7
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	d005      	beq.n	800a7f6 <_strtod_l+0x7e>
 800a7ea:	2c06      	cmp	r4, #6
 800a7ec:	d12b      	bne.n	800a846 <_strtod_l+0xce>
 800a7ee:	3501      	adds	r5, #1
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	951b      	str	r5, [sp, #108]	; 0x6c
 800a7f4:	930d      	str	r3, [sp, #52]	; 0x34
 800a7f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f040 859a 	bne.w	800b332 <_strtod_l+0xbba>
 800a7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a800:	b1e3      	cbz	r3, 800a83c <_strtod_l+0xc4>
 800a802:	4652      	mov	r2, sl
 800a804:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a808:	ec43 2b10 	vmov	d0, r2, r3
 800a80c:	b021      	add	sp, #132	; 0x84
 800a80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a812:	2a2b      	cmp	r2, #43	; 0x2b
 800a814:	d015      	beq.n	800a842 <_strtod_l+0xca>
 800a816:	2a2d      	cmp	r2, #45	; 0x2d
 800a818:	d004      	beq.n	800a824 <_strtod_l+0xac>
 800a81a:	2a20      	cmp	r2, #32
 800a81c:	d1ca      	bne.n	800a7b4 <_strtod_l+0x3c>
 800a81e:	3301      	adds	r3, #1
 800a820:	931b      	str	r3, [sp, #108]	; 0x6c
 800a822:	e7bf      	b.n	800a7a4 <_strtod_l+0x2c>
 800a824:	2201      	movs	r2, #1
 800a826:	920d      	str	r2, [sp, #52]	; 0x34
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a82c:	785b      	ldrb	r3, [r3, #1]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1c2      	bne.n	800a7b8 <_strtod_l+0x40>
 800a832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a834:	961b      	str	r6, [sp, #108]	; 0x6c
 800a836:	2b00      	cmp	r3, #0
 800a838:	f040 8579 	bne.w	800b32e <_strtod_l+0xbb6>
 800a83c:	4652      	mov	r2, sl
 800a83e:	465b      	mov	r3, fp
 800a840:	e7e2      	b.n	800a808 <_strtod_l+0x90>
 800a842:	2200      	movs	r2, #0
 800a844:	e7ef      	b.n	800a826 <_strtod_l+0xae>
 800a846:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a848:	b13a      	cbz	r2, 800a85a <_strtod_l+0xe2>
 800a84a:	2135      	movs	r1, #53	; 0x35
 800a84c:	a81e      	add	r0, sp, #120	; 0x78
 800a84e:	f002 fd9b 	bl	800d388 <__copybits>
 800a852:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a854:	4648      	mov	r0, r9
 800a856:	f002 fa08 	bl	800cc6a <_Bfree>
 800a85a:	3c01      	subs	r4, #1
 800a85c:	2c04      	cmp	r4, #4
 800a85e:	d806      	bhi.n	800a86e <_strtod_l+0xf6>
 800a860:	e8df f004 	tbb	[pc, r4]
 800a864:	1714030a 	.word	0x1714030a
 800a868:	0a          	.byte	0x0a
 800a869:	00          	.byte	0x00
 800a86a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a86e:	0730      	lsls	r0, r6, #28
 800a870:	d5c1      	bpl.n	800a7f6 <_strtod_l+0x7e>
 800a872:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a876:	e7be      	b.n	800a7f6 <_strtod_l+0x7e>
 800a878:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a87c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a87e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a882:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a886:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a88a:	e7f0      	b.n	800a86e <_strtod_l+0xf6>
 800a88c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800aa00 <_strtod_l+0x288>
 800a890:	e7ed      	b.n	800a86e <_strtod_l+0xf6>
 800a892:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a896:	f04f 3aff 	mov.w	sl, #4294967295
 800a89a:	e7e8      	b.n	800a86e <_strtod_l+0xf6>
 800a89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	921b      	str	r2, [sp, #108]	; 0x6c
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	2b30      	cmp	r3, #48	; 0x30
 800a8a6:	d0f9      	beq.n	800a89c <_strtod_l+0x124>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0a4      	beq.n	800a7f6 <_strtod_l+0x7e>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	9306      	str	r3, [sp, #24]
 800a8b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8b4:	9308      	str	r3, [sp, #32]
 800a8b6:	9507      	str	r5, [sp, #28]
 800a8b8:	9505      	str	r5, [sp, #20]
 800a8ba:	220a      	movs	r2, #10
 800a8bc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a8be:	7807      	ldrb	r7, [r0, #0]
 800a8c0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a8c4:	b2d9      	uxtb	r1, r3
 800a8c6:	2909      	cmp	r1, #9
 800a8c8:	d929      	bls.n	800a91e <_strtod_l+0x1a6>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	f8d8 1000 	ldr.w	r1, [r8]
 800a8d0:	f003 f931 	bl	800db36 <strncmp>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d031      	beq.n	800a93c <_strtod_l+0x1c4>
 800a8d8:	2000      	movs	r0, #0
 800a8da:	9c05      	ldr	r4, [sp, #20]
 800a8dc:	9004      	str	r0, [sp, #16]
 800a8de:	463b      	mov	r3, r7
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	2b65      	cmp	r3, #101	; 0x65
 800a8e4:	d001      	beq.n	800a8ea <_strtod_l+0x172>
 800a8e6:	2b45      	cmp	r3, #69	; 0x45
 800a8e8:	d114      	bne.n	800a914 <_strtod_l+0x19c>
 800a8ea:	b924      	cbnz	r4, 800a8f6 <_strtod_l+0x17e>
 800a8ec:	b910      	cbnz	r0, 800a8f4 <_strtod_l+0x17c>
 800a8ee:	9b06      	ldr	r3, [sp, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d09e      	beq.n	800a832 <_strtod_l+0xba>
 800a8f4:	2400      	movs	r4, #0
 800a8f6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a8f8:	1c73      	adds	r3, r6, #1
 800a8fa:	931b      	str	r3, [sp, #108]	; 0x6c
 800a8fc:	7873      	ldrb	r3, [r6, #1]
 800a8fe:	2b2b      	cmp	r3, #43	; 0x2b
 800a900:	d078      	beq.n	800a9f4 <_strtod_l+0x27c>
 800a902:	2b2d      	cmp	r3, #45	; 0x2d
 800a904:	d070      	beq.n	800a9e8 <_strtod_l+0x270>
 800a906:	f04f 0c00 	mov.w	ip, #0
 800a90a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a90e:	2f09      	cmp	r7, #9
 800a910:	d97c      	bls.n	800aa0c <_strtod_l+0x294>
 800a912:	961b      	str	r6, [sp, #108]	; 0x6c
 800a914:	f04f 0e00 	mov.w	lr, #0
 800a918:	e09a      	b.n	800aa50 <_strtod_l+0x2d8>
 800a91a:	2300      	movs	r3, #0
 800a91c:	e7c7      	b.n	800a8ae <_strtod_l+0x136>
 800a91e:	9905      	ldr	r1, [sp, #20]
 800a920:	2908      	cmp	r1, #8
 800a922:	bfdd      	ittte	le
 800a924:	9907      	ldrle	r1, [sp, #28]
 800a926:	fb02 3301 	mlale	r3, r2, r1, r3
 800a92a:	9307      	strle	r3, [sp, #28]
 800a92c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a930:	9b05      	ldr	r3, [sp, #20]
 800a932:	3001      	adds	r0, #1
 800a934:	3301      	adds	r3, #1
 800a936:	9305      	str	r3, [sp, #20]
 800a938:	901b      	str	r0, [sp, #108]	; 0x6c
 800a93a:	e7bf      	b.n	800a8bc <_strtod_l+0x144>
 800a93c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a93e:	191a      	adds	r2, r3, r4
 800a940:	921b      	str	r2, [sp, #108]	; 0x6c
 800a942:	9a05      	ldr	r2, [sp, #20]
 800a944:	5d1b      	ldrb	r3, [r3, r4]
 800a946:	2a00      	cmp	r2, #0
 800a948:	d037      	beq.n	800a9ba <_strtod_l+0x242>
 800a94a:	9c05      	ldr	r4, [sp, #20]
 800a94c:	4602      	mov	r2, r0
 800a94e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a952:	2909      	cmp	r1, #9
 800a954:	d913      	bls.n	800a97e <_strtod_l+0x206>
 800a956:	2101      	movs	r1, #1
 800a958:	9104      	str	r1, [sp, #16]
 800a95a:	e7c2      	b.n	800a8e2 <_strtod_l+0x16a>
 800a95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	921b      	str	r2, [sp, #108]	; 0x6c
 800a962:	785b      	ldrb	r3, [r3, #1]
 800a964:	3001      	adds	r0, #1
 800a966:	2b30      	cmp	r3, #48	; 0x30
 800a968:	d0f8      	beq.n	800a95c <_strtod_l+0x1e4>
 800a96a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a96e:	2a08      	cmp	r2, #8
 800a970:	f200 84e4 	bhi.w	800b33c <_strtod_l+0xbc4>
 800a974:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a976:	9208      	str	r2, [sp, #32]
 800a978:	4602      	mov	r2, r0
 800a97a:	2000      	movs	r0, #0
 800a97c:	4604      	mov	r4, r0
 800a97e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a982:	f100 0101 	add.w	r1, r0, #1
 800a986:	d012      	beq.n	800a9ae <_strtod_l+0x236>
 800a988:	440a      	add	r2, r1
 800a98a:	eb00 0c04 	add.w	ip, r0, r4
 800a98e:	4621      	mov	r1, r4
 800a990:	270a      	movs	r7, #10
 800a992:	458c      	cmp	ip, r1
 800a994:	d113      	bne.n	800a9be <_strtod_l+0x246>
 800a996:	1821      	adds	r1, r4, r0
 800a998:	2908      	cmp	r1, #8
 800a99a:	f104 0401 	add.w	r4, r4, #1
 800a99e:	4404      	add	r4, r0
 800a9a0:	dc19      	bgt.n	800a9d6 <_strtod_l+0x25e>
 800a9a2:	9b07      	ldr	r3, [sp, #28]
 800a9a4:	210a      	movs	r1, #10
 800a9a6:	fb01 e303 	mla	r3, r1, r3, lr
 800a9aa:	9307      	str	r3, [sp, #28]
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9b0:	1c58      	adds	r0, r3, #1
 800a9b2:	901b      	str	r0, [sp, #108]	; 0x6c
 800a9b4:	785b      	ldrb	r3, [r3, #1]
 800a9b6:	4608      	mov	r0, r1
 800a9b8:	e7c9      	b.n	800a94e <_strtod_l+0x1d6>
 800a9ba:	9805      	ldr	r0, [sp, #20]
 800a9bc:	e7d3      	b.n	800a966 <_strtod_l+0x1ee>
 800a9be:	2908      	cmp	r1, #8
 800a9c0:	f101 0101 	add.w	r1, r1, #1
 800a9c4:	dc03      	bgt.n	800a9ce <_strtod_l+0x256>
 800a9c6:	9b07      	ldr	r3, [sp, #28]
 800a9c8:	437b      	muls	r3, r7
 800a9ca:	9307      	str	r3, [sp, #28]
 800a9cc:	e7e1      	b.n	800a992 <_strtod_l+0x21a>
 800a9ce:	2910      	cmp	r1, #16
 800a9d0:	bfd8      	it	le
 800a9d2:	437d      	mulle	r5, r7
 800a9d4:	e7dd      	b.n	800a992 <_strtod_l+0x21a>
 800a9d6:	2c10      	cmp	r4, #16
 800a9d8:	bfdc      	itt	le
 800a9da:	210a      	movle	r1, #10
 800a9dc:	fb01 e505 	mlale	r5, r1, r5, lr
 800a9e0:	e7e4      	b.n	800a9ac <_strtod_l+0x234>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	e781      	b.n	800a8ec <_strtod_l+0x174>
 800a9e8:	f04f 0c01 	mov.w	ip, #1
 800a9ec:	1cb3      	adds	r3, r6, #2
 800a9ee:	931b      	str	r3, [sp, #108]	; 0x6c
 800a9f0:	78b3      	ldrb	r3, [r6, #2]
 800a9f2:	e78a      	b.n	800a90a <_strtod_l+0x192>
 800a9f4:	f04f 0c00 	mov.w	ip, #0
 800a9f8:	e7f8      	b.n	800a9ec <_strtod_l+0x274>
 800a9fa:	bf00      	nop
 800a9fc:	0800e65c 	.word	0x0800e65c
 800aa00:	7ff00000 	.word	0x7ff00000
 800aa04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa06:	1c5f      	adds	r7, r3, #1
 800aa08:	971b      	str	r7, [sp, #108]	; 0x6c
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	2b30      	cmp	r3, #48	; 0x30
 800aa0e:	d0f9      	beq.n	800aa04 <_strtod_l+0x28c>
 800aa10:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800aa14:	2f08      	cmp	r7, #8
 800aa16:	f63f af7d 	bhi.w	800a914 <_strtod_l+0x19c>
 800aa1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800aa1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa20:	930a      	str	r3, [sp, #40]	; 0x28
 800aa22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa24:	1c5f      	adds	r7, r3, #1
 800aa26:	971b      	str	r7, [sp, #108]	; 0x6c
 800aa28:	785b      	ldrb	r3, [r3, #1]
 800aa2a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800aa2e:	f1b8 0f09 	cmp.w	r8, #9
 800aa32:	d937      	bls.n	800aaa4 <_strtod_l+0x32c>
 800aa34:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa36:	1a7f      	subs	r7, r7, r1
 800aa38:	2f08      	cmp	r7, #8
 800aa3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aa3e:	dc37      	bgt.n	800aab0 <_strtod_l+0x338>
 800aa40:	45be      	cmp	lr, r7
 800aa42:	bfa8      	it	ge
 800aa44:	46be      	movge	lr, r7
 800aa46:	f1bc 0f00 	cmp.w	ip, #0
 800aa4a:	d001      	beq.n	800aa50 <_strtod_l+0x2d8>
 800aa4c:	f1ce 0e00 	rsb	lr, lr, #0
 800aa50:	2c00      	cmp	r4, #0
 800aa52:	d151      	bne.n	800aaf8 <_strtod_l+0x380>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	f47f aece 	bne.w	800a7f6 <_strtod_l+0x7e>
 800aa5a:	9a06      	ldr	r2, [sp, #24]
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	f47f aeca 	bne.w	800a7f6 <_strtod_l+0x7e>
 800aa62:	9a04      	ldr	r2, [sp, #16]
 800aa64:	2a00      	cmp	r2, #0
 800aa66:	f47f aee4 	bne.w	800a832 <_strtod_l+0xba>
 800aa6a:	2b4e      	cmp	r3, #78	; 0x4e
 800aa6c:	d027      	beq.n	800aabe <_strtod_l+0x346>
 800aa6e:	dc21      	bgt.n	800aab4 <_strtod_l+0x33c>
 800aa70:	2b49      	cmp	r3, #73	; 0x49
 800aa72:	f47f aede 	bne.w	800a832 <_strtod_l+0xba>
 800aa76:	49a0      	ldr	r1, [pc, #640]	; (800acf8 <_strtod_l+0x580>)
 800aa78:	a81b      	add	r0, sp, #108	; 0x6c
 800aa7a:	f001 ff85 	bl	800c988 <__match>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f43f aed7 	beq.w	800a832 <_strtod_l+0xba>
 800aa84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa86:	499d      	ldr	r1, [pc, #628]	; (800acfc <_strtod_l+0x584>)
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	a81b      	add	r0, sp, #108	; 0x6c
 800aa8c:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa8e:	f001 ff7b 	bl	800c988 <__match>
 800aa92:	b910      	cbnz	r0, 800aa9a <_strtod_l+0x322>
 800aa94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa96:	3301      	adds	r3, #1
 800aa98:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa9a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ad10 <_strtod_l+0x598>
 800aa9e:	f04f 0a00 	mov.w	sl, #0
 800aaa2:	e6a8      	b.n	800a7f6 <_strtod_l+0x7e>
 800aaa4:	210a      	movs	r1, #10
 800aaa6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800aaaa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aaae:	e7b8      	b.n	800aa22 <_strtod_l+0x2aa>
 800aab0:	46be      	mov	lr, r7
 800aab2:	e7c8      	b.n	800aa46 <_strtod_l+0x2ce>
 800aab4:	2b69      	cmp	r3, #105	; 0x69
 800aab6:	d0de      	beq.n	800aa76 <_strtod_l+0x2fe>
 800aab8:	2b6e      	cmp	r3, #110	; 0x6e
 800aaba:	f47f aeba 	bne.w	800a832 <_strtod_l+0xba>
 800aabe:	4990      	ldr	r1, [pc, #576]	; (800ad00 <_strtod_l+0x588>)
 800aac0:	a81b      	add	r0, sp, #108	; 0x6c
 800aac2:	f001 ff61 	bl	800c988 <__match>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f aeb3 	beq.w	800a832 <_strtod_l+0xba>
 800aacc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b28      	cmp	r3, #40	; 0x28
 800aad2:	d10e      	bne.n	800aaf2 <_strtod_l+0x37a>
 800aad4:	aa1e      	add	r2, sp, #120	; 0x78
 800aad6:	498b      	ldr	r1, [pc, #556]	; (800ad04 <_strtod_l+0x58c>)
 800aad8:	a81b      	add	r0, sp, #108	; 0x6c
 800aada:	f001 ff69 	bl	800c9b0 <__hexnan>
 800aade:	2805      	cmp	r0, #5
 800aae0:	d107      	bne.n	800aaf2 <_strtod_l+0x37a>
 800aae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aae4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800aae8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aaec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aaf0:	e681      	b.n	800a7f6 <_strtod_l+0x7e>
 800aaf2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ad18 <_strtod_l+0x5a0>
 800aaf6:	e7d2      	b.n	800aa9e <_strtod_l+0x326>
 800aaf8:	ebae 0302 	sub.w	r3, lr, r2
 800aafc:	9306      	str	r3, [sp, #24]
 800aafe:	9b05      	ldr	r3, [sp, #20]
 800ab00:	9807      	ldr	r0, [sp, #28]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf08      	it	eq
 800ab06:	4623      	moveq	r3, r4
 800ab08:	2c10      	cmp	r4, #16
 800ab0a:	9305      	str	r3, [sp, #20]
 800ab0c:	46a0      	mov	r8, r4
 800ab0e:	bfa8      	it	ge
 800ab10:	f04f 0810 	movge.w	r8, #16
 800ab14:	f7f5 fcfe 	bl	8000514 <__aeabi_ui2d>
 800ab18:	2c09      	cmp	r4, #9
 800ab1a:	4682      	mov	sl, r0
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	dc13      	bgt.n	800ab48 <_strtod_l+0x3d0>
 800ab20:	9b06      	ldr	r3, [sp, #24]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	f43f ae67 	beq.w	800a7f6 <_strtod_l+0x7e>
 800ab28:	9b06      	ldr	r3, [sp, #24]
 800ab2a:	dd7a      	ble.n	800ac22 <_strtod_l+0x4aa>
 800ab2c:	2b16      	cmp	r3, #22
 800ab2e:	dc61      	bgt.n	800abf4 <_strtod_l+0x47c>
 800ab30:	4a75      	ldr	r2, [pc, #468]	; (800ad08 <_strtod_l+0x590>)
 800ab32:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ab36:	e9de 0100 	ldrd	r0, r1, [lr]
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	465b      	mov	r3, fp
 800ab3e:	f7f5 fd63 	bl	8000608 <__aeabi_dmul>
 800ab42:	4682      	mov	sl, r0
 800ab44:	468b      	mov	fp, r1
 800ab46:	e656      	b.n	800a7f6 <_strtod_l+0x7e>
 800ab48:	4b6f      	ldr	r3, [pc, #444]	; (800ad08 <_strtod_l+0x590>)
 800ab4a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ab4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab52:	f7f5 fd59 	bl	8000608 <__aeabi_dmul>
 800ab56:	4606      	mov	r6, r0
 800ab58:	4628      	mov	r0, r5
 800ab5a:	460f      	mov	r7, r1
 800ab5c:	f7f5 fcda 	bl	8000514 <__aeabi_ui2d>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fb98 	bl	800029c <__adddf3>
 800ab6c:	2c0f      	cmp	r4, #15
 800ab6e:	4682      	mov	sl, r0
 800ab70:	468b      	mov	fp, r1
 800ab72:	ddd5      	ble.n	800ab20 <_strtod_l+0x3a8>
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	eba4 0808 	sub.w	r8, r4, r8
 800ab7a:	4498      	add	r8, r3
 800ab7c:	f1b8 0f00 	cmp.w	r8, #0
 800ab80:	f340 8096 	ble.w	800acb0 <_strtod_l+0x538>
 800ab84:	f018 030f 	ands.w	r3, r8, #15
 800ab88:	d00a      	beq.n	800aba0 <_strtod_l+0x428>
 800ab8a:	495f      	ldr	r1, [pc, #380]	; (800ad08 <_strtod_l+0x590>)
 800ab8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab90:	4652      	mov	r2, sl
 800ab92:	465b      	mov	r3, fp
 800ab94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab98:	f7f5 fd36 	bl	8000608 <__aeabi_dmul>
 800ab9c:	4682      	mov	sl, r0
 800ab9e:	468b      	mov	fp, r1
 800aba0:	f038 080f 	bics.w	r8, r8, #15
 800aba4:	d073      	beq.n	800ac8e <_strtod_l+0x516>
 800aba6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800abaa:	dd47      	ble.n	800ac3c <_strtod_l+0x4c4>
 800abac:	2400      	movs	r4, #0
 800abae:	46a0      	mov	r8, r4
 800abb0:	9407      	str	r4, [sp, #28]
 800abb2:	9405      	str	r4, [sp, #20]
 800abb4:	2322      	movs	r3, #34	; 0x22
 800abb6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ad10 <_strtod_l+0x598>
 800abba:	f8c9 3000 	str.w	r3, [r9]
 800abbe:	f04f 0a00 	mov.w	sl, #0
 800abc2:	9b07      	ldr	r3, [sp, #28]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f43f ae16 	beq.w	800a7f6 <_strtod_l+0x7e>
 800abca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abcc:	4648      	mov	r0, r9
 800abce:	f002 f84c 	bl	800cc6a <_Bfree>
 800abd2:	9905      	ldr	r1, [sp, #20]
 800abd4:	4648      	mov	r0, r9
 800abd6:	f002 f848 	bl	800cc6a <_Bfree>
 800abda:	4641      	mov	r1, r8
 800abdc:	4648      	mov	r0, r9
 800abde:	f002 f844 	bl	800cc6a <_Bfree>
 800abe2:	9907      	ldr	r1, [sp, #28]
 800abe4:	4648      	mov	r0, r9
 800abe6:	f002 f840 	bl	800cc6a <_Bfree>
 800abea:	4621      	mov	r1, r4
 800abec:	4648      	mov	r0, r9
 800abee:	f002 f83c 	bl	800cc6a <_Bfree>
 800abf2:	e600      	b.n	800a7f6 <_strtod_l+0x7e>
 800abf4:	9a06      	ldr	r2, [sp, #24]
 800abf6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800abfa:	4293      	cmp	r3, r2
 800abfc:	dbba      	blt.n	800ab74 <_strtod_l+0x3fc>
 800abfe:	4d42      	ldr	r5, [pc, #264]	; (800ad08 <_strtod_l+0x590>)
 800ac00:	f1c4 040f 	rsb	r4, r4, #15
 800ac04:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ac08:	4652      	mov	r2, sl
 800ac0a:	465b      	mov	r3, fp
 800ac0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac10:	f7f5 fcfa 	bl	8000608 <__aeabi_dmul>
 800ac14:	9b06      	ldr	r3, [sp, #24]
 800ac16:	1b1c      	subs	r4, r3, r4
 800ac18:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ac1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac20:	e78d      	b.n	800ab3e <_strtod_l+0x3c6>
 800ac22:	f113 0f16 	cmn.w	r3, #22
 800ac26:	dba5      	blt.n	800ab74 <_strtod_l+0x3fc>
 800ac28:	4a37      	ldr	r2, [pc, #220]	; (800ad08 <_strtod_l+0x590>)
 800ac2a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ac2e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ac32:	4650      	mov	r0, sl
 800ac34:	4659      	mov	r1, fp
 800ac36:	f7f5 fe11 	bl	800085c <__aeabi_ddiv>
 800ac3a:	e782      	b.n	800ab42 <_strtod_l+0x3ca>
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	4e33      	ldr	r6, [pc, #204]	; (800ad0c <_strtod_l+0x594>)
 800ac40:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ac44:	4650      	mov	r0, sl
 800ac46:	4659      	mov	r1, fp
 800ac48:	461d      	mov	r5, r3
 800ac4a:	f1b8 0f01 	cmp.w	r8, #1
 800ac4e:	dc21      	bgt.n	800ac94 <_strtod_l+0x51c>
 800ac50:	b10b      	cbz	r3, 800ac56 <_strtod_l+0x4de>
 800ac52:	4682      	mov	sl, r0
 800ac54:	468b      	mov	fp, r1
 800ac56:	4b2d      	ldr	r3, [pc, #180]	; (800ad0c <_strtod_l+0x594>)
 800ac58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ac5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ac60:	4652      	mov	r2, sl
 800ac62:	465b      	mov	r3, fp
 800ac64:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ac68:	f7f5 fcce 	bl	8000608 <__aeabi_dmul>
 800ac6c:	4b28      	ldr	r3, [pc, #160]	; (800ad10 <_strtod_l+0x598>)
 800ac6e:	460a      	mov	r2, r1
 800ac70:	400b      	ands	r3, r1
 800ac72:	4928      	ldr	r1, [pc, #160]	; (800ad14 <_strtod_l+0x59c>)
 800ac74:	428b      	cmp	r3, r1
 800ac76:	4682      	mov	sl, r0
 800ac78:	d898      	bhi.n	800abac <_strtod_l+0x434>
 800ac7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac7e:	428b      	cmp	r3, r1
 800ac80:	bf86      	itte	hi
 800ac82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ad1c <_strtod_l+0x5a4>
 800ac86:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	e077      	b.n	800ad84 <_strtod_l+0x60c>
 800ac94:	f018 0f01 	tst.w	r8, #1
 800ac98:	d006      	beq.n	800aca8 <_strtod_l+0x530>
 800ac9a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 fcb1 	bl	8000608 <__aeabi_dmul>
 800aca6:	2301      	movs	r3, #1
 800aca8:	3501      	adds	r5, #1
 800acaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800acae:	e7cc      	b.n	800ac4a <_strtod_l+0x4d2>
 800acb0:	d0ed      	beq.n	800ac8e <_strtod_l+0x516>
 800acb2:	f1c8 0800 	rsb	r8, r8, #0
 800acb6:	f018 020f 	ands.w	r2, r8, #15
 800acba:	d00a      	beq.n	800acd2 <_strtod_l+0x55a>
 800acbc:	4b12      	ldr	r3, [pc, #72]	; (800ad08 <_strtod_l+0x590>)
 800acbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acc2:	4650      	mov	r0, sl
 800acc4:	4659      	mov	r1, fp
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	f7f5 fdc7 	bl	800085c <__aeabi_ddiv>
 800acce:	4682      	mov	sl, r0
 800acd0:	468b      	mov	fp, r1
 800acd2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800acd6:	d0da      	beq.n	800ac8e <_strtod_l+0x516>
 800acd8:	f1b8 0f1f 	cmp.w	r8, #31
 800acdc:	dd20      	ble.n	800ad20 <_strtod_l+0x5a8>
 800acde:	2400      	movs	r4, #0
 800ace0:	46a0      	mov	r8, r4
 800ace2:	9407      	str	r4, [sp, #28]
 800ace4:	9405      	str	r4, [sp, #20]
 800ace6:	2322      	movs	r3, #34	; 0x22
 800ace8:	f04f 0a00 	mov.w	sl, #0
 800acec:	f04f 0b00 	mov.w	fp, #0
 800acf0:	f8c9 3000 	str.w	r3, [r9]
 800acf4:	e765      	b.n	800abc2 <_strtod_l+0x44a>
 800acf6:	bf00      	nop
 800acf8:	0800e62d 	.word	0x0800e62d
 800acfc:	0800e6b3 	.word	0x0800e6b3
 800ad00:	0800e635 	.word	0x0800e635
 800ad04:	0800e670 	.word	0x0800e670
 800ad08:	0800e758 	.word	0x0800e758
 800ad0c:	0800e730 	.word	0x0800e730
 800ad10:	7ff00000 	.word	0x7ff00000
 800ad14:	7ca00000 	.word	0x7ca00000
 800ad18:	fff80000 	.word	0xfff80000
 800ad1c:	7fefffff 	.word	0x7fefffff
 800ad20:	f018 0310 	ands.w	r3, r8, #16
 800ad24:	bf18      	it	ne
 800ad26:	236a      	movne	r3, #106	; 0x6a
 800ad28:	4da0      	ldr	r5, [pc, #640]	; (800afac <_strtod_l+0x834>)
 800ad2a:	9304      	str	r3, [sp, #16]
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	4659      	mov	r1, fp
 800ad30:	2300      	movs	r3, #0
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	f300 810a 	bgt.w	800af4e <_strtod_l+0x7d6>
 800ad3a:	b10b      	cbz	r3, 800ad40 <_strtod_l+0x5c8>
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	468b      	mov	fp, r1
 800ad40:	9b04      	ldr	r3, [sp, #16]
 800ad42:	b1bb      	cbz	r3, 800ad74 <_strtod_l+0x5fc>
 800ad44:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ad48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	4659      	mov	r1, fp
 800ad50:	dd10      	ble.n	800ad74 <_strtod_l+0x5fc>
 800ad52:	2b1f      	cmp	r3, #31
 800ad54:	f340 8107 	ble.w	800af66 <_strtod_l+0x7ee>
 800ad58:	2b34      	cmp	r3, #52	; 0x34
 800ad5a:	bfde      	ittt	le
 800ad5c:	3b20      	suble	r3, #32
 800ad5e:	f04f 32ff 	movle.w	r2, #4294967295
 800ad62:	fa02 f303 	lslle.w	r3, r2, r3
 800ad66:	f04f 0a00 	mov.w	sl, #0
 800ad6a:	bfcc      	ite	gt
 800ad6c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ad70:	ea03 0b01 	andle.w	fp, r3, r1
 800ad74:	2200      	movs	r2, #0
 800ad76:	2300      	movs	r3, #0
 800ad78:	4650      	mov	r0, sl
 800ad7a:	4659      	mov	r1, fp
 800ad7c:	f7f5 feac 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d1ac      	bne.n	800acde <_strtod_l+0x566>
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	9a05      	ldr	r2, [sp, #20]
 800ad8a:	9908      	ldr	r1, [sp, #32]
 800ad8c:	4623      	mov	r3, r4
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f001 ffbd 	bl	800cd0e <__s2b>
 800ad94:	9007      	str	r0, [sp, #28]
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f43f af08 	beq.w	800abac <_strtod_l+0x434>
 800ad9c:	9a06      	ldr	r2, [sp, #24]
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	2a00      	cmp	r2, #0
 800ada2:	f1c3 0300 	rsb	r3, r3, #0
 800ada6:	bfa8      	it	ge
 800ada8:	2300      	movge	r3, #0
 800adaa:	930e      	str	r3, [sp, #56]	; 0x38
 800adac:	2400      	movs	r4, #0
 800adae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800adb2:	9316      	str	r3, [sp, #88]	; 0x58
 800adb4:	46a0      	mov	r8, r4
 800adb6:	9b07      	ldr	r3, [sp, #28]
 800adb8:	4648      	mov	r0, r9
 800adba:	6859      	ldr	r1, [r3, #4]
 800adbc:	f001 ff21 	bl	800cc02 <_Balloc>
 800adc0:	9005      	str	r0, [sp, #20]
 800adc2:	2800      	cmp	r0, #0
 800adc4:	f43f aef6 	beq.w	800abb4 <_strtod_l+0x43c>
 800adc8:	9b07      	ldr	r3, [sp, #28]
 800adca:	691a      	ldr	r2, [r3, #16]
 800adcc:	3202      	adds	r2, #2
 800adce:	f103 010c 	add.w	r1, r3, #12
 800add2:	0092      	lsls	r2, r2, #2
 800add4:	300c      	adds	r0, #12
 800add6:	f001 ff09 	bl	800cbec <memcpy>
 800adda:	aa1e      	add	r2, sp, #120	; 0x78
 800addc:	a91d      	add	r1, sp, #116	; 0x74
 800adde:	ec4b ab10 	vmov	d0, sl, fp
 800ade2:	4648      	mov	r0, r9
 800ade4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ade8:	f002 fa4c 	bl	800d284 <__d2b>
 800adec:	901c      	str	r0, [sp, #112]	; 0x70
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f aee0 	beq.w	800abb4 <_strtod_l+0x43c>
 800adf4:	2101      	movs	r1, #1
 800adf6:	4648      	mov	r0, r9
 800adf8:	f002 f815 	bl	800ce26 <__i2b>
 800adfc:	4680      	mov	r8, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f aed8 	beq.w	800abb4 <_strtod_l+0x43c>
 800ae04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ae06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	bfab      	itete	ge
 800ae0c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ae0e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ae10:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ae12:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ae14:	bfac      	ite	ge
 800ae16:	18f7      	addge	r7, r6, r3
 800ae18:	1b9d      	sublt	r5, r3, r6
 800ae1a:	9b04      	ldr	r3, [sp, #16]
 800ae1c:	1af6      	subs	r6, r6, r3
 800ae1e:	4416      	add	r6, r2
 800ae20:	4b63      	ldr	r3, [pc, #396]	; (800afb0 <_strtod_l+0x838>)
 800ae22:	3e01      	subs	r6, #1
 800ae24:	429e      	cmp	r6, r3
 800ae26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae2a:	f280 80af 	bge.w	800af8c <_strtod_l+0x814>
 800ae2e:	1b9b      	subs	r3, r3, r6
 800ae30:	2b1f      	cmp	r3, #31
 800ae32:	eba2 0203 	sub.w	r2, r2, r3
 800ae36:	f04f 0101 	mov.w	r1, #1
 800ae3a:	f300 809b 	bgt.w	800af74 <_strtod_l+0x7fc>
 800ae3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae42:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae44:	2300      	movs	r3, #0
 800ae46:	930a      	str	r3, [sp, #40]	; 0x28
 800ae48:	18be      	adds	r6, r7, r2
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	42b7      	cmp	r7, r6
 800ae4e:	4415      	add	r5, r2
 800ae50:	441d      	add	r5, r3
 800ae52:	463b      	mov	r3, r7
 800ae54:	bfa8      	it	ge
 800ae56:	4633      	movge	r3, r6
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	bfa8      	it	ge
 800ae5c:	462b      	movge	r3, r5
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	bfc2      	ittt	gt
 800ae62:	1af6      	subgt	r6, r6, r3
 800ae64:	1aed      	subgt	r5, r5, r3
 800ae66:	1aff      	subgt	r7, r7, r3
 800ae68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae6a:	b1bb      	cbz	r3, 800ae9c <_strtod_l+0x724>
 800ae6c:	4641      	mov	r1, r8
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4648      	mov	r0, r9
 800ae72:	f002 f877 	bl	800cf64 <__pow5mult>
 800ae76:	4680      	mov	r8, r0
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	f43f ae9b 	beq.w	800abb4 <_strtod_l+0x43c>
 800ae7e:	4601      	mov	r1, r0
 800ae80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae82:	4648      	mov	r0, r9
 800ae84:	f001 ffd8 	bl	800ce38 <__multiply>
 800ae88:	900c      	str	r0, [sp, #48]	; 0x30
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	f43f ae92 	beq.w	800abb4 <_strtod_l+0x43c>
 800ae90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae92:	4648      	mov	r0, r9
 800ae94:	f001 fee9 	bl	800cc6a <_Bfree>
 800ae98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae9a:	931c      	str	r3, [sp, #112]	; 0x70
 800ae9c:	2e00      	cmp	r6, #0
 800ae9e:	dc7a      	bgt.n	800af96 <_strtod_l+0x81e>
 800aea0:	9b06      	ldr	r3, [sp, #24]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dd08      	ble.n	800aeb8 <_strtod_l+0x740>
 800aea6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aea8:	9905      	ldr	r1, [sp, #20]
 800aeaa:	4648      	mov	r0, r9
 800aeac:	f002 f85a 	bl	800cf64 <__pow5mult>
 800aeb0:	9005      	str	r0, [sp, #20]
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	f43f ae7e 	beq.w	800abb4 <_strtod_l+0x43c>
 800aeb8:	2d00      	cmp	r5, #0
 800aeba:	dd08      	ble.n	800aece <_strtod_l+0x756>
 800aebc:	462a      	mov	r2, r5
 800aebe:	9905      	ldr	r1, [sp, #20]
 800aec0:	4648      	mov	r0, r9
 800aec2:	f002 f89d 	bl	800d000 <__lshift>
 800aec6:	9005      	str	r0, [sp, #20]
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f43f ae73 	beq.w	800abb4 <_strtod_l+0x43c>
 800aece:	2f00      	cmp	r7, #0
 800aed0:	dd08      	ble.n	800aee4 <_strtod_l+0x76c>
 800aed2:	4641      	mov	r1, r8
 800aed4:	463a      	mov	r2, r7
 800aed6:	4648      	mov	r0, r9
 800aed8:	f002 f892 	bl	800d000 <__lshift>
 800aedc:	4680      	mov	r8, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	f43f ae68 	beq.w	800abb4 <_strtod_l+0x43c>
 800aee4:	9a05      	ldr	r2, [sp, #20]
 800aee6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aee8:	4648      	mov	r0, r9
 800aeea:	f002 f8f7 	bl	800d0dc <__mdiff>
 800aeee:	4604      	mov	r4, r0
 800aef0:	2800      	cmp	r0, #0
 800aef2:	f43f ae5f 	beq.w	800abb4 <_strtod_l+0x43c>
 800aef6:	68c3      	ldr	r3, [r0, #12]
 800aef8:	930c      	str	r3, [sp, #48]	; 0x30
 800aefa:	2300      	movs	r3, #0
 800aefc:	60c3      	str	r3, [r0, #12]
 800aefe:	4641      	mov	r1, r8
 800af00:	f002 f8d2 	bl	800d0a8 <__mcmp>
 800af04:	2800      	cmp	r0, #0
 800af06:	da55      	bge.n	800afb4 <_strtod_l+0x83c>
 800af08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af0a:	b9e3      	cbnz	r3, 800af46 <_strtod_l+0x7ce>
 800af0c:	f1ba 0f00 	cmp.w	sl, #0
 800af10:	d119      	bne.n	800af46 <_strtod_l+0x7ce>
 800af12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af16:	b9b3      	cbnz	r3, 800af46 <_strtod_l+0x7ce>
 800af18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af1c:	0d1b      	lsrs	r3, r3, #20
 800af1e:	051b      	lsls	r3, r3, #20
 800af20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af24:	d90f      	bls.n	800af46 <_strtod_l+0x7ce>
 800af26:	6963      	ldr	r3, [r4, #20]
 800af28:	b913      	cbnz	r3, 800af30 <_strtod_l+0x7b8>
 800af2a:	6923      	ldr	r3, [r4, #16]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	dd0a      	ble.n	800af46 <_strtod_l+0x7ce>
 800af30:	4621      	mov	r1, r4
 800af32:	2201      	movs	r2, #1
 800af34:	4648      	mov	r0, r9
 800af36:	f002 f863 	bl	800d000 <__lshift>
 800af3a:	4641      	mov	r1, r8
 800af3c:	4604      	mov	r4, r0
 800af3e:	f002 f8b3 	bl	800d0a8 <__mcmp>
 800af42:	2800      	cmp	r0, #0
 800af44:	dc67      	bgt.n	800b016 <_strtod_l+0x89e>
 800af46:	9b04      	ldr	r3, [sp, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d171      	bne.n	800b030 <_strtod_l+0x8b8>
 800af4c:	e63d      	b.n	800abca <_strtod_l+0x452>
 800af4e:	f018 0f01 	tst.w	r8, #1
 800af52:	d004      	beq.n	800af5e <_strtod_l+0x7e6>
 800af54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af58:	f7f5 fb56 	bl	8000608 <__aeabi_dmul>
 800af5c:	2301      	movs	r3, #1
 800af5e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800af62:	3508      	adds	r5, #8
 800af64:	e6e5      	b.n	800ad32 <_strtod_l+0x5ba>
 800af66:	f04f 32ff 	mov.w	r2, #4294967295
 800af6a:	fa02 f303 	lsl.w	r3, r2, r3
 800af6e:	ea03 0a0a 	and.w	sl, r3, sl
 800af72:	e6ff      	b.n	800ad74 <_strtod_l+0x5fc>
 800af74:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800af78:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800af7c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800af80:	36e2      	adds	r6, #226	; 0xe2
 800af82:	fa01 f306 	lsl.w	r3, r1, r6
 800af86:	930a      	str	r3, [sp, #40]	; 0x28
 800af88:	910f      	str	r1, [sp, #60]	; 0x3c
 800af8a:	e75d      	b.n	800ae48 <_strtod_l+0x6d0>
 800af8c:	2300      	movs	r3, #0
 800af8e:	930a      	str	r3, [sp, #40]	; 0x28
 800af90:	2301      	movs	r3, #1
 800af92:	930f      	str	r3, [sp, #60]	; 0x3c
 800af94:	e758      	b.n	800ae48 <_strtod_l+0x6d0>
 800af96:	4632      	mov	r2, r6
 800af98:	991c      	ldr	r1, [sp, #112]	; 0x70
 800af9a:	4648      	mov	r0, r9
 800af9c:	f002 f830 	bl	800d000 <__lshift>
 800afa0:	901c      	str	r0, [sp, #112]	; 0x70
 800afa2:	2800      	cmp	r0, #0
 800afa4:	f47f af7c 	bne.w	800aea0 <_strtod_l+0x728>
 800afa8:	e604      	b.n	800abb4 <_strtod_l+0x43c>
 800afaa:	bf00      	nop
 800afac:	0800e688 	.word	0x0800e688
 800afb0:	fffffc02 	.word	0xfffffc02
 800afb4:	465d      	mov	r5, fp
 800afb6:	f040 8086 	bne.w	800b0c6 <_strtod_l+0x94e>
 800afba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afc0:	b32a      	cbz	r2, 800b00e <_strtod_l+0x896>
 800afc2:	4aaf      	ldr	r2, [pc, #700]	; (800b280 <_strtod_l+0xb08>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d153      	bne.n	800b070 <_strtod_l+0x8f8>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	4650      	mov	r0, sl
 800afcc:	b1d3      	cbz	r3, 800b004 <_strtod_l+0x88c>
 800afce:	4aad      	ldr	r2, [pc, #692]	; (800b284 <_strtod_l+0xb0c>)
 800afd0:	402a      	ands	r2, r5
 800afd2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800afd6:	f04f 31ff 	mov.w	r1, #4294967295
 800afda:	d816      	bhi.n	800b00a <_strtod_l+0x892>
 800afdc:	0d12      	lsrs	r2, r2, #20
 800afde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afe2:	fa01 f303 	lsl.w	r3, r1, r3
 800afe6:	4298      	cmp	r0, r3
 800afe8:	d142      	bne.n	800b070 <_strtod_l+0x8f8>
 800afea:	4ba7      	ldr	r3, [pc, #668]	; (800b288 <_strtod_l+0xb10>)
 800afec:	429d      	cmp	r5, r3
 800afee:	d102      	bne.n	800aff6 <_strtod_l+0x87e>
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f addf 	beq.w	800abb4 <_strtod_l+0x43c>
 800aff6:	4ba3      	ldr	r3, [pc, #652]	; (800b284 <_strtod_l+0xb0c>)
 800aff8:	402b      	ands	r3, r5
 800affa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800affe:	f04f 0a00 	mov.w	sl, #0
 800b002:	e7a0      	b.n	800af46 <_strtod_l+0x7ce>
 800b004:	f04f 33ff 	mov.w	r3, #4294967295
 800b008:	e7ed      	b.n	800afe6 <_strtod_l+0x86e>
 800b00a:	460b      	mov	r3, r1
 800b00c:	e7eb      	b.n	800afe6 <_strtod_l+0x86e>
 800b00e:	bb7b      	cbnz	r3, 800b070 <_strtod_l+0x8f8>
 800b010:	f1ba 0f00 	cmp.w	sl, #0
 800b014:	d12c      	bne.n	800b070 <_strtod_l+0x8f8>
 800b016:	9904      	ldr	r1, [sp, #16]
 800b018:	4a9a      	ldr	r2, [pc, #616]	; (800b284 <_strtod_l+0xb0c>)
 800b01a:	465b      	mov	r3, fp
 800b01c:	b1f1      	cbz	r1, 800b05c <_strtod_l+0x8e4>
 800b01e:	ea02 010b 	and.w	r1, r2, fp
 800b022:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b026:	dc19      	bgt.n	800b05c <_strtod_l+0x8e4>
 800b028:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b02c:	f77f ae5b 	ble.w	800ace6 <_strtod_l+0x56e>
 800b030:	4a96      	ldr	r2, [pc, #600]	; (800b28c <_strtod_l+0xb14>)
 800b032:	2300      	movs	r3, #0
 800b034:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b038:	4650      	mov	r0, sl
 800b03a:	4659      	mov	r1, fp
 800b03c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b040:	f7f5 fae2 	bl	8000608 <__aeabi_dmul>
 800b044:	4682      	mov	sl, r0
 800b046:	468b      	mov	fp, r1
 800b048:	2900      	cmp	r1, #0
 800b04a:	f47f adbe 	bne.w	800abca <_strtod_l+0x452>
 800b04e:	2800      	cmp	r0, #0
 800b050:	f47f adbb 	bne.w	800abca <_strtod_l+0x452>
 800b054:	2322      	movs	r3, #34	; 0x22
 800b056:	f8c9 3000 	str.w	r3, [r9]
 800b05a:	e5b6      	b.n	800abca <_strtod_l+0x452>
 800b05c:	4013      	ands	r3, r2
 800b05e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b062:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b066:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b06a:	f04f 3aff 	mov.w	sl, #4294967295
 800b06e:	e76a      	b.n	800af46 <_strtod_l+0x7ce>
 800b070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b072:	b193      	cbz	r3, 800b09a <_strtod_l+0x922>
 800b074:	422b      	tst	r3, r5
 800b076:	f43f af66 	beq.w	800af46 <_strtod_l+0x7ce>
 800b07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b07c:	9a04      	ldr	r2, [sp, #16]
 800b07e:	4650      	mov	r0, sl
 800b080:	4659      	mov	r1, fp
 800b082:	b173      	cbz	r3, 800b0a2 <_strtod_l+0x92a>
 800b084:	f7ff fb5b 	bl	800a73e <sulp>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b090:	f7f5 f904 	bl	800029c <__adddf3>
 800b094:	4682      	mov	sl, r0
 800b096:	468b      	mov	fp, r1
 800b098:	e755      	b.n	800af46 <_strtod_l+0x7ce>
 800b09a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b09c:	ea13 0f0a 	tst.w	r3, sl
 800b0a0:	e7e9      	b.n	800b076 <_strtod_l+0x8fe>
 800b0a2:	f7ff fb4c 	bl	800a73e <sulp>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0ae:	f7f5 f8f3 	bl	8000298 <__aeabi_dsub>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4682      	mov	sl, r0
 800b0b8:	468b      	mov	fp, r1
 800b0ba:	f7f5 fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f47f ae11 	bne.w	800ace6 <_strtod_l+0x56e>
 800b0c4:	e73f      	b.n	800af46 <_strtod_l+0x7ce>
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f002 f92a 	bl	800d322 <__ratio>
 800b0ce:	ec57 6b10 	vmov	r6, r7, d0
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0d8:	ee10 0a10 	vmov	r0, s0
 800b0dc:	4639      	mov	r1, r7
 800b0de:	f7f5 fd0f 	bl	8000b00 <__aeabi_dcmple>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d077      	beq.n	800b1d6 <_strtod_l+0xa5e>
 800b0e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d04a      	beq.n	800b182 <_strtod_l+0xa0a>
 800b0ec:	4b68      	ldr	r3, [pc, #416]	; (800b290 <_strtod_l+0xb18>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b0f4:	4f66      	ldr	r7, [pc, #408]	; (800b290 <_strtod_l+0xb18>)
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	4b62      	ldr	r3, [pc, #392]	; (800b284 <_strtod_l+0xb0c>)
 800b0fa:	402b      	ands	r3, r5
 800b0fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b100:	4b64      	ldr	r3, [pc, #400]	; (800b294 <_strtod_l+0xb1c>)
 800b102:	429a      	cmp	r2, r3
 800b104:	f040 80ce 	bne.w	800b2a4 <_strtod_l+0xb2c>
 800b108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b10c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b110:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b114:	ec4b ab10 	vmov	d0, sl, fp
 800b118:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b11c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b120:	f002 f83a 	bl	800d198 <__ulp>
 800b124:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b128:	ec53 2b10 	vmov	r2, r3, d0
 800b12c:	f7f5 fa6c 	bl	8000608 <__aeabi_dmul>
 800b130:	4652      	mov	r2, sl
 800b132:	465b      	mov	r3, fp
 800b134:	f7f5 f8b2 	bl	800029c <__adddf3>
 800b138:	460b      	mov	r3, r1
 800b13a:	4952      	ldr	r1, [pc, #328]	; (800b284 <_strtod_l+0xb0c>)
 800b13c:	4a56      	ldr	r2, [pc, #344]	; (800b298 <_strtod_l+0xb20>)
 800b13e:	4019      	ands	r1, r3
 800b140:	4291      	cmp	r1, r2
 800b142:	4682      	mov	sl, r0
 800b144:	d95b      	bls.n	800b1fe <_strtod_l+0xa86>
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d103      	bne.n	800b158 <_strtod_l+0x9e0>
 800b150:	9b08      	ldr	r3, [sp, #32]
 800b152:	3301      	adds	r3, #1
 800b154:	f43f ad2e 	beq.w	800abb4 <_strtod_l+0x43c>
 800b158:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b288 <_strtod_l+0xb10>
 800b15c:	f04f 3aff 	mov.w	sl, #4294967295
 800b160:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b162:	4648      	mov	r0, r9
 800b164:	f001 fd81 	bl	800cc6a <_Bfree>
 800b168:	9905      	ldr	r1, [sp, #20]
 800b16a:	4648      	mov	r0, r9
 800b16c:	f001 fd7d 	bl	800cc6a <_Bfree>
 800b170:	4641      	mov	r1, r8
 800b172:	4648      	mov	r0, r9
 800b174:	f001 fd79 	bl	800cc6a <_Bfree>
 800b178:	4621      	mov	r1, r4
 800b17a:	4648      	mov	r0, r9
 800b17c:	f001 fd75 	bl	800cc6a <_Bfree>
 800b180:	e619      	b.n	800adb6 <_strtod_l+0x63e>
 800b182:	f1ba 0f00 	cmp.w	sl, #0
 800b186:	d11a      	bne.n	800b1be <_strtod_l+0xa46>
 800b188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b18c:	b9eb      	cbnz	r3, 800b1ca <_strtod_l+0xa52>
 800b18e:	2200      	movs	r2, #0
 800b190:	4b3f      	ldr	r3, [pc, #252]	; (800b290 <_strtod_l+0xb18>)
 800b192:	4630      	mov	r0, r6
 800b194:	4639      	mov	r1, r7
 800b196:	f7f5 fca9 	bl	8000aec <__aeabi_dcmplt>
 800b19a:	b9c8      	cbnz	r0, 800b1d0 <_strtod_l+0xa58>
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4b3e      	ldr	r3, [pc, #248]	; (800b29c <_strtod_l+0xb24>)
 800b1a4:	f7f5 fa30 	bl	8000608 <__aeabi_dmul>
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b1b0:	9618      	str	r6, [sp, #96]	; 0x60
 800b1b2:	9319      	str	r3, [sp, #100]	; 0x64
 800b1b4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b1b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b1bc:	e79c      	b.n	800b0f8 <_strtod_l+0x980>
 800b1be:	f1ba 0f01 	cmp.w	sl, #1
 800b1c2:	d102      	bne.n	800b1ca <_strtod_l+0xa52>
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	f43f ad8e 	beq.w	800ace6 <_strtod_l+0x56e>
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4b34      	ldr	r3, [pc, #208]	; (800b2a0 <_strtod_l+0xb28>)
 800b1ce:	e78f      	b.n	800b0f0 <_strtod_l+0x978>
 800b1d0:	2600      	movs	r6, #0
 800b1d2:	4f32      	ldr	r7, [pc, #200]	; (800b29c <_strtod_l+0xb24>)
 800b1d4:	e7ea      	b.n	800b1ac <_strtod_l+0xa34>
 800b1d6:	4b31      	ldr	r3, [pc, #196]	; (800b29c <_strtod_l+0xb24>)
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f7f5 fa13 	bl	8000608 <__aeabi_dmul>
 800b1e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	460f      	mov	r7, r1
 800b1e8:	b933      	cbnz	r3, 800b1f8 <_strtod_l+0xa80>
 800b1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ee:	9010      	str	r0, [sp, #64]	; 0x40
 800b1f0:	9311      	str	r3, [sp, #68]	; 0x44
 800b1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1f6:	e7df      	b.n	800b1b8 <_strtod_l+0xa40>
 800b1f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b1fc:	e7f9      	b.n	800b1f2 <_strtod_l+0xa7a>
 800b1fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1ab      	bne.n	800b160 <_strtod_l+0x9e8>
 800b208:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b20c:	0d1b      	lsrs	r3, r3, #20
 800b20e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b210:	051b      	lsls	r3, r3, #20
 800b212:	429a      	cmp	r2, r3
 800b214:	465d      	mov	r5, fp
 800b216:	d1a3      	bne.n	800b160 <_strtod_l+0x9e8>
 800b218:	4639      	mov	r1, r7
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7f5 fca4 	bl	8000b68 <__aeabi_d2iz>
 800b220:	f7f5 f988 	bl	8000534 <__aeabi_i2d>
 800b224:	460b      	mov	r3, r1
 800b226:	4602      	mov	r2, r0
 800b228:	4639      	mov	r1, r7
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7f5 f834 	bl	8000298 <__aeabi_dsub>
 800b230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b232:	4606      	mov	r6, r0
 800b234:	460f      	mov	r7, r1
 800b236:	b933      	cbnz	r3, 800b246 <_strtod_l+0xace>
 800b238:	f1ba 0f00 	cmp.w	sl, #0
 800b23c:	d103      	bne.n	800b246 <_strtod_l+0xace>
 800b23e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b242:	2d00      	cmp	r5, #0
 800b244:	d06d      	beq.n	800b322 <_strtod_l+0xbaa>
 800b246:	a30a      	add	r3, pc, #40	; (adr r3, 800b270 <_strtod_l+0xaf8>)
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 fc4c 	bl	8000aec <__aeabi_dcmplt>
 800b254:	2800      	cmp	r0, #0
 800b256:	f47f acb8 	bne.w	800abca <_strtod_l+0x452>
 800b25a:	a307      	add	r3, pc, #28	; (adr r3, 800b278 <_strtod_l+0xb00>)
 800b25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b260:	4630      	mov	r0, r6
 800b262:	4639      	mov	r1, r7
 800b264:	f7f5 fc60 	bl	8000b28 <__aeabi_dcmpgt>
 800b268:	2800      	cmp	r0, #0
 800b26a:	f43f af79 	beq.w	800b160 <_strtod_l+0x9e8>
 800b26e:	e4ac      	b.n	800abca <_strtod_l+0x452>
 800b270:	94a03595 	.word	0x94a03595
 800b274:	3fdfffff 	.word	0x3fdfffff
 800b278:	35afe535 	.word	0x35afe535
 800b27c:	3fe00000 	.word	0x3fe00000
 800b280:	000fffff 	.word	0x000fffff
 800b284:	7ff00000 	.word	0x7ff00000
 800b288:	7fefffff 	.word	0x7fefffff
 800b28c:	39500000 	.word	0x39500000
 800b290:	3ff00000 	.word	0x3ff00000
 800b294:	7fe00000 	.word	0x7fe00000
 800b298:	7c9fffff 	.word	0x7c9fffff
 800b29c:	3fe00000 	.word	0x3fe00000
 800b2a0:	bff00000 	.word	0xbff00000
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	b333      	cbz	r3, 800b2f6 <_strtod_l+0xb7e>
 800b2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2ae:	d822      	bhi.n	800b2f6 <_strtod_l+0xb7e>
 800b2b0:	a327      	add	r3, pc, #156	; (adr r3, 800b350 <_strtod_l+0xbd8>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f5 fc21 	bl	8000b00 <__aeabi_dcmple>
 800b2be:	b1a0      	cbz	r0, 800b2ea <_strtod_l+0xb72>
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7f5 fc78 	bl	8000bb8 <__aeabi_d2uiz>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	bf08      	it	eq
 800b2cc:	2001      	moveq	r0, #1
 800b2ce:	f7f5 f921 	bl	8000514 <__aeabi_ui2d>
 800b2d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	460f      	mov	r7, r1
 800b2d8:	bb03      	cbnz	r3, 800b31c <_strtod_l+0xba4>
 800b2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2de:	9012      	str	r0, [sp, #72]	; 0x48
 800b2e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b2e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b2e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2ee:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b2f2:	1a9b      	subs	r3, r3, r2
 800b2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b2fa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b2fe:	f001 ff4b 	bl	800d198 <__ulp>
 800b302:	4650      	mov	r0, sl
 800b304:	ec53 2b10 	vmov	r2, r3, d0
 800b308:	4659      	mov	r1, fp
 800b30a:	f7f5 f97d 	bl	8000608 <__aeabi_dmul>
 800b30e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b312:	f7f4 ffc3 	bl	800029c <__adddf3>
 800b316:	4682      	mov	sl, r0
 800b318:	468b      	mov	fp, r1
 800b31a:	e772      	b.n	800b202 <_strtod_l+0xa8a>
 800b31c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b320:	e7df      	b.n	800b2e2 <_strtod_l+0xb6a>
 800b322:	a30d      	add	r3, pc, #52	; (adr r3, 800b358 <_strtod_l+0xbe0>)
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f7f5 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800b32c:	e79c      	b.n	800b268 <_strtod_l+0xaf0>
 800b32e:	2300      	movs	r3, #0
 800b330:	930d      	str	r3, [sp, #52]	; 0x34
 800b332:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	f7ff ba61 	b.w	800a7fe <_strtod_l+0x86>
 800b33c:	2b65      	cmp	r3, #101	; 0x65
 800b33e:	f04f 0200 	mov.w	r2, #0
 800b342:	f43f ab4e 	beq.w	800a9e2 <_strtod_l+0x26a>
 800b346:	2101      	movs	r1, #1
 800b348:	4614      	mov	r4, r2
 800b34a:	9104      	str	r1, [sp, #16]
 800b34c:	f7ff bacb 	b.w	800a8e6 <_strtod_l+0x16e>
 800b350:	ffc00000 	.word	0xffc00000
 800b354:	41dfffff 	.word	0x41dfffff
 800b358:	94a03595 	.word	0x94a03595
 800b35c:	3fcfffff 	.word	0x3fcfffff

0800b360 <strtod>:
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <strtod+0x20>)
 800b362:	4a08      	ldr	r2, [pc, #32]	; (800b384 <strtod+0x24>)
 800b364:	b410      	push	{r4}
 800b366:	681c      	ldr	r4, [r3, #0]
 800b368:	6a23      	ldr	r3, [r4, #32]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bf08      	it	eq
 800b36e:	4613      	moveq	r3, r2
 800b370:	460a      	mov	r2, r1
 800b372:	4601      	mov	r1, r0
 800b374:	4620      	mov	r0, r4
 800b376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b37a:	f7ff b9fd 	b.w	800a778 <_strtod_l>
 800b37e:	bf00      	nop
 800b380:	2000000c 	.word	0x2000000c
 800b384:	20000070 	.word	0x20000070

0800b388 <__swbuf_r>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	460e      	mov	r6, r1
 800b38c:	4614      	mov	r4, r2
 800b38e:	4605      	mov	r5, r0
 800b390:	b118      	cbz	r0, 800b39a <__swbuf_r+0x12>
 800b392:	6983      	ldr	r3, [r0, #24]
 800b394:	b90b      	cbnz	r3, 800b39a <__swbuf_r+0x12>
 800b396:	f000 ffeb 	bl	800c370 <__sinit>
 800b39a:	4b21      	ldr	r3, [pc, #132]	; (800b420 <__swbuf_r+0x98>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	d12a      	bne.n	800b3f6 <__swbuf_r+0x6e>
 800b3a0:	686c      	ldr	r4, [r5, #4]
 800b3a2:	69a3      	ldr	r3, [r4, #24]
 800b3a4:	60a3      	str	r3, [r4, #8]
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	071a      	lsls	r2, r3, #28
 800b3aa:	d52e      	bpl.n	800b40a <__swbuf_r+0x82>
 800b3ac:	6923      	ldr	r3, [r4, #16]
 800b3ae:	b363      	cbz	r3, 800b40a <__swbuf_r+0x82>
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	6820      	ldr	r0, [r4, #0]
 800b3b4:	1ac0      	subs	r0, r0, r3
 800b3b6:	6963      	ldr	r3, [r4, #20]
 800b3b8:	b2f6      	uxtb	r6, r6
 800b3ba:	4283      	cmp	r3, r0
 800b3bc:	4637      	mov	r7, r6
 800b3be:	dc04      	bgt.n	800b3ca <__swbuf_r+0x42>
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f000 ff6a 	bl	800c29c <_fflush_r>
 800b3c8:	bb28      	cbnz	r0, 800b416 <__swbuf_r+0x8e>
 800b3ca:	68a3      	ldr	r3, [r4, #8]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	60a3      	str	r3, [r4, #8]
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	6022      	str	r2, [r4, #0]
 800b3d6:	701e      	strb	r6, [r3, #0]
 800b3d8:	6963      	ldr	r3, [r4, #20]
 800b3da:	3001      	adds	r0, #1
 800b3dc:	4283      	cmp	r3, r0
 800b3de:	d004      	beq.n	800b3ea <__swbuf_r+0x62>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	07db      	lsls	r3, r3, #31
 800b3e4:	d519      	bpl.n	800b41a <__swbuf_r+0x92>
 800b3e6:	2e0a      	cmp	r6, #10
 800b3e8:	d117      	bne.n	800b41a <__swbuf_r+0x92>
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f000 ff55 	bl	800c29c <_fflush_r>
 800b3f2:	b190      	cbz	r0, 800b41a <__swbuf_r+0x92>
 800b3f4:	e00f      	b.n	800b416 <__swbuf_r+0x8e>
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <__swbuf_r+0x9c>)
 800b3f8:	429c      	cmp	r4, r3
 800b3fa:	d101      	bne.n	800b400 <__swbuf_r+0x78>
 800b3fc:	68ac      	ldr	r4, [r5, #8]
 800b3fe:	e7d0      	b.n	800b3a2 <__swbuf_r+0x1a>
 800b400:	4b09      	ldr	r3, [pc, #36]	; (800b428 <__swbuf_r+0xa0>)
 800b402:	429c      	cmp	r4, r3
 800b404:	bf08      	it	eq
 800b406:	68ec      	ldreq	r4, [r5, #12]
 800b408:	e7cb      	b.n	800b3a2 <__swbuf_r+0x1a>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f000 f80d 	bl	800b42c <__swsetup_r>
 800b412:	2800      	cmp	r0, #0
 800b414:	d0cc      	beq.n	800b3b0 <__swbuf_r+0x28>
 800b416:	f04f 37ff 	mov.w	r7, #4294967295
 800b41a:	4638      	mov	r0, r7
 800b41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b41e:	bf00      	nop
 800b420:	0800e6e0 	.word	0x0800e6e0
 800b424:	0800e700 	.word	0x0800e700
 800b428:	0800e6c0 	.word	0x0800e6c0

0800b42c <__swsetup_r>:
 800b42c:	4b32      	ldr	r3, [pc, #200]	; (800b4f8 <__swsetup_r+0xcc>)
 800b42e:	b570      	push	{r4, r5, r6, lr}
 800b430:	681d      	ldr	r5, [r3, #0]
 800b432:	4606      	mov	r6, r0
 800b434:	460c      	mov	r4, r1
 800b436:	b125      	cbz	r5, 800b442 <__swsetup_r+0x16>
 800b438:	69ab      	ldr	r3, [r5, #24]
 800b43a:	b913      	cbnz	r3, 800b442 <__swsetup_r+0x16>
 800b43c:	4628      	mov	r0, r5
 800b43e:	f000 ff97 	bl	800c370 <__sinit>
 800b442:	4b2e      	ldr	r3, [pc, #184]	; (800b4fc <__swsetup_r+0xd0>)
 800b444:	429c      	cmp	r4, r3
 800b446:	d10f      	bne.n	800b468 <__swsetup_r+0x3c>
 800b448:	686c      	ldr	r4, [r5, #4]
 800b44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	0715      	lsls	r5, r2, #28
 800b452:	d42c      	bmi.n	800b4ae <__swsetup_r+0x82>
 800b454:	06d0      	lsls	r0, r2, #27
 800b456:	d411      	bmi.n	800b47c <__swsetup_r+0x50>
 800b458:	2209      	movs	r2, #9
 800b45a:	6032      	str	r2, [r6, #0]
 800b45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b460:	81a3      	strh	r3, [r4, #12]
 800b462:	f04f 30ff 	mov.w	r0, #4294967295
 800b466:	e03e      	b.n	800b4e6 <__swsetup_r+0xba>
 800b468:	4b25      	ldr	r3, [pc, #148]	; (800b500 <__swsetup_r+0xd4>)
 800b46a:	429c      	cmp	r4, r3
 800b46c:	d101      	bne.n	800b472 <__swsetup_r+0x46>
 800b46e:	68ac      	ldr	r4, [r5, #8]
 800b470:	e7eb      	b.n	800b44a <__swsetup_r+0x1e>
 800b472:	4b24      	ldr	r3, [pc, #144]	; (800b504 <__swsetup_r+0xd8>)
 800b474:	429c      	cmp	r4, r3
 800b476:	bf08      	it	eq
 800b478:	68ec      	ldreq	r4, [r5, #12]
 800b47a:	e7e6      	b.n	800b44a <__swsetup_r+0x1e>
 800b47c:	0751      	lsls	r1, r2, #29
 800b47e:	d512      	bpl.n	800b4a6 <__swsetup_r+0x7a>
 800b480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b482:	b141      	cbz	r1, 800b496 <__swsetup_r+0x6a>
 800b484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b488:	4299      	cmp	r1, r3
 800b48a:	d002      	beq.n	800b492 <__swsetup_r+0x66>
 800b48c:	4630      	mov	r0, r6
 800b48e:	f001 ffc5 	bl	800d41c <_free_r>
 800b492:	2300      	movs	r3, #0
 800b494:	6363      	str	r3, [r4, #52]	; 0x34
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	6063      	str	r3, [r4, #4]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	f043 0308 	orr.w	r3, r3, #8
 800b4ac:	81a3      	strh	r3, [r4, #12]
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	b94b      	cbnz	r3, 800b4c6 <__swsetup_r+0x9a>
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4bc:	d003      	beq.n	800b4c6 <__swsetup_r+0x9a>
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f001 fb39 	bl	800cb38 <__smakebuf_r>
 800b4c6:	89a2      	ldrh	r2, [r4, #12]
 800b4c8:	f012 0301 	ands.w	r3, r2, #1
 800b4cc:	d00c      	beq.n	800b4e8 <__swsetup_r+0xbc>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60a3      	str	r3, [r4, #8]
 800b4d2:	6963      	ldr	r3, [r4, #20]
 800b4d4:	425b      	negs	r3, r3
 800b4d6:	61a3      	str	r3, [r4, #24]
 800b4d8:	6923      	ldr	r3, [r4, #16]
 800b4da:	b953      	cbnz	r3, 800b4f2 <__swsetup_r+0xc6>
 800b4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b4e4:	d1ba      	bne.n	800b45c <__swsetup_r+0x30>
 800b4e6:	bd70      	pop	{r4, r5, r6, pc}
 800b4e8:	0792      	lsls	r2, r2, #30
 800b4ea:	bf58      	it	pl
 800b4ec:	6963      	ldrpl	r3, [r4, #20]
 800b4ee:	60a3      	str	r3, [r4, #8]
 800b4f0:	e7f2      	b.n	800b4d8 <__swsetup_r+0xac>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e7f7      	b.n	800b4e6 <__swsetup_r+0xba>
 800b4f6:	bf00      	nop
 800b4f8:	2000000c 	.word	0x2000000c
 800b4fc:	0800e6e0 	.word	0x0800e6e0
 800b500:	0800e700 	.word	0x0800e700
 800b504:	0800e6c0 	.word	0x0800e6c0

0800b508 <quorem>:
 800b508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	6903      	ldr	r3, [r0, #16]
 800b50e:	690c      	ldr	r4, [r1, #16]
 800b510:	42a3      	cmp	r3, r4
 800b512:	4680      	mov	r8, r0
 800b514:	f2c0 8082 	blt.w	800b61c <quorem+0x114>
 800b518:	3c01      	subs	r4, #1
 800b51a:	f101 0714 	add.w	r7, r1, #20
 800b51e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b522:	f100 0614 	add.w	r6, r0, #20
 800b526:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b52a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b52e:	eb06 030c 	add.w	r3, r6, ip
 800b532:	3501      	adds	r5, #1
 800b534:	eb07 090c 	add.w	r9, r7, ip
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	fbb0 f5f5 	udiv	r5, r0, r5
 800b53e:	b395      	cbz	r5, 800b5a6 <quorem+0x9e>
 800b540:	f04f 0a00 	mov.w	sl, #0
 800b544:	4638      	mov	r0, r7
 800b546:	46b6      	mov	lr, r6
 800b548:	46d3      	mov	fp, sl
 800b54a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b54e:	b293      	uxth	r3, r2
 800b550:	fb05 a303 	mla	r3, r5, r3, sl
 800b554:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b558:	b29b      	uxth	r3, r3
 800b55a:	ebab 0303 	sub.w	r3, fp, r3
 800b55e:	0c12      	lsrs	r2, r2, #16
 800b560:	f8de b000 	ldr.w	fp, [lr]
 800b564:	fb05 a202 	mla	r2, r5, r2, sl
 800b568:	fa13 f38b 	uxtah	r3, r3, fp
 800b56c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b570:	fa1f fb82 	uxth.w	fp, r2
 800b574:	f8de 2000 	ldr.w	r2, [lr]
 800b578:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b57c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b580:	b29b      	uxth	r3, r3
 800b582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b586:	4581      	cmp	r9, r0
 800b588:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b58c:	f84e 3b04 	str.w	r3, [lr], #4
 800b590:	d2db      	bcs.n	800b54a <quorem+0x42>
 800b592:	f856 300c 	ldr.w	r3, [r6, ip]
 800b596:	b933      	cbnz	r3, 800b5a6 <quorem+0x9e>
 800b598:	9b01      	ldr	r3, [sp, #4]
 800b59a:	3b04      	subs	r3, #4
 800b59c:	429e      	cmp	r6, r3
 800b59e:	461a      	mov	r2, r3
 800b5a0:	d330      	bcc.n	800b604 <quorem+0xfc>
 800b5a2:	f8c8 4010 	str.w	r4, [r8, #16]
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f001 fd7e 	bl	800d0a8 <__mcmp>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	db25      	blt.n	800b5fc <quorem+0xf4>
 800b5b0:	3501      	adds	r5, #1
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f04f 0c00 	mov.w	ip, #0
 800b5b8:	f857 2b04 	ldr.w	r2, [r7], #4
 800b5bc:	f8d0 e000 	ldr.w	lr, [r0]
 800b5c0:	b293      	uxth	r3, r2
 800b5c2:	ebac 0303 	sub.w	r3, ip, r3
 800b5c6:	0c12      	lsrs	r2, r2, #16
 800b5c8:	fa13 f38e 	uxtah	r3, r3, lr
 800b5cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b5d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5da:	45b9      	cmp	r9, r7
 800b5dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b5e0:	f840 3b04 	str.w	r3, [r0], #4
 800b5e4:	d2e8      	bcs.n	800b5b8 <quorem+0xb0>
 800b5e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b5ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b5ee:	b92a      	cbnz	r2, 800b5fc <quorem+0xf4>
 800b5f0:	3b04      	subs	r3, #4
 800b5f2:	429e      	cmp	r6, r3
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	d30b      	bcc.n	800b610 <quorem+0x108>
 800b5f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	b003      	add	sp, #12
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	6812      	ldr	r2, [r2, #0]
 800b606:	3b04      	subs	r3, #4
 800b608:	2a00      	cmp	r2, #0
 800b60a:	d1ca      	bne.n	800b5a2 <quorem+0x9a>
 800b60c:	3c01      	subs	r4, #1
 800b60e:	e7c5      	b.n	800b59c <quorem+0x94>
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	3b04      	subs	r3, #4
 800b614:	2a00      	cmp	r2, #0
 800b616:	d1ef      	bne.n	800b5f8 <quorem+0xf0>
 800b618:	3c01      	subs	r4, #1
 800b61a:	e7ea      	b.n	800b5f2 <quorem+0xea>
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7ee      	b.n	800b5fe <quorem+0xf6>

0800b620 <_dtoa_r>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	ec57 6b10 	vmov	r6, r7, d0
 800b628:	b097      	sub	sp, #92	; 0x5c
 800b62a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b62c:	9106      	str	r1, [sp, #24]
 800b62e:	4604      	mov	r4, r0
 800b630:	920b      	str	r2, [sp, #44]	; 0x2c
 800b632:	9312      	str	r3, [sp, #72]	; 0x48
 800b634:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b638:	e9cd 6700 	strd	r6, r7, [sp]
 800b63c:	b93d      	cbnz	r5, 800b64e <_dtoa_r+0x2e>
 800b63e:	2010      	movs	r0, #16
 800b640:	f001 faba 	bl	800cbb8 <malloc>
 800b644:	6260      	str	r0, [r4, #36]	; 0x24
 800b646:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b64a:	6005      	str	r5, [r0, #0]
 800b64c:	60c5      	str	r5, [r0, #12]
 800b64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b650:	6819      	ldr	r1, [r3, #0]
 800b652:	b151      	cbz	r1, 800b66a <_dtoa_r+0x4a>
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	604a      	str	r2, [r1, #4]
 800b658:	2301      	movs	r3, #1
 800b65a:	4093      	lsls	r3, r2
 800b65c:	608b      	str	r3, [r1, #8]
 800b65e:	4620      	mov	r0, r4
 800b660:	f001 fb03 	bl	800cc6a <_Bfree>
 800b664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b666:	2200      	movs	r2, #0
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	1e3b      	subs	r3, r7, #0
 800b66c:	bfbb      	ittet	lt
 800b66e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b672:	9301      	strlt	r3, [sp, #4]
 800b674:	2300      	movge	r3, #0
 800b676:	2201      	movlt	r2, #1
 800b678:	bfac      	ite	ge
 800b67a:	f8c8 3000 	strge.w	r3, [r8]
 800b67e:	f8c8 2000 	strlt.w	r2, [r8]
 800b682:	4baf      	ldr	r3, [pc, #700]	; (800b940 <_dtoa_r+0x320>)
 800b684:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b688:	ea33 0308 	bics.w	r3, r3, r8
 800b68c:	d114      	bne.n	800b6b8 <_dtoa_r+0x98>
 800b68e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b690:	f242 730f 	movw	r3, #9999	; 0x270f
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	9b00      	ldr	r3, [sp, #0]
 800b698:	b923      	cbnz	r3, 800b6a4 <_dtoa_r+0x84>
 800b69a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f000 8542 	beq.w	800c128 <_dtoa_r+0xb08>
 800b6a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b954 <_dtoa_r+0x334>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 8544 	beq.w	800c138 <_dtoa_r+0xb18>
 800b6b0:	f10b 0303 	add.w	r3, fp, #3
 800b6b4:	f000 bd3e 	b.w	800c134 <_dtoa_r+0xb14>
 800b6b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f5 fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6c8:	4681      	mov	r9, r0
 800b6ca:	b168      	cbz	r0, 800b6e8 <_dtoa_r+0xc8>
 800b6cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	6013      	str	r3, [r2, #0]
 800b6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 8524 	beq.w	800c122 <_dtoa_r+0xb02>
 800b6da:	4b9a      	ldr	r3, [pc, #616]	; (800b944 <_dtoa_r+0x324>)
 800b6dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6de:	f103 3bff 	add.w	fp, r3, #4294967295
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	f000 bd28 	b.w	800c138 <_dtoa_r+0xb18>
 800b6e8:	aa14      	add	r2, sp, #80	; 0x50
 800b6ea:	a915      	add	r1, sp, #84	; 0x54
 800b6ec:	ec47 6b10 	vmov	d0, r6, r7
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f001 fdc7 	bl	800d284 <__d2b>
 800b6f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b6fa:	9004      	str	r0, [sp, #16]
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	d07c      	beq.n	800b7fa <_dtoa_r+0x1da>
 800b700:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b704:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b708:	46b2      	mov	sl, r6
 800b70a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b70e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b712:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b716:	2200      	movs	r2, #0
 800b718:	4b8b      	ldr	r3, [pc, #556]	; (800b948 <_dtoa_r+0x328>)
 800b71a:	4650      	mov	r0, sl
 800b71c:	4659      	mov	r1, fp
 800b71e:	f7f4 fdbb 	bl	8000298 <__aeabi_dsub>
 800b722:	a381      	add	r3, pc, #516	; (adr r3, 800b928 <_dtoa_r+0x308>)
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	f7f4 ff6e 	bl	8000608 <__aeabi_dmul>
 800b72c:	a380      	add	r3, pc, #512	; (adr r3, 800b930 <_dtoa_r+0x310>)
 800b72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b732:	f7f4 fdb3 	bl	800029c <__adddf3>
 800b736:	4606      	mov	r6, r0
 800b738:	4628      	mov	r0, r5
 800b73a:	460f      	mov	r7, r1
 800b73c:	f7f4 fefa 	bl	8000534 <__aeabi_i2d>
 800b740:	a37d      	add	r3, pc, #500	; (adr r3, 800b938 <_dtoa_r+0x318>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	f7f4 ff5f 	bl	8000608 <__aeabi_dmul>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4630      	mov	r0, r6
 800b750:	4639      	mov	r1, r7
 800b752:	f7f4 fda3 	bl	800029c <__adddf3>
 800b756:	4606      	mov	r6, r0
 800b758:	460f      	mov	r7, r1
 800b75a:	f7f5 fa05 	bl	8000b68 <__aeabi_d2iz>
 800b75e:	2200      	movs	r2, #0
 800b760:	4682      	mov	sl, r0
 800b762:	2300      	movs	r3, #0
 800b764:	4630      	mov	r0, r6
 800b766:	4639      	mov	r1, r7
 800b768:	f7f5 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800b76c:	b148      	cbz	r0, 800b782 <_dtoa_r+0x162>
 800b76e:	4650      	mov	r0, sl
 800b770:	f7f4 fee0 	bl	8000534 <__aeabi_i2d>
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	f7f5 f9ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800b77c:	b908      	cbnz	r0, 800b782 <_dtoa_r+0x162>
 800b77e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b782:	f1ba 0f16 	cmp.w	sl, #22
 800b786:	d859      	bhi.n	800b83c <_dtoa_r+0x21c>
 800b788:	4970      	ldr	r1, [pc, #448]	; (800b94c <_dtoa_r+0x32c>)
 800b78a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b78e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b792:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b796:	f7f5 f9c7 	bl	8000b28 <__aeabi_dcmpgt>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d050      	beq.n	800b840 <_dtoa_r+0x220>
 800b79e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7a8:	1b5d      	subs	r5, r3, r5
 800b7aa:	f1b5 0801 	subs.w	r8, r5, #1
 800b7ae:	bf49      	itett	mi
 800b7b0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b7b4:	2300      	movpl	r3, #0
 800b7b6:	9305      	strmi	r3, [sp, #20]
 800b7b8:	f04f 0800 	movmi.w	r8, #0
 800b7bc:	bf58      	it	pl
 800b7be:	9305      	strpl	r3, [sp, #20]
 800b7c0:	f1ba 0f00 	cmp.w	sl, #0
 800b7c4:	db3e      	blt.n	800b844 <_dtoa_r+0x224>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	44d0      	add	r8, sl
 800b7ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b7ce:	9307      	str	r3, [sp, #28]
 800b7d0:	9b06      	ldr	r3, [sp, #24]
 800b7d2:	2b09      	cmp	r3, #9
 800b7d4:	f200 8090 	bhi.w	800b8f8 <_dtoa_r+0x2d8>
 800b7d8:	2b05      	cmp	r3, #5
 800b7da:	bfc4      	itt	gt
 800b7dc:	3b04      	subgt	r3, #4
 800b7de:	9306      	strgt	r3, [sp, #24]
 800b7e0:	9b06      	ldr	r3, [sp, #24]
 800b7e2:	f1a3 0302 	sub.w	r3, r3, #2
 800b7e6:	bfcc      	ite	gt
 800b7e8:	2500      	movgt	r5, #0
 800b7ea:	2501      	movle	r5, #1
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	f200 808f 	bhi.w	800b910 <_dtoa_r+0x2f0>
 800b7f2:	e8df f003 	tbb	[pc, r3]
 800b7f6:	7f7d      	.short	0x7f7d
 800b7f8:	7131      	.short	0x7131
 800b7fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b7fe:	441d      	add	r5, r3
 800b800:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b804:	2820      	cmp	r0, #32
 800b806:	dd13      	ble.n	800b830 <_dtoa_r+0x210>
 800b808:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	fa08 f800 	lsl.w	r8, r8, r0
 800b812:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b816:	fa23 f000 	lsr.w	r0, r3, r0
 800b81a:	ea48 0000 	orr.w	r0, r8, r0
 800b81e:	f7f4 fe79 	bl	8000514 <__aeabi_ui2d>
 800b822:	2301      	movs	r3, #1
 800b824:	4682      	mov	sl, r0
 800b826:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b82a:	3d01      	subs	r5, #1
 800b82c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b82e:	e772      	b.n	800b716 <_dtoa_r+0xf6>
 800b830:	9b00      	ldr	r3, [sp, #0]
 800b832:	f1c0 0020 	rsb	r0, r0, #32
 800b836:	fa03 f000 	lsl.w	r0, r3, r0
 800b83a:	e7f0      	b.n	800b81e <_dtoa_r+0x1fe>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e7b1      	b.n	800b7a4 <_dtoa_r+0x184>
 800b840:	900f      	str	r0, [sp, #60]	; 0x3c
 800b842:	e7b0      	b.n	800b7a6 <_dtoa_r+0x186>
 800b844:	9b05      	ldr	r3, [sp, #20]
 800b846:	eba3 030a 	sub.w	r3, r3, sl
 800b84a:	9305      	str	r3, [sp, #20]
 800b84c:	f1ca 0300 	rsb	r3, sl, #0
 800b850:	9307      	str	r3, [sp, #28]
 800b852:	2300      	movs	r3, #0
 800b854:	930e      	str	r3, [sp, #56]	; 0x38
 800b856:	e7bb      	b.n	800b7d0 <_dtoa_r+0x1b0>
 800b858:	2301      	movs	r3, #1
 800b85a:	930a      	str	r3, [sp, #40]	; 0x28
 800b85c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dd59      	ble.n	800b916 <_dtoa_r+0x2f6>
 800b862:	9302      	str	r3, [sp, #8]
 800b864:	4699      	mov	r9, r3
 800b866:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b868:	2200      	movs	r2, #0
 800b86a:	6072      	str	r2, [r6, #4]
 800b86c:	2204      	movs	r2, #4
 800b86e:	f102 0014 	add.w	r0, r2, #20
 800b872:	4298      	cmp	r0, r3
 800b874:	6871      	ldr	r1, [r6, #4]
 800b876:	d953      	bls.n	800b920 <_dtoa_r+0x300>
 800b878:	4620      	mov	r0, r4
 800b87a:	f001 f9c2 	bl	800cc02 <_Balloc>
 800b87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b880:	6030      	str	r0, [r6, #0]
 800b882:	f1b9 0f0e 	cmp.w	r9, #14
 800b886:	f8d3 b000 	ldr.w	fp, [r3]
 800b88a:	f200 80e6 	bhi.w	800ba5a <_dtoa_r+0x43a>
 800b88e:	2d00      	cmp	r5, #0
 800b890:	f000 80e3 	beq.w	800ba5a <_dtoa_r+0x43a>
 800b894:	ed9d 7b00 	vldr	d7, [sp]
 800b898:	f1ba 0f00 	cmp.w	sl, #0
 800b89c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b8a0:	dd74      	ble.n	800b98c <_dtoa_r+0x36c>
 800b8a2:	4a2a      	ldr	r2, [pc, #168]	; (800b94c <_dtoa_r+0x32c>)
 800b8a4:	f00a 030f 	and.w	r3, sl, #15
 800b8a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8ac:	ed93 7b00 	vldr	d7, [r3]
 800b8b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b8b4:	06f0      	lsls	r0, r6, #27
 800b8b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b8ba:	d565      	bpl.n	800b988 <_dtoa_r+0x368>
 800b8bc:	4b24      	ldr	r3, [pc, #144]	; (800b950 <_dtoa_r+0x330>)
 800b8be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8c6:	f7f4 ffc9 	bl	800085c <__aeabi_ddiv>
 800b8ca:	e9cd 0100 	strd	r0, r1, [sp]
 800b8ce:	f006 060f 	and.w	r6, r6, #15
 800b8d2:	2503      	movs	r5, #3
 800b8d4:	4f1e      	ldr	r7, [pc, #120]	; (800b950 <_dtoa_r+0x330>)
 800b8d6:	e04c      	b.n	800b972 <_dtoa_r+0x352>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	930a      	str	r3, [sp, #40]	; 0x28
 800b8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8de:	4453      	add	r3, sl
 800b8e0:	f103 0901 	add.w	r9, r3, #1
 800b8e4:	9302      	str	r3, [sp, #8]
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	bfb8      	it	lt
 800b8ec:	2301      	movlt	r3, #1
 800b8ee:	e7ba      	b.n	800b866 <_dtoa_r+0x246>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	e7b2      	b.n	800b85a <_dtoa_r+0x23a>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e7f0      	b.n	800b8da <_dtoa_r+0x2ba>
 800b8f8:	2501      	movs	r5, #1
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	9306      	str	r3, [sp, #24]
 800b8fe:	950a      	str	r5, [sp, #40]	; 0x28
 800b900:	f04f 33ff 	mov.w	r3, #4294967295
 800b904:	9302      	str	r3, [sp, #8]
 800b906:	4699      	mov	r9, r3
 800b908:	2200      	movs	r2, #0
 800b90a:	2312      	movs	r3, #18
 800b90c:	920b      	str	r2, [sp, #44]	; 0x2c
 800b90e:	e7aa      	b.n	800b866 <_dtoa_r+0x246>
 800b910:	2301      	movs	r3, #1
 800b912:	930a      	str	r3, [sp, #40]	; 0x28
 800b914:	e7f4      	b.n	800b900 <_dtoa_r+0x2e0>
 800b916:	2301      	movs	r3, #1
 800b918:	9302      	str	r3, [sp, #8]
 800b91a:	4699      	mov	r9, r3
 800b91c:	461a      	mov	r2, r3
 800b91e:	e7f5      	b.n	800b90c <_dtoa_r+0x2ec>
 800b920:	3101      	adds	r1, #1
 800b922:	6071      	str	r1, [r6, #4]
 800b924:	0052      	lsls	r2, r2, #1
 800b926:	e7a2      	b.n	800b86e <_dtoa_r+0x24e>
 800b928:	636f4361 	.word	0x636f4361
 800b92c:	3fd287a7 	.word	0x3fd287a7
 800b930:	8b60c8b3 	.word	0x8b60c8b3
 800b934:	3fc68a28 	.word	0x3fc68a28
 800b938:	509f79fb 	.word	0x509f79fb
 800b93c:	3fd34413 	.word	0x3fd34413
 800b940:	7ff00000 	.word	0x7ff00000
 800b944:	0800e639 	.word	0x0800e639
 800b948:	3ff80000 	.word	0x3ff80000
 800b94c:	0800e758 	.word	0x0800e758
 800b950:	0800e730 	.word	0x0800e730
 800b954:	0800e6b9 	.word	0x0800e6b9
 800b958:	07f1      	lsls	r1, r6, #31
 800b95a:	d508      	bpl.n	800b96e <_dtoa_r+0x34e>
 800b95c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b960:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b964:	f7f4 fe50 	bl	8000608 <__aeabi_dmul>
 800b968:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b96c:	3501      	adds	r5, #1
 800b96e:	1076      	asrs	r6, r6, #1
 800b970:	3708      	adds	r7, #8
 800b972:	2e00      	cmp	r6, #0
 800b974:	d1f0      	bne.n	800b958 <_dtoa_r+0x338>
 800b976:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b97a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b97e:	f7f4 ff6d 	bl	800085c <__aeabi_ddiv>
 800b982:	e9cd 0100 	strd	r0, r1, [sp]
 800b986:	e01a      	b.n	800b9be <_dtoa_r+0x39e>
 800b988:	2502      	movs	r5, #2
 800b98a:	e7a3      	b.n	800b8d4 <_dtoa_r+0x2b4>
 800b98c:	f000 80a0 	beq.w	800bad0 <_dtoa_r+0x4b0>
 800b990:	f1ca 0600 	rsb	r6, sl, #0
 800b994:	4b9f      	ldr	r3, [pc, #636]	; (800bc14 <_dtoa_r+0x5f4>)
 800b996:	4fa0      	ldr	r7, [pc, #640]	; (800bc18 <_dtoa_r+0x5f8>)
 800b998:	f006 020f 	and.w	r2, r6, #15
 800b99c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9a8:	f7f4 fe2e 	bl	8000608 <__aeabi_dmul>
 800b9ac:	e9cd 0100 	strd	r0, r1, [sp]
 800b9b0:	1136      	asrs	r6, r6, #4
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	2502      	movs	r5, #2
 800b9b6:	2e00      	cmp	r6, #0
 800b9b8:	d17f      	bne.n	800baba <_dtoa_r+0x49a>
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e1      	bne.n	800b982 <_dtoa_r+0x362>
 800b9be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 8087 	beq.w	800bad4 <_dtoa_r+0x4b4>
 800b9c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	4b93      	ldr	r3, [pc, #588]	; (800bc1c <_dtoa_r+0x5fc>)
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f5 f88b 	bl	8000aec <__aeabi_dcmplt>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d07c      	beq.n	800bad4 <_dtoa_r+0x4b4>
 800b9da:	f1b9 0f00 	cmp.w	r9, #0
 800b9de:	d079      	beq.n	800bad4 <_dtoa_r+0x4b4>
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	dd35      	ble.n	800ba52 <_dtoa_r+0x432>
 800b9e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b9ea:	9308      	str	r3, [sp, #32]
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4b8b      	ldr	r3, [pc, #556]	; (800bc20 <_dtoa_r+0x600>)
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f7f4 fe08 	bl	8000608 <__aeabi_dmul>
 800b9f8:	e9cd 0100 	strd	r0, r1, [sp]
 800b9fc:	9f02      	ldr	r7, [sp, #8]
 800b9fe:	3501      	adds	r5, #1
 800ba00:	4628      	mov	r0, r5
 800ba02:	f7f4 fd97 	bl	8000534 <__aeabi_i2d>
 800ba06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0a:	f7f4 fdfd 	bl	8000608 <__aeabi_dmul>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4b84      	ldr	r3, [pc, #528]	; (800bc24 <_dtoa_r+0x604>)
 800ba12:	f7f4 fc43 	bl	800029c <__adddf3>
 800ba16:	4605      	mov	r5, r0
 800ba18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba1c:	2f00      	cmp	r7, #0
 800ba1e:	d15d      	bne.n	800badc <_dtoa_r+0x4bc>
 800ba20:	2200      	movs	r2, #0
 800ba22:	4b81      	ldr	r3, [pc, #516]	; (800bc28 <_dtoa_r+0x608>)
 800ba24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba28:	f7f4 fc36 	bl	8000298 <__aeabi_dsub>
 800ba2c:	462a      	mov	r2, r5
 800ba2e:	4633      	mov	r3, r6
 800ba30:	e9cd 0100 	strd	r0, r1, [sp]
 800ba34:	f7f5 f878 	bl	8000b28 <__aeabi_dcmpgt>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	f040 8288 	bne.w	800bf4e <_dtoa_r+0x92e>
 800ba3e:	462a      	mov	r2, r5
 800ba40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ba44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba48:	f7f5 f850 	bl	8000aec <__aeabi_dcmplt>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	f040 827c 	bne.w	800bf4a <_dtoa_r+0x92a>
 800ba52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba56:	e9cd 2300 	strd	r2, r3, [sp]
 800ba5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f2c0 8150 	blt.w	800bd02 <_dtoa_r+0x6e2>
 800ba62:	f1ba 0f0e 	cmp.w	sl, #14
 800ba66:	f300 814c 	bgt.w	800bd02 <_dtoa_r+0x6e2>
 800ba6a:	4b6a      	ldr	r3, [pc, #424]	; (800bc14 <_dtoa_r+0x5f4>)
 800ba6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ba70:	ed93 7b00 	vldr	d7, [r3]
 800ba74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba7c:	f280 80d8 	bge.w	800bc30 <_dtoa_r+0x610>
 800ba80:	f1b9 0f00 	cmp.w	r9, #0
 800ba84:	f300 80d4 	bgt.w	800bc30 <_dtoa_r+0x610>
 800ba88:	f040 825e 	bne.w	800bf48 <_dtoa_r+0x928>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4b66      	ldr	r3, [pc, #408]	; (800bc28 <_dtoa_r+0x608>)
 800ba90:	ec51 0b17 	vmov	r0, r1, d7
 800ba94:	f7f4 fdb8 	bl	8000608 <__aeabi_dmul>
 800ba98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba9c:	f7f5 f83a 	bl	8000b14 <__aeabi_dcmpge>
 800baa0:	464f      	mov	r7, r9
 800baa2:	464e      	mov	r6, r9
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f040 8234 	bne.w	800bf12 <_dtoa_r+0x8f2>
 800baaa:	2331      	movs	r3, #49	; 0x31
 800baac:	f10b 0501 	add.w	r5, fp, #1
 800bab0:	f88b 3000 	strb.w	r3, [fp]
 800bab4:	f10a 0a01 	add.w	sl, sl, #1
 800bab8:	e22f      	b.n	800bf1a <_dtoa_r+0x8fa>
 800baba:	07f2      	lsls	r2, r6, #31
 800babc:	d505      	bpl.n	800baca <_dtoa_r+0x4aa>
 800babe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bac2:	f7f4 fda1 	bl	8000608 <__aeabi_dmul>
 800bac6:	3501      	adds	r5, #1
 800bac8:	2301      	movs	r3, #1
 800baca:	1076      	asrs	r6, r6, #1
 800bacc:	3708      	adds	r7, #8
 800bace:	e772      	b.n	800b9b6 <_dtoa_r+0x396>
 800bad0:	2502      	movs	r5, #2
 800bad2:	e774      	b.n	800b9be <_dtoa_r+0x39e>
 800bad4:	f8cd a020 	str.w	sl, [sp, #32]
 800bad8:	464f      	mov	r7, r9
 800bada:	e791      	b.n	800ba00 <_dtoa_r+0x3e0>
 800badc:	4b4d      	ldr	r3, [pc, #308]	; (800bc14 <_dtoa_r+0x5f4>)
 800bade:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bae2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d047      	beq.n	800bb7c <_dtoa_r+0x55c>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	2000      	movs	r0, #0
 800baf2:	494e      	ldr	r1, [pc, #312]	; (800bc2c <_dtoa_r+0x60c>)
 800baf4:	f7f4 feb2 	bl	800085c <__aeabi_ddiv>
 800baf8:	462a      	mov	r2, r5
 800bafa:	4633      	mov	r3, r6
 800bafc:	f7f4 fbcc 	bl	8000298 <__aeabi_dsub>
 800bb00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb04:	465d      	mov	r5, fp
 800bb06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb0a:	f7f5 f82d 	bl	8000b68 <__aeabi_d2iz>
 800bb0e:	4606      	mov	r6, r0
 800bb10:	f7f4 fd10 	bl	8000534 <__aeabi_i2d>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb1c:	f7f4 fbbc 	bl	8000298 <__aeabi_dsub>
 800bb20:	3630      	adds	r6, #48	; 0x30
 800bb22:	f805 6b01 	strb.w	r6, [r5], #1
 800bb26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb2a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb2e:	f7f4 ffdd 	bl	8000aec <__aeabi_dcmplt>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d163      	bne.n	800bbfe <_dtoa_r+0x5de>
 800bb36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb3a:	2000      	movs	r0, #0
 800bb3c:	4937      	ldr	r1, [pc, #220]	; (800bc1c <_dtoa_r+0x5fc>)
 800bb3e:	f7f4 fbab 	bl	8000298 <__aeabi_dsub>
 800bb42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bb46:	f7f4 ffd1 	bl	8000aec <__aeabi_dcmplt>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f040 80b7 	bne.w	800bcbe <_dtoa_r+0x69e>
 800bb50:	eba5 030b 	sub.w	r3, r5, fp
 800bb54:	429f      	cmp	r7, r3
 800bb56:	f77f af7c 	ble.w	800ba52 <_dtoa_r+0x432>
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	4b30      	ldr	r3, [pc, #192]	; (800bc20 <_dtoa_r+0x600>)
 800bb5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb62:	f7f4 fd51 	bl	8000608 <__aeabi_dmul>
 800bb66:	2200      	movs	r2, #0
 800bb68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb6c:	4b2c      	ldr	r3, [pc, #176]	; (800bc20 <_dtoa_r+0x600>)
 800bb6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb72:	f7f4 fd49 	bl	8000608 <__aeabi_dmul>
 800bb76:	e9cd 0100 	strd	r0, r1, [sp]
 800bb7a:	e7c4      	b.n	800bb06 <_dtoa_r+0x4e6>
 800bb7c:	462a      	mov	r2, r5
 800bb7e:	4633      	mov	r3, r6
 800bb80:	f7f4 fd42 	bl	8000608 <__aeabi_dmul>
 800bb84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bb88:	eb0b 0507 	add.w	r5, fp, r7
 800bb8c:	465e      	mov	r6, fp
 800bb8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb92:	f7f4 ffe9 	bl	8000b68 <__aeabi_d2iz>
 800bb96:	4607      	mov	r7, r0
 800bb98:	f7f4 fccc 	bl	8000534 <__aeabi_i2d>
 800bb9c:	3730      	adds	r7, #48	; 0x30
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bba6:	f7f4 fb77 	bl	8000298 <__aeabi_dsub>
 800bbaa:	f806 7b01 	strb.w	r7, [r6], #1
 800bbae:	42ae      	cmp	r6, r5
 800bbb0:	e9cd 0100 	strd	r0, r1, [sp]
 800bbb4:	f04f 0200 	mov.w	r2, #0
 800bbb8:	d126      	bne.n	800bc08 <_dtoa_r+0x5e8>
 800bbba:	4b1c      	ldr	r3, [pc, #112]	; (800bc2c <_dtoa_r+0x60c>)
 800bbbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbc0:	f7f4 fb6c 	bl	800029c <__adddf3>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbcc:	f7f4 ffac 	bl	8000b28 <__aeabi_dcmpgt>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d174      	bne.n	800bcbe <_dtoa_r+0x69e>
 800bbd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bbd8:	2000      	movs	r0, #0
 800bbda:	4914      	ldr	r1, [pc, #80]	; (800bc2c <_dtoa_r+0x60c>)
 800bbdc:	f7f4 fb5c 	bl	8000298 <__aeabi_dsub>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbe8:	f7f4 ff80 	bl	8000aec <__aeabi_dcmplt>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	f43f af30 	beq.w	800ba52 <_dtoa_r+0x432>
 800bbf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbf6:	2b30      	cmp	r3, #48	; 0x30
 800bbf8:	f105 32ff 	add.w	r2, r5, #4294967295
 800bbfc:	d002      	beq.n	800bc04 <_dtoa_r+0x5e4>
 800bbfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bc02:	e04a      	b.n	800bc9a <_dtoa_r+0x67a>
 800bc04:	4615      	mov	r5, r2
 800bc06:	e7f4      	b.n	800bbf2 <_dtoa_r+0x5d2>
 800bc08:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <_dtoa_r+0x600>)
 800bc0a:	f7f4 fcfd 	bl	8000608 <__aeabi_dmul>
 800bc0e:	e9cd 0100 	strd	r0, r1, [sp]
 800bc12:	e7bc      	b.n	800bb8e <_dtoa_r+0x56e>
 800bc14:	0800e758 	.word	0x0800e758
 800bc18:	0800e730 	.word	0x0800e730
 800bc1c:	3ff00000 	.word	0x3ff00000
 800bc20:	40240000 	.word	0x40240000
 800bc24:	401c0000 	.word	0x401c0000
 800bc28:	40140000 	.word	0x40140000
 800bc2c:	3fe00000 	.word	0x3fe00000
 800bc30:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc34:	465d      	mov	r5, fp
 800bc36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fe0d 	bl	800085c <__aeabi_ddiv>
 800bc42:	f7f4 ff91 	bl	8000b68 <__aeabi_d2iz>
 800bc46:	4680      	mov	r8, r0
 800bc48:	f7f4 fc74 	bl	8000534 <__aeabi_i2d>
 800bc4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc50:	f7f4 fcda 	bl	8000608 <__aeabi_dmul>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bc60:	f7f4 fb1a 	bl	8000298 <__aeabi_dsub>
 800bc64:	f805 6b01 	strb.w	r6, [r5], #1
 800bc68:	eba5 060b 	sub.w	r6, r5, fp
 800bc6c:	45b1      	cmp	r9, r6
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	d139      	bne.n	800bce8 <_dtoa_r+0x6c8>
 800bc74:	f7f4 fb12 	bl	800029c <__adddf3>
 800bc78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	f7f4 ff52 	bl	8000b28 <__aeabi_dcmpgt>
 800bc84:	b9c8      	cbnz	r0, 800bcba <_dtoa_r+0x69a>
 800bc86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 ff23 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc92:	b110      	cbz	r0, 800bc9a <_dtoa_r+0x67a>
 800bc94:	f018 0f01 	tst.w	r8, #1
 800bc98:	d10f      	bne.n	800bcba <_dtoa_r+0x69a>
 800bc9a:	9904      	ldr	r1, [sp, #16]
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f000 ffe4 	bl	800cc6a <_Bfree>
 800bca2:	2300      	movs	r3, #0
 800bca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bca6:	702b      	strb	r3, [r5, #0]
 800bca8:	f10a 0301 	add.w	r3, sl, #1
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f000 8241 	beq.w	800c138 <_dtoa_r+0xb18>
 800bcb6:	601d      	str	r5, [r3, #0]
 800bcb8:	e23e      	b.n	800c138 <_dtoa_r+0xb18>
 800bcba:	f8cd a020 	str.w	sl, [sp, #32]
 800bcbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcc2:	2a39      	cmp	r2, #57	; 0x39
 800bcc4:	f105 33ff 	add.w	r3, r5, #4294967295
 800bcc8:	d108      	bne.n	800bcdc <_dtoa_r+0x6bc>
 800bcca:	459b      	cmp	fp, r3
 800bccc:	d10a      	bne.n	800bce4 <_dtoa_r+0x6c4>
 800bcce:	9b08      	ldr	r3, [sp, #32]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	9308      	str	r3, [sp, #32]
 800bcd4:	2330      	movs	r3, #48	; 0x30
 800bcd6:	f88b 3000 	strb.w	r3, [fp]
 800bcda:	465b      	mov	r3, fp
 800bcdc:	781a      	ldrb	r2, [r3, #0]
 800bcde:	3201      	adds	r2, #1
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	e78c      	b.n	800bbfe <_dtoa_r+0x5de>
 800bce4:	461d      	mov	r5, r3
 800bce6:	e7ea      	b.n	800bcbe <_dtoa_r+0x69e>
 800bce8:	2200      	movs	r2, #0
 800bcea:	4b9b      	ldr	r3, [pc, #620]	; (800bf58 <_dtoa_r+0x938>)
 800bcec:	f7f4 fc8c 	bl	8000608 <__aeabi_dmul>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	460f      	mov	r7, r1
 800bcf8:	f7f4 feee 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d09a      	beq.n	800bc36 <_dtoa_r+0x616>
 800bd00:	e7cb      	b.n	800bc9a <_dtoa_r+0x67a>
 800bd02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	f000 808b 	beq.w	800be20 <_dtoa_r+0x800>
 800bd0a:	9a06      	ldr	r2, [sp, #24]
 800bd0c:	2a01      	cmp	r2, #1
 800bd0e:	dc6e      	bgt.n	800bdee <_dtoa_r+0x7ce>
 800bd10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	d067      	beq.n	800bde6 <_dtoa_r+0x7c6>
 800bd16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd1a:	9f07      	ldr	r7, [sp, #28]
 800bd1c:	9d05      	ldr	r5, [sp, #20]
 800bd1e:	9a05      	ldr	r2, [sp, #20]
 800bd20:	2101      	movs	r1, #1
 800bd22:	441a      	add	r2, r3
 800bd24:	4620      	mov	r0, r4
 800bd26:	9205      	str	r2, [sp, #20]
 800bd28:	4498      	add	r8, r3
 800bd2a:	f001 f87c 	bl	800ce26 <__i2b>
 800bd2e:	4606      	mov	r6, r0
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	dd0c      	ble.n	800bd4e <_dtoa_r+0x72e>
 800bd34:	f1b8 0f00 	cmp.w	r8, #0
 800bd38:	dd09      	ble.n	800bd4e <_dtoa_r+0x72e>
 800bd3a:	4545      	cmp	r5, r8
 800bd3c:	9a05      	ldr	r2, [sp, #20]
 800bd3e:	462b      	mov	r3, r5
 800bd40:	bfa8      	it	ge
 800bd42:	4643      	movge	r3, r8
 800bd44:	1ad2      	subs	r2, r2, r3
 800bd46:	9205      	str	r2, [sp, #20]
 800bd48:	1aed      	subs	r5, r5, r3
 800bd4a:	eba8 0803 	sub.w	r8, r8, r3
 800bd4e:	9b07      	ldr	r3, [sp, #28]
 800bd50:	b1eb      	cbz	r3, 800bd8e <_dtoa_r+0x76e>
 800bd52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d067      	beq.n	800be28 <_dtoa_r+0x808>
 800bd58:	b18f      	cbz	r7, 800bd7e <_dtoa_r+0x75e>
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	463a      	mov	r2, r7
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f001 f900 	bl	800cf64 <__pow5mult>
 800bd64:	9a04      	ldr	r2, [sp, #16]
 800bd66:	4601      	mov	r1, r0
 800bd68:	4606      	mov	r6, r0
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f001 f864 	bl	800ce38 <__multiply>
 800bd70:	9904      	ldr	r1, [sp, #16]
 800bd72:	9008      	str	r0, [sp, #32]
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 ff78 	bl	800cc6a <_Bfree>
 800bd7a:	9b08      	ldr	r3, [sp, #32]
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	9b07      	ldr	r3, [sp, #28]
 800bd80:	1bda      	subs	r2, r3, r7
 800bd82:	d004      	beq.n	800bd8e <_dtoa_r+0x76e>
 800bd84:	9904      	ldr	r1, [sp, #16]
 800bd86:	4620      	mov	r0, r4
 800bd88:	f001 f8ec 	bl	800cf64 <__pow5mult>
 800bd8c:	9004      	str	r0, [sp, #16]
 800bd8e:	2101      	movs	r1, #1
 800bd90:	4620      	mov	r0, r4
 800bd92:	f001 f848 	bl	800ce26 <__i2b>
 800bd96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd98:	4607      	mov	r7, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 81d0 	beq.w	800c140 <_dtoa_r+0xb20>
 800bda0:	461a      	mov	r2, r3
 800bda2:	4601      	mov	r1, r0
 800bda4:	4620      	mov	r0, r4
 800bda6:	f001 f8dd 	bl	800cf64 <__pow5mult>
 800bdaa:	9b06      	ldr	r3, [sp, #24]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	4607      	mov	r7, r0
 800bdb0:	dc40      	bgt.n	800be34 <_dtoa_r+0x814>
 800bdb2:	9b00      	ldr	r3, [sp, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d139      	bne.n	800be2c <_dtoa_r+0x80c>
 800bdb8:	9b01      	ldr	r3, [sp, #4]
 800bdba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d136      	bne.n	800be30 <_dtoa_r+0x810>
 800bdc2:	9b01      	ldr	r3, [sp, #4]
 800bdc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdc8:	0d1b      	lsrs	r3, r3, #20
 800bdca:	051b      	lsls	r3, r3, #20
 800bdcc:	b12b      	cbz	r3, 800bdda <_dtoa_r+0x7ba>
 800bdce:	9b05      	ldr	r3, [sp, #20]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	9305      	str	r3, [sp, #20]
 800bdd4:	f108 0801 	add.w	r8, r8, #1
 800bdd8:	2301      	movs	r3, #1
 800bdda:	9307      	str	r3, [sp, #28]
 800bddc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d12a      	bne.n	800be38 <_dtoa_r+0x818>
 800bde2:	2001      	movs	r0, #1
 800bde4:	e030      	b.n	800be48 <_dtoa_r+0x828>
 800bde6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bde8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdec:	e795      	b.n	800bd1a <_dtoa_r+0x6fa>
 800bdee:	9b07      	ldr	r3, [sp, #28]
 800bdf0:	f109 37ff 	add.w	r7, r9, #4294967295
 800bdf4:	42bb      	cmp	r3, r7
 800bdf6:	bfbf      	itttt	lt
 800bdf8:	9b07      	ldrlt	r3, [sp, #28]
 800bdfa:	9707      	strlt	r7, [sp, #28]
 800bdfc:	1afa      	sublt	r2, r7, r3
 800bdfe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800be00:	bfbb      	ittet	lt
 800be02:	189b      	addlt	r3, r3, r2
 800be04:	930e      	strlt	r3, [sp, #56]	; 0x38
 800be06:	1bdf      	subge	r7, r3, r7
 800be08:	2700      	movlt	r7, #0
 800be0a:	f1b9 0f00 	cmp.w	r9, #0
 800be0e:	bfb5      	itete	lt
 800be10:	9b05      	ldrlt	r3, [sp, #20]
 800be12:	9d05      	ldrge	r5, [sp, #20]
 800be14:	eba3 0509 	sublt.w	r5, r3, r9
 800be18:	464b      	movge	r3, r9
 800be1a:	bfb8      	it	lt
 800be1c:	2300      	movlt	r3, #0
 800be1e:	e77e      	b.n	800bd1e <_dtoa_r+0x6fe>
 800be20:	9f07      	ldr	r7, [sp, #28]
 800be22:	9d05      	ldr	r5, [sp, #20]
 800be24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800be26:	e783      	b.n	800bd30 <_dtoa_r+0x710>
 800be28:	9a07      	ldr	r2, [sp, #28]
 800be2a:	e7ab      	b.n	800bd84 <_dtoa_r+0x764>
 800be2c:	2300      	movs	r3, #0
 800be2e:	e7d4      	b.n	800bdda <_dtoa_r+0x7ba>
 800be30:	9b00      	ldr	r3, [sp, #0]
 800be32:	e7d2      	b.n	800bdda <_dtoa_r+0x7ba>
 800be34:	2300      	movs	r3, #0
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800be3e:	6918      	ldr	r0, [r3, #16]
 800be40:	f000 ffa3 	bl	800cd8a <__hi0bits>
 800be44:	f1c0 0020 	rsb	r0, r0, #32
 800be48:	4440      	add	r0, r8
 800be4a:	f010 001f 	ands.w	r0, r0, #31
 800be4e:	d047      	beq.n	800bee0 <_dtoa_r+0x8c0>
 800be50:	f1c0 0320 	rsb	r3, r0, #32
 800be54:	2b04      	cmp	r3, #4
 800be56:	dd3b      	ble.n	800bed0 <_dtoa_r+0x8b0>
 800be58:	9b05      	ldr	r3, [sp, #20]
 800be5a:	f1c0 001c 	rsb	r0, r0, #28
 800be5e:	4403      	add	r3, r0
 800be60:	9305      	str	r3, [sp, #20]
 800be62:	4405      	add	r5, r0
 800be64:	4480      	add	r8, r0
 800be66:	9b05      	ldr	r3, [sp, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dd05      	ble.n	800be78 <_dtoa_r+0x858>
 800be6c:	461a      	mov	r2, r3
 800be6e:	9904      	ldr	r1, [sp, #16]
 800be70:	4620      	mov	r0, r4
 800be72:	f001 f8c5 	bl	800d000 <__lshift>
 800be76:	9004      	str	r0, [sp, #16]
 800be78:	f1b8 0f00 	cmp.w	r8, #0
 800be7c:	dd05      	ble.n	800be8a <_dtoa_r+0x86a>
 800be7e:	4639      	mov	r1, r7
 800be80:	4642      	mov	r2, r8
 800be82:	4620      	mov	r0, r4
 800be84:	f001 f8bc 	bl	800d000 <__lshift>
 800be88:	4607      	mov	r7, r0
 800be8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be8c:	b353      	cbz	r3, 800bee4 <_dtoa_r+0x8c4>
 800be8e:	4639      	mov	r1, r7
 800be90:	9804      	ldr	r0, [sp, #16]
 800be92:	f001 f909 	bl	800d0a8 <__mcmp>
 800be96:	2800      	cmp	r0, #0
 800be98:	da24      	bge.n	800bee4 <_dtoa_r+0x8c4>
 800be9a:	2300      	movs	r3, #0
 800be9c:	220a      	movs	r2, #10
 800be9e:	9904      	ldr	r1, [sp, #16]
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fef9 	bl	800cc98 <__multadd>
 800bea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea8:	9004      	str	r0, [sp, #16]
 800beaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beae:	2b00      	cmp	r3, #0
 800beb0:	f000 814d 	beq.w	800c14e <_dtoa_r+0xb2e>
 800beb4:	2300      	movs	r3, #0
 800beb6:	4631      	mov	r1, r6
 800beb8:	220a      	movs	r2, #10
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 feec 	bl	800cc98 <__multadd>
 800bec0:	9b02      	ldr	r3, [sp, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	4606      	mov	r6, r0
 800bec6:	dc4f      	bgt.n	800bf68 <_dtoa_r+0x948>
 800bec8:	9b06      	ldr	r3, [sp, #24]
 800beca:	2b02      	cmp	r3, #2
 800becc:	dd4c      	ble.n	800bf68 <_dtoa_r+0x948>
 800bece:	e011      	b.n	800bef4 <_dtoa_r+0x8d4>
 800bed0:	d0c9      	beq.n	800be66 <_dtoa_r+0x846>
 800bed2:	9a05      	ldr	r2, [sp, #20]
 800bed4:	331c      	adds	r3, #28
 800bed6:	441a      	add	r2, r3
 800bed8:	9205      	str	r2, [sp, #20]
 800beda:	441d      	add	r5, r3
 800bedc:	4498      	add	r8, r3
 800bede:	e7c2      	b.n	800be66 <_dtoa_r+0x846>
 800bee0:	4603      	mov	r3, r0
 800bee2:	e7f6      	b.n	800bed2 <_dtoa_r+0x8b2>
 800bee4:	f1b9 0f00 	cmp.w	r9, #0
 800bee8:	dc38      	bgt.n	800bf5c <_dtoa_r+0x93c>
 800beea:	9b06      	ldr	r3, [sp, #24]
 800beec:	2b02      	cmp	r3, #2
 800beee:	dd35      	ble.n	800bf5c <_dtoa_r+0x93c>
 800bef0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bef4:	9b02      	ldr	r3, [sp, #8]
 800bef6:	b963      	cbnz	r3, 800bf12 <_dtoa_r+0x8f2>
 800bef8:	4639      	mov	r1, r7
 800befa:	2205      	movs	r2, #5
 800befc:	4620      	mov	r0, r4
 800befe:	f000 fecb 	bl	800cc98 <__multadd>
 800bf02:	4601      	mov	r1, r0
 800bf04:	4607      	mov	r7, r0
 800bf06:	9804      	ldr	r0, [sp, #16]
 800bf08:	f001 f8ce 	bl	800d0a8 <__mcmp>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f73f adcc 	bgt.w	800baaa <_dtoa_r+0x48a>
 800bf12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf14:	465d      	mov	r5, fp
 800bf16:	ea6f 0a03 	mvn.w	sl, r3
 800bf1a:	f04f 0900 	mov.w	r9, #0
 800bf1e:	4639      	mov	r1, r7
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 fea2 	bl	800cc6a <_Bfree>
 800bf26:	2e00      	cmp	r6, #0
 800bf28:	f43f aeb7 	beq.w	800bc9a <_dtoa_r+0x67a>
 800bf2c:	f1b9 0f00 	cmp.w	r9, #0
 800bf30:	d005      	beq.n	800bf3e <_dtoa_r+0x91e>
 800bf32:	45b1      	cmp	r9, r6
 800bf34:	d003      	beq.n	800bf3e <_dtoa_r+0x91e>
 800bf36:	4649      	mov	r1, r9
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 fe96 	bl	800cc6a <_Bfree>
 800bf3e:	4631      	mov	r1, r6
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 fe92 	bl	800cc6a <_Bfree>
 800bf46:	e6a8      	b.n	800bc9a <_dtoa_r+0x67a>
 800bf48:	2700      	movs	r7, #0
 800bf4a:	463e      	mov	r6, r7
 800bf4c:	e7e1      	b.n	800bf12 <_dtoa_r+0x8f2>
 800bf4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bf52:	463e      	mov	r6, r7
 800bf54:	e5a9      	b.n	800baaa <_dtoa_r+0x48a>
 800bf56:	bf00      	nop
 800bf58:	40240000 	.word	0x40240000
 800bf5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 80fa 	beq.w	800c15c <_dtoa_r+0xb3c>
 800bf68:	2d00      	cmp	r5, #0
 800bf6a:	dd05      	ble.n	800bf78 <_dtoa_r+0x958>
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	462a      	mov	r2, r5
 800bf70:	4620      	mov	r0, r4
 800bf72:	f001 f845 	bl	800d000 <__lshift>
 800bf76:	4606      	mov	r6, r0
 800bf78:	9b07      	ldr	r3, [sp, #28]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d04c      	beq.n	800c018 <_dtoa_r+0x9f8>
 800bf7e:	6871      	ldr	r1, [r6, #4]
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fe3e 	bl	800cc02 <_Balloc>
 800bf86:	6932      	ldr	r2, [r6, #16]
 800bf88:	3202      	adds	r2, #2
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	0092      	lsls	r2, r2, #2
 800bf8e:	f106 010c 	add.w	r1, r6, #12
 800bf92:	300c      	adds	r0, #12
 800bf94:	f000 fe2a 	bl	800cbec <memcpy>
 800bf98:	2201      	movs	r2, #1
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f001 f82f 	bl	800d000 <__lshift>
 800bfa2:	9b00      	ldr	r3, [sp, #0]
 800bfa4:	f8cd b014 	str.w	fp, [sp, #20]
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	46b1      	mov	r9, r6
 800bfae:	9307      	str	r3, [sp, #28]
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	9804      	ldr	r0, [sp, #16]
 800bfb6:	f7ff faa7 	bl	800b508 <quorem>
 800bfba:	4649      	mov	r1, r9
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bfc2:	9804      	ldr	r0, [sp, #16]
 800bfc4:	f001 f870 	bl	800d0a8 <__mcmp>
 800bfc8:	4632      	mov	r2, r6
 800bfca:	9000      	str	r0, [sp, #0]
 800bfcc:	4639      	mov	r1, r7
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f001 f884 	bl	800d0dc <__mdiff>
 800bfd4:	68c3      	ldr	r3, [r0, #12]
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	bb03      	cbnz	r3, 800c01c <_dtoa_r+0x9fc>
 800bfda:	4601      	mov	r1, r0
 800bfdc:	9008      	str	r0, [sp, #32]
 800bfde:	9804      	ldr	r0, [sp, #16]
 800bfe0:	f001 f862 	bl	800d0a8 <__mcmp>
 800bfe4:	9a08      	ldr	r2, [sp, #32]
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4611      	mov	r1, r2
 800bfea:	4620      	mov	r0, r4
 800bfec:	9308      	str	r3, [sp, #32]
 800bfee:	f000 fe3c 	bl	800cc6a <_Bfree>
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	b9a3      	cbnz	r3, 800c020 <_dtoa_r+0xa00>
 800bff6:	9a06      	ldr	r2, [sp, #24]
 800bff8:	b992      	cbnz	r2, 800c020 <_dtoa_r+0xa00>
 800bffa:	9a07      	ldr	r2, [sp, #28]
 800bffc:	b982      	cbnz	r2, 800c020 <_dtoa_r+0xa00>
 800bffe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c002:	d029      	beq.n	800c058 <_dtoa_r+0xa38>
 800c004:	9b00      	ldr	r3, [sp, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	dd01      	ble.n	800c00e <_dtoa_r+0x9ee>
 800c00a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c00e:	9b05      	ldr	r3, [sp, #20]
 800c010:	1c5d      	adds	r5, r3, #1
 800c012:	f883 8000 	strb.w	r8, [r3]
 800c016:	e782      	b.n	800bf1e <_dtoa_r+0x8fe>
 800c018:	4630      	mov	r0, r6
 800c01a:	e7c2      	b.n	800bfa2 <_dtoa_r+0x982>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e7e3      	b.n	800bfe8 <_dtoa_r+0x9c8>
 800c020:	9a00      	ldr	r2, [sp, #0]
 800c022:	2a00      	cmp	r2, #0
 800c024:	db04      	blt.n	800c030 <_dtoa_r+0xa10>
 800c026:	d125      	bne.n	800c074 <_dtoa_r+0xa54>
 800c028:	9a06      	ldr	r2, [sp, #24]
 800c02a:	bb1a      	cbnz	r2, 800c074 <_dtoa_r+0xa54>
 800c02c:	9a07      	ldr	r2, [sp, #28]
 800c02e:	bb0a      	cbnz	r2, 800c074 <_dtoa_r+0xa54>
 800c030:	2b00      	cmp	r3, #0
 800c032:	ddec      	ble.n	800c00e <_dtoa_r+0x9ee>
 800c034:	2201      	movs	r2, #1
 800c036:	9904      	ldr	r1, [sp, #16]
 800c038:	4620      	mov	r0, r4
 800c03a:	f000 ffe1 	bl	800d000 <__lshift>
 800c03e:	4639      	mov	r1, r7
 800c040:	9004      	str	r0, [sp, #16]
 800c042:	f001 f831 	bl	800d0a8 <__mcmp>
 800c046:	2800      	cmp	r0, #0
 800c048:	dc03      	bgt.n	800c052 <_dtoa_r+0xa32>
 800c04a:	d1e0      	bne.n	800c00e <_dtoa_r+0x9ee>
 800c04c:	f018 0f01 	tst.w	r8, #1
 800c050:	d0dd      	beq.n	800c00e <_dtoa_r+0x9ee>
 800c052:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c056:	d1d8      	bne.n	800c00a <_dtoa_r+0x9ea>
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	9a05      	ldr	r2, [sp, #20]
 800c05c:	1c5d      	adds	r5, r3, #1
 800c05e:	2339      	movs	r3, #57	; 0x39
 800c060:	7013      	strb	r3, [r2, #0]
 800c062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c066:	2b39      	cmp	r3, #57	; 0x39
 800c068:	f105 32ff 	add.w	r2, r5, #4294967295
 800c06c:	d04f      	beq.n	800c10e <_dtoa_r+0xaee>
 800c06e:	3301      	adds	r3, #1
 800c070:	7013      	strb	r3, [r2, #0]
 800c072:	e754      	b.n	800bf1e <_dtoa_r+0x8fe>
 800c074:	9a05      	ldr	r2, [sp, #20]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f102 0501 	add.w	r5, r2, #1
 800c07c:	dd06      	ble.n	800c08c <_dtoa_r+0xa6c>
 800c07e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c082:	d0e9      	beq.n	800c058 <_dtoa_r+0xa38>
 800c084:	f108 0801 	add.w	r8, r8, #1
 800c088:	9b05      	ldr	r3, [sp, #20]
 800c08a:	e7c2      	b.n	800c012 <_dtoa_r+0x9f2>
 800c08c:	9a02      	ldr	r2, [sp, #8]
 800c08e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c092:	eba5 030b 	sub.w	r3, r5, fp
 800c096:	4293      	cmp	r3, r2
 800c098:	d021      	beq.n	800c0de <_dtoa_r+0xabe>
 800c09a:	2300      	movs	r3, #0
 800c09c:	220a      	movs	r2, #10
 800c09e:	9904      	ldr	r1, [sp, #16]
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 fdf9 	bl	800cc98 <__multadd>
 800c0a6:	45b1      	cmp	r9, r6
 800c0a8:	9004      	str	r0, [sp, #16]
 800c0aa:	f04f 0300 	mov.w	r3, #0
 800c0ae:	f04f 020a 	mov.w	r2, #10
 800c0b2:	4649      	mov	r1, r9
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	d105      	bne.n	800c0c4 <_dtoa_r+0xaa4>
 800c0b8:	f000 fdee 	bl	800cc98 <__multadd>
 800c0bc:	4681      	mov	r9, r0
 800c0be:	4606      	mov	r6, r0
 800c0c0:	9505      	str	r5, [sp, #20]
 800c0c2:	e776      	b.n	800bfb2 <_dtoa_r+0x992>
 800c0c4:	f000 fde8 	bl	800cc98 <__multadd>
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4681      	mov	r9, r0
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	220a      	movs	r2, #10
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 fde1 	bl	800cc98 <__multadd>
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	e7f2      	b.n	800c0c0 <_dtoa_r+0xaa0>
 800c0da:	f04f 0900 	mov.w	r9, #0
 800c0de:	2201      	movs	r2, #1
 800c0e0:	9904      	ldr	r1, [sp, #16]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 ff8c 	bl	800d000 <__lshift>
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	9004      	str	r0, [sp, #16]
 800c0ec:	f000 ffdc 	bl	800d0a8 <__mcmp>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	dcb6      	bgt.n	800c062 <_dtoa_r+0xa42>
 800c0f4:	d102      	bne.n	800c0fc <_dtoa_r+0xadc>
 800c0f6:	f018 0f01 	tst.w	r8, #1
 800c0fa:	d1b2      	bne.n	800c062 <_dtoa_r+0xa42>
 800c0fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c100:	2b30      	cmp	r3, #48	; 0x30
 800c102:	f105 32ff 	add.w	r2, r5, #4294967295
 800c106:	f47f af0a 	bne.w	800bf1e <_dtoa_r+0x8fe>
 800c10a:	4615      	mov	r5, r2
 800c10c:	e7f6      	b.n	800c0fc <_dtoa_r+0xadc>
 800c10e:	4593      	cmp	fp, r2
 800c110:	d105      	bne.n	800c11e <_dtoa_r+0xafe>
 800c112:	2331      	movs	r3, #49	; 0x31
 800c114:	f10a 0a01 	add.w	sl, sl, #1
 800c118:	f88b 3000 	strb.w	r3, [fp]
 800c11c:	e6ff      	b.n	800bf1e <_dtoa_r+0x8fe>
 800c11e:	4615      	mov	r5, r2
 800c120:	e79f      	b.n	800c062 <_dtoa_r+0xa42>
 800c122:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c188 <_dtoa_r+0xb68>
 800c126:	e007      	b.n	800c138 <_dtoa_r+0xb18>
 800c128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c12a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c18c <_dtoa_r+0xb6c>
 800c12e:	b11b      	cbz	r3, 800c138 <_dtoa_r+0xb18>
 800c130:	f10b 0308 	add.w	r3, fp, #8
 800c134:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	4658      	mov	r0, fp
 800c13a:	b017      	add	sp, #92	; 0x5c
 800c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c140:	9b06      	ldr	r3, [sp, #24]
 800c142:	2b01      	cmp	r3, #1
 800c144:	f77f ae35 	ble.w	800bdb2 <_dtoa_r+0x792>
 800c148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c14a:	9307      	str	r3, [sp, #28]
 800c14c:	e649      	b.n	800bde2 <_dtoa_r+0x7c2>
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	dc03      	bgt.n	800c15c <_dtoa_r+0xb3c>
 800c154:	9b06      	ldr	r3, [sp, #24]
 800c156:	2b02      	cmp	r3, #2
 800c158:	f73f aecc 	bgt.w	800bef4 <_dtoa_r+0x8d4>
 800c15c:	465d      	mov	r5, fp
 800c15e:	4639      	mov	r1, r7
 800c160:	9804      	ldr	r0, [sp, #16]
 800c162:	f7ff f9d1 	bl	800b508 <quorem>
 800c166:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c16a:	f805 8b01 	strb.w	r8, [r5], #1
 800c16e:	9a02      	ldr	r2, [sp, #8]
 800c170:	eba5 030b 	sub.w	r3, r5, fp
 800c174:	429a      	cmp	r2, r3
 800c176:	ddb0      	ble.n	800c0da <_dtoa_r+0xaba>
 800c178:	2300      	movs	r3, #0
 800c17a:	220a      	movs	r2, #10
 800c17c:	9904      	ldr	r1, [sp, #16]
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 fd8a 	bl	800cc98 <__multadd>
 800c184:	9004      	str	r0, [sp, #16]
 800c186:	e7ea      	b.n	800c15e <_dtoa_r+0xb3e>
 800c188:	0800e638 	.word	0x0800e638
 800c18c:	0800e6b0 	.word	0x0800e6b0

0800c190 <__sflush_r>:
 800c190:	898a      	ldrh	r2, [r1, #12]
 800c192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c196:	4605      	mov	r5, r0
 800c198:	0710      	lsls	r0, r2, #28
 800c19a:	460c      	mov	r4, r1
 800c19c:	d458      	bmi.n	800c250 <__sflush_r+0xc0>
 800c19e:	684b      	ldr	r3, [r1, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	dc05      	bgt.n	800c1b0 <__sflush_r+0x20>
 800c1a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dc02      	bgt.n	800c1b0 <__sflush_r+0x20>
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1b2:	2e00      	cmp	r6, #0
 800c1b4:	d0f9      	beq.n	800c1aa <__sflush_r+0x1a>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1bc:	682f      	ldr	r7, [r5, #0]
 800c1be:	6a21      	ldr	r1, [r4, #32]
 800c1c0:	602b      	str	r3, [r5, #0]
 800c1c2:	d032      	beq.n	800c22a <__sflush_r+0x9a>
 800c1c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	075a      	lsls	r2, r3, #29
 800c1ca:	d505      	bpl.n	800c1d8 <__sflush_r+0x48>
 800c1cc:	6863      	ldr	r3, [r4, #4]
 800c1ce:	1ac0      	subs	r0, r0, r3
 800c1d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1d2:	b10b      	cbz	r3, 800c1d8 <__sflush_r+0x48>
 800c1d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1d6:	1ac0      	subs	r0, r0, r3
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4602      	mov	r2, r0
 800c1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1de:	6a21      	ldr	r1, [r4, #32]
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	47b0      	blx	r6
 800c1e4:	1c43      	adds	r3, r0, #1
 800c1e6:	89a3      	ldrh	r3, [r4, #12]
 800c1e8:	d106      	bne.n	800c1f8 <__sflush_r+0x68>
 800c1ea:	6829      	ldr	r1, [r5, #0]
 800c1ec:	291d      	cmp	r1, #29
 800c1ee:	d848      	bhi.n	800c282 <__sflush_r+0xf2>
 800c1f0:	4a29      	ldr	r2, [pc, #164]	; (800c298 <__sflush_r+0x108>)
 800c1f2:	40ca      	lsrs	r2, r1
 800c1f4:	07d6      	lsls	r6, r2, #31
 800c1f6:	d544      	bpl.n	800c282 <__sflush_r+0xf2>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	6062      	str	r2, [r4, #4]
 800c1fc:	04d9      	lsls	r1, r3, #19
 800c1fe:	6922      	ldr	r2, [r4, #16]
 800c200:	6022      	str	r2, [r4, #0]
 800c202:	d504      	bpl.n	800c20e <__sflush_r+0x7e>
 800c204:	1c42      	adds	r2, r0, #1
 800c206:	d101      	bne.n	800c20c <__sflush_r+0x7c>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b903      	cbnz	r3, 800c20e <__sflush_r+0x7e>
 800c20c:	6560      	str	r0, [r4, #84]	; 0x54
 800c20e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c210:	602f      	str	r7, [r5, #0]
 800c212:	2900      	cmp	r1, #0
 800c214:	d0c9      	beq.n	800c1aa <__sflush_r+0x1a>
 800c216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c21a:	4299      	cmp	r1, r3
 800c21c:	d002      	beq.n	800c224 <__sflush_r+0x94>
 800c21e:	4628      	mov	r0, r5
 800c220:	f001 f8fc 	bl	800d41c <_free_r>
 800c224:	2000      	movs	r0, #0
 800c226:	6360      	str	r0, [r4, #52]	; 0x34
 800c228:	e7c0      	b.n	800c1ac <__sflush_r+0x1c>
 800c22a:	2301      	movs	r3, #1
 800c22c:	4628      	mov	r0, r5
 800c22e:	47b0      	blx	r6
 800c230:	1c41      	adds	r1, r0, #1
 800c232:	d1c8      	bne.n	800c1c6 <__sflush_r+0x36>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0c5      	beq.n	800c1c6 <__sflush_r+0x36>
 800c23a:	2b1d      	cmp	r3, #29
 800c23c:	d001      	beq.n	800c242 <__sflush_r+0xb2>
 800c23e:	2b16      	cmp	r3, #22
 800c240:	d101      	bne.n	800c246 <__sflush_r+0xb6>
 800c242:	602f      	str	r7, [r5, #0]
 800c244:	e7b1      	b.n	800c1aa <__sflush_r+0x1a>
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	e7ad      	b.n	800c1ac <__sflush_r+0x1c>
 800c250:	690f      	ldr	r7, [r1, #16]
 800c252:	2f00      	cmp	r7, #0
 800c254:	d0a9      	beq.n	800c1aa <__sflush_r+0x1a>
 800c256:	0793      	lsls	r3, r2, #30
 800c258:	680e      	ldr	r6, [r1, #0]
 800c25a:	bf08      	it	eq
 800c25c:	694b      	ldreq	r3, [r1, #20]
 800c25e:	600f      	str	r7, [r1, #0]
 800c260:	bf18      	it	ne
 800c262:	2300      	movne	r3, #0
 800c264:	eba6 0807 	sub.w	r8, r6, r7
 800c268:	608b      	str	r3, [r1, #8]
 800c26a:	f1b8 0f00 	cmp.w	r8, #0
 800c26e:	dd9c      	ble.n	800c1aa <__sflush_r+0x1a>
 800c270:	4643      	mov	r3, r8
 800c272:	463a      	mov	r2, r7
 800c274:	6a21      	ldr	r1, [r4, #32]
 800c276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c278:	4628      	mov	r0, r5
 800c27a:	47b0      	blx	r6
 800c27c:	2800      	cmp	r0, #0
 800c27e:	dc06      	bgt.n	800c28e <__sflush_r+0xfe>
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c286:	81a3      	strh	r3, [r4, #12]
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e78e      	b.n	800c1ac <__sflush_r+0x1c>
 800c28e:	4407      	add	r7, r0
 800c290:	eba8 0800 	sub.w	r8, r8, r0
 800c294:	e7e9      	b.n	800c26a <__sflush_r+0xda>
 800c296:	bf00      	nop
 800c298:	20400001 	.word	0x20400001

0800c29c <_fflush_r>:
 800c29c:	b538      	push	{r3, r4, r5, lr}
 800c29e:	690b      	ldr	r3, [r1, #16]
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	b1db      	cbz	r3, 800c2de <_fflush_r+0x42>
 800c2a6:	b118      	cbz	r0, 800c2b0 <_fflush_r+0x14>
 800c2a8:	6983      	ldr	r3, [r0, #24]
 800c2aa:	b90b      	cbnz	r3, 800c2b0 <_fflush_r+0x14>
 800c2ac:	f000 f860 	bl	800c370 <__sinit>
 800c2b0:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <_fflush_r+0x48>)
 800c2b2:	429c      	cmp	r4, r3
 800c2b4:	d109      	bne.n	800c2ca <_fflush_r+0x2e>
 800c2b6:	686c      	ldr	r4, [r5, #4]
 800c2b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2bc:	b17b      	cbz	r3, 800c2de <_fflush_r+0x42>
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c6:	f7ff bf63 	b.w	800c190 <__sflush_r>
 800c2ca:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <_fflush_r+0x4c>)
 800c2cc:	429c      	cmp	r4, r3
 800c2ce:	d101      	bne.n	800c2d4 <_fflush_r+0x38>
 800c2d0:	68ac      	ldr	r4, [r5, #8]
 800c2d2:	e7f1      	b.n	800c2b8 <_fflush_r+0x1c>
 800c2d4:	4b05      	ldr	r3, [pc, #20]	; (800c2ec <_fflush_r+0x50>)
 800c2d6:	429c      	cmp	r4, r3
 800c2d8:	bf08      	it	eq
 800c2da:	68ec      	ldreq	r4, [r5, #12]
 800c2dc:	e7ec      	b.n	800c2b8 <_fflush_r+0x1c>
 800c2de:	2000      	movs	r0, #0
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0800e6e0 	.word	0x0800e6e0
 800c2e8:	0800e700 	.word	0x0800e700
 800c2ec:	0800e6c0 	.word	0x0800e6c0

0800c2f0 <std>:
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	b510      	push	{r4, lr}
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c2fa:	6083      	str	r3, [r0, #8]
 800c2fc:	8181      	strh	r1, [r0, #12]
 800c2fe:	6643      	str	r3, [r0, #100]	; 0x64
 800c300:	81c2      	strh	r2, [r0, #14]
 800c302:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c306:	6183      	str	r3, [r0, #24]
 800c308:	4619      	mov	r1, r3
 800c30a:	2208      	movs	r2, #8
 800c30c:	305c      	adds	r0, #92	; 0x5c
 800c30e:	f7fd fced 	bl	8009cec <memset>
 800c312:	4b05      	ldr	r3, [pc, #20]	; (800c328 <std+0x38>)
 800c314:	6263      	str	r3, [r4, #36]	; 0x24
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <std+0x3c>)
 800c318:	62a3      	str	r3, [r4, #40]	; 0x28
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <std+0x40>)
 800c31c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c31e:	4b05      	ldr	r3, [pc, #20]	; (800c334 <std+0x44>)
 800c320:	6224      	str	r4, [r4, #32]
 800c322:	6323      	str	r3, [r4, #48]	; 0x30
 800c324:	bd10      	pop	{r4, pc}
 800c326:	bf00      	nop
 800c328:	0800dab1 	.word	0x0800dab1
 800c32c:	0800dad3 	.word	0x0800dad3
 800c330:	0800db0b 	.word	0x0800db0b
 800c334:	0800db2f 	.word	0x0800db2f

0800c338 <_cleanup_r>:
 800c338:	4901      	ldr	r1, [pc, #4]	; (800c340 <_cleanup_r+0x8>)
 800c33a:	f000 b885 	b.w	800c448 <_fwalk_reent>
 800c33e:	bf00      	nop
 800c340:	0800c29d 	.word	0x0800c29d

0800c344 <__sfmoreglue>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	1e4a      	subs	r2, r1, #1
 800c348:	2568      	movs	r5, #104	; 0x68
 800c34a:	4355      	muls	r5, r2
 800c34c:	460e      	mov	r6, r1
 800c34e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c352:	f001 f8b1 	bl	800d4b8 <_malloc_r>
 800c356:	4604      	mov	r4, r0
 800c358:	b140      	cbz	r0, 800c36c <__sfmoreglue+0x28>
 800c35a:	2100      	movs	r1, #0
 800c35c:	e9c0 1600 	strd	r1, r6, [r0]
 800c360:	300c      	adds	r0, #12
 800c362:	60a0      	str	r0, [r4, #8]
 800c364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c368:	f7fd fcc0 	bl	8009cec <memset>
 800c36c:	4620      	mov	r0, r4
 800c36e:	bd70      	pop	{r4, r5, r6, pc}

0800c370 <__sinit>:
 800c370:	6983      	ldr	r3, [r0, #24]
 800c372:	b510      	push	{r4, lr}
 800c374:	4604      	mov	r4, r0
 800c376:	bb33      	cbnz	r3, 800c3c6 <__sinit+0x56>
 800c378:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c37c:	6503      	str	r3, [r0, #80]	; 0x50
 800c37e:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <__sinit+0x58>)
 800c380:	4a12      	ldr	r2, [pc, #72]	; (800c3cc <__sinit+0x5c>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6282      	str	r2, [r0, #40]	; 0x28
 800c386:	4298      	cmp	r0, r3
 800c388:	bf04      	itt	eq
 800c38a:	2301      	moveq	r3, #1
 800c38c:	6183      	streq	r3, [r0, #24]
 800c38e:	f000 f81f 	bl	800c3d0 <__sfp>
 800c392:	6060      	str	r0, [r4, #4]
 800c394:	4620      	mov	r0, r4
 800c396:	f000 f81b 	bl	800c3d0 <__sfp>
 800c39a:	60a0      	str	r0, [r4, #8]
 800c39c:	4620      	mov	r0, r4
 800c39e:	f000 f817 	bl	800c3d0 <__sfp>
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	60e0      	str	r0, [r4, #12]
 800c3a6:	2104      	movs	r1, #4
 800c3a8:	6860      	ldr	r0, [r4, #4]
 800c3aa:	f7ff ffa1 	bl	800c2f0 <std>
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	2109      	movs	r1, #9
 800c3b2:	68a0      	ldr	r0, [r4, #8]
 800c3b4:	f7ff ff9c 	bl	800c2f0 <std>
 800c3b8:	2202      	movs	r2, #2
 800c3ba:	2112      	movs	r1, #18
 800c3bc:	68e0      	ldr	r0, [r4, #12]
 800c3be:	f7ff ff97 	bl	800c2f0 <std>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	61a3      	str	r3, [r4, #24]
 800c3c6:	bd10      	pop	{r4, pc}
 800c3c8:	0800e624 	.word	0x0800e624
 800c3cc:	0800c339 	.word	0x0800c339

0800c3d0 <__sfp>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	4b1b      	ldr	r3, [pc, #108]	; (800c440 <__sfp+0x70>)
 800c3d4:	681e      	ldr	r6, [r3, #0]
 800c3d6:	69b3      	ldr	r3, [r6, #24]
 800c3d8:	4607      	mov	r7, r0
 800c3da:	b913      	cbnz	r3, 800c3e2 <__sfp+0x12>
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7ff ffc7 	bl	800c370 <__sinit>
 800c3e2:	3648      	adds	r6, #72	; 0x48
 800c3e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	d503      	bpl.n	800c3f4 <__sfp+0x24>
 800c3ec:	6833      	ldr	r3, [r6, #0]
 800c3ee:	b133      	cbz	r3, 800c3fe <__sfp+0x2e>
 800c3f0:	6836      	ldr	r6, [r6, #0]
 800c3f2:	e7f7      	b.n	800c3e4 <__sfp+0x14>
 800c3f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3f8:	b16d      	cbz	r5, 800c416 <__sfp+0x46>
 800c3fa:	3468      	adds	r4, #104	; 0x68
 800c3fc:	e7f4      	b.n	800c3e8 <__sfp+0x18>
 800c3fe:	2104      	movs	r1, #4
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff ff9f 	bl	800c344 <__sfmoreglue>
 800c406:	6030      	str	r0, [r6, #0]
 800c408:	2800      	cmp	r0, #0
 800c40a:	d1f1      	bne.n	800c3f0 <__sfp+0x20>
 800c40c:	230c      	movs	r3, #12
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	4604      	mov	r4, r0
 800c412:	4620      	mov	r0, r4
 800c414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c416:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <__sfp+0x74>)
 800c418:	6665      	str	r5, [r4, #100]	; 0x64
 800c41a:	e9c4 5500 	strd	r5, r5, [r4]
 800c41e:	60a5      	str	r5, [r4, #8]
 800c420:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c424:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c428:	2208      	movs	r2, #8
 800c42a:	4629      	mov	r1, r5
 800c42c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c430:	f7fd fc5c 	bl	8009cec <memset>
 800c434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c43c:	e7e9      	b.n	800c412 <__sfp+0x42>
 800c43e:	bf00      	nop
 800c440:	0800e624 	.word	0x0800e624
 800c444:	ffff0001 	.word	0xffff0001

0800c448 <_fwalk_reent>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	4680      	mov	r8, r0
 800c44e:	4689      	mov	r9, r1
 800c450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c454:	2600      	movs	r6, #0
 800c456:	b914      	cbnz	r4, 800c45e <_fwalk_reent+0x16>
 800c458:	4630      	mov	r0, r6
 800c45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c462:	3f01      	subs	r7, #1
 800c464:	d501      	bpl.n	800c46a <_fwalk_reent+0x22>
 800c466:	6824      	ldr	r4, [r4, #0]
 800c468:	e7f5      	b.n	800c456 <_fwalk_reent+0xe>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d907      	bls.n	800c480 <_fwalk_reent+0x38>
 800c470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c474:	3301      	adds	r3, #1
 800c476:	d003      	beq.n	800c480 <_fwalk_reent+0x38>
 800c478:	4629      	mov	r1, r5
 800c47a:	4640      	mov	r0, r8
 800c47c:	47c8      	blx	r9
 800c47e:	4306      	orrs	r6, r0
 800c480:	3568      	adds	r5, #104	; 0x68
 800c482:	e7ee      	b.n	800c462 <_fwalk_reent+0x1a>

0800c484 <rshift>:
 800c484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c486:	6906      	ldr	r6, [r0, #16]
 800c488:	114b      	asrs	r3, r1, #5
 800c48a:	429e      	cmp	r6, r3
 800c48c:	f100 0414 	add.w	r4, r0, #20
 800c490:	dd30      	ble.n	800c4f4 <rshift+0x70>
 800c492:	f011 011f 	ands.w	r1, r1, #31
 800c496:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c49a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c49e:	d108      	bne.n	800c4b2 <rshift+0x2e>
 800c4a0:	4621      	mov	r1, r4
 800c4a2:	42b2      	cmp	r2, r6
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	d211      	bcs.n	800c4cc <rshift+0x48>
 800c4a8:	f852 3b04 	ldr.w	r3, [r2], #4
 800c4ac:	f841 3b04 	str.w	r3, [r1], #4
 800c4b0:	e7f7      	b.n	800c4a2 <rshift+0x1e>
 800c4b2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c4b6:	f1c1 0c20 	rsb	ip, r1, #32
 800c4ba:	40cd      	lsrs	r5, r1
 800c4bc:	3204      	adds	r2, #4
 800c4be:	4623      	mov	r3, r4
 800c4c0:	42b2      	cmp	r2, r6
 800c4c2:	4617      	mov	r7, r2
 800c4c4:	d30c      	bcc.n	800c4e0 <rshift+0x5c>
 800c4c6:	601d      	str	r5, [r3, #0]
 800c4c8:	b105      	cbz	r5, 800c4cc <rshift+0x48>
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	1b1a      	subs	r2, r3, r4
 800c4ce:	42a3      	cmp	r3, r4
 800c4d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4d4:	bf08      	it	eq
 800c4d6:	2300      	moveq	r3, #0
 800c4d8:	6102      	str	r2, [r0, #16]
 800c4da:	bf08      	it	eq
 800c4dc:	6143      	streq	r3, [r0, #20]
 800c4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e0:	683f      	ldr	r7, [r7, #0]
 800c4e2:	fa07 f70c 	lsl.w	r7, r7, ip
 800c4e6:	433d      	orrs	r5, r7
 800c4e8:	f843 5b04 	str.w	r5, [r3], #4
 800c4ec:	f852 5b04 	ldr.w	r5, [r2], #4
 800c4f0:	40cd      	lsrs	r5, r1
 800c4f2:	e7e5      	b.n	800c4c0 <rshift+0x3c>
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	e7e9      	b.n	800c4cc <rshift+0x48>

0800c4f8 <__hexdig_fun>:
 800c4f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c4fc:	2b09      	cmp	r3, #9
 800c4fe:	d802      	bhi.n	800c506 <__hexdig_fun+0xe>
 800c500:	3820      	subs	r0, #32
 800c502:	b2c0      	uxtb	r0, r0
 800c504:	4770      	bx	lr
 800c506:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d801      	bhi.n	800c512 <__hexdig_fun+0x1a>
 800c50e:	3847      	subs	r0, #71	; 0x47
 800c510:	e7f7      	b.n	800c502 <__hexdig_fun+0xa>
 800c512:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c516:	2b05      	cmp	r3, #5
 800c518:	d801      	bhi.n	800c51e <__hexdig_fun+0x26>
 800c51a:	3827      	subs	r0, #39	; 0x27
 800c51c:	e7f1      	b.n	800c502 <__hexdig_fun+0xa>
 800c51e:	2000      	movs	r0, #0
 800c520:	4770      	bx	lr

0800c522 <__gethex>:
 800c522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c526:	b08b      	sub	sp, #44	; 0x2c
 800c528:	468a      	mov	sl, r1
 800c52a:	9002      	str	r0, [sp, #8]
 800c52c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c52e:	9306      	str	r3, [sp, #24]
 800c530:	4690      	mov	r8, r2
 800c532:	f000 facd 	bl	800cad0 <__localeconv_l>
 800c536:	6803      	ldr	r3, [r0, #0]
 800c538:	9303      	str	r3, [sp, #12]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f3 fe50 	bl	80001e0 <strlen>
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	9001      	str	r0, [sp, #4]
 800c544:	4403      	add	r3, r0
 800c546:	f04f 0b00 	mov.w	fp, #0
 800c54a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c54e:	9307      	str	r3, [sp, #28]
 800c550:	f8da 3000 	ldr.w	r3, [sl]
 800c554:	3302      	adds	r3, #2
 800c556:	461f      	mov	r7, r3
 800c558:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c55c:	2830      	cmp	r0, #48	; 0x30
 800c55e:	d06c      	beq.n	800c63a <__gethex+0x118>
 800c560:	f7ff ffca 	bl	800c4f8 <__hexdig_fun>
 800c564:	4604      	mov	r4, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	d16a      	bne.n	800c640 <__gethex+0x11e>
 800c56a:	9a01      	ldr	r2, [sp, #4]
 800c56c:	9903      	ldr	r1, [sp, #12]
 800c56e:	4638      	mov	r0, r7
 800c570:	f001 fae1 	bl	800db36 <strncmp>
 800c574:	2800      	cmp	r0, #0
 800c576:	d166      	bne.n	800c646 <__gethex+0x124>
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	5cf8      	ldrb	r0, [r7, r3]
 800c57c:	18fe      	adds	r6, r7, r3
 800c57e:	f7ff ffbb 	bl	800c4f8 <__hexdig_fun>
 800c582:	2800      	cmp	r0, #0
 800c584:	d062      	beq.n	800c64c <__gethex+0x12a>
 800c586:	4633      	mov	r3, r6
 800c588:	7818      	ldrb	r0, [r3, #0]
 800c58a:	2830      	cmp	r0, #48	; 0x30
 800c58c:	461f      	mov	r7, r3
 800c58e:	f103 0301 	add.w	r3, r3, #1
 800c592:	d0f9      	beq.n	800c588 <__gethex+0x66>
 800c594:	f7ff ffb0 	bl	800c4f8 <__hexdig_fun>
 800c598:	fab0 f580 	clz	r5, r0
 800c59c:	096d      	lsrs	r5, r5, #5
 800c59e:	4634      	mov	r4, r6
 800c5a0:	f04f 0b01 	mov.w	fp, #1
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	4616      	mov	r6, r2
 800c5a8:	3201      	adds	r2, #1
 800c5aa:	7830      	ldrb	r0, [r6, #0]
 800c5ac:	f7ff ffa4 	bl	800c4f8 <__hexdig_fun>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d1f8      	bne.n	800c5a6 <__gethex+0x84>
 800c5b4:	9a01      	ldr	r2, [sp, #4]
 800c5b6:	9903      	ldr	r1, [sp, #12]
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f001 fabc 	bl	800db36 <strncmp>
 800c5be:	b950      	cbnz	r0, 800c5d6 <__gethex+0xb4>
 800c5c0:	b954      	cbnz	r4, 800c5d8 <__gethex+0xb6>
 800c5c2:	9b01      	ldr	r3, [sp, #4]
 800c5c4:	18f4      	adds	r4, r6, r3
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	4616      	mov	r6, r2
 800c5ca:	3201      	adds	r2, #1
 800c5cc:	7830      	ldrb	r0, [r6, #0]
 800c5ce:	f7ff ff93 	bl	800c4f8 <__hexdig_fun>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d1f8      	bne.n	800c5c8 <__gethex+0xa6>
 800c5d6:	b10c      	cbz	r4, 800c5dc <__gethex+0xba>
 800c5d8:	1ba4      	subs	r4, r4, r6
 800c5da:	00a4      	lsls	r4, r4, #2
 800c5dc:	7833      	ldrb	r3, [r6, #0]
 800c5de:	2b50      	cmp	r3, #80	; 0x50
 800c5e0:	d001      	beq.n	800c5e6 <__gethex+0xc4>
 800c5e2:	2b70      	cmp	r3, #112	; 0x70
 800c5e4:	d140      	bne.n	800c668 <__gethex+0x146>
 800c5e6:	7873      	ldrb	r3, [r6, #1]
 800c5e8:	2b2b      	cmp	r3, #43	; 0x2b
 800c5ea:	d031      	beq.n	800c650 <__gethex+0x12e>
 800c5ec:	2b2d      	cmp	r3, #45	; 0x2d
 800c5ee:	d033      	beq.n	800c658 <__gethex+0x136>
 800c5f0:	1c71      	adds	r1, r6, #1
 800c5f2:	f04f 0900 	mov.w	r9, #0
 800c5f6:	7808      	ldrb	r0, [r1, #0]
 800c5f8:	f7ff ff7e 	bl	800c4f8 <__hexdig_fun>
 800c5fc:	1e43      	subs	r3, r0, #1
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b18      	cmp	r3, #24
 800c602:	d831      	bhi.n	800c668 <__gethex+0x146>
 800c604:	f1a0 0210 	sub.w	r2, r0, #16
 800c608:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c60c:	f7ff ff74 	bl	800c4f8 <__hexdig_fun>
 800c610:	1e43      	subs	r3, r0, #1
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b18      	cmp	r3, #24
 800c616:	d922      	bls.n	800c65e <__gethex+0x13c>
 800c618:	f1b9 0f00 	cmp.w	r9, #0
 800c61c:	d000      	beq.n	800c620 <__gethex+0xfe>
 800c61e:	4252      	negs	r2, r2
 800c620:	4414      	add	r4, r2
 800c622:	f8ca 1000 	str.w	r1, [sl]
 800c626:	b30d      	cbz	r5, 800c66c <__gethex+0x14a>
 800c628:	f1bb 0f00 	cmp.w	fp, #0
 800c62c:	bf0c      	ite	eq
 800c62e:	2706      	moveq	r7, #6
 800c630:	2700      	movne	r7, #0
 800c632:	4638      	mov	r0, r7
 800c634:	b00b      	add	sp, #44	; 0x2c
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63a:	f10b 0b01 	add.w	fp, fp, #1
 800c63e:	e78a      	b.n	800c556 <__gethex+0x34>
 800c640:	2500      	movs	r5, #0
 800c642:	462c      	mov	r4, r5
 800c644:	e7ae      	b.n	800c5a4 <__gethex+0x82>
 800c646:	463e      	mov	r6, r7
 800c648:	2501      	movs	r5, #1
 800c64a:	e7c7      	b.n	800c5dc <__gethex+0xba>
 800c64c:	4604      	mov	r4, r0
 800c64e:	e7fb      	b.n	800c648 <__gethex+0x126>
 800c650:	f04f 0900 	mov.w	r9, #0
 800c654:	1cb1      	adds	r1, r6, #2
 800c656:	e7ce      	b.n	800c5f6 <__gethex+0xd4>
 800c658:	f04f 0901 	mov.w	r9, #1
 800c65c:	e7fa      	b.n	800c654 <__gethex+0x132>
 800c65e:	230a      	movs	r3, #10
 800c660:	fb03 0202 	mla	r2, r3, r2, r0
 800c664:	3a10      	subs	r2, #16
 800c666:	e7cf      	b.n	800c608 <__gethex+0xe6>
 800c668:	4631      	mov	r1, r6
 800c66a:	e7da      	b.n	800c622 <__gethex+0x100>
 800c66c:	1bf3      	subs	r3, r6, r7
 800c66e:	3b01      	subs	r3, #1
 800c670:	4629      	mov	r1, r5
 800c672:	2b07      	cmp	r3, #7
 800c674:	dc49      	bgt.n	800c70a <__gethex+0x1e8>
 800c676:	9802      	ldr	r0, [sp, #8]
 800c678:	f000 fac3 	bl	800cc02 <_Balloc>
 800c67c:	9b01      	ldr	r3, [sp, #4]
 800c67e:	f100 0914 	add.w	r9, r0, #20
 800c682:	f04f 0b00 	mov.w	fp, #0
 800c686:	f1c3 0301 	rsb	r3, r3, #1
 800c68a:	4605      	mov	r5, r0
 800c68c:	f8cd 9010 	str.w	r9, [sp, #16]
 800c690:	46da      	mov	sl, fp
 800c692:	9308      	str	r3, [sp, #32]
 800c694:	42b7      	cmp	r7, r6
 800c696:	d33b      	bcc.n	800c710 <__gethex+0x1ee>
 800c698:	9804      	ldr	r0, [sp, #16]
 800c69a:	f840 ab04 	str.w	sl, [r0], #4
 800c69e:	eba0 0009 	sub.w	r0, r0, r9
 800c6a2:	1080      	asrs	r0, r0, #2
 800c6a4:	6128      	str	r0, [r5, #16]
 800c6a6:	0147      	lsls	r7, r0, #5
 800c6a8:	4650      	mov	r0, sl
 800c6aa:	f000 fb6e 	bl	800cd8a <__hi0bits>
 800c6ae:	f8d8 6000 	ldr.w	r6, [r8]
 800c6b2:	1a3f      	subs	r7, r7, r0
 800c6b4:	42b7      	cmp	r7, r6
 800c6b6:	dd64      	ble.n	800c782 <__gethex+0x260>
 800c6b8:	1bbf      	subs	r7, r7, r6
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f000 fe7d 	bl	800d3bc <__any_on>
 800c6c2:	4682      	mov	sl, r0
 800c6c4:	b178      	cbz	r0, 800c6e6 <__gethex+0x1c4>
 800c6c6:	1e7b      	subs	r3, r7, #1
 800c6c8:	1159      	asrs	r1, r3, #5
 800c6ca:	f003 021f 	and.w	r2, r3, #31
 800c6ce:	f04f 0a01 	mov.w	sl, #1
 800c6d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c6d6:	fa0a f202 	lsl.w	r2, sl, r2
 800c6da:	420a      	tst	r2, r1
 800c6dc:	d003      	beq.n	800c6e6 <__gethex+0x1c4>
 800c6de:	4553      	cmp	r3, sl
 800c6e0:	dc46      	bgt.n	800c770 <__gethex+0x24e>
 800c6e2:	f04f 0a02 	mov.w	sl, #2
 800c6e6:	4639      	mov	r1, r7
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f7ff fecb 	bl	800c484 <rshift>
 800c6ee:	443c      	add	r4, r7
 800c6f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	da52      	bge.n	800c79e <__gethex+0x27c>
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	9802      	ldr	r0, [sp, #8]
 800c6fc:	f000 fab5 	bl	800cc6a <_Bfree>
 800c700:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c702:	2300      	movs	r3, #0
 800c704:	6013      	str	r3, [r2, #0]
 800c706:	27a3      	movs	r7, #163	; 0xa3
 800c708:	e793      	b.n	800c632 <__gethex+0x110>
 800c70a:	3101      	adds	r1, #1
 800c70c:	105b      	asrs	r3, r3, #1
 800c70e:	e7b0      	b.n	800c672 <__gethex+0x150>
 800c710:	1e73      	subs	r3, r6, #1
 800c712:	9305      	str	r3, [sp, #20]
 800c714:	9a07      	ldr	r2, [sp, #28]
 800c716:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d018      	beq.n	800c750 <__gethex+0x22e>
 800c71e:	f1bb 0f20 	cmp.w	fp, #32
 800c722:	d107      	bne.n	800c734 <__gethex+0x212>
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	f8c3 a000 	str.w	sl, [r3]
 800c72a:	3304      	adds	r3, #4
 800c72c:	f04f 0a00 	mov.w	sl, #0
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	46d3      	mov	fp, sl
 800c734:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c738:	f7ff fede 	bl	800c4f8 <__hexdig_fun>
 800c73c:	f000 000f 	and.w	r0, r0, #15
 800c740:	fa00 f00b 	lsl.w	r0, r0, fp
 800c744:	ea4a 0a00 	orr.w	sl, sl, r0
 800c748:	f10b 0b04 	add.w	fp, fp, #4
 800c74c:	9b05      	ldr	r3, [sp, #20]
 800c74e:	e00d      	b.n	800c76c <__gethex+0x24a>
 800c750:	9b05      	ldr	r3, [sp, #20]
 800c752:	9a08      	ldr	r2, [sp, #32]
 800c754:	4413      	add	r3, r2
 800c756:	42bb      	cmp	r3, r7
 800c758:	d3e1      	bcc.n	800c71e <__gethex+0x1fc>
 800c75a:	4618      	mov	r0, r3
 800c75c:	9a01      	ldr	r2, [sp, #4]
 800c75e:	9903      	ldr	r1, [sp, #12]
 800c760:	9309      	str	r3, [sp, #36]	; 0x24
 800c762:	f001 f9e8 	bl	800db36 <strncmp>
 800c766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c768:	2800      	cmp	r0, #0
 800c76a:	d1d8      	bne.n	800c71e <__gethex+0x1fc>
 800c76c:	461e      	mov	r6, r3
 800c76e:	e791      	b.n	800c694 <__gethex+0x172>
 800c770:	1eb9      	subs	r1, r7, #2
 800c772:	4628      	mov	r0, r5
 800c774:	f000 fe22 	bl	800d3bc <__any_on>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d0b2      	beq.n	800c6e2 <__gethex+0x1c0>
 800c77c:	f04f 0a03 	mov.w	sl, #3
 800c780:	e7b1      	b.n	800c6e6 <__gethex+0x1c4>
 800c782:	da09      	bge.n	800c798 <__gethex+0x276>
 800c784:	1bf7      	subs	r7, r6, r7
 800c786:	4629      	mov	r1, r5
 800c788:	463a      	mov	r2, r7
 800c78a:	9802      	ldr	r0, [sp, #8]
 800c78c:	f000 fc38 	bl	800d000 <__lshift>
 800c790:	1be4      	subs	r4, r4, r7
 800c792:	4605      	mov	r5, r0
 800c794:	f100 0914 	add.w	r9, r0, #20
 800c798:	f04f 0a00 	mov.w	sl, #0
 800c79c:	e7a8      	b.n	800c6f0 <__gethex+0x1ce>
 800c79e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c7a2:	42a0      	cmp	r0, r4
 800c7a4:	dd6a      	ble.n	800c87c <__gethex+0x35a>
 800c7a6:	1b04      	subs	r4, r0, r4
 800c7a8:	42a6      	cmp	r6, r4
 800c7aa:	dc2e      	bgt.n	800c80a <__gethex+0x2e8>
 800c7ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d022      	beq.n	800c7fa <__gethex+0x2d8>
 800c7b4:	2b03      	cmp	r3, #3
 800c7b6:	d024      	beq.n	800c802 <__gethex+0x2e0>
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d115      	bne.n	800c7e8 <__gethex+0x2c6>
 800c7bc:	42a6      	cmp	r6, r4
 800c7be:	d113      	bne.n	800c7e8 <__gethex+0x2c6>
 800c7c0:	2e01      	cmp	r6, #1
 800c7c2:	dc0b      	bgt.n	800c7dc <__gethex+0x2ba>
 800c7c4:	9a06      	ldr	r2, [sp, #24]
 800c7c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7ca:	6013      	str	r3, [r2, #0]
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	612b      	str	r3, [r5, #16]
 800c7d0:	f8c9 3000 	str.w	r3, [r9]
 800c7d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7d6:	2762      	movs	r7, #98	; 0x62
 800c7d8:	601d      	str	r5, [r3, #0]
 800c7da:	e72a      	b.n	800c632 <__gethex+0x110>
 800c7dc:	1e71      	subs	r1, r6, #1
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f000 fdec 	bl	800d3bc <__any_on>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d1ed      	bne.n	800c7c4 <__gethex+0x2a2>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	9802      	ldr	r0, [sp, #8]
 800c7ec:	f000 fa3d 	bl	800cc6a <_Bfree>
 800c7f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	2750      	movs	r7, #80	; 0x50
 800c7f8:	e71b      	b.n	800c632 <__gethex+0x110>
 800c7fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d0e1      	beq.n	800c7c4 <__gethex+0x2a2>
 800c800:	e7f2      	b.n	800c7e8 <__gethex+0x2c6>
 800c802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1dd      	bne.n	800c7c4 <__gethex+0x2a2>
 800c808:	e7ee      	b.n	800c7e8 <__gethex+0x2c6>
 800c80a:	1e67      	subs	r7, r4, #1
 800c80c:	f1ba 0f00 	cmp.w	sl, #0
 800c810:	d131      	bne.n	800c876 <__gethex+0x354>
 800c812:	b127      	cbz	r7, 800c81e <__gethex+0x2fc>
 800c814:	4639      	mov	r1, r7
 800c816:	4628      	mov	r0, r5
 800c818:	f000 fdd0 	bl	800d3bc <__any_on>
 800c81c:	4682      	mov	sl, r0
 800c81e:	117a      	asrs	r2, r7, #5
 800c820:	2301      	movs	r3, #1
 800c822:	f007 071f 	and.w	r7, r7, #31
 800c826:	fa03 f707 	lsl.w	r7, r3, r7
 800c82a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c82e:	4621      	mov	r1, r4
 800c830:	421f      	tst	r7, r3
 800c832:	4628      	mov	r0, r5
 800c834:	bf18      	it	ne
 800c836:	f04a 0a02 	orrne.w	sl, sl, #2
 800c83a:	1b36      	subs	r6, r6, r4
 800c83c:	f7ff fe22 	bl	800c484 <rshift>
 800c840:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c844:	2702      	movs	r7, #2
 800c846:	f1ba 0f00 	cmp.w	sl, #0
 800c84a:	d048      	beq.n	800c8de <__gethex+0x3bc>
 800c84c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d015      	beq.n	800c880 <__gethex+0x35e>
 800c854:	2b03      	cmp	r3, #3
 800c856:	d017      	beq.n	800c888 <__gethex+0x366>
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d109      	bne.n	800c870 <__gethex+0x34e>
 800c85c:	f01a 0f02 	tst.w	sl, #2
 800c860:	d006      	beq.n	800c870 <__gethex+0x34e>
 800c862:	f8d9 3000 	ldr.w	r3, [r9]
 800c866:	ea4a 0a03 	orr.w	sl, sl, r3
 800c86a:	f01a 0f01 	tst.w	sl, #1
 800c86e:	d10e      	bne.n	800c88e <__gethex+0x36c>
 800c870:	f047 0710 	orr.w	r7, r7, #16
 800c874:	e033      	b.n	800c8de <__gethex+0x3bc>
 800c876:	f04f 0a01 	mov.w	sl, #1
 800c87a:	e7d0      	b.n	800c81e <__gethex+0x2fc>
 800c87c:	2701      	movs	r7, #1
 800c87e:	e7e2      	b.n	800c846 <__gethex+0x324>
 800c880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c882:	f1c3 0301 	rsb	r3, r3, #1
 800c886:	9315      	str	r3, [sp, #84]	; 0x54
 800c888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d0f0      	beq.n	800c870 <__gethex+0x34e>
 800c88e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c892:	f105 0314 	add.w	r3, r5, #20
 800c896:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c89a:	eb03 010a 	add.w	r1, r3, sl
 800c89e:	f04f 0c00 	mov.w	ip, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8ac:	d01c      	beq.n	800c8e8 <__gethex+0x3c6>
 800c8ae:	3201      	adds	r2, #1
 800c8b0:	6002      	str	r2, [r0, #0]
 800c8b2:	2f02      	cmp	r7, #2
 800c8b4:	f105 0314 	add.w	r3, r5, #20
 800c8b8:	d138      	bne.n	800c92c <__gethex+0x40a>
 800c8ba:	f8d8 2000 	ldr.w	r2, [r8]
 800c8be:	3a01      	subs	r2, #1
 800c8c0:	42b2      	cmp	r2, r6
 800c8c2:	d10a      	bne.n	800c8da <__gethex+0x3b8>
 800c8c4:	1171      	asrs	r1, r6, #5
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f006 061f 	and.w	r6, r6, #31
 800c8cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8d0:	fa02 f606 	lsl.w	r6, r2, r6
 800c8d4:	421e      	tst	r6, r3
 800c8d6:	bf18      	it	ne
 800c8d8:	4617      	movne	r7, r2
 800c8da:	f047 0720 	orr.w	r7, r7, #32
 800c8de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8e0:	601d      	str	r5, [r3, #0]
 800c8e2:	9b06      	ldr	r3, [sp, #24]
 800c8e4:	601c      	str	r4, [r3, #0]
 800c8e6:	e6a4      	b.n	800c632 <__gethex+0x110>
 800c8e8:	4299      	cmp	r1, r3
 800c8ea:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8ee:	d8d8      	bhi.n	800c8a2 <__gethex+0x380>
 800c8f0:	68ab      	ldr	r3, [r5, #8]
 800c8f2:	4599      	cmp	r9, r3
 800c8f4:	db12      	blt.n	800c91c <__gethex+0x3fa>
 800c8f6:	6869      	ldr	r1, [r5, #4]
 800c8f8:	9802      	ldr	r0, [sp, #8]
 800c8fa:	3101      	adds	r1, #1
 800c8fc:	f000 f981 	bl	800cc02 <_Balloc>
 800c900:	692a      	ldr	r2, [r5, #16]
 800c902:	3202      	adds	r2, #2
 800c904:	f105 010c 	add.w	r1, r5, #12
 800c908:	4683      	mov	fp, r0
 800c90a:	0092      	lsls	r2, r2, #2
 800c90c:	300c      	adds	r0, #12
 800c90e:	f000 f96d 	bl	800cbec <memcpy>
 800c912:	4629      	mov	r1, r5
 800c914:	9802      	ldr	r0, [sp, #8]
 800c916:	f000 f9a8 	bl	800cc6a <_Bfree>
 800c91a:	465d      	mov	r5, fp
 800c91c:	692b      	ldr	r3, [r5, #16]
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c924:	612a      	str	r2, [r5, #16]
 800c926:	2201      	movs	r2, #1
 800c928:	615a      	str	r2, [r3, #20]
 800c92a:	e7c2      	b.n	800c8b2 <__gethex+0x390>
 800c92c:	692a      	ldr	r2, [r5, #16]
 800c92e:	454a      	cmp	r2, r9
 800c930:	dd0b      	ble.n	800c94a <__gethex+0x428>
 800c932:	2101      	movs	r1, #1
 800c934:	4628      	mov	r0, r5
 800c936:	f7ff fda5 	bl	800c484 <rshift>
 800c93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c93e:	3401      	adds	r4, #1
 800c940:	42a3      	cmp	r3, r4
 800c942:	f6ff aed9 	blt.w	800c6f8 <__gethex+0x1d6>
 800c946:	2701      	movs	r7, #1
 800c948:	e7c7      	b.n	800c8da <__gethex+0x3b8>
 800c94a:	f016 061f 	ands.w	r6, r6, #31
 800c94e:	d0fa      	beq.n	800c946 <__gethex+0x424>
 800c950:	449a      	add	sl, r3
 800c952:	f1c6 0620 	rsb	r6, r6, #32
 800c956:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c95a:	f000 fa16 	bl	800cd8a <__hi0bits>
 800c95e:	42b0      	cmp	r0, r6
 800c960:	dbe7      	blt.n	800c932 <__gethex+0x410>
 800c962:	e7f0      	b.n	800c946 <__gethex+0x424>

0800c964 <L_shift>:
 800c964:	f1c2 0208 	rsb	r2, r2, #8
 800c968:	0092      	lsls	r2, r2, #2
 800c96a:	b570      	push	{r4, r5, r6, lr}
 800c96c:	f1c2 0620 	rsb	r6, r2, #32
 800c970:	6843      	ldr	r3, [r0, #4]
 800c972:	6804      	ldr	r4, [r0, #0]
 800c974:	fa03 f506 	lsl.w	r5, r3, r6
 800c978:	432c      	orrs	r4, r5
 800c97a:	40d3      	lsrs	r3, r2
 800c97c:	6004      	str	r4, [r0, #0]
 800c97e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c982:	4288      	cmp	r0, r1
 800c984:	d3f4      	bcc.n	800c970 <L_shift+0xc>
 800c986:	bd70      	pop	{r4, r5, r6, pc}

0800c988 <__match>:
 800c988:	b530      	push	{r4, r5, lr}
 800c98a:	6803      	ldr	r3, [r0, #0]
 800c98c:	3301      	adds	r3, #1
 800c98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c992:	b914      	cbnz	r4, 800c99a <__match+0x12>
 800c994:	6003      	str	r3, [r0, #0]
 800c996:	2001      	movs	r0, #1
 800c998:	bd30      	pop	{r4, r5, pc}
 800c99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c99e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c9a2:	2d19      	cmp	r5, #25
 800c9a4:	bf98      	it	ls
 800c9a6:	3220      	addls	r2, #32
 800c9a8:	42a2      	cmp	r2, r4
 800c9aa:	d0f0      	beq.n	800c98e <__match+0x6>
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e7f3      	b.n	800c998 <__match+0x10>

0800c9b0 <__hexnan>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	680b      	ldr	r3, [r1, #0]
 800c9b6:	6801      	ldr	r1, [r0, #0]
 800c9b8:	115f      	asrs	r7, r3, #5
 800c9ba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c9be:	f013 031f 	ands.w	r3, r3, #31
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	bf18      	it	ne
 800c9c6:	3704      	addne	r7, #4
 800c9c8:	2500      	movs	r5, #0
 800c9ca:	1f3e      	subs	r6, r7, #4
 800c9cc:	4682      	mov	sl, r0
 800c9ce:	4690      	mov	r8, r2
 800c9d0:	9301      	str	r3, [sp, #4]
 800c9d2:	f847 5c04 	str.w	r5, [r7, #-4]
 800c9d6:	46b1      	mov	r9, r6
 800c9d8:	4634      	mov	r4, r6
 800c9da:	9502      	str	r5, [sp, #8]
 800c9dc:	46ab      	mov	fp, r5
 800c9de:	784a      	ldrb	r2, [r1, #1]
 800c9e0:	1c4b      	adds	r3, r1, #1
 800c9e2:	9303      	str	r3, [sp, #12]
 800c9e4:	b342      	cbz	r2, 800ca38 <__hexnan+0x88>
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	9105      	str	r1, [sp, #20]
 800c9ea:	9204      	str	r2, [sp, #16]
 800c9ec:	f7ff fd84 	bl	800c4f8 <__hexdig_fun>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d143      	bne.n	800ca7c <__hexnan+0xcc>
 800c9f4:	9a04      	ldr	r2, [sp, #16]
 800c9f6:	9905      	ldr	r1, [sp, #20]
 800c9f8:	2a20      	cmp	r2, #32
 800c9fa:	d818      	bhi.n	800ca2e <__hexnan+0x7e>
 800c9fc:	9b02      	ldr	r3, [sp, #8]
 800c9fe:	459b      	cmp	fp, r3
 800ca00:	dd13      	ble.n	800ca2a <__hexnan+0x7a>
 800ca02:	454c      	cmp	r4, r9
 800ca04:	d206      	bcs.n	800ca14 <__hexnan+0x64>
 800ca06:	2d07      	cmp	r5, #7
 800ca08:	dc04      	bgt.n	800ca14 <__hexnan+0x64>
 800ca0a:	462a      	mov	r2, r5
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f7ff ffa8 	bl	800c964 <L_shift>
 800ca14:	4544      	cmp	r4, r8
 800ca16:	d944      	bls.n	800caa2 <__hexnan+0xf2>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca22:	f8cd b008 	str.w	fp, [sp, #8]
 800ca26:	464c      	mov	r4, r9
 800ca28:	461d      	mov	r5, r3
 800ca2a:	9903      	ldr	r1, [sp, #12]
 800ca2c:	e7d7      	b.n	800c9de <__hexnan+0x2e>
 800ca2e:	2a29      	cmp	r2, #41	; 0x29
 800ca30:	d14a      	bne.n	800cac8 <__hexnan+0x118>
 800ca32:	3102      	adds	r1, #2
 800ca34:	f8ca 1000 	str.w	r1, [sl]
 800ca38:	f1bb 0f00 	cmp.w	fp, #0
 800ca3c:	d044      	beq.n	800cac8 <__hexnan+0x118>
 800ca3e:	454c      	cmp	r4, r9
 800ca40:	d206      	bcs.n	800ca50 <__hexnan+0xa0>
 800ca42:	2d07      	cmp	r5, #7
 800ca44:	dc04      	bgt.n	800ca50 <__hexnan+0xa0>
 800ca46:	462a      	mov	r2, r5
 800ca48:	4649      	mov	r1, r9
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7ff ff8a 	bl	800c964 <L_shift>
 800ca50:	4544      	cmp	r4, r8
 800ca52:	d928      	bls.n	800caa6 <__hexnan+0xf6>
 800ca54:	4643      	mov	r3, r8
 800ca56:	f854 2b04 	ldr.w	r2, [r4], #4
 800ca5a:	f843 2b04 	str.w	r2, [r3], #4
 800ca5e:	42a6      	cmp	r6, r4
 800ca60:	d2f9      	bcs.n	800ca56 <__hexnan+0xa6>
 800ca62:	2200      	movs	r2, #0
 800ca64:	f843 2b04 	str.w	r2, [r3], #4
 800ca68:	429e      	cmp	r6, r3
 800ca6a:	d2fb      	bcs.n	800ca64 <__hexnan+0xb4>
 800ca6c:	6833      	ldr	r3, [r6, #0]
 800ca6e:	b91b      	cbnz	r3, 800ca78 <__hexnan+0xc8>
 800ca70:	4546      	cmp	r6, r8
 800ca72:	d127      	bne.n	800cac4 <__hexnan+0x114>
 800ca74:	2301      	movs	r3, #1
 800ca76:	6033      	str	r3, [r6, #0]
 800ca78:	2005      	movs	r0, #5
 800ca7a:	e026      	b.n	800caca <__hexnan+0x11a>
 800ca7c:	3501      	adds	r5, #1
 800ca7e:	2d08      	cmp	r5, #8
 800ca80:	f10b 0b01 	add.w	fp, fp, #1
 800ca84:	dd06      	ble.n	800ca94 <__hexnan+0xe4>
 800ca86:	4544      	cmp	r4, r8
 800ca88:	d9cf      	bls.n	800ca2a <__hexnan+0x7a>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca90:	2501      	movs	r5, #1
 800ca92:	3c04      	subs	r4, #4
 800ca94:	6822      	ldr	r2, [r4, #0]
 800ca96:	f000 000f 	and.w	r0, r0, #15
 800ca9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca9e:	6020      	str	r0, [r4, #0]
 800caa0:	e7c3      	b.n	800ca2a <__hexnan+0x7a>
 800caa2:	2508      	movs	r5, #8
 800caa4:	e7c1      	b.n	800ca2a <__hexnan+0x7a>
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0df      	beq.n	800ca6c <__hexnan+0xbc>
 800caac:	f04f 32ff 	mov.w	r2, #4294967295
 800cab0:	f1c3 0320 	rsb	r3, r3, #32
 800cab4:	fa22 f303 	lsr.w	r3, r2, r3
 800cab8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cabc:	401a      	ands	r2, r3
 800cabe:	f847 2c04 	str.w	r2, [r7, #-4]
 800cac2:	e7d3      	b.n	800ca6c <__hexnan+0xbc>
 800cac4:	3e04      	subs	r6, #4
 800cac6:	e7d1      	b.n	800ca6c <__hexnan+0xbc>
 800cac8:	2004      	movs	r0, #4
 800caca:	b007      	add	sp, #28
 800cacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cad0 <__localeconv_l>:
 800cad0:	30f0      	adds	r0, #240	; 0xf0
 800cad2:	4770      	bx	lr

0800cad4 <_localeconv_r>:
 800cad4:	4b04      	ldr	r3, [pc, #16]	; (800cae8 <_localeconv_r+0x14>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6a18      	ldr	r0, [r3, #32]
 800cada:	4b04      	ldr	r3, [pc, #16]	; (800caec <_localeconv_r+0x18>)
 800cadc:	2800      	cmp	r0, #0
 800cade:	bf08      	it	eq
 800cae0:	4618      	moveq	r0, r3
 800cae2:	30f0      	adds	r0, #240	; 0xf0
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	2000000c 	.word	0x2000000c
 800caec:	20000070 	.word	0x20000070

0800caf0 <__swhatbuf_r>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	460e      	mov	r6, r1
 800caf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caf8:	2900      	cmp	r1, #0
 800cafa:	b096      	sub	sp, #88	; 0x58
 800cafc:	4614      	mov	r4, r2
 800cafe:	461d      	mov	r5, r3
 800cb00:	da07      	bge.n	800cb12 <__swhatbuf_r+0x22>
 800cb02:	2300      	movs	r3, #0
 800cb04:	602b      	str	r3, [r5, #0]
 800cb06:	89b3      	ldrh	r3, [r6, #12]
 800cb08:	061a      	lsls	r2, r3, #24
 800cb0a:	d410      	bmi.n	800cb2e <__swhatbuf_r+0x3e>
 800cb0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb10:	e00e      	b.n	800cb30 <__swhatbuf_r+0x40>
 800cb12:	466a      	mov	r2, sp
 800cb14:	f001 f850 	bl	800dbb8 <_fstat_r>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	dbf2      	blt.n	800cb02 <__swhatbuf_r+0x12>
 800cb1c:	9a01      	ldr	r2, [sp, #4]
 800cb1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb26:	425a      	negs	r2, r3
 800cb28:	415a      	adcs	r2, r3
 800cb2a:	602a      	str	r2, [r5, #0]
 800cb2c:	e7ee      	b.n	800cb0c <__swhatbuf_r+0x1c>
 800cb2e:	2340      	movs	r3, #64	; 0x40
 800cb30:	2000      	movs	r0, #0
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	b016      	add	sp, #88	; 0x58
 800cb36:	bd70      	pop	{r4, r5, r6, pc}

0800cb38 <__smakebuf_r>:
 800cb38:	898b      	ldrh	r3, [r1, #12]
 800cb3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb3c:	079d      	lsls	r5, r3, #30
 800cb3e:	4606      	mov	r6, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	d507      	bpl.n	800cb54 <__smakebuf_r+0x1c>
 800cb44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	6123      	str	r3, [r4, #16]
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	6163      	str	r3, [r4, #20]
 800cb50:	b002      	add	sp, #8
 800cb52:	bd70      	pop	{r4, r5, r6, pc}
 800cb54:	ab01      	add	r3, sp, #4
 800cb56:	466a      	mov	r2, sp
 800cb58:	f7ff ffca 	bl	800caf0 <__swhatbuf_r>
 800cb5c:	9900      	ldr	r1, [sp, #0]
 800cb5e:	4605      	mov	r5, r0
 800cb60:	4630      	mov	r0, r6
 800cb62:	f000 fca9 	bl	800d4b8 <_malloc_r>
 800cb66:	b948      	cbnz	r0, 800cb7c <__smakebuf_r+0x44>
 800cb68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb6c:	059a      	lsls	r2, r3, #22
 800cb6e:	d4ef      	bmi.n	800cb50 <__smakebuf_r+0x18>
 800cb70:	f023 0303 	bic.w	r3, r3, #3
 800cb74:	f043 0302 	orr.w	r3, r3, #2
 800cb78:	81a3      	strh	r3, [r4, #12]
 800cb7a:	e7e3      	b.n	800cb44 <__smakebuf_r+0xc>
 800cb7c:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <__smakebuf_r+0x7c>)
 800cb7e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb80:	89a3      	ldrh	r3, [r4, #12]
 800cb82:	6020      	str	r0, [r4, #0]
 800cb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb88:	81a3      	strh	r3, [r4, #12]
 800cb8a:	9b00      	ldr	r3, [sp, #0]
 800cb8c:	6163      	str	r3, [r4, #20]
 800cb8e:	9b01      	ldr	r3, [sp, #4]
 800cb90:	6120      	str	r0, [r4, #16]
 800cb92:	b15b      	cbz	r3, 800cbac <__smakebuf_r+0x74>
 800cb94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f001 f81f 	bl	800dbdc <_isatty_r>
 800cb9e:	b128      	cbz	r0, 800cbac <__smakebuf_r+0x74>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	f023 0303 	bic.w	r3, r3, #3
 800cba6:	f043 0301 	orr.w	r3, r3, #1
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	431d      	orrs	r5, r3
 800cbb0:	81a5      	strh	r5, [r4, #12]
 800cbb2:	e7cd      	b.n	800cb50 <__smakebuf_r+0x18>
 800cbb4:	0800c339 	.word	0x0800c339

0800cbb8 <malloc>:
 800cbb8:	4b02      	ldr	r3, [pc, #8]	; (800cbc4 <malloc+0xc>)
 800cbba:	4601      	mov	r1, r0
 800cbbc:	6818      	ldr	r0, [r3, #0]
 800cbbe:	f000 bc7b 	b.w	800d4b8 <_malloc_r>
 800cbc2:	bf00      	nop
 800cbc4:	2000000c 	.word	0x2000000c

0800cbc8 <__ascii_mbtowc>:
 800cbc8:	b082      	sub	sp, #8
 800cbca:	b901      	cbnz	r1, 800cbce <__ascii_mbtowc+0x6>
 800cbcc:	a901      	add	r1, sp, #4
 800cbce:	b142      	cbz	r2, 800cbe2 <__ascii_mbtowc+0x1a>
 800cbd0:	b14b      	cbz	r3, 800cbe6 <__ascii_mbtowc+0x1e>
 800cbd2:	7813      	ldrb	r3, [r2, #0]
 800cbd4:	600b      	str	r3, [r1, #0]
 800cbd6:	7812      	ldrb	r2, [r2, #0]
 800cbd8:	1c10      	adds	r0, r2, #0
 800cbda:	bf18      	it	ne
 800cbdc:	2001      	movne	r0, #1
 800cbde:	b002      	add	sp, #8
 800cbe0:	4770      	bx	lr
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	e7fb      	b.n	800cbde <__ascii_mbtowc+0x16>
 800cbe6:	f06f 0001 	mvn.w	r0, #1
 800cbea:	e7f8      	b.n	800cbde <__ascii_mbtowc+0x16>

0800cbec <memcpy>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	1e43      	subs	r3, r0, #1
 800cbf0:	440a      	add	r2, r1
 800cbf2:	4291      	cmp	r1, r2
 800cbf4:	d100      	bne.n	800cbf8 <memcpy+0xc>
 800cbf6:	bd10      	pop	{r4, pc}
 800cbf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc00:	e7f7      	b.n	800cbf2 <memcpy+0x6>

0800cc02 <_Balloc>:
 800cc02:	b570      	push	{r4, r5, r6, lr}
 800cc04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc06:	4604      	mov	r4, r0
 800cc08:	460e      	mov	r6, r1
 800cc0a:	b93d      	cbnz	r5, 800cc1c <_Balloc+0x1a>
 800cc0c:	2010      	movs	r0, #16
 800cc0e:	f7ff ffd3 	bl	800cbb8 <malloc>
 800cc12:	6260      	str	r0, [r4, #36]	; 0x24
 800cc14:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc18:	6005      	str	r5, [r0, #0]
 800cc1a:	60c5      	str	r5, [r0, #12]
 800cc1c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cc1e:	68eb      	ldr	r3, [r5, #12]
 800cc20:	b183      	cbz	r3, 800cc44 <_Balloc+0x42>
 800cc22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cc2a:	b9b8      	cbnz	r0, 800cc5c <_Balloc+0x5a>
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	fa01 f506 	lsl.w	r5, r1, r6
 800cc32:	1d6a      	adds	r2, r5, #5
 800cc34:	0092      	lsls	r2, r2, #2
 800cc36:	4620      	mov	r0, r4
 800cc38:	f000 fbe1 	bl	800d3fe <_calloc_r>
 800cc3c:	b160      	cbz	r0, 800cc58 <_Balloc+0x56>
 800cc3e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cc42:	e00e      	b.n	800cc62 <_Balloc+0x60>
 800cc44:	2221      	movs	r2, #33	; 0x21
 800cc46:	2104      	movs	r1, #4
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f000 fbd8 	bl	800d3fe <_calloc_r>
 800cc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc50:	60e8      	str	r0, [r5, #12]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1e4      	bne.n	800cc22 <_Balloc+0x20>
 800cc58:	2000      	movs	r0, #0
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	6802      	ldr	r2, [r0, #0]
 800cc5e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cc62:	2300      	movs	r3, #0
 800cc64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc68:	e7f7      	b.n	800cc5a <_Balloc+0x58>

0800cc6a <_Bfree>:
 800cc6a:	b570      	push	{r4, r5, r6, lr}
 800cc6c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cc6e:	4606      	mov	r6, r0
 800cc70:	460d      	mov	r5, r1
 800cc72:	b93c      	cbnz	r4, 800cc84 <_Bfree+0x1a>
 800cc74:	2010      	movs	r0, #16
 800cc76:	f7ff ff9f 	bl	800cbb8 <malloc>
 800cc7a:	6270      	str	r0, [r6, #36]	; 0x24
 800cc7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc80:	6004      	str	r4, [r0, #0]
 800cc82:	60c4      	str	r4, [r0, #12]
 800cc84:	b13d      	cbz	r5, 800cc96 <_Bfree+0x2c>
 800cc86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cc88:	686a      	ldr	r2, [r5, #4]
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc90:	6029      	str	r1, [r5, #0]
 800cc92:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cc96:	bd70      	pop	{r4, r5, r6, pc}

0800cc98 <__multadd>:
 800cc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9c:	690d      	ldr	r5, [r1, #16]
 800cc9e:	461f      	mov	r7, r3
 800cca0:	4606      	mov	r6, r0
 800cca2:	460c      	mov	r4, r1
 800cca4:	f101 0c14 	add.w	ip, r1, #20
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f8dc 0000 	ldr.w	r0, [ip]
 800ccae:	b281      	uxth	r1, r0
 800ccb0:	fb02 7101 	mla	r1, r2, r1, r7
 800ccb4:	0c0f      	lsrs	r7, r1, #16
 800ccb6:	0c00      	lsrs	r0, r0, #16
 800ccb8:	fb02 7000 	mla	r0, r2, r0, r7
 800ccbc:	b289      	uxth	r1, r1
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ccc4:	429d      	cmp	r5, r3
 800ccc6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ccca:	f84c 1b04 	str.w	r1, [ip], #4
 800ccce:	dcec      	bgt.n	800ccaa <__multadd+0x12>
 800ccd0:	b1d7      	cbz	r7, 800cd08 <__multadd+0x70>
 800ccd2:	68a3      	ldr	r3, [r4, #8]
 800ccd4:	42ab      	cmp	r3, r5
 800ccd6:	dc12      	bgt.n	800ccfe <__multadd+0x66>
 800ccd8:	6861      	ldr	r1, [r4, #4]
 800ccda:	4630      	mov	r0, r6
 800ccdc:	3101      	adds	r1, #1
 800ccde:	f7ff ff90 	bl	800cc02 <_Balloc>
 800cce2:	6922      	ldr	r2, [r4, #16]
 800cce4:	3202      	adds	r2, #2
 800cce6:	f104 010c 	add.w	r1, r4, #12
 800ccea:	4680      	mov	r8, r0
 800ccec:	0092      	lsls	r2, r2, #2
 800ccee:	300c      	adds	r0, #12
 800ccf0:	f7ff ff7c 	bl	800cbec <memcpy>
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	f7ff ffb7 	bl	800cc6a <_Bfree>
 800ccfc:	4644      	mov	r4, r8
 800ccfe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd02:	3501      	adds	r5, #1
 800cd04:	615f      	str	r7, [r3, #20]
 800cd06:	6125      	str	r5, [r4, #16]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cd0e <__s2b>:
 800cd0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd12:	460c      	mov	r4, r1
 800cd14:	4615      	mov	r5, r2
 800cd16:	461f      	mov	r7, r3
 800cd18:	2209      	movs	r2, #9
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd22:	2100      	movs	r1, #0
 800cd24:	2201      	movs	r2, #1
 800cd26:	429a      	cmp	r2, r3
 800cd28:	db20      	blt.n	800cd6c <__s2b+0x5e>
 800cd2a:	4630      	mov	r0, r6
 800cd2c:	f7ff ff69 	bl	800cc02 <_Balloc>
 800cd30:	9b08      	ldr	r3, [sp, #32]
 800cd32:	6143      	str	r3, [r0, #20]
 800cd34:	2d09      	cmp	r5, #9
 800cd36:	f04f 0301 	mov.w	r3, #1
 800cd3a:	6103      	str	r3, [r0, #16]
 800cd3c:	dd19      	ble.n	800cd72 <__s2b+0x64>
 800cd3e:	f104 0809 	add.w	r8, r4, #9
 800cd42:	46c1      	mov	r9, r8
 800cd44:	442c      	add	r4, r5
 800cd46:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	3b30      	subs	r3, #48	; 0x30
 800cd4e:	220a      	movs	r2, #10
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7ff ffa1 	bl	800cc98 <__multadd>
 800cd56:	45a1      	cmp	r9, r4
 800cd58:	d1f5      	bne.n	800cd46 <__s2b+0x38>
 800cd5a:	eb08 0405 	add.w	r4, r8, r5
 800cd5e:	3c08      	subs	r4, #8
 800cd60:	1b2d      	subs	r5, r5, r4
 800cd62:	1963      	adds	r3, r4, r5
 800cd64:	42bb      	cmp	r3, r7
 800cd66:	db07      	blt.n	800cd78 <__s2b+0x6a>
 800cd68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd6c:	0052      	lsls	r2, r2, #1
 800cd6e:	3101      	adds	r1, #1
 800cd70:	e7d9      	b.n	800cd26 <__s2b+0x18>
 800cd72:	340a      	adds	r4, #10
 800cd74:	2509      	movs	r5, #9
 800cd76:	e7f3      	b.n	800cd60 <__s2b+0x52>
 800cd78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd7c:	4601      	mov	r1, r0
 800cd7e:	3b30      	subs	r3, #48	; 0x30
 800cd80:	220a      	movs	r2, #10
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7ff ff88 	bl	800cc98 <__multadd>
 800cd88:	e7eb      	b.n	800cd62 <__s2b+0x54>

0800cd8a <__hi0bits>:
 800cd8a:	0c02      	lsrs	r2, r0, #16
 800cd8c:	0412      	lsls	r2, r2, #16
 800cd8e:	4603      	mov	r3, r0
 800cd90:	b9b2      	cbnz	r2, 800cdc0 <__hi0bits+0x36>
 800cd92:	0403      	lsls	r3, r0, #16
 800cd94:	2010      	movs	r0, #16
 800cd96:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cd9a:	bf04      	itt	eq
 800cd9c:	021b      	lsleq	r3, r3, #8
 800cd9e:	3008      	addeq	r0, #8
 800cda0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cda4:	bf04      	itt	eq
 800cda6:	011b      	lsleq	r3, r3, #4
 800cda8:	3004      	addeq	r0, #4
 800cdaa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cdae:	bf04      	itt	eq
 800cdb0:	009b      	lsleq	r3, r3, #2
 800cdb2:	3002      	addeq	r0, #2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	db06      	blt.n	800cdc6 <__hi0bits+0x3c>
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	d503      	bpl.n	800cdc4 <__hi0bits+0x3a>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	4770      	bx	lr
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	e7e8      	b.n	800cd96 <__hi0bits+0xc>
 800cdc4:	2020      	movs	r0, #32
 800cdc6:	4770      	bx	lr

0800cdc8 <__lo0bits>:
 800cdc8:	6803      	ldr	r3, [r0, #0]
 800cdca:	f013 0207 	ands.w	r2, r3, #7
 800cdce:	4601      	mov	r1, r0
 800cdd0:	d00b      	beq.n	800cdea <__lo0bits+0x22>
 800cdd2:	07da      	lsls	r2, r3, #31
 800cdd4:	d423      	bmi.n	800ce1e <__lo0bits+0x56>
 800cdd6:	0798      	lsls	r0, r3, #30
 800cdd8:	bf49      	itett	mi
 800cdda:	085b      	lsrmi	r3, r3, #1
 800cddc:	089b      	lsrpl	r3, r3, #2
 800cdde:	2001      	movmi	r0, #1
 800cde0:	600b      	strmi	r3, [r1, #0]
 800cde2:	bf5c      	itt	pl
 800cde4:	600b      	strpl	r3, [r1, #0]
 800cde6:	2002      	movpl	r0, #2
 800cde8:	4770      	bx	lr
 800cdea:	b298      	uxth	r0, r3
 800cdec:	b9a8      	cbnz	r0, 800ce1a <__lo0bits+0x52>
 800cdee:	0c1b      	lsrs	r3, r3, #16
 800cdf0:	2010      	movs	r0, #16
 800cdf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cdf6:	bf04      	itt	eq
 800cdf8:	0a1b      	lsreq	r3, r3, #8
 800cdfa:	3008      	addeq	r0, #8
 800cdfc:	071a      	lsls	r2, r3, #28
 800cdfe:	bf04      	itt	eq
 800ce00:	091b      	lsreq	r3, r3, #4
 800ce02:	3004      	addeq	r0, #4
 800ce04:	079a      	lsls	r2, r3, #30
 800ce06:	bf04      	itt	eq
 800ce08:	089b      	lsreq	r3, r3, #2
 800ce0a:	3002      	addeq	r0, #2
 800ce0c:	07da      	lsls	r2, r3, #31
 800ce0e:	d402      	bmi.n	800ce16 <__lo0bits+0x4e>
 800ce10:	085b      	lsrs	r3, r3, #1
 800ce12:	d006      	beq.n	800ce22 <__lo0bits+0x5a>
 800ce14:	3001      	adds	r0, #1
 800ce16:	600b      	str	r3, [r1, #0]
 800ce18:	4770      	bx	lr
 800ce1a:	4610      	mov	r0, r2
 800ce1c:	e7e9      	b.n	800cdf2 <__lo0bits+0x2a>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	4770      	bx	lr
 800ce22:	2020      	movs	r0, #32
 800ce24:	4770      	bx	lr

0800ce26 <__i2b>:
 800ce26:	b510      	push	{r4, lr}
 800ce28:	460c      	mov	r4, r1
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	f7ff fee9 	bl	800cc02 <_Balloc>
 800ce30:	2201      	movs	r2, #1
 800ce32:	6144      	str	r4, [r0, #20]
 800ce34:	6102      	str	r2, [r0, #16]
 800ce36:	bd10      	pop	{r4, pc}

0800ce38 <__multiply>:
 800ce38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	690a      	ldr	r2, [r1, #16]
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	bfb8      	it	lt
 800ce46:	460b      	movlt	r3, r1
 800ce48:	4688      	mov	r8, r1
 800ce4a:	bfbc      	itt	lt
 800ce4c:	46a0      	movlt	r8, r4
 800ce4e:	461c      	movlt	r4, r3
 800ce50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ce54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ce58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce60:	eb07 0609 	add.w	r6, r7, r9
 800ce64:	42b3      	cmp	r3, r6
 800ce66:	bfb8      	it	lt
 800ce68:	3101      	addlt	r1, #1
 800ce6a:	f7ff feca 	bl	800cc02 <_Balloc>
 800ce6e:	f100 0514 	add.w	r5, r0, #20
 800ce72:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ce76:	462b      	mov	r3, r5
 800ce78:	2200      	movs	r2, #0
 800ce7a:	4573      	cmp	r3, lr
 800ce7c:	d316      	bcc.n	800ceac <__multiply+0x74>
 800ce7e:	f104 0214 	add.w	r2, r4, #20
 800ce82:	f108 0114 	add.w	r1, r8, #20
 800ce86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ce8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	9b00      	ldr	r3, [sp, #0]
 800ce92:	9201      	str	r2, [sp, #4]
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d80c      	bhi.n	800ceb2 <__multiply+0x7a>
 800ce98:	2e00      	cmp	r6, #0
 800ce9a:	dd03      	ble.n	800cea4 <__multiply+0x6c>
 800ce9c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d05d      	beq.n	800cf60 <__multiply+0x128>
 800cea4:	6106      	str	r6, [r0, #16]
 800cea6:	b003      	add	sp, #12
 800cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceac:	f843 2b04 	str.w	r2, [r3], #4
 800ceb0:	e7e3      	b.n	800ce7a <__multiply+0x42>
 800ceb2:	f8b2 b000 	ldrh.w	fp, [r2]
 800ceb6:	f1bb 0f00 	cmp.w	fp, #0
 800ceba:	d023      	beq.n	800cf04 <__multiply+0xcc>
 800cebc:	4689      	mov	r9, r1
 800cebe:	46ac      	mov	ip, r5
 800cec0:	f04f 0800 	mov.w	r8, #0
 800cec4:	f859 4b04 	ldr.w	r4, [r9], #4
 800cec8:	f8dc a000 	ldr.w	sl, [ip]
 800cecc:	b2a3      	uxth	r3, r4
 800cece:	fa1f fa8a 	uxth.w	sl, sl
 800ced2:	fb0b a303 	mla	r3, fp, r3, sl
 800ced6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ceda:	f8dc 4000 	ldr.w	r4, [ip]
 800cede:	4443      	add	r3, r8
 800cee0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cee4:	fb0b 840a 	mla	r4, fp, sl, r8
 800cee8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ceec:	46e2      	mov	sl, ip
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cef4:	454f      	cmp	r7, r9
 800cef6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cefa:	f84a 3b04 	str.w	r3, [sl], #4
 800cefe:	d82b      	bhi.n	800cf58 <__multiply+0x120>
 800cf00:	f8cc 8004 	str.w	r8, [ip, #4]
 800cf04:	9b01      	ldr	r3, [sp, #4]
 800cf06:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cf0a:	3204      	adds	r2, #4
 800cf0c:	f1ba 0f00 	cmp.w	sl, #0
 800cf10:	d020      	beq.n	800cf54 <__multiply+0x11c>
 800cf12:	682b      	ldr	r3, [r5, #0]
 800cf14:	4689      	mov	r9, r1
 800cf16:	46a8      	mov	r8, r5
 800cf18:	f04f 0b00 	mov.w	fp, #0
 800cf1c:	f8b9 c000 	ldrh.w	ip, [r9]
 800cf20:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cf24:	fb0a 440c 	mla	r4, sl, ip, r4
 800cf28:	445c      	add	r4, fp
 800cf2a:	46c4      	mov	ip, r8
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cf32:	f84c 3b04 	str.w	r3, [ip], #4
 800cf36:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf3a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cf3e:	0c1b      	lsrs	r3, r3, #16
 800cf40:	fb0a b303 	mla	r3, sl, r3, fp
 800cf44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cf48:	454f      	cmp	r7, r9
 800cf4a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cf4e:	d805      	bhi.n	800cf5c <__multiply+0x124>
 800cf50:	f8c8 3004 	str.w	r3, [r8, #4]
 800cf54:	3504      	adds	r5, #4
 800cf56:	e79b      	b.n	800ce90 <__multiply+0x58>
 800cf58:	46d4      	mov	ip, sl
 800cf5a:	e7b3      	b.n	800cec4 <__multiply+0x8c>
 800cf5c:	46e0      	mov	r8, ip
 800cf5e:	e7dd      	b.n	800cf1c <__multiply+0xe4>
 800cf60:	3e01      	subs	r6, #1
 800cf62:	e799      	b.n	800ce98 <__multiply+0x60>

0800cf64 <__pow5mult>:
 800cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf68:	4615      	mov	r5, r2
 800cf6a:	f012 0203 	ands.w	r2, r2, #3
 800cf6e:	4606      	mov	r6, r0
 800cf70:	460f      	mov	r7, r1
 800cf72:	d007      	beq.n	800cf84 <__pow5mult+0x20>
 800cf74:	3a01      	subs	r2, #1
 800cf76:	4c21      	ldr	r4, [pc, #132]	; (800cffc <__pow5mult+0x98>)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf7e:	f7ff fe8b 	bl	800cc98 <__multadd>
 800cf82:	4607      	mov	r7, r0
 800cf84:	10ad      	asrs	r5, r5, #2
 800cf86:	d035      	beq.n	800cff4 <__pow5mult+0x90>
 800cf88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf8a:	b93c      	cbnz	r4, 800cf9c <__pow5mult+0x38>
 800cf8c:	2010      	movs	r0, #16
 800cf8e:	f7ff fe13 	bl	800cbb8 <malloc>
 800cf92:	6270      	str	r0, [r6, #36]	; 0x24
 800cf94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf98:	6004      	str	r4, [r0, #0]
 800cf9a:	60c4      	str	r4, [r0, #12]
 800cf9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cfa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfa4:	b94c      	cbnz	r4, 800cfba <__pow5mult+0x56>
 800cfa6:	f240 2171 	movw	r1, #625	; 0x271
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7ff ff3b 	bl	800ce26 <__i2b>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	6003      	str	r3, [r0, #0]
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	07eb      	lsls	r3, r5, #31
 800cfc0:	d50a      	bpl.n	800cfd8 <__pow5mult+0x74>
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	4622      	mov	r2, r4
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f7ff ff36 	bl	800ce38 <__multiply>
 800cfcc:	4639      	mov	r1, r7
 800cfce:	4681      	mov	r9, r0
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7ff fe4a 	bl	800cc6a <_Bfree>
 800cfd6:	464f      	mov	r7, r9
 800cfd8:	106d      	asrs	r5, r5, #1
 800cfda:	d00b      	beq.n	800cff4 <__pow5mult+0x90>
 800cfdc:	6820      	ldr	r0, [r4, #0]
 800cfde:	b938      	cbnz	r0, 800cff0 <__pow5mult+0x8c>
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff ff27 	bl	800ce38 <__multiply>
 800cfea:	6020      	str	r0, [r4, #0]
 800cfec:	f8c0 8000 	str.w	r8, [r0]
 800cff0:	4604      	mov	r4, r0
 800cff2:	e7e4      	b.n	800cfbe <__pow5mult+0x5a>
 800cff4:	4638      	mov	r0, r7
 800cff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cffa:	bf00      	nop
 800cffc:	0800e820 	.word	0x0800e820

0800d000 <__lshift>:
 800d000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d004:	460c      	mov	r4, r1
 800d006:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	6849      	ldr	r1, [r1, #4]
 800d00e:	eb0a 0903 	add.w	r9, sl, r3
 800d012:	68a3      	ldr	r3, [r4, #8]
 800d014:	4607      	mov	r7, r0
 800d016:	4616      	mov	r6, r2
 800d018:	f109 0501 	add.w	r5, r9, #1
 800d01c:	42ab      	cmp	r3, r5
 800d01e:	db32      	blt.n	800d086 <__lshift+0x86>
 800d020:	4638      	mov	r0, r7
 800d022:	f7ff fdee 	bl	800cc02 <_Balloc>
 800d026:	2300      	movs	r3, #0
 800d028:	4680      	mov	r8, r0
 800d02a:	f100 0114 	add.w	r1, r0, #20
 800d02e:	461a      	mov	r2, r3
 800d030:	4553      	cmp	r3, sl
 800d032:	db2b      	blt.n	800d08c <__lshift+0x8c>
 800d034:	6920      	ldr	r0, [r4, #16]
 800d036:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d03a:	f104 0314 	add.w	r3, r4, #20
 800d03e:	f016 021f 	ands.w	r2, r6, #31
 800d042:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d046:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d04a:	d025      	beq.n	800d098 <__lshift+0x98>
 800d04c:	f1c2 0e20 	rsb	lr, r2, #32
 800d050:	2000      	movs	r0, #0
 800d052:	681e      	ldr	r6, [r3, #0]
 800d054:	468a      	mov	sl, r1
 800d056:	4096      	lsls	r6, r2
 800d058:	4330      	orrs	r0, r6
 800d05a:	f84a 0b04 	str.w	r0, [sl], #4
 800d05e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d062:	459c      	cmp	ip, r3
 800d064:	fa20 f00e 	lsr.w	r0, r0, lr
 800d068:	d814      	bhi.n	800d094 <__lshift+0x94>
 800d06a:	6048      	str	r0, [r1, #4]
 800d06c:	b108      	cbz	r0, 800d072 <__lshift+0x72>
 800d06e:	f109 0502 	add.w	r5, r9, #2
 800d072:	3d01      	subs	r5, #1
 800d074:	4638      	mov	r0, r7
 800d076:	f8c8 5010 	str.w	r5, [r8, #16]
 800d07a:	4621      	mov	r1, r4
 800d07c:	f7ff fdf5 	bl	800cc6a <_Bfree>
 800d080:	4640      	mov	r0, r8
 800d082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d086:	3101      	adds	r1, #1
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	e7c7      	b.n	800d01c <__lshift+0x1c>
 800d08c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d090:	3301      	adds	r3, #1
 800d092:	e7cd      	b.n	800d030 <__lshift+0x30>
 800d094:	4651      	mov	r1, sl
 800d096:	e7dc      	b.n	800d052 <__lshift+0x52>
 800d098:	3904      	subs	r1, #4
 800d09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d0a2:	459c      	cmp	ip, r3
 800d0a4:	d8f9      	bhi.n	800d09a <__lshift+0x9a>
 800d0a6:	e7e4      	b.n	800d072 <__lshift+0x72>

0800d0a8 <__mcmp>:
 800d0a8:	6903      	ldr	r3, [r0, #16]
 800d0aa:	690a      	ldr	r2, [r1, #16]
 800d0ac:	1a9b      	subs	r3, r3, r2
 800d0ae:	b530      	push	{r4, r5, lr}
 800d0b0:	d10c      	bne.n	800d0cc <__mcmp+0x24>
 800d0b2:	0092      	lsls	r2, r2, #2
 800d0b4:	3014      	adds	r0, #20
 800d0b6:	3114      	adds	r1, #20
 800d0b8:	1884      	adds	r4, r0, r2
 800d0ba:	4411      	add	r1, r2
 800d0bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d0c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d0c4:	4295      	cmp	r5, r2
 800d0c6:	d003      	beq.n	800d0d0 <__mcmp+0x28>
 800d0c8:	d305      	bcc.n	800d0d6 <__mcmp+0x2e>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	bd30      	pop	{r4, r5, pc}
 800d0d0:	42a0      	cmp	r0, r4
 800d0d2:	d3f3      	bcc.n	800d0bc <__mcmp+0x14>
 800d0d4:	e7fa      	b.n	800d0cc <__mcmp+0x24>
 800d0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0da:	e7f7      	b.n	800d0cc <__mcmp+0x24>

0800d0dc <__mdiff>:
 800d0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	4607      	mov	r7, r0
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	4614      	mov	r4, r2
 800d0ea:	f7ff ffdd 	bl	800d0a8 <__mcmp>
 800d0ee:	1e06      	subs	r6, r0, #0
 800d0f0:	d108      	bne.n	800d104 <__mdiff+0x28>
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f7ff fd84 	bl	800cc02 <_Balloc>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d104:	bfa4      	itt	ge
 800d106:	4623      	movge	r3, r4
 800d108:	462c      	movge	r4, r5
 800d10a:	4638      	mov	r0, r7
 800d10c:	6861      	ldr	r1, [r4, #4]
 800d10e:	bfa6      	itte	ge
 800d110:	461d      	movge	r5, r3
 800d112:	2600      	movge	r6, #0
 800d114:	2601      	movlt	r6, #1
 800d116:	f7ff fd74 	bl	800cc02 <_Balloc>
 800d11a:	692b      	ldr	r3, [r5, #16]
 800d11c:	60c6      	str	r6, [r0, #12]
 800d11e:	6926      	ldr	r6, [r4, #16]
 800d120:	f105 0914 	add.w	r9, r5, #20
 800d124:	f104 0214 	add.w	r2, r4, #20
 800d128:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d12c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d130:	f100 0514 	add.w	r5, r0, #20
 800d134:	f04f 0e00 	mov.w	lr, #0
 800d138:	f852 ab04 	ldr.w	sl, [r2], #4
 800d13c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d140:	fa1e f18a 	uxtah	r1, lr, sl
 800d144:	b2a3      	uxth	r3, r4
 800d146:	1ac9      	subs	r1, r1, r3
 800d148:	0c23      	lsrs	r3, r4, #16
 800d14a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d14e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d152:	b289      	uxth	r1, r1
 800d154:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d158:	45c8      	cmp	r8, r9
 800d15a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d15e:	4694      	mov	ip, r2
 800d160:	f845 3b04 	str.w	r3, [r5], #4
 800d164:	d8e8      	bhi.n	800d138 <__mdiff+0x5c>
 800d166:	45bc      	cmp	ip, r7
 800d168:	d304      	bcc.n	800d174 <__mdiff+0x98>
 800d16a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d16e:	b183      	cbz	r3, 800d192 <__mdiff+0xb6>
 800d170:	6106      	str	r6, [r0, #16]
 800d172:	e7c5      	b.n	800d100 <__mdiff+0x24>
 800d174:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d178:	fa1e f381 	uxtah	r3, lr, r1
 800d17c:	141a      	asrs	r2, r3, #16
 800d17e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d182:	b29b      	uxth	r3, r3
 800d184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d188:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d18c:	f845 3b04 	str.w	r3, [r5], #4
 800d190:	e7e9      	b.n	800d166 <__mdiff+0x8a>
 800d192:	3e01      	subs	r6, #1
 800d194:	e7e9      	b.n	800d16a <__mdiff+0x8e>
	...

0800d198 <__ulp>:
 800d198:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <__ulp+0x4c>)
 800d19a:	ee10 2a90 	vmov	r2, s1
 800d19e:	401a      	ands	r2, r3
 800d1a0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd04      	ble.n	800d1b2 <__ulp+0x1a>
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	ec41 0b10 	vmov	d0, r0, r1
 800d1b0:	4770      	bx	lr
 800d1b2:	425b      	negs	r3, r3
 800d1b4:	151b      	asrs	r3, r3, #20
 800d1b6:	2b13      	cmp	r3, #19
 800d1b8:	f04f 0000 	mov.w	r0, #0
 800d1bc:	f04f 0100 	mov.w	r1, #0
 800d1c0:	dc04      	bgt.n	800d1cc <__ulp+0x34>
 800d1c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d1c6:	fa42 f103 	asr.w	r1, r2, r3
 800d1ca:	e7ef      	b.n	800d1ac <__ulp+0x14>
 800d1cc:	3b14      	subs	r3, #20
 800d1ce:	2b1e      	cmp	r3, #30
 800d1d0:	f04f 0201 	mov.w	r2, #1
 800d1d4:	bfda      	itte	le
 800d1d6:	f1c3 031f 	rsble	r3, r3, #31
 800d1da:	fa02 f303 	lslle.w	r3, r2, r3
 800d1de:	4613      	movgt	r3, r2
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	e7e3      	b.n	800d1ac <__ulp+0x14>
 800d1e4:	7ff00000 	.word	0x7ff00000

0800d1e8 <__b2d>:
 800d1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ea:	6905      	ldr	r5, [r0, #16]
 800d1ec:	f100 0714 	add.w	r7, r0, #20
 800d1f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d1f4:	1f2e      	subs	r6, r5, #4
 800d1f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f7ff fdc5 	bl	800cd8a <__hi0bits>
 800d200:	f1c0 0320 	rsb	r3, r0, #32
 800d204:	280a      	cmp	r0, #10
 800d206:	600b      	str	r3, [r1, #0]
 800d208:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d280 <__b2d+0x98>
 800d20c:	dc14      	bgt.n	800d238 <__b2d+0x50>
 800d20e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d212:	fa24 f10e 	lsr.w	r1, r4, lr
 800d216:	42b7      	cmp	r7, r6
 800d218:	ea41 030c 	orr.w	r3, r1, ip
 800d21c:	bf34      	ite	cc
 800d21e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d222:	2100      	movcs	r1, #0
 800d224:	3015      	adds	r0, #21
 800d226:	fa04 f000 	lsl.w	r0, r4, r0
 800d22a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d22e:	ea40 0201 	orr.w	r2, r0, r1
 800d232:	ec43 2b10 	vmov	d0, r2, r3
 800d236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d238:	42b7      	cmp	r7, r6
 800d23a:	bf3a      	itte	cc
 800d23c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d240:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d244:	2100      	movcs	r1, #0
 800d246:	380b      	subs	r0, #11
 800d248:	d015      	beq.n	800d276 <__b2d+0x8e>
 800d24a:	4084      	lsls	r4, r0
 800d24c:	f1c0 0520 	rsb	r5, r0, #32
 800d250:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d254:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d258:	42be      	cmp	r6, r7
 800d25a:	fa21 fc05 	lsr.w	ip, r1, r5
 800d25e:	ea44 030c 	orr.w	r3, r4, ip
 800d262:	bf8c      	ite	hi
 800d264:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d268:	2400      	movls	r4, #0
 800d26a:	fa01 f000 	lsl.w	r0, r1, r0
 800d26e:	40ec      	lsrs	r4, r5
 800d270:	ea40 0204 	orr.w	r2, r0, r4
 800d274:	e7dd      	b.n	800d232 <__b2d+0x4a>
 800d276:	ea44 030c 	orr.w	r3, r4, ip
 800d27a:	460a      	mov	r2, r1
 800d27c:	e7d9      	b.n	800d232 <__b2d+0x4a>
 800d27e:	bf00      	nop
 800d280:	3ff00000 	.word	0x3ff00000

0800d284 <__d2b>:
 800d284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d288:	460e      	mov	r6, r1
 800d28a:	2101      	movs	r1, #1
 800d28c:	ec59 8b10 	vmov	r8, r9, d0
 800d290:	4615      	mov	r5, r2
 800d292:	f7ff fcb6 	bl	800cc02 <_Balloc>
 800d296:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d29a:	4607      	mov	r7, r0
 800d29c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2a0:	bb34      	cbnz	r4, 800d2f0 <__d2b+0x6c>
 800d2a2:	9301      	str	r3, [sp, #4]
 800d2a4:	f1b8 0300 	subs.w	r3, r8, #0
 800d2a8:	d027      	beq.n	800d2fa <__d2b+0x76>
 800d2aa:	a802      	add	r0, sp, #8
 800d2ac:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d2b0:	f7ff fd8a 	bl	800cdc8 <__lo0bits>
 800d2b4:	9900      	ldr	r1, [sp, #0]
 800d2b6:	b1f0      	cbz	r0, 800d2f6 <__d2b+0x72>
 800d2b8:	9a01      	ldr	r2, [sp, #4]
 800d2ba:	f1c0 0320 	rsb	r3, r0, #32
 800d2be:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c2:	430b      	orrs	r3, r1
 800d2c4:	40c2      	lsrs	r2, r0
 800d2c6:	617b      	str	r3, [r7, #20]
 800d2c8:	9201      	str	r2, [sp, #4]
 800d2ca:	9b01      	ldr	r3, [sp, #4]
 800d2cc:	61bb      	str	r3, [r7, #24]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	bf14      	ite	ne
 800d2d2:	2102      	movne	r1, #2
 800d2d4:	2101      	moveq	r1, #1
 800d2d6:	6139      	str	r1, [r7, #16]
 800d2d8:	b1c4      	cbz	r4, 800d30c <__d2b+0x88>
 800d2da:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d2de:	4404      	add	r4, r0
 800d2e0:	6034      	str	r4, [r6, #0]
 800d2e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2e6:	6028      	str	r0, [r5, #0]
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	b003      	add	sp, #12
 800d2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2f4:	e7d5      	b.n	800d2a2 <__d2b+0x1e>
 800d2f6:	6179      	str	r1, [r7, #20]
 800d2f8:	e7e7      	b.n	800d2ca <__d2b+0x46>
 800d2fa:	a801      	add	r0, sp, #4
 800d2fc:	f7ff fd64 	bl	800cdc8 <__lo0bits>
 800d300:	9b01      	ldr	r3, [sp, #4]
 800d302:	617b      	str	r3, [r7, #20]
 800d304:	2101      	movs	r1, #1
 800d306:	6139      	str	r1, [r7, #16]
 800d308:	3020      	adds	r0, #32
 800d30a:	e7e5      	b.n	800d2d8 <__d2b+0x54>
 800d30c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d314:	6030      	str	r0, [r6, #0]
 800d316:	6918      	ldr	r0, [r3, #16]
 800d318:	f7ff fd37 	bl	800cd8a <__hi0bits>
 800d31c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d320:	e7e1      	b.n	800d2e6 <__d2b+0x62>

0800d322 <__ratio>:
 800d322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d326:	4688      	mov	r8, r1
 800d328:	4669      	mov	r1, sp
 800d32a:	4681      	mov	r9, r0
 800d32c:	f7ff ff5c 	bl	800d1e8 <__b2d>
 800d330:	a901      	add	r1, sp, #4
 800d332:	4640      	mov	r0, r8
 800d334:	ec57 6b10 	vmov	r6, r7, d0
 800d338:	f7ff ff56 	bl	800d1e8 <__b2d>
 800d33c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d340:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d344:	eba3 0c02 	sub.w	ip, r3, r2
 800d348:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d34c:	1a9b      	subs	r3, r3, r2
 800d34e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d352:	ec5b ab10 	vmov	sl, fp, d0
 800d356:	2b00      	cmp	r3, #0
 800d358:	bfce      	itee	gt
 800d35a:	463a      	movgt	r2, r7
 800d35c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d360:	465a      	movle	r2, fp
 800d362:	4659      	mov	r1, fp
 800d364:	463d      	mov	r5, r7
 800d366:	bfd4      	ite	le
 800d368:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d36c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d370:	4630      	mov	r0, r6
 800d372:	ee10 2a10 	vmov	r2, s0
 800d376:	460b      	mov	r3, r1
 800d378:	4629      	mov	r1, r5
 800d37a:	f7f3 fa6f 	bl	800085c <__aeabi_ddiv>
 800d37e:	ec41 0b10 	vmov	d0, r0, r1
 800d382:	b003      	add	sp, #12
 800d384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d388 <__copybits>:
 800d388:	3901      	subs	r1, #1
 800d38a:	b510      	push	{r4, lr}
 800d38c:	1149      	asrs	r1, r1, #5
 800d38e:	6914      	ldr	r4, [r2, #16]
 800d390:	3101      	adds	r1, #1
 800d392:	f102 0314 	add.w	r3, r2, #20
 800d396:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d39a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d39e:	42a3      	cmp	r3, r4
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	d303      	bcc.n	800d3ac <__copybits+0x24>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	428a      	cmp	r2, r1
 800d3a8:	d305      	bcc.n	800d3b6 <__copybits+0x2e>
 800d3aa:	bd10      	pop	{r4, pc}
 800d3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b0:	f840 2b04 	str.w	r2, [r0], #4
 800d3b4:	e7f3      	b.n	800d39e <__copybits+0x16>
 800d3b6:	f842 3b04 	str.w	r3, [r2], #4
 800d3ba:	e7f4      	b.n	800d3a6 <__copybits+0x1e>

0800d3bc <__any_on>:
 800d3bc:	f100 0214 	add.w	r2, r0, #20
 800d3c0:	6900      	ldr	r0, [r0, #16]
 800d3c2:	114b      	asrs	r3, r1, #5
 800d3c4:	4298      	cmp	r0, r3
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	db11      	blt.n	800d3ee <__any_on+0x32>
 800d3ca:	dd0a      	ble.n	800d3e2 <__any_on+0x26>
 800d3cc:	f011 011f 	ands.w	r1, r1, #31
 800d3d0:	d007      	beq.n	800d3e2 <__any_on+0x26>
 800d3d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3d6:	fa24 f001 	lsr.w	r0, r4, r1
 800d3da:	fa00 f101 	lsl.w	r1, r0, r1
 800d3de:	428c      	cmp	r4, r1
 800d3e0:	d10b      	bne.n	800d3fa <__any_on+0x3e>
 800d3e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d803      	bhi.n	800d3f2 <__any_on+0x36>
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	bd10      	pop	{r4, pc}
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	e7f7      	b.n	800d3e2 <__any_on+0x26>
 800d3f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3f6:	2900      	cmp	r1, #0
 800d3f8:	d0f5      	beq.n	800d3e6 <__any_on+0x2a>
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	e7f6      	b.n	800d3ec <__any_on+0x30>

0800d3fe <_calloc_r>:
 800d3fe:	b538      	push	{r3, r4, r5, lr}
 800d400:	fb02 f401 	mul.w	r4, r2, r1
 800d404:	4621      	mov	r1, r4
 800d406:	f000 f857 	bl	800d4b8 <_malloc_r>
 800d40a:	4605      	mov	r5, r0
 800d40c:	b118      	cbz	r0, 800d416 <_calloc_r+0x18>
 800d40e:	4622      	mov	r2, r4
 800d410:	2100      	movs	r1, #0
 800d412:	f7fc fc6b 	bl	8009cec <memset>
 800d416:	4628      	mov	r0, r5
 800d418:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d41c <_free_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4605      	mov	r5, r0
 800d420:	2900      	cmp	r1, #0
 800d422:	d045      	beq.n	800d4b0 <_free_r+0x94>
 800d424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d428:	1f0c      	subs	r4, r1, #4
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	bfb8      	it	lt
 800d42e:	18e4      	addlt	r4, r4, r3
 800d430:	f000 fc0f 	bl	800dc52 <__malloc_lock>
 800d434:	4a1f      	ldr	r2, [pc, #124]	; (800d4b4 <_free_r+0x98>)
 800d436:	6813      	ldr	r3, [r2, #0]
 800d438:	4610      	mov	r0, r2
 800d43a:	b933      	cbnz	r3, 800d44a <_free_r+0x2e>
 800d43c:	6063      	str	r3, [r4, #4]
 800d43e:	6014      	str	r4, [r2, #0]
 800d440:	4628      	mov	r0, r5
 800d442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d446:	f000 bc05 	b.w	800dc54 <__malloc_unlock>
 800d44a:	42a3      	cmp	r3, r4
 800d44c:	d90c      	bls.n	800d468 <_free_r+0x4c>
 800d44e:	6821      	ldr	r1, [r4, #0]
 800d450:	1862      	adds	r2, r4, r1
 800d452:	4293      	cmp	r3, r2
 800d454:	bf04      	itt	eq
 800d456:	681a      	ldreq	r2, [r3, #0]
 800d458:	685b      	ldreq	r3, [r3, #4]
 800d45a:	6063      	str	r3, [r4, #4]
 800d45c:	bf04      	itt	eq
 800d45e:	1852      	addeq	r2, r2, r1
 800d460:	6022      	streq	r2, [r4, #0]
 800d462:	6004      	str	r4, [r0, #0]
 800d464:	e7ec      	b.n	800d440 <_free_r+0x24>
 800d466:	4613      	mov	r3, r2
 800d468:	685a      	ldr	r2, [r3, #4]
 800d46a:	b10a      	cbz	r2, 800d470 <_free_r+0x54>
 800d46c:	42a2      	cmp	r2, r4
 800d46e:	d9fa      	bls.n	800d466 <_free_r+0x4a>
 800d470:	6819      	ldr	r1, [r3, #0]
 800d472:	1858      	adds	r0, r3, r1
 800d474:	42a0      	cmp	r0, r4
 800d476:	d10b      	bne.n	800d490 <_free_r+0x74>
 800d478:	6820      	ldr	r0, [r4, #0]
 800d47a:	4401      	add	r1, r0
 800d47c:	1858      	adds	r0, r3, r1
 800d47e:	4282      	cmp	r2, r0
 800d480:	6019      	str	r1, [r3, #0]
 800d482:	d1dd      	bne.n	800d440 <_free_r+0x24>
 800d484:	6810      	ldr	r0, [r2, #0]
 800d486:	6852      	ldr	r2, [r2, #4]
 800d488:	605a      	str	r2, [r3, #4]
 800d48a:	4401      	add	r1, r0
 800d48c:	6019      	str	r1, [r3, #0]
 800d48e:	e7d7      	b.n	800d440 <_free_r+0x24>
 800d490:	d902      	bls.n	800d498 <_free_r+0x7c>
 800d492:	230c      	movs	r3, #12
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	e7d3      	b.n	800d440 <_free_r+0x24>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	1821      	adds	r1, r4, r0
 800d49c:	428a      	cmp	r2, r1
 800d49e:	bf04      	itt	eq
 800d4a0:	6811      	ldreq	r1, [r2, #0]
 800d4a2:	6852      	ldreq	r2, [r2, #4]
 800d4a4:	6062      	str	r2, [r4, #4]
 800d4a6:	bf04      	itt	eq
 800d4a8:	1809      	addeq	r1, r1, r0
 800d4aa:	6021      	streq	r1, [r4, #0]
 800d4ac:	605c      	str	r4, [r3, #4]
 800d4ae:	e7c7      	b.n	800d440 <_free_r+0x24>
 800d4b0:	bd38      	pop	{r3, r4, r5, pc}
 800d4b2:	bf00      	nop
 800d4b4:	2000084c 	.word	0x2000084c

0800d4b8 <_malloc_r>:
 800d4b8:	b570      	push	{r4, r5, r6, lr}
 800d4ba:	1ccd      	adds	r5, r1, #3
 800d4bc:	f025 0503 	bic.w	r5, r5, #3
 800d4c0:	3508      	adds	r5, #8
 800d4c2:	2d0c      	cmp	r5, #12
 800d4c4:	bf38      	it	cc
 800d4c6:	250c      	movcc	r5, #12
 800d4c8:	2d00      	cmp	r5, #0
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	db01      	blt.n	800d4d2 <_malloc_r+0x1a>
 800d4ce:	42a9      	cmp	r1, r5
 800d4d0:	d903      	bls.n	800d4da <_malloc_r+0x22>
 800d4d2:	230c      	movs	r3, #12
 800d4d4:	6033      	str	r3, [r6, #0]
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	bd70      	pop	{r4, r5, r6, pc}
 800d4da:	f000 fbba 	bl	800dc52 <__malloc_lock>
 800d4de:	4a21      	ldr	r2, [pc, #132]	; (800d564 <_malloc_r+0xac>)
 800d4e0:	6814      	ldr	r4, [r2, #0]
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	b991      	cbnz	r1, 800d50c <_malloc_r+0x54>
 800d4e6:	4c20      	ldr	r4, [pc, #128]	; (800d568 <_malloc_r+0xb0>)
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	b91b      	cbnz	r3, 800d4f4 <_malloc_r+0x3c>
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	f000 facf 	bl	800da90 <_sbrk_r>
 800d4f2:	6020      	str	r0, [r4, #0]
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f000 faca 	bl	800da90 <_sbrk_r>
 800d4fc:	1c43      	adds	r3, r0, #1
 800d4fe:	d124      	bne.n	800d54a <_malloc_r+0x92>
 800d500:	230c      	movs	r3, #12
 800d502:	6033      	str	r3, [r6, #0]
 800d504:	4630      	mov	r0, r6
 800d506:	f000 fba5 	bl	800dc54 <__malloc_unlock>
 800d50a:	e7e4      	b.n	800d4d6 <_malloc_r+0x1e>
 800d50c:	680b      	ldr	r3, [r1, #0]
 800d50e:	1b5b      	subs	r3, r3, r5
 800d510:	d418      	bmi.n	800d544 <_malloc_r+0x8c>
 800d512:	2b0b      	cmp	r3, #11
 800d514:	d90f      	bls.n	800d536 <_malloc_r+0x7e>
 800d516:	600b      	str	r3, [r1, #0]
 800d518:	50cd      	str	r5, [r1, r3]
 800d51a:	18cc      	adds	r4, r1, r3
 800d51c:	4630      	mov	r0, r6
 800d51e:	f000 fb99 	bl	800dc54 <__malloc_unlock>
 800d522:	f104 000b 	add.w	r0, r4, #11
 800d526:	1d23      	adds	r3, r4, #4
 800d528:	f020 0007 	bic.w	r0, r0, #7
 800d52c:	1ac3      	subs	r3, r0, r3
 800d52e:	d0d3      	beq.n	800d4d8 <_malloc_r+0x20>
 800d530:	425a      	negs	r2, r3
 800d532:	50e2      	str	r2, [r4, r3]
 800d534:	e7d0      	b.n	800d4d8 <_malloc_r+0x20>
 800d536:	428c      	cmp	r4, r1
 800d538:	684b      	ldr	r3, [r1, #4]
 800d53a:	bf16      	itet	ne
 800d53c:	6063      	strne	r3, [r4, #4]
 800d53e:	6013      	streq	r3, [r2, #0]
 800d540:	460c      	movne	r4, r1
 800d542:	e7eb      	b.n	800d51c <_malloc_r+0x64>
 800d544:	460c      	mov	r4, r1
 800d546:	6849      	ldr	r1, [r1, #4]
 800d548:	e7cc      	b.n	800d4e4 <_malloc_r+0x2c>
 800d54a:	1cc4      	adds	r4, r0, #3
 800d54c:	f024 0403 	bic.w	r4, r4, #3
 800d550:	42a0      	cmp	r0, r4
 800d552:	d005      	beq.n	800d560 <_malloc_r+0xa8>
 800d554:	1a21      	subs	r1, r4, r0
 800d556:	4630      	mov	r0, r6
 800d558:	f000 fa9a 	bl	800da90 <_sbrk_r>
 800d55c:	3001      	adds	r0, #1
 800d55e:	d0cf      	beq.n	800d500 <_malloc_r+0x48>
 800d560:	6025      	str	r5, [r4, #0]
 800d562:	e7db      	b.n	800d51c <_malloc_r+0x64>
 800d564:	2000084c 	.word	0x2000084c
 800d568:	20000850 	.word	0x20000850

0800d56c <__ssputs_r>:
 800d56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d570:	688e      	ldr	r6, [r1, #8]
 800d572:	429e      	cmp	r6, r3
 800d574:	4682      	mov	sl, r0
 800d576:	460c      	mov	r4, r1
 800d578:	4690      	mov	r8, r2
 800d57a:	4699      	mov	r9, r3
 800d57c:	d837      	bhi.n	800d5ee <__ssputs_r+0x82>
 800d57e:	898a      	ldrh	r2, [r1, #12]
 800d580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d584:	d031      	beq.n	800d5ea <__ssputs_r+0x7e>
 800d586:	6825      	ldr	r5, [r4, #0]
 800d588:	6909      	ldr	r1, [r1, #16]
 800d58a:	1a6f      	subs	r7, r5, r1
 800d58c:	6965      	ldr	r5, [r4, #20]
 800d58e:	2302      	movs	r3, #2
 800d590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d594:	fb95 f5f3 	sdiv	r5, r5, r3
 800d598:	f109 0301 	add.w	r3, r9, #1
 800d59c:	443b      	add	r3, r7
 800d59e:	429d      	cmp	r5, r3
 800d5a0:	bf38      	it	cc
 800d5a2:	461d      	movcc	r5, r3
 800d5a4:	0553      	lsls	r3, r2, #21
 800d5a6:	d530      	bpl.n	800d60a <__ssputs_r+0x9e>
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f7ff ff85 	bl	800d4b8 <_malloc_r>
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	b950      	cbnz	r0, 800d5c8 <__ssputs_r+0x5c>
 800d5b2:	230c      	movs	r3, #12
 800d5b4:	f8ca 3000 	str.w	r3, [sl]
 800d5b8:	89a3      	ldrh	r3, [r4, #12]
 800d5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5be:	81a3      	strh	r3, [r4, #12]
 800d5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c8:	463a      	mov	r2, r7
 800d5ca:	6921      	ldr	r1, [r4, #16]
 800d5cc:	f7ff fb0e 	bl	800cbec <memcpy>
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5da:	81a3      	strh	r3, [r4, #12]
 800d5dc:	6126      	str	r6, [r4, #16]
 800d5de:	6165      	str	r5, [r4, #20]
 800d5e0:	443e      	add	r6, r7
 800d5e2:	1bed      	subs	r5, r5, r7
 800d5e4:	6026      	str	r6, [r4, #0]
 800d5e6:	60a5      	str	r5, [r4, #8]
 800d5e8:	464e      	mov	r6, r9
 800d5ea:	454e      	cmp	r6, r9
 800d5ec:	d900      	bls.n	800d5f0 <__ssputs_r+0x84>
 800d5ee:	464e      	mov	r6, r9
 800d5f0:	4632      	mov	r2, r6
 800d5f2:	4641      	mov	r1, r8
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	f000 fb13 	bl	800dc20 <memmove>
 800d5fa:	68a3      	ldr	r3, [r4, #8]
 800d5fc:	1b9b      	subs	r3, r3, r6
 800d5fe:	60a3      	str	r3, [r4, #8]
 800d600:	6823      	ldr	r3, [r4, #0]
 800d602:	441e      	add	r6, r3
 800d604:	6026      	str	r6, [r4, #0]
 800d606:	2000      	movs	r0, #0
 800d608:	e7dc      	b.n	800d5c4 <__ssputs_r+0x58>
 800d60a:	462a      	mov	r2, r5
 800d60c:	f000 fb23 	bl	800dc56 <_realloc_r>
 800d610:	4606      	mov	r6, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d1e2      	bne.n	800d5dc <__ssputs_r+0x70>
 800d616:	6921      	ldr	r1, [r4, #16]
 800d618:	4650      	mov	r0, sl
 800d61a:	f7ff feff 	bl	800d41c <_free_r>
 800d61e:	e7c8      	b.n	800d5b2 <__ssputs_r+0x46>

0800d620 <_svfiprintf_r>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	461d      	mov	r5, r3
 800d626:	898b      	ldrh	r3, [r1, #12]
 800d628:	061f      	lsls	r7, r3, #24
 800d62a:	b09d      	sub	sp, #116	; 0x74
 800d62c:	4680      	mov	r8, r0
 800d62e:	460c      	mov	r4, r1
 800d630:	4616      	mov	r6, r2
 800d632:	d50f      	bpl.n	800d654 <_svfiprintf_r+0x34>
 800d634:	690b      	ldr	r3, [r1, #16]
 800d636:	b96b      	cbnz	r3, 800d654 <_svfiprintf_r+0x34>
 800d638:	2140      	movs	r1, #64	; 0x40
 800d63a:	f7ff ff3d 	bl	800d4b8 <_malloc_r>
 800d63e:	6020      	str	r0, [r4, #0]
 800d640:	6120      	str	r0, [r4, #16]
 800d642:	b928      	cbnz	r0, 800d650 <_svfiprintf_r+0x30>
 800d644:	230c      	movs	r3, #12
 800d646:	f8c8 3000 	str.w	r3, [r8]
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	e0c8      	b.n	800d7e2 <_svfiprintf_r+0x1c2>
 800d650:	2340      	movs	r3, #64	; 0x40
 800d652:	6163      	str	r3, [r4, #20]
 800d654:	2300      	movs	r3, #0
 800d656:	9309      	str	r3, [sp, #36]	; 0x24
 800d658:	2320      	movs	r3, #32
 800d65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d65e:	2330      	movs	r3, #48	; 0x30
 800d660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d664:	9503      	str	r5, [sp, #12]
 800d666:	f04f 0b01 	mov.w	fp, #1
 800d66a:	4637      	mov	r7, r6
 800d66c:	463d      	mov	r5, r7
 800d66e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d672:	b10b      	cbz	r3, 800d678 <_svfiprintf_r+0x58>
 800d674:	2b25      	cmp	r3, #37	; 0x25
 800d676:	d13e      	bne.n	800d6f6 <_svfiprintf_r+0xd6>
 800d678:	ebb7 0a06 	subs.w	sl, r7, r6
 800d67c:	d00b      	beq.n	800d696 <_svfiprintf_r+0x76>
 800d67e:	4653      	mov	r3, sl
 800d680:	4632      	mov	r2, r6
 800d682:	4621      	mov	r1, r4
 800d684:	4640      	mov	r0, r8
 800d686:	f7ff ff71 	bl	800d56c <__ssputs_r>
 800d68a:	3001      	adds	r0, #1
 800d68c:	f000 80a4 	beq.w	800d7d8 <_svfiprintf_r+0x1b8>
 800d690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d692:	4453      	add	r3, sl
 800d694:	9309      	str	r3, [sp, #36]	; 0x24
 800d696:	783b      	ldrb	r3, [r7, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	f000 809d 	beq.w	800d7d8 <_svfiprintf_r+0x1b8>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	9307      	str	r3, [sp, #28]
 800d6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d6b2:	462f      	mov	r7, r5
 800d6b4:	2205      	movs	r2, #5
 800d6b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d6ba:	4850      	ldr	r0, [pc, #320]	; (800d7fc <_svfiprintf_r+0x1dc>)
 800d6bc:	f7f2 fd98 	bl	80001f0 <memchr>
 800d6c0:	9b04      	ldr	r3, [sp, #16]
 800d6c2:	b9d0      	cbnz	r0, 800d6fa <_svfiprintf_r+0xda>
 800d6c4:	06d9      	lsls	r1, r3, #27
 800d6c6:	bf44      	itt	mi
 800d6c8:	2220      	movmi	r2, #32
 800d6ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6ce:	071a      	lsls	r2, r3, #28
 800d6d0:	bf44      	itt	mi
 800d6d2:	222b      	movmi	r2, #43	; 0x2b
 800d6d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d6d8:	782a      	ldrb	r2, [r5, #0]
 800d6da:	2a2a      	cmp	r2, #42	; 0x2a
 800d6dc:	d015      	beq.n	800d70a <_svfiprintf_r+0xea>
 800d6de:	9a07      	ldr	r2, [sp, #28]
 800d6e0:	462f      	mov	r7, r5
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	250a      	movs	r5, #10
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6ec:	3b30      	subs	r3, #48	; 0x30
 800d6ee:	2b09      	cmp	r3, #9
 800d6f0:	d94d      	bls.n	800d78e <_svfiprintf_r+0x16e>
 800d6f2:	b1b8      	cbz	r0, 800d724 <_svfiprintf_r+0x104>
 800d6f4:	e00f      	b.n	800d716 <_svfiprintf_r+0xf6>
 800d6f6:	462f      	mov	r7, r5
 800d6f8:	e7b8      	b.n	800d66c <_svfiprintf_r+0x4c>
 800d6fa:	4a40      	ldr	r2, [pc, #256]	; (800d7fc <_svfiprintf_r+0x1dc>)
 800d6fc:	1a80      	subs	r0, r0, r2
 800d6fe:	fa0b f000 	lsl.w	r0, fp, r0
 800d702:	4318      	orrs	r0, r3
 800d704:	9004      	str	r0, [sp, #16]
 800d706:	463d      	mov	r5, r7
 800d708:	e7d3      	b.n	800d6b2 <_svfiprintf_r+0x92>
 800d70a:	9a03      	ldr	r2, [sp, #12]
 800d70c:	1d11      	adds	r1, r2, #4
 800d70e:	6812      	ldr	r2, [r2, #0]
 800d710:	9103      	str	r1, [sp, #12]
 800d712:	2a00      	cmp	r2, #0
 800d714:	db01      	blt.n	800d71a <_svfiprintf_r+0xfa>
 800d716:	9207      	str	r2, [sp, #28]
 800d718:	e004      	b.n	800d724 <_svfiprintf_r+0x104>
 800d71a:	4252      	negs	r2, r2
 800d71c:	f043 0302 	orr.w	r3, r3, #2
 800d720:	9207      	str	r2, [sp, #28]
 800d722:	9304      	str	r3, [sp, #16]
 800d724:	783b      	ldrb	r3, [r7, #0]
 800d726:	2b2e      	cmp	r3, #46	; 0x2e
 800d728:	d10c      	bne.n	800d744 <_svfiprintf_r+0x124>
 800d72a:	787b      	ldrb	r3, [r7, #1]
 800d72c:	2b2a      	cmp	r3, #42	; 0x2a
 800d72e:	d133      	bne.n	800d798 <_svfiprintf_r+0x178>
 800d730:	9b03      	ldr	r3, [sp, #12]
 800d732:	1d1a      	adds	r2, r3, #4
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	9203      	str	r2, [sp, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	bfb8      	it	lt
 800d73c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d740:	3702      	adds	r7, #2
 800d742:	9305      	str	r3, [sp, #20]
 800d744:	4d2e      	ldr	r5, [pc, #184]	; (800d800 <_svfiprintf_r+0x1e0>)
 800d746:	7839      	ldrb	r1, [r7, #0]
 800d748:	2203      	movs	r2, #3
 800d74a:	4628      	mov	r0, r5
 800d74c:	f7f2 fd50 	bl	80001f0 <memchr>
 800d750:	b138      	cbz	r0, 800d762 <_svfiprintf_r+0x142>
 800d752:	2340      	movs	r3, #64	; 0x40
 800d754:	1b40      	subs	r0, r0, r5
 800d756:	fa03 f000 	lsl.w	r0, r3, r0
 800d75a:	9b04      	ldr	r3, [sp, #16]
 800d75c:	4303      	orrs	r3, r0
 800d75e:	3701      	adds	r7, #1
 800d760:	9304      	str	r3, [sp, #16]
 800d762:	7839      	ldrb	r1, [r7, #0]
 800d764:	4827      	ldr	r0, [pc, #156]	; (800d804 <_svfiprintf_r+0x1e4>)
 800d766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d76a:	2206      	movs	r2, #6
 800d76c:	1c7e      	adds	r6, r7, #1
 800d76e:	f7f2 fd3f 	bl	80001f0 <memchr>
 800d772:	2800      	cmp	r0, #0
 800d774:	d038      	beq.n	800d7e8 <_svfiprintf_r+0x1c8>
 800d776:	4b24      	ldr	r3, [pc, #144]	; (800d808 <_svfiprintf_r+0x1e8>)
 800d778:	bb13      	cbnz	r3, 800d7c0 <_svfiprintf_r+0x1a0>
 800d77a:	9b03      	ldr	r3, [sp, #12]
 800d77c:	3307      	adds	r3, #7
 800d77e:	f023 0307 	bic.w	r3, r3, #7
 800d782:	3308      	adds	r3, #8
 800d784:	9303      	str	r3, [sp, #12]
 800d786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d788:	444b      	add	r3, r9
 800d78a:	9309      	str	r3, [sp, #36]	; 0x24
 800d78c:	e76d      	b.n	800d66a <_svfiprintf_r+0x4a>
 800d78e:	fb05 3202 	mla	r2, r5, r2, r3
 800d792:	2001      	movs	r0, #1
 800d794:	460f      	mov	r7, r1
 800d796:	e7a6      	b.n	800d6e6 <_svfiprintf_r+0xc6>
 800d798:	2300      	movs	r3, #0
 800d79a:	3701      	adds	r7, #1
 800d79c:	9305      	str	r3, [sp, #20]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	250a      	movs	r5, #10
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7a8:	3a30      	subs	r2, #48	; 0x30
 800d7aa:	2a09      	cmp	r2, #9
 800d7ac:	d903      	bls.n	800d7b6 <_svfiprintf_r+0x196>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d0c8      	beq.n	800d744 <_svfiprintf_r+0x124>
 800d7b2:	9105      	str	r1, [sp, #20]
 800d7b4:	e7c6      	b.n	800d744 <_svfiprintf_r+0x124>
 800d7b6:	fb05 2101 	mla	r1, r5, r1, r2
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	4607      	mov	r7, r0
 800d7be:	e7f0      	b.n	800d7a2 <_svfiprintf_r+0x182>
 800d7c0:	ab03      	add	r3, sp, #12
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4b11      	ldr	r3, [pc, #68]	; (800d80c <_svfiprintf_r+0x1ec>)
 800d7c8:	a904      	add	r1, sp, #16
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	f7fc fb2a 	bl	8009e24 <_printf_float>
 800d7d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d7d4:	4681      	mov	r9, r0
 800d7d6:	d1d6      	bne.n	800d786 <_svfiprintf_r+0x166>
 800d7d8:	89a3      	ldrh	r3, [r4, #12]
 800d7da:	065b      	lsls	r3, r3, #25
 800d7dc:	f53f af35 	bmi.w	800d64a <_svfiprintf_r+0x2a>
 800d7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7e2:	b01d      	add	sp, #116	; 0x74
 800d7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e8:	ab03      	add	r3, sp, #12
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	4b07      	ldr	r3, [pc, #28]	; (800d80c <_svfiprintf_r+0x1ec>)
 800d7f0:	a904      	add	r1, sp, #16
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	f7fc fdcc 	bl	800a390 <_printf_i>
 800d7f8:	e7ea      	b.n	800d7d0 <_svfiprintf_r+0x1b0>
 800d7fa:	bf00      	nop
 800d7fc:	0800e82c 	.word	0x0800e82c
 800d800:	0800e832 	.word	0x0800e832
 800d804:	0800e836 	.word	0x0800e836
 800d808:	08009e25 	.word	0x08009e25
 800d80c:	0800d56d 	.word	0x0800d56d

0800d810 <__sfputc_r>:
 800d810:	6893      	ldr	r3, [r2, #8]
 800d812:	3b01      	subs	r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	b410      	push	{r4}
 800d818:	6093      	str	r3, [r2, #8]
 800d81a:	da08      	bge.n	800d82e <__sfputc_r+0x1e>
 800d81c:	6994      	ldr	r4, [r2, #24]
 800d81e:	42a3      	cmp	r3, r4
 800d820:	db01      	blt.n	800d826 <__sfputc_r+0x16>
 800d822:	290a      	cmp	r1, #10
 800d824:	d103      	bne.n	800d82e <__sfputc_r+0x1e>
 800d826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d82a:	f7fd bdad 	b.w	800b388 <__swbuf_r>
 800d82e:	6813      	ldr	r3, [r2, #0]
 800d830:	1c58      	adds	r0, r3, #1
 800d832:	6010      	str	r0, [r2, #0]
 800d834:	7019      	strb	r1, [r3, #0]
 800d836:	4608      	mov	r0, r1
 800d838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <__sfputs_r>:
 800d83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d840:	4606      	mov	r6, r0
 800d842:	460f      	mov	r7, r1
 800d844:	4614      	mov	r4, r2
 800d846:	18d5      	adds	r5, r2, r3
 800d848:	42ac      	cmp	r4, r5
 800d84a:	d101      	bne.n	800d850 <__sfputs_r+0x12>
 800d84c:	2000      	movs	r0, #0
 800d84e:	e007      	b.n	800d860 <__sfputs_r+0x22>
 800d850:	463a      	mov	r2, r7
 800d852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d856:	4630      	mov	r0, r6
 800d858:	f7ff ffda 	bl	800d810 <__sfputc_r>
 800d85c:	1c43      	adds	r3, r0, #1
 800d85e:	d1f3      	bne.n	800d848 <__sfputs_r+0xa>
 800d860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d864 <_vfiprintf_r>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	460c      	mov	r4, r1
 800d86a:	b09d      	sub	sp, #116	; 0x74
 800d86c:	4617      	mov	r7, r2
 800d86e:	461d      	mov	r5, r3
 800d870:	4606      	mov	r6, r0
 800d872:	b118      	cbz	r0, 800d87c <_vfiprintf_r+0x18>
 800d874:	6983      	ldr	r3, [r0, #24]
 800d876:	b90b      	cbnz	r3, 800d87c <_vfiprintf_r+0x18>
 800d878:	f7fe fd7a 	bl	800c370 <__sinit>
 800d87c:	4b7c      	ldr	r3, [pc, #496]	; (800da70 <_vfiprintf_r+0x20c>)
 800d87e:	429c      	cmp	r4, r3
 800d880:	d158      	bne.n	800d934 <_vfiprintf_r+0xd0>
 800d882:	6874      	ldr	r4, [r6, #4]
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	0718      	lsls	r0, r3, #28
 800d888:	d55e      	bpl.n	800d948 <_vfiprintf_r+0xe4>
 800d88a:	6923      	ldr	r3, [r4, #16]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d05b      	beq.n	800d948 <_vfiprintf_r+0xe4>
 800d890:	2300      	movs	r3, #0
 800d892:	9309      	str	r3, [sp, #36]	; 0x24
 800d894:	2320      	movs	r3, #32
 800d896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d89a:	2330      	movs	r3, #48	; 0x30
 800d89c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a0:	9503      	str	r5, [sp, #12]
 800d8a2:	f04f 0b01 	mov.w	fp, #1
 800d8a6:	46b8      	mov	r8, r7
 800d8a8:	4645      	mov	r5, r8
 800d8aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8ae:	b10b      	cbz	r3, 800d8b4 <_vfiprintf_r+0x50>
 800d8b0:	2b25      	cmp	r3, #37	; 0x25
 800d8b2:	d154      	bne.n	800d95e <_vfiprintf_r+0xfa>
 800d8b4:	ebb8 0a07 	subs.w	sl, r8, r7
 800d8b8:	d00b      	beq.n	800d8d2 <_vfiprintf_r+0x6e>
 800d8ba:	4653      	mov	r3, sl
 800d8bc:	463a      	mov	r2, r7
 800d8be:	4621      	mov	r1, r4
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	f7ff ffbc 	bl	800d83e <__sfputs_r>
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f000 80c2 	beq.w	800da50 <_vfiprintf_r+0x1ec>
 800d8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ce:	4453      	add	r3, sl
 800d8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d2:	f898 3000 	ldrb.w	r3, [r8]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 80ba 	beq.w	800da50 <_vfiprintf_r+0x1ec>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	9307      	str	r3, [sp, #28]
 800d8ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8ee:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f0:	46a8      	mov	r8, r5
 800d8f2:	2205      	movs	r2, #5
 800d8f4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d8f8:	485e      	ldr	r0, [pc, #376]	; (800da74 <_vfiprintf_r+0x210>)
 800d8fa:	f7f2 fc79 	bl	80001f0 <memchr>
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	bb78      	cbnz	r0, 800d962 <_vfiprintf_r+0xfe>
 800d902:	06d9      	lsls	r1, r3, #27
 800d904:	bf44      	itt	mi
 800d906:	2220      	movmi	r2, #32
 800d908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d90c:	071a      	lsls	r2, r3, #28
 800d90e:	bf44      	itt	mi
 800d910:	222b      	movmi	r2, #43	; 0x2b
 800d912:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d916:	782a      	ldrb	r2, [r5, #0]
 800d918:	2a2a      	cmp	r2, #42	; 0x2a
 800d91a:	d02a      	beq.n	800d972 <_vfiprintf_r+0x10e>
 800d91c:	9a07      	ldr	r2, [sp, #28]
 800d91e:	46a8      	mov	r8, r5
 800d920:	2000      	movs	r0, #0
 800d922:	250a      	movs	r5, #10
 800d924:	4641      	mov	r1, r8
 800d926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d92a:	3b30      	subs	r3, #48	; 0x30
 800d92c:	2b09      	cmp	r3, #9
 800d92e:	d969      	bls.n	800da04 <_vfiprintf_r+0x1a0>
 800d930:	b360      	cbz	r0, 800d98c <_vfiprintf_r+0x128>
 800d932:	e024      	b.n	800d97e <_vfiprintf_r+0x11a>
 800d934:	4b50      	ldr	r3, [pc, #320]	; (800da78 <_vfiprintf_r+0x214>)
 800d936:	429c      	cmp	r4, r3
 800d938:	d101      	bne.n	800d93e <_vfiprintf_r+0xda>
 800d93a:	68b4      	ldr	r4, [r6, #8]
 800d93c:	e7a2      	b.n	800d884 <_vfiprintf_r+0x20>
 800d93e:	4b4f      	ldr	r3, [pc, #316]	; (800da7c <_vfiprintf_r+0x218>)
 800d940:	429c      	cmp	r4, r3
 800d942:	bf08      	it	eq
 800d944:	68f4      	ldreq	r4, [r6, #12]
 800d946:	e79d      	b.n	800d884 <_vfiprintf_r+0x20>
 800d948:	4621      	mov	r1, r4
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7fd fd6e 	bl	800b42c <__swsetup_r>
 800d950:	2800      	cmp	r0, #0
 800d952:	d09d      	beq.n	800d890 <_vfiprintf_r+0x2c>
 800d954:	f04f 30ff 	mov.w	r0, #4294967295
 800d958:	b01d      	add	sp, #116	; 0x74
 800d95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95e:	46a8      	mov	r8, r5
 800d960:	e7a2      	b.n	800d8a8 <_vfiprintf_r+0x44>
 800d962:	4a44      	ldr	r2, [pc, #272]	; (800da74 <_vfiprintf_r+0x210>)
 800d964:	1a80      	subs	r0, r0, r2
 800d966:	fa0b f000 	lsl.w	r0, fp, r0
 800d96a:	4318      	orrs	r0, r3
 800d96c:	9004      	str	r0, [sp, #16]
 800d96e:	4645      	mov	r5, r8
 800d970:	e7be      	b.n	800d8f0 <_vfiprintf_r+0x8c>
 800d972:	9a03      	ldr	r2, [sp, #12]
 800d974:	1d11      	adds	r1, r2, #4
 800d976:	6812      	ldr	r2, [r2, #0]
 800d978:	9103      	str	r1, [sp, #12]
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	db01      	blt.n	800d982 <_vfiprintf_r+0x11e>
 800d97e:	9207      	str	r2, [sp, #28]
 800d980:	e004      	b.n	800d98c <_vfiprintf_r+0x128>
 800d982:	4252      	negs	r2, r2
 800d984:	f043 0302 	orr.w	r3, r3, #2
 800d988:	9207      	str	r2, [sp, #28]
 800d98a:	9304      	str	r3, [sp, #16]
 800d98c:	f898 3000 	ldrb.w	r3, [r8]
 800d990:	2b2e      	cmp	r3, #46	; 0x2e
 800d992:	d10e      	bne.n	800d9b2 <_vfiprintf_r+0x14e>
 800d994:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d998:	2b2a      	cmp	r3, #42	; 0x2a
 800d99a:	d138      	bne.n	800da0e <_vfiprintf_r+0x1aa>
 800d99c:	9b03      	ldr	r3, [sp, #12]
 800d99e:	1d1a      	adds	r2, r3, #4
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	9203      	str	r2, [sp, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	bfb8      	it	lt
 800d9a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9ac:	f108 0802 	add.w	r8, r8, #2
 800d9b0:	9305      	str	r3, [sp, #20]
 800d9b2:	4d33      	ldr	r5, [pc, #204]	; (800da80 <_vfiprintf_r+0x21c>)
 800d9b4:	f898 1000 	ldrb.w	r1, [r8]
 800d9b8:	2203      	movs	r2, #3
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f7f2 fc18 	bl	80001f0 <memchr>
 800d9c0:	b140      	cbz	r0, 800d9d4 <_vfiprintf_r+0x170>
 800d9c2:	2340      	movs	r3, #64	; 0x40
 800d9c4:	1b40      	subs	r0, r0, r5
 800d9c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d9ca:	9b04      	ldr	r3, [sp, #16]
 800d9cc:	4303      	orrs	r3, r0
 800d9ce:	f108 0801 	add.w	r8, r8, #1
 800d9d2:	9304      	str	r3, [sp, #16]
 800d9d4:	f898 1000 	ldrb.w	r1, [r8]
 800d9d8:	482a      	ldr	r0, [pc, #168]	; (800da84 <_vfiprintf_r+0x220>)
 800d9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9de:	2206      	movs	r2, #6
 800d9e0:	f108 0701 	add.w	r7, r8, #1
 800d9e4:	f7f2 fc04 	bl	80001f0 <memchr>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d037      	beq.n	800da5c <_vfiprintf_r+0x1f8>
 800d9ec:	4b26      	ldr	r3, [pc, #152]	; (800da88 <_vfiprintf_r+0x224>)
 800d9ee:	bb1b      	cbnz	r3, 800da38 <_vfiprintf_r+0x1d4>
 800d9f0:	9b03      	ldr	r3, [sp, #12]
 800d9f2:	3307      	adds	r3, #7
 800d9f4:	f023 0307 	bic.w	r3, r3, #7
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	9303      	str	r3, [sp, #12]
 800d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fe:	444b      	add	r3, r9
 800da00:	9309      	str	r3, [sp, #36]	; 0x24
 800da02:	e750      	b.n	800d8a6 <_vfiprintf_r+0x42>
 800da04:	fb05 3202 	mla	r2, r5, r2, r3
 800da08:	2001      	movs	r0, #1
 800da0a:	4688      	mov	r8, r1
 800da0c:	e78a      	b.n	800d924 <_vfiprintf_r+0xc0>
 800da0e:	2300      	movs	r3, #0
 800da10:	f108 0801 	add.w	r8, r8, #1
 800da14:	9305      	str	r3, [sp, #20]
 800da16:	4619      	mov	r1, r3
 800da18:	250a      	movs	r5, #10
 800da1a:	4640      	mov	r0, r8
 800da1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da20:	3a30      	subs	r2, #48	; 0x30
 800da22:	2a09      	cmp	r2, #9
 800da24:	d903      	bls.n	800da2e <_vfiprintf_r+0x1ca>
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0c3      	beq.n	800d9b2 <_vfiprintf_r+0x14e>
 800da2a:	9105      	str	r1, [sp, #20]
 800da2c:	e7c1      	b.n	800d9b2 <_vfiprintf_r+0x14e>
 800da2e:	fb05 2101 	mla	r1, r5, r1, r2
 800da32:	2301      	movs	r3, #1
 800da34:	4680      	mov	r8, r0
 800da36:	e7f0      	b.n	800da1a <_vfiprintf_r+0x1b6>
 800da38:	ab03      	add	r3, sp, #12
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	4622      	mov	r2, r4
 800da3e:	4b13      	ldr	r3, [pc, #76]	; (800da8c <_vfiprintf_r+0x228>)
 800da40:	a904      	add	r1, sp, #16
 800da42:	4630      	mov	r0, r6
 800da44:	f7fc f9ee 	bl	8009e24 <_printf_float>
 800da48:	f1b0 3fff 	cmp.w	r0, #4294967295
 800da4c:	4681      	mov	r9, r0
 800da4e:	d1d5      	bne.n	800d9fc <_vfiprintf_r+0x198>
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	065b      	lsls	r3, r3, #25
 800da54:	f53f af7e 	bmi.w	800d954 <_vfiprintf_r+0xf0>
 800da58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da5a:	e77d      	b.n	800d958 <_vfiprintf_r+0xf4>
 800da5c:	ab03      	add	r3, sp, #12
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	4622      	mov	r2, r4
 800da62:	4b0a      	ldr	r3, [pc, #40]	; (800da8c <_vfiprintf_r+0x228>)
 800da64:	a904      	add	r1, sp, #16
 800da66:	4630      	mov	r0, r6
 800da68:	f7fc fc92 	bl	800a390 <_printf_i>
 800da6c:	e7ec      	b.n	800da48 <_vfiprintf_r+0x1e4>
 800da6e:	bf00      	nop
 800da70:	0800e6e0 	.word	0x0800e6e0
 800da74:	0800e82c 	.word	0x0800e82c
 800da78:	0800e700 	.word	0x0800e700
 800da7c:	0800e6c0 	.word	0x0800e6c0
 800da80:	0800e832 	.word	0x0800e832
 800da84:	0800e836 	.word	0x0800e836
 800da88:	08009e25 	.word	0x08009e25
 800da8c:	0800d83f 	.word	0x0800d83f

0800da90 <_sbrk_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4c06      	ldr	r4, [pc, #24]	; (800daac <_sbrk_r+0x1c>)
 800da94:	2300      	movs	r3, #0
 800da96:	4605      	mov	r5, r0
 800da98:	4608      	mov	r0, r1
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	f7f3 ff56 	bl	800194c <_sbrk>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_sbrk_r+0x1a>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_sbrk_r+0x1a>
 800daa8:	602b      	str	r3, [r5, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	20001204 	.word	0x20001204

0800dab0 <__sread>:
 800dab0:	b510      	push	{r4, lr}
 800dab2:	460c      	mov	r4, r1
 800dab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab8:	f000 f8f4 	bl	800dca4 <_read_r>
 800dabc:	2800      	cmp	r0, #0
 800dabe:	bfab      	itete	ge
 800dac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dac2:	89a3      	ldrhlt	r3, [r4, #12]
 800dac4:	181b      	addge	r3, r3, r0
 800dac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800daca:	bfac      	ite	ge
 800dacc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dace:	81a3      	strhlt	r3, [r4, #12]
 800dad0:	bd10      	pop	{r4, pc}

0800dad2 <__swrite>:
 800dad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad6:	461f      	mov	r7, r3
 800dad8:	898b      	ldrh	r3, [r1, #12]
 800dada:	05db      	lsls	r3, r3, #23
 800dadc:	4605      	mov	r5, r0
 800dade:	460c      	mov	r4, r1
 800dae0:	4616      	mov	r6, r2
 800dae2:	d505      	bpl.n	800daf0 <__swrite+0x1e>
 800dae4:	2302      	movs	r3, #2
 800dae6:	2200      	movs	r2, #0
 800dae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daec:	f000 f886 	bl	800dbfc <_lseek_r>
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dafa:	81a3      	strh	r3, [r4, #12]
 800dafc:	4632      	mov	r2, r6
 800dafe:	463b      	mov	r3, r7
 800db00:	4628      	mov	r0, r5
 800db02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db06:	f000 b835 	b.w	800db74 <_write_r>

0800db0a <__sseek>:
 800db0a:	b510      	push	{r4, lr}
 800db0c:	460c      	mov	r4, r1
 800db0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db12:	f000 f873 	bl	800dbfc <_lseek_r>
 800db16:	1c43      	adds	r3, r0, #1
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	bf15      	itete	ne
 800db1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800db1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db26:	81a3      	strheq	r3, [r4, #12]
 800db28:	bf18      	it	ne
 800db2a:	81a3      	strhne	r3, [r4, #12]
 800db2c:	bd10      	pop	{r4, pc}

0800db2e <__sclose>:
 800db2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db32:	f000 b831 	b.w	800db98 <_close_r>

0800db36 <strncmp>:
 800db36:	b510      	push	{r4, lr}
 800db38:	b16a      	cbz	r2, 800db56 <strncmp+0x20>
 800db3a:	3901      	subs	r1, #1
 800db3c:	1884      	adds	r4, r0, r2
 800db3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800db42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db46:	4293      	cmp	r3, r2
 800db48:	d103      	bne.n	800db52 <strncmp+0x1c>
 800db4a:	42a0      	cmp	r0, r4
 800db4c:	d001      	beq.n	800db52 <strncmp+0x1c>
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1f5      	bne.n	800db3e <strncmp+0x8>
 800db52:	1a98      	subs	r0, r3, r2
 800db54:	bd10      	pop	{r4, pc}
 800db56:	4610      	mov	r0, r2
 800db58:	e7fc      	b.n	800db54 <strncmp+0x1e>

0800db5a <__ascii_wctomb>:
 800db5a:	b149      	cbz	r1, 800db70 <__ascii_wctomb+0x16>
 800db5c:	2aff      	cmp	r2, #255	; 0xff
 800db5e:	bf85      	ittet	hi
 800db60:	238a      	movhi	r3, #138	; 0x8a
 800db62:	6003      	strhi	r3, [r0, #0]
 800db64:	700a      	strbls	r2, [r1, #0]
 800db66:	f04f 30ff 	movhi.w	r0, #4294967295
 800db6a:	bf98      	it	ls
 800db6c:	2001      	movls	r0, #1
 800db6e:	4770      	bx	lr
 800db70:	4608      	mov	r0, r1
 800db72:	4770      	bx	lr

0800db74 <_write_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4c07      	ldr	r4, [pc, #28]	; (800db94 <_write_r+0x20>)
 800db78:	4605      	mov	r5, r0
 800db7a:	4608      	mov	r0, r1
 800db7c:	4611      	mov	r1, r2
 800db7e:	2200      	movs	r2, #0
 800db80:	6022      	str	r2, [r4, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	f7f3 fe91 	bl	80018aa <_write>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_write_r+0x1e>
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_write_r+0x1e>
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	20001204 	.word	0x20001204

0800db98 <_close_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4c06      	ldr	r4, [pc, #24]	; (800dbb4 <_close_r+0x1c>)
 800db9c:	2300      	movs	r3, #0
 800db9e:	4605      	mov	r5, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	f7f3 fe9d 	bl	80018e2 <_close>
 800dba8:	1c43      	adds	r3, r0, #1
 800dbaa:	d102      	bne.n	800dbb2 <_close_r+0x1a>
 800dbac:	6823      	ldr	r3, [r4, #0]
 800dbae:	b103      	cbz	r3, 800dbb2 <_close_r+0x1a>
 800dbb0:	602b      	str	r3, [r5, #0]
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	20001204 	.word	0x20001204

0800dbb8 <_fstat_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	4c07      	ldr	r4, [pc, #28]	; (800dbd8 <_fstat_r+0x20>)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	4608      	mov	r0, r1
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	f7f3 fe98 	bl	80018fa <_fstat>
 800dbca:	1c43      	adds	r3, r0, #1
 800dbcc:	d102      	bne.n	800dbd4 <_fstat_r+0x1c>
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	b103      	cbz	r3, 800dbd4 <_fstat_r+0x1c>
 800dbd2:	602b      	str	r3, [r5, #0]
 800dbd4:	bd38      	pop	{r3, r4, r5, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20001204 	.word	0x20001204

0800dbdc <_isatty_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4c06      	ldr	r4, [pc, #24]	; (800dbf8 <_isatty_r+0x1c>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4605      	mov	r5, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	6023      	str	r3, [r4, #0]
 800dbe8:	f7f3 fe97 	bl	800191a <_isatty>
 800dbec:	1c43      	adds	r3, r0, #1
 800dbee:	d102      	bne.n	800dbf6 <_isatty_r+0x1a>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	b103      	cbz	r3, 800dbf6 <_isatty_r+0x1a>
 800dbf4:	602b      	str	r3, [r5, #0]
 800dbf6:	bd38      	pop	{r3, r4, r5, pc}
 800dbf8:	20001204 	.word	0x20001204

0800dbfc <_lseek_r>:
 800dbfc:	b538      	push	{r3, r4, r5, lr}
 800dbfe:	4c07      	ldr	r4, [pc, #28]	; (800dc1c <_lseek_r+0x20>)
 800dc00:	4605      	mov	r5, r0
 800dc02:	4608      	mov	r0, r1
 800dc04:	4611      	mov	r1, r2
 800dc06:	2200      	movs	r2, #0
 800dc08:	6022      	str	r2, [r4, #0]
 800dc0a:	461a      	mov	r2, r3
 800dc0c:	f7f3 fe90 	bl	8001930 <_lseek>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d102      	bne.n	800dc1a <_lseek_r+0x1e>
 800dc14:	6823      	ldr	r3, [r4, #0]
 800dc16:	b103      	cbz	r3, 800dc1a <_lseek_r+0x1e>
 800dc18:	602b      	str	r3, [r5, #0]
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20001204 	.word	0x20001204

0800dc20 <memmove>:
 800dc20:	4288      	cmp	r0, r1
 800dc22:	b510      	push	{r4, lr}
 800dc24:	eb01 0302 	add.w	r3, r1, r2
 800dc28:	d807      	bhi.n	800dc3a <memmove+0x1a>
 800dc2a:	1e42      	subs	r2, r0, #1
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	d00a      	beq.n	800dc46 <memmove+0x26>
 800dc30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc34:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dc38:	e7f8      	b.n	800dc2c <memmove+0xc>
 800dc3a:	4283      	cmp	r3, r0
 800dc3c:	d9f5      	bls.n	800dc2a <memmove+0xa>
 800dc3e:	1881      	adds	r1, r0, r2
 800dc40:	1ad2      	subs	r2, r2, r3
 800dc42:	42d3      	cmn	r3, r2
 800dc44:	d100      	bne.n	800dc48 <memmove+0x28>
 800dc46:	bd10      	pop	{r4, pc}
 800dc48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dc50:	e7f7      	b.n	800dc42 <memmove+0x22>

0800dc52 <__malloc_lock>:
 800dc52:	4770      	bx	lr

0800dc54 <__malloc_unlock>:
 800dc54:	4770      	bx	lr

0800dc56 <_realloc_r>:
 800dc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc58:	4607      	mov	r7, r0
 800dc5a:	4614      	mov	r4, r2
 800dc5c:	460e      	mov	r6, r1
 800dc5e:	b921      	cbnz	r1, 800dc6a <_realloc_r+0x14>
 800dc60:	4611      	mov	r1, r2
 800dc62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc66:	f7ff bc27 	b.w	800d4b8 <_malloc_r>
 800dc6a:	b922      	cbnz	r2, 800dc76 <_realloc_r+0x20>
 800dc6c:	f7ff fbd6 	bl	800d41c <_free_r>
 800dc70:	4625      	mov	r5, r4
 800dc72:	4628      	mov	r0, r5
 800dc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc76:	f000 f827 	bl	800dcc8 <_malloc_usable_size_r>
 800dc7a:	42a0      	cmp	r0, r4
 800dc7c:	d20f      	bcs.n	800dc9e <_realloc_r+0x48>
 800dc7e:	4621      	mov	r1, r4
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7ff fc19 	bl	800d4b8 <_malloc_r>
 800dc86:	4605      	mov	r5, r0
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d0f2      	beq.n	800dc72 <_realloc_r+0x1c>
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4622      	mov	r2, r4
 800dc90:	f7fe ffac 	bl	800cbec <memcpy>
 800dc94:	4631      	mov	r1, r6
 800dc96:	4638      	mov	r0, r7
 800dc98:	f7ff fbc0 	bl	800d41c <_free_r>
 800dc9c:	e7e9      	b.n	800dc72 <_realloc_r+0x1c>
 800dc9e:	4635      	mov	r5, r6
 800dca0:	e7e7      	b.n	800dc72 <_realloc_r+0x1c>
	...

0800dca4 <_read_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4c07      	ldr	r4, [pc, #28]	; (800dcc4 <_read_r+0x20>)
 800dca8:	4605      	mov	r5, r0
 800dcaa:	4608      	mov	r0, r1
 800dcac:	4611      	mov	r1, r2
 800dcae:	2200      	movs	r2, #0
 800dcb0:	6022      	str	r2, [r4, #0]
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	f7f3 fddc 	bl	8001870 <_read>
 800dcb8:	1c43      	adds	r3, r0, #1
 800dcba:	d102      	bne.n	800dcc2 <_read_r+0x1e>
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	b103      	cbz	r3, 800dcc2 <_read_r+0x1e>
 800dcc0:	602b      	str	r3, [r5, #0]
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	20001204 	.word	0x20001204

0800dcc8 <_malloc_usable_size_r>:
 800dcc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dccc:	1f18      	subs	r0, r3, #4
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bfbc      	itt	lt
 800dcd2:	580b      	ldrlt	r3, [r1, r0]
 800dcd4:	18c0      	addlt	r0, r0, r3
 800dcd6:	4770      	bx	lr

0800dcd8 <_init>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	bf00      	nop
 800dcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcde:	bc08      	pop	{r3}
 800dce0:	469e      	mov	lr, r3
 800dce2:	4770      	bx	lr

0800dce4 <_fini>:
 800dce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce6:	bf00      	nop
 800dce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcea:	bc08      	pop	{r3}
 800dcec:	469e      	mov	lr, r3
 800dcee:	4770      	bx	lr
