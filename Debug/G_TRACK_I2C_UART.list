
G_TRACK_I2C_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e314  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb4  0800e4b8  0800e4b8  0001e4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f46c  0800f46c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f46c  0800f46c  0001f46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f474  0800f474  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f474  0800f474  0001f474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f478  0800f478  0001f478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800f47c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c20  200001e8  0800f664  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e08  0800f664  00020e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9cd  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fe  00000000  00000000  0003bbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00040a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eb0  00000000  00000000  00041ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184ff  00000000  00000000  0005bd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c5b  00000000  00000000  00074277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108ed2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000727c  00000000  00000000  00108f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e49c 	.word	0x0800e49c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800e49c 	.word	0x0800e49c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b9a4 	b.w	8000f58 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	468c      	mov	ip, r1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8083 	bne.w	8000daa <__udivmoddi4+0x116>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	4617      	mov	r7, r2
 8000ca8:	d947      	bls.n	8000d3a <__udivmoddi4+0xa6>
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	b142      	cbz	r2, 8000cc2 <__udivmoddi4+0x2e>
 8000cb0:	f1c2 0020 	rsb	r0, r2, #32
 8000cb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	4097      	lsls	r7, r2
 8000cbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cc6:	0c23      	lsrs	r3, r4, #16
 8000cc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000ccc:	fa1f fe87 	uxth.w	lr, r7
 8000cd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x60>
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce6:	f080 8119 	bcs.w	8000f1c <__udivmoddi4+0x288>
 8000cea:	4299      	cmp	r1, r3
 8000cec:	f240 8116 	bls.w	8000f1c <__udivmoddi4+0x288>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	443b      	add	r3, r7
 8000cf4:	1a5b      	subs	r3, r3, r1
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x8c>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	f080 8105 	bcs.w	8000f20 <__udivmoddi4+0x28c>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f240 8102 	bls.w	8000f20 <__udivmoddi4+0x28c>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	443c      	add	r4, r7
 8000d20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d24:	eba4 040e 	sub.w	r4, r4, lr
 8000d28:	2600      	movs	r6, #0
 8000d2a:	b11d      	cbz	r5, 8000d34 <__udivmoddi4+0xa0>
 8000d2c:	40d4      	lsrs	r4, r2
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e9c5 4300 	strd	r4, r3, [r5]
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xaa>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d150      	bne.n	8000de8 <__udivmoddi4+0x154>
 8000d46:	1bcb      	subs	r3, r1, r7
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	2601      	movs	r6, #1
 8000d52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d56:	0c21      	lsrs	r1, r4, #16
 8000d58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d60:	fb08 f30c 	mul.w	r3, r8, ip
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xe4>
 8000d68:	1879      	adds	r1, r7, r1
 8000d6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0xe2>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	f200 80e9 	bhi.w	8000f48 <__udivmoddi4+0x2b4>
 8000d76:	4684      	mov	ip, r0
 8000d78:	1ac9      	subs	r1, r1, r3
 8000d7a:	b2a3      	uxth	r3, r4
 8000d7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d88:	fb08 f800 	mul.w	r8, r8, r0
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x10c>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x10a>
 8000d98:	45a0      	cmp	r8, r4
 8000d9a:	f200 80d9 	bhi.w	8000f50 <__udivmoddi4+0x2bc>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	eba4 0408 	sub.w	r4, r4, r8
 8000da4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da8:	e7bf      	b.n	8000d2a <__udivmoddi4+0x96>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x12e>
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	f000 80b1 	beq.w	8000f16 <__udivmoddi4+0x282>
 8000db4:	2600      	movs	r6, #0
 8000db6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dba:	4630      	mov	r0, r6
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	fab3 f683 	clz	r6, r3
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d14a      	bne.n	8000e60 <__udivmoddi4+0x1cc>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0x140>
 8000dce:	4282      	cmp	r2, r0
 8000dd0:	f200 80b8 	bhi.w	8000f44 <__udivmoddi4+0x2b0>
 8000dd4:	1a84      	subs	r4, r0, r2
 8000dd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	468c      	mov	ip, r1
 8000dde:	2d00      	cmp	r5, #0
 8000de0:	d0a8      	beq.n	8000d34 <__udivmoddi4+0xa0>
 8000de2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f603 	lsr.w	r6, r0, r3
 8000df0:	4097      	lsls	r7, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfa:	40d9      	lsrs	r1, r3
 8000dfc:	4330      	orrs	r0, r6
 8000dfe:	0c03      	lsrs	r3, r0, #16
 8000e00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e04:	fa1f f887 	uxth.w	r8, r7
 8000e08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e10:	fb06 f108 	mul.w	r1, r6, r8
 8000e14:	4299      	cmp	r1, r3
 8000e16:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1a:	d909      	bls.n	8000e30 <__udivmoddi4+0x19c>
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e22:	f080 808d 	bcs.w	8000f40 <__udivmoddi4+0x2ac>
 8000e26:	4299      	cmp	r1, r3
 8000e28:	f240 808a 	bls.w	8000f40 <__udivmoddi4+0x2ac>
 8000e2c:	3e02      	subs	r6, #2
 8000e2e:	443b      	add	r3, r7
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b281      	uxth	r1, r0
 8000e34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb00 f308 	mul.w	r3, r0, r8
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x1c4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4e:	d273      	bcs.n	8000f38 <__udivmoddi4+0x2a4>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d971      	bls.n	8000f38 <__udivmoddi4+0x2a4>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4439      	add	r1, r7
 8000e58:	1acb      	subs	r3, r1, r3
 8000e5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e5e:	e778      	b.n	8000d52 <__udivmoddi4+0xbe>
 8000e60:	f1c6 0c20 	rsb	ip, r6, #32
 8000e64:	fa03 f406 	lsl.w	r4, r3, r6
 8000e68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e6c:	431c      	orrs	r4, r3
 8000e6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e72:	fa01 f306 	lsl.w	r3, r1, r6
 8000e76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	0c3b      	lsrs	r3, r7, #16
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fa1f f884 	uxth.w	r8, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e92:	fb09 fa08 	mul.w	sl, r9, r8
 8000e96:	458a      	cmp	sl, r1
 8000e98:	fa02 f206 	lsl.w	r2, r2, r6
 8000e9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x220>
 8000ea2:	1861      	adds	r1, r4, r1
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d248      	bcs.n	8000f3c <__udivmoddi4+0x2a8>
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	d946      	bls.n	8000f3c <__udivmoddi4+0x2a8>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	4421      	add	r1, r4
 8000eb4:	eba1 010a 	sub.w	r1, r1, sl
 8000eb8:	b2bf      	uxth	r7, r7
 8000eba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ebe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x24a>
 8000ece:	19e7      	adds	r7, r4, r7
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed4:	d22e      	bcs.n	8000f34 <__udivmoddi4+0x2a0>
 8000ed6:	45b8      	cmp	r8, r7
 8000ed8:	d92c      	bls.n	8000f34 <__udivmoddi4+0x2a0>
 8000eda:	3802      	subs	r0, #2
 8000edc:	4427      	add	r7, r4
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba7 0708 	sub.w	r7, r7, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454f      	cmp	r7, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	4649      	mov	r1, r9
 8000ef0:	d31a      	bcc.n	8000f28 <__udivmoddi4+0x294>
 8000ef2:	d017      	beq.n	8000f24 <__udivmoddi4+0x290>
 8000ef4:	b15d      	cbz	r5, 8000f0e <__udivmoddi4+0x27a>
 8000ef6:	ebb3 020e 	subs.w	r2, r3, lr
 8000efa:	eb67 0701 	sbc.w	r7, r7, r1
 8000efe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f02:	40f2      	lsrs	r2, r6
 8000f04:	ea4c 0202 	orr.w	r2, ip, r2
 8000f08:	40f7      	lsrs	r7, r6
 8000f0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f0e:	2600      	movs	r6, #0
 8000f10:	4631      	mov	r1, r6
 8000f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f16:	462e      	mov	r6, r5
 8000f18:	4628      	mov	r0, r5
 8000f1a:	e70b      	b.n	8000d34 <__udivmoddi4+0xa0>
 8000f1c:	4606      	mov	r6, r0
 8000f1e:	e6e9      	b.n	8000cf4 <__udivmoddi4+0x60>
 8000f20:	4618      	mov	r0, r3
 8000f22:	e6fd      	b.n	8000d20 <__udivmoddi4+0x8c>
 8000f24:	4543      	cmp	r3, r8
 8000f26:	d2e5      	bcs.n	8000ef4 <__udivmoddi4+0x260>
 8000f28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f30:	3801      	subs	r0, #1
 8000f32:	e7df      	b.n	8000ef4 <__udivmoddi4+0x260>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e7d2      	b.n	8000ede <__udivmoddi4+0x24a>
 8000f38:	4660      	mov	r0, ip
 8000f3a:	e78d      	b.n	8000e58 <__udivmoddi4+0x1c4>
 8000f3c:	4681      	mov	r9, r0
 8000f3e:	e7b9      	b.n	8000eb4 <__udivmoddi4+0x220>
 8000f40:	4666      	mov	r6, ip
 8000f42:	e775      	b.n	8000e30 <__udivmoddi4+0x19c>
 8000f44:	4630      	mov	r0, r6
 8000f46:	e74a      	b.n	8000dde <__udivmoddi4+0x14a>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	4439      	add	r1, r7
 8000f4e:	e713      	b.n	8000d78 <__udivmoddi4+0xe4>
 8000f50:	3802      	subs	r0, #2
 8000f52:	443c      	add	r4, r7
 8000f54:	e724      	b.n	8000da0 <__udivmoddi4+0x10c>
 8000f56:	bf00      	nop

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNU__C */

PUTCHAR_PROTOTYPE
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <__io_putchar+0x20>)
 8000f6e:	f004 fba2 	bl	80056b6 <HAL_UART_Transmit>

	return ch;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000d0c 	.word	0x20000d0c

08000f80 <MQTT_Open_Connect>:

L76 g_test_L76;

/* MQTT Open Contact */
response_t MQTT_Open_Connect(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	g_flag = RESPONSE_ERR;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	/*wait to open network port 8883*/
	while(g_flag == RESPONSE_ERR)
 8000f8a:	e009      	b.n	8000fa0 <MQTT_Open_Connect+0x20>
	{
			#if TEST_MQTT_SSL == 1
			g_flag = MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 8883);
 8000f8c:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8000f90:	491c      	ldr	r1, [pc, #112]	; (8001004 <MQTT_Open_Connect+0x84>)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f005 fe0a 	bl	8006bac <MQTT_Open>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000f9e:	701a      	strb	r2, [r3, #0]
	while(g_flag == RESPONSE_ERR)
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f1      	beq.n	8000f8c <MQTT_Open_Connect+0xc>
			#else
			g_flag = MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 1883);
			#endif
	}
	g_mqtt_isOn = ON;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MQTT_Open_Connect+0x88>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]

	/* Wait to connect to broker*/
	g_flag = RESPONSE_ERR;
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
	g_flag = MQTT_Connect(0, (uint8_t*)"quang", (uint8_t*)"qn052289@gmail.com", (uint8_t*)"182739");
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MQTT_Open_Connect+0x8c>)
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <MQTT_Open_Connect+0x90>)
 8000fb8:	4916      	ldr	r1, [pc, #88]	; (8001014 <MQTT_Open_Connect+0x94>)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f005 feba 	bl	8006d34 <MQTT_Connect>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000fc6:	701a      	strb	r2, [r3, #0]
	while(g_flag != RESPONSE_OK)
 8000fc8:	e00f      	b.n	8000fea <MQTT_Open_Connect+0x6a>
	{
			/* Reopen network and reconnect */
			#if TEST_MQTT_SSL == 1
			MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 8883);
 8000fca:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <MQTT_Open_Connect+0x84>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f005 fdeb 	bl	8006bac <MQTT_Open>
			#else
			MQTT_Open(0, (uint8_t*)"test.mosquitto.org", 1883);
			#endif
			g_flag = MQTT_Connect(0, (uint8_t*)"quang", (uint8_t*)"qn052289@gmail.com", (uint8_t*)"182739");
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MQTT_Open_Connect+0x8c>)
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <MQTT_Open_Connect+0x90>)
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <MQTT_Open_Connect+0x94>)
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f005 fea9 	bl	8006d34 <MQTT_Connect>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	while(g_flag != RESPONSE_OK)
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d1eb      	bne.n	8000fca <MQTT_Open_Connect+0x4a>
	}
	g_flag = RESPONSE_ERR;
 8000ff2:	4b03      	ldr	r3, [pc, #12]	; (8001000 <MQTT_Open_Connect+0x80>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	return RESPONSE_OK;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000452 	.word	0x20000452
 8001004:	0800e5e8 	.word	0x0800e5e8
 8001008:	20000658 	.word	0x20000658
 800100c:	0800e5fc 	.word	0x0800e5fc
 8001010:	0800e604 	.word	0x0800e604
 8001014:	0800e618 	.word	0x0800e618

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0b2      	sub	sp, #200	; 0xc8
 800101c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
	char test_GNGGA[100] = {0};
 800101e:	2300      	movs	r3, #0
 8001020:	667b      	str	r3, [r7, #100]	; 0x64
 8001022:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001026:	2260      	movs	r2, #96	; 0x60
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f008 fffc 	bl	800a028 <memset>
	char test_GNRMC[100] = {0};
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2260      	movs	r2, #96	; 0x60
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f008 fff4 	bl	800a028 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001040:	f001 f914 	bl	800226c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001044:	f000 f8ae 	bl	80011a4 <SystemClock_Config>

  	/* USER CODE BEGIN SysInit */
    g_test_L76.u8Day = 10;
 8001048:	4b44      	ldr	r3, [pc, #272]	; (800115c <main+0x144>)
 800104a:	220a      	movs	r2, #10
 800104c:	741a      	strb	r2, [r3, #16]
    g_test_L76.u8Hour = 0;
 800104e:	4b43      	ldr	r3, [pc, #268]	; (800115c <main+0x144>)
 8001050:	2200      	movs	r2, #0
 8001052:	751a      	strb	r2, [r3, #20]
    g_test_L76.u8Minute = 0;
 8001054:	4b41      	ldr	r3, [pc, #260]	; (800115c <main+0x144>)
 8001056:	2200      	movs	r2, #0
 8001058:	755a      	strb	r2, [r3, #21]
    g_test_L76.u8Month = 0;
 800105a:	4b40      	ldr	r3, [pc, #256]	; (800115c <main+0x144>)
 800105c:	2200      	movs	r2, #0
 800105e:	745a      	strb	r2, [r3, #17]
    g_test_L76.u8Second = 0;
 8001060:	4b3e      	ldr	r3, [pc, #248]	; (800115c <main+0x144>)
 8001062:	2200      	movs	r2, #0
 8001064:	759a      	strb	r2, [r3, #22]
    g_test_L76.u16Year = 2000;
 8001066:	4b3d      	ldr	r3, [pc, #244]	; (800115c <main+0x144>)
 8001068:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800106c:	825a      	strh	r2, [r3, #18]
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800106e:	f000 fa09 	bl	8001484 <MX_GPIO_Init>
    MX_I2C1_Init();
 8001072:	f000 f901 	bl	8001278 <MX_I2C1_Init>
    MX_USART2_UART_Init();
 8001076:	f000 f9db 	bl	8001430 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 800107a:	f000 f9af 	bl	80013dc <MX_USART1_UART_Init>
    MX_SPI2_Init();
 800107e:	f000 f929 	bl	80012d4 <MX_SPI2_Init>
    MX_TIM3_Init();
 8001082:	f000 f95d 	bl	8001340 <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */

    /* Acce init */
    g_u8Test = SC7A20_Init();
 8001086:	f008 fedb 	bl	8009e40 <SC7A20_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <main+0x148>)
 8001090:	701a      	strb	r2, [r3, #0]

    /* Flash memory init */
    Flash_Init();
 8001092:	f000 fdad 	bl	8001bf0 <Flash_Init>

    HAL_Delay(500);
 8001096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109a:	f001 f959 	bl	8002350 <HAL_Delay>

    /* LTE module Init */
    LTE_Init();
 800109e:	f000 fd71 	bl	8001b84 <LTE_Init>
		/*Test Pub data*/
		MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", 5, (uint8_t*)"12345");
	#endif

	/* Enable the power of GPS module */
	gps_power_EnOrDi(ENABLE);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f008 feb2 	bl	8009e0c <gps_power_EnOrDi>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 80010a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ac:	492d      	ldr	r1, [pc, #180]	; (8001164 <main+0x14c>)
 80010ae:	482e      	ldr	r0, [pc, #184]	; (8001168 <main+0x150>)
 80010b0:	f004 fb9a 	bl	80057e8 <HAL_UART_Receive_IT>


	/* Print log to indicate that we initialize the program */
	printf("************GTRACK STM32 PROGRAM*************\r\n");
 80010b4:	482d      	ldr	r0, [pc, #180]	; (800116c <main+0x154>)
 80010b6:	f009 fcaf 	bl	800aa18 <puts>

    	/* USER CODE BEGIN 3 */
	#if (TEST_GPS == 1)

		/* Check whether the inmotion state lasts 5 minutes or not */
		if (((HAL_GetTick() - g_u32CurrentTime) > TIME_5MINUTE) && (g_bIsSetGPS == true))
 80010ba:	f001 f93d 	bl	8002338 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <main+0x158>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <main+0x15c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d90f      	bls.n	80010ec <main+0xd4>
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <main+0x160>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <main+0xd4>
		{
			g_bIsInMotion = true;
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <main+0x164>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
			printf("!!!INMOTION DETECTION!!!\r\n");
 80010da:	4829      	ldr	r0, [pc, #164]	; (8001180 <main+0x168>)
 80010dc:	f009 fc9c 	bl	800aa18 <puts>
			g_bIsSetGPS = false;
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <main+0x160>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
			g_bIsMotion = false;
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <main+0x16c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
		}

		SC7A20_coordinate_read(&g_testXYZ);							/* Debug purpose */
 80010ec:	4826      	ldr	r0, [pc, #152]	; (8001188 <main+0x170>)
 80010ee:	f008 fed5 	bl	8009e9c <SC7A20_coordinate_read>
		g_u8ReceiveTest = SC7A20_read(SC7A20_ADDR_INT1_SOURCE);  	/* Debug purpose */
 80010f2:	2031      	movs	r0, #49	; 0x31
 80010f4:	f008 ff2c 	bl	8009f50 <SC7A20_read>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <main+0x174>)
 80010fe:	701a      	strb	r2, [r3, #0]

		/* Motion detected after stop mode */
		if(g_bIsMotion && g_bIsStop)
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <main+0x16c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <main+0xfc>
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <main+0x178>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <main+0xfc>
		{
			Wakeup_CallBack();
 8001110:	f000 fcac 	bl	8001a6c <Wakeup_CallBack>
		}

		/* If the motion is detected, the GPS will get data and then publish the data to MQTT server */
		if(g_bIsSetGPS)
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <main+0x160>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01c      	beq.n	8001156 <main+0x13e>
		{
			/* Ensure that the power of GPS module is turned on */
			gps_power_EnOrDi(ENABLE);
 800111c:	2001      	movs	r0, #1
 800111e:	f008 fe75 	bl	8009e0c <gps_power_EnOrDi>

			printf("\r\n****START THE CONVERSION******\r\n\n");
 8001122:	481c      	ldr	r0, [pc, #112]	; (8001194 <main+0x17c>)
 8001124:	f009 fc78 	bl	800aa18 <puts>

			/* 2 strings to split the GNGAA from the NMEA sent from the Quectel L76 LB */
			printf("%s\r\n\n", g_rxBuffer);
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <main+0x14c>)
 800112a:	481b      	ldr	r0, [pc, #108]	; (8001198 <main+0x180>)
 800112c:	f009 fbee 	bl	800a90c <iprintf>
			printf("%d\r\n\n", strlen(g_rxBuffer));
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <main+0x14c>)
 8001132:	f7ff f855 	bl	80001e0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	4619      	mov	r1, r3
 800113a:	4818      	ldr	r0, [pc, #96]	; (800119c <main+0x184>)
 800113c:	f009 fbe6 	bl	800a90c <iprintf>
			gps_read(g_testBuffer, &g_test_L76, test_GNGGA, test_GNRMC);
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <main+0x188>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	463b      	mov	r3, r7
 8001146:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800114a:	4904      	ldr	r1, [pc, #16]	; (800115c <main+0x144>)
 800114c:	f008 f95c 	bl	8009408 <gps_read>

			/* Write to Flash, Read from Flash and then publish the infos to MQTT serser */
			FlashMQTT_WriteRead();
 8001150:	f000 fa88 	bl	8001664 <FlashMQTT_WriteRead>
 8001154:	e7b1      	b.n	80010ba <main+0xa2>
		}
		else					/* InMotion status */
		{
			Stop_Callback();
 8001156:	f000 fcef 	bl	8001b38 <Stop_Callback>
		if (((HAL_GetTick() - g_u32CurrentTime) > TIME_5MINUTE) && (g_bIsSetGPS == true))
 800115a:	e7ae      	b.n	80010ba <main+0xa2>
 800115c:	20000d80 	.word	0x20000d80
 8001160:	20000000 	.word	0x20000000
 8001164:	20000830 	.word	0x20000830
 8001168:	20000d98 	.word	0x20000d98
 800116c:	0800e620 	.word	0x0800e620
 8001170:	2000020c 	.word	0x2000020c
 8001174:	000493e0 	.word	0x000493e0
 8001178:	20000208 	.word	0x20000208
 800117c:	20000207 	.word	0x20000207
 8001180:	0800e650 	.word	0x0800e650
 8001184:	20000206 	.word	0x20000206
 8001188:	20000c70 	.word	0x20000c70
 800118c:	20000204 	.word	0x20000204
 8001190:	20000209 	.word	0x20000209
 8001194:	0800e66c 	.word	0x0800e66c
 8001198:	0800e690 	.word	0x0800e690
 800119c:	0800e698 	.word	0x0800e698
 80011a0:	20000004 	.word	0x20000004

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2230      	movs	r2, #48	; 0x30
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f008 ff38 	bl	800a028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <SystemClock_Config+0xcc>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f0:	4a20      	ldr	r2, [pc, #128]	; (8001274 <SystemClock_Config+0xd0>)
 80011f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001218:	2308      	movs	r3, #8
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800121c:	2354      	movs	r3, #84	; 0x54
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fdc3 	bl	8003db8 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001238:	f000 fce8 	bl	8001c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2102      	movs	r1, #2
 8001258:	4618      	mov	r0, r3
 800125a:	f003 f81d 	bl	8004298 <HAL_RCC_ClockConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001264:	f000 fcd2 	bl	8001c0c <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3750      	adds	r7, #80	; 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f001 fdbd 	bl	8002e34 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fca4 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000c78 	.word	0x20000c78
 80012cc:	40005400 	.word	0x40005400
 80012d0:	00061a80 	.word	0x00061a80

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_SPI2_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <MX_SPI2_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_SPI2_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI2_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_SPI2_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI2_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_SPI2_Init+0x64>)
 8001326:	f003 f987 	bl	8004638 <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fc6c 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000c18 	.word	0x20000c18
 800133c:	40003800 	.word	0x40003800

08001340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM3_Init+0x94>)
 800135e:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <MX_TIM3_Init+0x98>)
 8001360:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_TIM3_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_TIM3_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM3_Init+0x94>)
 8001370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001374:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_TIM3_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_TIM3_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001382:	4814      	ldr	r0, [pc, #80]	; (80013d4 <MX_TIM3_Init+0x94>)
 8001384:	f003 feac 	bl	80050e0 <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800138e:	f000 fc3d 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4619      	mov	r1, r3
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_TIM3_Init+0x94>)
 80013a0:	f003 fec9 	bl	8005136 <HAL_TIM_ConfigClockSource>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fc2f 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_TIM3_Init+0x94>)
 80013bc:	f004 f8c0 	bl	8005540 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013c6:	f000 fc21 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000ccc 	.word	0x20000ccc
 80013d8:	40000400 	.word	0x40000400

080013dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_USART1_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001414:	f004 f902 	bl	800561c <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f000 fbf5 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000d0c 	.word	0x20000d0c
 800142c:	40011000 	.word	0x40011000

08001430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART2_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800143c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001468:	f004 f8d8 	bl	800561c <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 fbcb 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000d98 	.word	0x20000d98
 8001480:	40004400 	.word	0x40004400

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a39      	ldr	r2, [pc, #228]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <MX_GPIO_Init+0x13c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2190      	movs	r1, #144	; 0x90
 80014f2:	4834      	ldr	r0, [pc, #208]	; (80015c4 <MX_GPIO_Init+0x140>)
 80014f4:	f001 fc6c 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|WAKEUP_CTRL_Pin|RESET_CTRL_Pin|PWRKEY_CTRL_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f241 0138 	movw	r1, #4152	; 0x1038
 80014fe:	4832      	ldr	r0, [pc, #200]	; (80015c8 <MX_GPIO_Init+0x144>)
 8001500:	f001 fc66 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150a:	4830      	ldr	r0, [pc, #192]	; (80015cc <MX_GPIO_Init+0x148>)
 800150c:	f001 fc60 	bl	8002dd0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001516:	482d      	ldr	r0, [pc, #180]	; (80015cc <MX_GPIO_Init+0x148>)
 8001518:	f001 fc5a 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800151c:	2301      	movs	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_GPIO_Init+0x14c>)
 8001522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	4619      	mov	r1, r3
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <MX_GPIO_Init+0x140>)
 8001530:	f001 f9e6 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001534:	2390      	movs	r3, #144	; 0x90
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	4619      	mov	r1, r3
 800154a:	481e      	ldr	r0, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x140>)
 800154c:	f001 f9d8 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|WAKEUP_CTRL_Pin|PWRKEY_CTRL_Pin;
 8001550:	f241 0328 	movw	r3, #4136	; 0x1028
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4619      	mov	r1, r3
 8001568:	4817      	ldr	r0, [pc, #92]	; (80015c8 <MX_GPIO_Init+0x144>)
 800156a:	f001 f9c9 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800156e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4619      	mov	r1, r3
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <MX_GPIO_Init+0x148>)
 8001588:	f001 f9ba 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_CTRL_Pin */
  GPIO_InitStruct.Pin = RESET_CTRL_Pin;
 800158c:	2310      	movs	r3, #16
 800158e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001590:	2311      	movs	r3, #17
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_CTRL_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <MX_GPIO_Init+0x144>)
 80015a4:	f001 f9ac 	bl	8002900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2006      	movs	r0, #6
 80015ae:	f000 ffee 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015b2:	2006      	movs	r0, #6
 80015b4:	f001 f807 	bl	80025c6 <HAL_NVIC_EnableIRQ>

}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	10310000 	.word	0x10310000

080015d4 <LTE_Disable>:

/* USER CODE BEGIN 4 */

static void LTE_Disable(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PWR_EN_PORT, PWR_EN_PIN, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015de:	4802      	ldr	r0, [pc, #8]	; (80015e8 <LTE_Disable+0x14>)
 80015e0:	f001 fbf6 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40020800 	.word	0x40020800

080015ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 80015f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f8:	4903      	ldr	r1, [pc, #12]	; (8001608 <HAL_UART_RxCpltCallback+0x1c>)
 80015fa:	4804      	ldr	r0, [pc, #16]	; (800160c <HAL_UART_RxCpltCallback+0x20>)
 80015fc:	f004 f8f4 	bl	80057e8 <HAL_UART_Receive_IT>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000830 	.word	0x20000830
 800160c:	20000d98 	.word	0x20000d98

08001610 <softUART_DeInit>:

static void softUART_DeInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(UART_EMUL_RX_PORT, UART_EMUL_RX_PIN);
 8001614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <softUART_DeInit+0x14>)
 800161a:	f001 faf5 	bl	8002c08 <HAL_GPIO_DeInit>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020000 	.word	0x40020000

08001628 <softUART_ReInit>:


static void softUART_ReInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef   GPIO_InitStruct;

	/* Configure GPIOC for UART Emulation Rx */
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <softUART_ReInit+0x34>)
 8001630:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pin  = UART_EMUL_RX_PIN;
 8001632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001636:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(UART_EMUL_RX_PORT, &GPIO_InitStruct);
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <softUART_ReInit+0x38>)
 800163e:	f001 f95f 	bl	8002900 <HAL_GPIO_Init>

	/*##-2- Enable NVIC for line Rx  #################################*/
	/* Enable and set EXTI Line Interrupt to the highest priority */
	HAL_NVIC_SetPriority(UART_EMUL_EXTI_IRQ, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2028      	movs	r0, #40	; 0x28
 8001648:	f000 ffa1 	bl	800258e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(UART_EMUL_EXTI_IRQ);
 800164c:	2028      	movs	r0, #40	; 0x28
 800164e:	f000 ffba 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	10210000 	.word	0x10210000
 8001660:	40020000 	.word	0x40020000

08001664 <FlashMQTT_WriteRead>:

static void FlashMQTT_WriteRead(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af04      	add	r7, sp, #16
	g_gps_data.long_t.dLongRaw = g_test_L76.dLongtitude;
 800166a:	4b65      	ldr	r3, [pc, #404]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	4964      	ldr	r1, [pc, #400]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001672:	e9c1 2300 	strd	r2, r3, [r1]
	g_gps_data.lat_t.dLatRaw = g_test_L76.dLattitude;
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 8001678:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800167c:	4961      	ldr	r1, [pc, #388]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 800167e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	g_gps_data.u8Month = g_test_L76.u8Month;
 8001682:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 8001684:	7c5a      	ldrb	r2, [r3, #17]
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001688:	745a      	strb	r2, [r3, #17]
	g_gps_data.u8Day = g_test_L76.u8Day;
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 800168c:	7c1a      	ldrb	r2, [r3, #16]
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001690:	741a      	strb	r2, [r3, #16]
	g_gps_data.year_t.u16YearRaw = g_test_L76.u16Year;
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 8001694:	8a5a      	ldrh	r2, [r3, #18]
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001698:	825a      	strh	r2, [r3, #18]
	g_gps_data.u8Hour = g_test_L76.u8Hour;
 800169a:	4b59      	ldr	r3, [pc, #356]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 800169c:	7d1a      	ldrb	r2, [r3, #20]
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80016a0:	751a      	strb	r2, [r3, #20]
	g_gps_data.u8Minute = g_test_L76.u8Minute;
 80016a2:	4b57      	ldr	r3, [pc, #348]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 80016a4:	7d5a      	ldrb	r2, [r3, #21]
 80016a6:	4b57      	ldr	r3, [pc, #348]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80016a8:	755a      	strb	r2, [r3, #21]
	g_gps_data.u8Second = g_test_L76.u8Second;
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <FlashMQTT_WriteRead+0x19c>)
 80016ac:	7d9a      	ldrb	r2, [r3, #22]
 80016ae:	4b55      	ldr	r3, [pc, #340]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80016b0:	759a      	strb	r2, [r3, #22]

	printf("\n\n\rWrite data\r\n");
 80016b2:	4855      	ldr	r0, [pc, #340]	; (8001808 <FlashMQTT_WriteRead+0x1a4>)
 80016b4:	f009 f9b0 	bl	800aa18 <puts>

	for (uint8_t i = 0; i < 8; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	e008      	b.n	80016d0 <FlashMQTT_WriteRead+0x6c>
	{
			g_write_buffer[i] = g_gps_data.long_t.longBytes[i];
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4950      	ldr	r1, [pc, #320]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80016c4:	5c89      	ldrb	r1, [r1, r2]
 80016c6:	4a51      	ldr	r2, [pc, #324]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 80016c8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	3301      	adds	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d9f3      	bls.n	80016be <FlashMQTT_WriteRead+0x5a>
	}
	for (uint8_t i = 8; i < 16; i++)
 80016d6:	2308      	movs	r3, #8
 80016d8:	71bb      	strb	r3, [r7, #6]
 80016da:	e00b      	b.n	80016f4 <FlashMQTT_WriteRead+0x90>
	{
			g_write_buffer[i] = g_gps_data.lat_t.latBytes[i - 8];
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	f1a3 0208 	sub.w	r2, r3, #8
 80016e2:	79bb      	ldrb	r3, [r7, #6]
 80016e4:	4947      	ldr	r1, [pc, #284]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80016e6:	440a      	add	r2, r1
 80016e8:	7a11      	ldrb	r1, [r2, #8]
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 80016ec:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 8; i < 16; i++)
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	3301      	adds	r3, #1
 80016f2:	71bb      	strb	r3, [r7, #6]
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	d9f0      	bls.n	80016dc <FlashMQTT_WriteRead+0x78>
	}

	g_write_buffer[16] = g_gps_data.u8Day;
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80016fc:	7c1a      	ldrb	r2, [r3, #16]
 80016fe:	4b43      	ldr	r3, [pc, #268]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001700:	741a      	strb	r2, [r3, #16]
	g_write_buffer[17] = g_gps_data.u8Month;
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001704:	7c5a      	ldrb	r2, [r3, #17]
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001708:	745a      	strb	r2, [r3, #17]
	g_write_buffer[18] = g_gps_data.year_t.yearBytes[0];
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 800170c:	7c9a      	ldrb	r2, [r3, #18]
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001710:	749a      	strb	r2, [r3, #18]
	g_write_buffer[19] = g_gps_data.year_t.yearBytes[1];
 8001712:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001714:	7cda      	ldrb	r2, [r3, #19]
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001718:	74da      	strb	r2, [r3, #19]
	g_write_buffer[20] = g_gps_data.u8Hour;
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 800171c:	7d1a      	ldrb	r2, [r3, #20]
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001720:	751a      	strb	r2, [r3, #20]
	g_write_buffer[21] = g_gps_data.u8Minute;
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001724:	7d5a      	ldrb	r2, [r3, #21]
 8001726:	4b39      	ldr	r3, [pc, #228]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001728:	755a      	strb	r2, [r3, #21]
	g_write_buffer[22] = g_gps_data.u8Second;
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 800172c:	7d9a      	ldrb	r2, [r3, #22]
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 8001730:	759a      	strb	r2, [r3, #22]

	W25Q16_WritePage(g_write_buffer, 0, 0x00, 23);
 8001732:	2317      	movs	r3, #23
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	4834      	ldr	r0, [pc, #208]	; (800180c <FlashMQTT_WriteRead+0x1a8>)
 800173a:	f005 f889 	bl	8006850 <W25Q16_WritePage>

	HAL_Delay(500);
 800173e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001742:	f000 fe05 	bl	8002350 <HAL_Delay>

	printf("\n\rRead some bytes \r\n");
 8001746:	4832      	ldr	r0, [pc, #200]	; (8001810 <FlashMQTT_WriteRead+0x1ac>)
 8001748:	f009 f966 	bl	800aa18 <puts>

	W25Q16_ReadSomeBytes(g_read_buffer, 0x00, 23);
 800174c:	2217      	movs	r2, #23
 800174e:	2100      	movs	r1, #0
 8001750:	4830      	ldr	r0, [pc, #192]	; (8001814 <FlashMQTT_WriteRead+0x1b0>)
 8001752:	f005 f8e9 	bl	8006928 <W25Q16_ReadSomeBytes>

	g_gps_data.long_t.dLongRaw = 0;
 8001756:	492b      	ldr	r1, [pc, #172]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9c1 2300 	strd	r2, r3, [r1]
	g_gps_data.lat_t.dLatRaw = 0;
 8001764:	4927      	ldr	r1, [pc, #156]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	g_gps_data.u8Day = 0;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001774:	2200      	movs	r2, #0
 8001776:	741a      	strb	r2, [r3, #16]
	g_gps_data.u8Month = 0;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 800177a:	2200      	movs	r2, #0
 800177c:	745a      	strb	r2, [r3, #17]
	g_gps_data.year_t.u16YearRaw = 0;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001780:	2200      	movs	r2, #0
 8001782:	825a      	strh	r2, [r3, #18]
	g_gps_data.u8Hour = 0;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001786:	2200      	movs	r2, #0
 8001788:	751a      	strb	r2, [r3, #20]
	g_gps_data.u8Minute = 0;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 800178c:	2200      	movs	r2, #0
 800178e:	755a      	strb	r2, [r3, #21]
	g_gps_data.u8Second = 0;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 8001792:	2200      	movs	r2, #0
 8001794:	759a      	strb	r2, [r3, #22]

	/* Read and pub longitude */
	for(uint8_t i = 0; i < 8; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	e008      	b.n	80017ae <FlashMQTT_WriteRead+0x14a>
	{
		g_gps_data.long_t.longBytes[i] = g_read_buffer[i];
 800179c:	797a      	ldrb	r2, [r7, #5]
 800179e:	797b      	ldrb	r3, [r7, #5]
 80017a0:	491c      	ldr	r1, [pc, #112]	; (8001814 <FlashMQTT_WriteRead+0x1b0>)
 80017a2:	5c89      	ldrb	r1, [r1, r2]
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80017a6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	3301      	adds	r3, #1
 80017ac:	717b      	strb	r3, [r7, #5]
 80017ae:	797b      	ldrb	r3, [r7, #5]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	d9f3      	bls.n	800179c <FlashMQTT_WriteRead+0x138>
	}
	memset(g_buff_send, '\0', sizeof(g_buff_send));
 80017b4:	221e      	movs	r2, #30
 80017b6:	2100      	movs	r1, #0
 80017b8:	4817      	ldr	r0, [pc, #92]	; (8001818 <FlashMQTT_WriteRead+0x1b4>)
 80017ba:	f008 fc35 	bl	800a028 <memset>
	sprintf(g_buff_send, "%f", g_gps_data.long_t.dLongRaw);
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	4915      	ldr	r1, [pc, #84]	; (800181c <FlashMQTT_WriteRead+0x1b8>)
 80017c6:	4814      	ldr	r0, [pc, #80]	; (8001818 <FlashMQTT_WriteRead+0x1b4>)
 80017c8:	f009 f92e 	bl	800aa28 <siprintf>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send), (uint8_t*)g_buff_send);
 80017cc:	4812      	ldr	r0, [pc, #72]	; (8001818 <FlashMQTT_WriteRead+0x1b4>)
 80017ce:	f7fe fd07 	bl	80001e0 <strlen>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <FlashMQTT_WriteRead+0x1b4>)
 80017d8:	9202      	str	r2, [sp, #8]
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <FlashMQTT_WriteRead+0x1bc>)
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2301      	movs	r3, #1
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2000      	movs	r0, #0
 80017e8:	f005 fb66 	bl	8006eb8 <MQTT_Publish>
	printf("Long: %lf\r\n", g_gps_data.long_t.dLongRaw);
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <FlashMQTT_WriteRead+0x1a0>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <FlashMQTT_WriteRead+0x1c0>)
 80017f4:	f009 f88a 	bl	800a90c <iprintf>

	/* Read and pub latitude */
	for (uint8_t i = 0; i < 8; i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	713b      	strb	r3, [r7, #4]
 80017fc:	e021      	b.n	8001842 <FlashMQTT_WriteRead+0x1de>
 80017fe:	bf00      	nop
 8001800:	20000d80 	.word	0x20000d80
 8001804:	20000410 	.word	0x20000410
 8001808:	0800e6a0 	.word	0x0800e6a0
 800180c:	20000210 	.word	0x20000210
 8001810:	0800e6b0 	.word	0x0800e6b0
 8001814:	20000310 	.word	0x20000310
 8001818:	20000428 	.word	0x20000428
 800181c:	0800e6c4 	.word	0x0800e6c4
 8001820:	0800e6c8 	.word	0x0800e6c8
 8001824:	0800e6e4 	.word	0x0800e6e4
	{
		g_gps_data.lat_t.latBytes[i] = g_read_buffer[i+8];
 8001828:	793b      	ldrb	r3, [r7, #4]
 800182a:	f103 0208 	add.w	r2, r3, #8
 800182e:	793b      	ldrb	r3, [r7, #4]
 8001830:	4982      	ldr	r1, [pc, #520]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 8001832:	5c89      	ldrb	r1, [r1, r2]
 8001834:	4a82      	ldr	r2, [pc, #520]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001836:	4413      	add	r3, r2
 8001838:	460a      	mov	r2, r1
 800183a:	721a      	strb	r2, [r3, #8]
	for (uint8_t i = 0; i < 8; i++)
 800183c:	793b      	ldrb	r3, [r7, #4]
 800183e:	3301      	adds	r3, #1
 8001840:	713b      	strb	r3, [r7, #4]
 8001842:	793b      	ldrb	r3, [r7, #4]
 8001844:	2b07      	cmp	r3, #7
 8001846:	d9ef      	bls.n	8001828 <FlashMQTT_WriteRead+0x1c4>
	}
	memset(g_buff_send, '\0', sizeof(g_buff_send));
 8001848:	221e      	movs	r2, #30
 800184a:	2100      	movs	r1, #0
 800184c:	487d      	ldr	r0, [pc, #500]	; (8001a44 <FlashMQTT_WriteRead+0x3e0>)
 800184e:	f008 fbeb 	bl	800a028 <memset>
	sprintf(g_buff_send, "%f", g_gps_data.lat_t.dLatRaw);
 8001852:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001854:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001858:	497b      	ldr	r1, [pc, #492]	; (8001a48 <FlashMQTT_WriteRead+0x3e4>)
 800185a:	487a      	ldr	r0, [pc, #488]	; (8001a44 <FlashMQTT_WriteRead+0x3e0>)
 800185c:	f009 f8e4 	bl	800aa28 <siprintf>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send), (uint8_t*)g_buff_send);
 8001860:	4878      	ldr	r0, [pc, #480]	; (8001a44 <FlashMQTT_WriteRead+0x3e0>)
 8001862:	f7fe fcbd 	bl	80001e0 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4a76      	ldr	r2, [pc, #472]	; (8001a44 <FlashMQTT_WriteRead+0x3e0>)
 800186c:	9202      	str	r2, [sp, #8]
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2000      	movs	r0, #0
 800187c:	f005 fb1c 	bl	8006eb8 <MQTT_Publish>
	printf("Lat: %lf\r\n", g_gps_data.lat_t.dLatRaw);
 8001880:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001882:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001886:	4872      	ldr	r0, [pc, #456]	; (8001a50 <FlashMQTT_WriteRead+0x3ec>)
 8001888:	f009 f840 	bl	800a90c <iprintf>

	/* Read and pub date */
	g_gps_data.u8Day = g_read_buffer[16];
 800188c:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 800188e:	7c1a      	ldrb	r2, [r3, #16]
 8001890:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001892:	741a      	strb	r2, [r3, #16]
	u16_to_String(g_buff_send_date, g_gps_data.u8Day);
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001896:	7c1b      	ldrb	r3, [r3, #16]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4619      	mov	r1, r3
 800189c:	486d      	ldr	r0, [pc, #436]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 800189e:	f005 f88b 	bl	80069b8 <u16_to_String>
	printf("Day string: %s\r\n", g_buff_send_date);
 80018a2:	496c      	ldr	r1, [pc, #432]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018a4:	486c      	ldr	r0, [pc, #432]	; (8001a58 <FlashMQTT_WriteRead+0x3f4>)
 80018a6:	f009 f831 	bl	800a90c <iprintf>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send_date), (uint8_t*)g_buff_send_date);
 80018aa:	486a      	ldr	r0, [pc, #424]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018ac:	f7fe fc98 	bl	80001e0 <strlen>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4a67      	ldr	r2, [pc, #412]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018b6:	9202      	str	r2, [sp, #8]
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	4b64      	ldr	r3, [pc, #400]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2301      	movs	r3, #1
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	2000      	movs	r0, #0
 80018c6:	f005 faf7 	bl	8006eb8 <MQTT_Publish>
	memset(g_buff_send_date, '\0', 2);
 80018ca:	2202      	movs	r2, #2
 80018cc:	2100      	movs	r1, #0
 80018ce:	4861      	ldr	r0, [pc, #388]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018d0:	f008 fbaa 	bl	800a028 <memset>

	/* Read and pub month */
	g_gps_data.u8Month = g_read_buffer[17];
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 80018d6:	7c5a      	ldrb	r2, [r3, #17]
 80018d8:	4b59      	ldr	r3, [pc, #356]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 80018da:	745a      	strb	r2, [r3, #17]
	u16_to_String(g_buff_send_date, g_gps_data.u8Month);
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 80018de:	7c5b      	ldrb	r3, [r3, #17]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	485b      	ldr	r0, [pc, #364]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018e6:	f005 f867 	bl	80069b8 <u16_to_String>
	printf("month string %s\r\n", g_buff_send_date);
 80018ea:	495a      	ldr	r1, [pc, #360]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018ec:	485b      	ldr	r0, [pc, #364]	; (8001a5c <FlashMQTT_WriteRead+0x3f8>)
 80018ee:	f009 f80d 	bl	800a90c <iprintf>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send_date), (uint8_t*)g_buff_send_date);
 80018f2:	4858      	ldr	r0, [pc, #352]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018f4:	f7fe fc74 	bl	80001e0 <strlen>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 80018fe:	9202      	str	r2, [sp, #8]
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	2000      	movs	r0, #0
 800190e:	f005 fad3 	bl	8006eb8 <MQTT_Publish>
	memset(g_buff_send_date, '\0', 2);
 8001912:	2202      	movs	r2, #2
 8001914:	2100      	movs	r1, #0
 8001916:	484f      	ldr	r0, [pc, #316]	; (8001a54 <FlashMQTT_WriteRead+0x3f0>)
 8001918:	f008 fb86 	bl	800a028 <memset>

	/* Read and pub year */
	g_gps_data.year_t.yearBytes[0] = g_read_buffer[18];
 800191c:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 800191e:	7c9a      	ldrb	r2, [r3, #18]
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001922:	749a      	strb	r2, [r3, #18]
	g_gps_data.year_t.yearBytes[1] = g_read_buffer[19];
 8001924:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 8001926:	7cda      	ldrb	r2, [r3, #19]
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 800192a:	74da      	strb	r2, [r3, #19]
	u16_to_String(g_buff_send_year, g_gps_data.year_t.u16YearRaw);
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 800192e:	8a5b      	ldrh	r3, [r3, #18]
 8001930:	4619      	mov	r1, r3
 8001932:	484b      	ldr	r0, [pc, #300]	; (8001a60 <FlashMQTT_WriteRead+0x3fc>)
 8001934:	f005 f840 	bl	80069b8 <u16_to_String>
	printf("Year string: %s\r\n",g_buff_send_year);
 8001938:	4949      	ldr	r1, [pc, #292]	; (8001a60 <FlashMQTT_WriteRead+0x3fc>)
 800193a:	484a      	ldr	r0, [pc, #296]	; (8001a64 <FlashMQTT_WriteRead+0x400>)
 800193c:	f008 ffe6 	bl	800a90c <iprintf>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send_year), (uint8_t*)g_buff_send_year);
 8001940:	4847      	ldr	r0, [pc, #284]	; (8001a60 <FlashMQTT_WriteRead+0x3fc>)
 8001942:	f7fe fc4d 	bl	80001e0 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <FlashMQTT_WriteRead+0x3fc>)
 800194c:	9202      	str	r2, [sp, #8]
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2301      	movs	r3, #1
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2000      	movs	r0, #0
 800195c:	f005 faac 	bl	8006eb8 <MQTT_Publish>
	memset(g_buff_send_year, '\0', 2);
 8001960:	2202      	movs	r2, #2
 8001962:	2100      	movs	r1, #0
 8001964:	483e      	ldr	r0, [pc, #248]	; (8001a60 <FlashMQTT_WriteRead+0x3fc>)
 8001966:	f008 fb5f 	bl	800a028 <memset>

	/* Read and pub hour */
	g_gps_data.u8Hour = g_read_buffer[20];
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 800196c:	7d1a      	ldrb	r2, [r3, #20]
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001970:	751a      	strb	r2, [r3, #20]
	u16_to_String(g_buff_send_time, g_gps_data.u8Hour);
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 8001974:	7d1b      	ldrb	r3, [r3, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	483b      	ldr	r0, [pc, #236]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 800197c:	f005 f81c 	bl	80069b8 <u16_to_String>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send_time), (uint8_t*)g_buff_send_time);
 8001980:	4839      	ldr	r0, [pc, #228]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 8001982:	f7fe fc2d 	bl	80001e0 <strlen>
 8001986:	4603      	mov	r3, r0
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 800198c:	9202      	str	r2, [sp, #8]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4b2e      	ldr	r3, [pc, #184]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2000      	movs	r0, #0
 800199c:	f005 fa8c 	bl	8006eb8 <MQTT_Publish>
	memset(g_buff_send_time, '\0', 2);
 80019a0:	2202      	movs	r2, #2
 80019a2:	2100      	movs	r1, #0
 80019a4:	4830      	ldr	r0, [pc, #192]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 80019a6:	f008 fb3f 	bl	800a028 <memset>

	/* Read and pub minute */
	g_gps_data.u8Minute = g_read_buffer[21];
 80019aa:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 80019ac:	7d5a      	ldrb	r2, [r3, #21]
 80019ae:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 80019b0:	755a      	strb	r2, [r3, #21]
	u16_to_String(g_buff_send_time, g_gps_data.u8Minute);
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 80019b4:	7d5b      	ldrb	r3, [r3, #21]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	482b      	ldr	r0, [pc, #172]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 80019bc:	f004 fffc 	bl	80069b8 <u16_to_String>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send_time), (uint8_t*)g_buff_send_time);
 80019c0:	4829      	ldr	r0, [pc, #164]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 80019c2:	f7fe fc0d 	bl	80001e0 <strlen>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 80019cc:	9202      	str	r2, [sp, #8]
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2301      	movs	r3, #1
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f005 fa6c 	bl	8006eb8 <MQTT_Publish>
	memset(g_buff_send_time, '\0', 2);
 80019e0:	2202      	movs	r2, #2
 80019e2:	2100      	movs	r1, #0
 80019e4:	4820      	ldr	r0, [pc, #128]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 80019e6:	f008 fb1f 	bl	800a028 <memset>

	/* Read and pub second */
	g_gps_data.u8Second = g_read_buffer[22];
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <FlashMQTT_WriteRead+0x3d8>)
 80019ec:	7d9a      	ldrb	r2, [r3, #22]
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 80019f0:	759a      	strb	r2, [r3, #22]
	u16_to_String(g_buff_send_time, g_gps_data.u8Second);
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <FlashMQTT_WriteRead+0x3dc>)
 80019f4:	7d9b      	ldrb	r3, [r3, #22]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	481b      	ldr	r0, [pc, #108]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 80019fc:	f004 ffdc 	bl	80069b8 <u16_to_String>
	MQTT_Publish(0, 0, 0, 1, (uint8_t*)"qn052289@gmail.com/topic1", strlen(g_buff_send_time), (uint8_t*)g_buff_send_time);
 8001a00:	4819      	ldr	r0, [pc, #100]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 8001a02:	f7fe fbed 	bl	80001e0 <strlen>
 8001a06:	4603      	mov	r3, r0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 8001a0c:	9202      	str	r2, [sp, #8]
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <FlashMQTT_WriteRead+0x3e8>)
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f005 fa4c 	bl	8006eb8 <MQTT_Publish>
	memset(g_buff_send_time, '\0', 2);
 8001a20:	2202      	movs	r2, #2
 8001a22:	2100      	movs	r1, #0
 8001a24:	4810      	ldr	r0, [pc, #64]	; (8001a68 <FlashMQTT_WriteRead+0x404>)
 8001a26:	f008 faff 	bl	800a028 <memset>

	/* Delay 500ms */
	HAL_Delay(500);
 8001a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a2e:	f000 fc8f 	bl	8002350 <HAL_Delay>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000310 	.word	0x20000310
 8001a40:	20000410 	.word	0x20000410
 8001a44:	20000428 	.word	0x20000428
 8001a48:	0800e6c4 	.word	0x0800e6c4
 8001a4c:	0800e6c8 	.word	0x0800e6c8
 8001a50:	0800e6f0 	.word	0x0800e6f0
 8001a54:	2000044c 	.word	0x2000044c
 8001a58:	0800e6fc 	.word	0x0800e6fc
 8001a5c:	0800e710 	.word	0x0800e710
 8001a60:	20000448 	.word	0x20000448
 8001a64:	0800e724 	.word	0x0800e724
 8001a68:	20000450 	.word	0x20000450

08001a6c <Wakeup_CallBack>:

static void Wakeup_CallBack(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	/* Reconfig the system clock after waking up from stop mode */
	SystemClock_Config();
 8001a70:	f7ff fb98 	bl	80011a4 <SystemClock_Config>

	printf("Wake up from sleep mode\r\n");
 8001a74:	4828      	ldr	r0, [pc, #160]	; (8001b18 <Wakeup_CallBack+0xac>)
 8001a76:	f008 ffcf 	bl	800aa18 <puts>

	HAL_ResumeTick();
 8001a7a:	f000 fc9d 	bl	80023b8 <HAL_ResumeTick>

	/* GPS enable */
	gps_power_EnOrDi(ENABLE);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f008 f9c4 	bl	8009e0c <gps_power_EnOrDi>

	/* LTE RX pin enable */
	softUART_ReInit();
 8001a84:	f7ff fdd0 	bl	8001628 <softUART_ReInit>

	/* LTE enable */
	Enable_LTE();
 8001a88:	f005 f810 	bl	8006aac <Enable_LTE>

	/* Wait until the LTE finishs initialization */
	HAL_Delay(15000);
 8001a8c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001a90:	f000 fc5e 	bl	8002350 <HAL_Delay>

	/* Config the MQTT */
	MQTT_Recv_Mode(0, 0, 1);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2100      	movs	r1, #0
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f005 f813 	bl	8006ac4 <MQTT_Recv_Mode>
	MQTT_Session(0, 0);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f005 f84b 	bl	8006b3c <MQTT_Session>



	/*Connect with SSL*/
	MQTT_SSL_Mode(0, 1, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f005 fa9e 	bl	8006fec <MQTT_SSL_Mode>
	MQTT_SSL_Certificate(0);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f005 fad7 	bl	8007064 <MQTT_SSL_Certificate>
	MQTT_SSL_Level(0, 0);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f005 fb43 	bl	8007144 <MQTT_SSL_Level>
	MQTT_SSL_Version(0, 4);
 8001abe:	2104      	movs	r1, #4
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f005 fb77 	bl	80071b4 <MQTT_SSL_Version>
	MQTT_SSL_Ciphersuite(0, (uint8_t*)"0xFFFF");
 8001ac6:	4915      	ldr	r1, [pc, #84]	; (8001b1c <Wakeup_CallBack+0xb0>)
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f005 fbab 	bl	8007224 <MQTT_SSL_Ciphersuite>
	MQTT_SSL_Ignore(0, 1);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f005 fbdd 	bl	8007290 <MQTT_SSL_Ignore>

	#if TEST_CONNECT == 1
		/* Check whether the mqtt server is connected or not. If not, reconnected! */
		if(MQTT_Check_Connect() != RESPONSE_OK)
 8001ad6:	f005 f9a9 	bl	8006e2c <MQTT_Check_Connect>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <Wakeup_CallBack+0x80>
		{
			MQTT_Open_Connect();
 8001ae0:	f7ff fa4e 	bl	8000f80 <MQTT_Open_Connect>
			HAL_Delay(500);
 8001ae4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ae8:	f000 fc32 	bl	8002350 <HAL_Delay>
		}
	#endif

	/* Print log */
	printf("!!!!MOTION DETECTED !!!!!\n\r");
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <Wakeup_CallBack+0xb4>)
 8001aee:	f008 ff0d 	bl	800a90c <iprintf>



	/* Quectel initialization */
	Quectel_Init();
 8001af2:	f007 fc3d 	bl	8009370 <Quectel_Init>

	/* Re Init GPS UART */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)g_rxBuffer, sizeof(g_rxBuffer));
 8001af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001afa:	490a      	ldr	r1, [pc, #40]	; (8001b24 <Wakeup_CallBack+0xb8>)
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <Wakeup_CallBack+0xbc>)
 8001afe:	f003 fe73 	bl	80057e8 <HAL_UART_Receive_IT>

	/* Change 2 flags */
	g_bIsMotion = false;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <Wakeup_CallBack+0xc0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
	g_bIsSetGPS = true;
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <Wakeup_CallBack+0xc4>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
	g_bIsStop = false;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <Wakeup_CallBack+0xc8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	0800e738 	.word	0x0800e738
 8001b1c:	0800e754 	.word	0x0800e754
 8001b20:	0800e75c 	.word	0x0800e75c
 8001b24:	20000830 	.word	0x20000830
 8001b28:	20000d98 	.word	0x20000d98
 8001b2c:	20000206 	.word	0x20000206
 8001b30:	20000208 	.word	0x20000208
 8001b34:	20000209 	.word	0x20000209

08001b38 <Stop_Callback>:

static void Stop_Callback(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	printf("MOTION NOT DETECTED YET !!\r\n");
 8001b3c:	480e      	ldr	r0, [pc, #56]	; (8001b78 <Stop_Callback+0x40>)
 8001b3e:	f008 ff6b 	bl	800aa18 <puts>

	/* Close a Network for MQTT Client */
	MQTT_Close(0);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f005 f8a4 	bl	8006c90 <MQTT_Close>

	/* Power off Module LTE */
	LTE_PWRCRL_OFF();
 8001b48:	f004 ff82 	bl	8006a50 <LTE_PWRCRL_OFF>

	/* LTE POWER SUPPY DISABLE */
	LTE_Disable();
 8001b4c:	f7ff fd42 	bl	80015d4 <LTE_Disable>

	/* Disable GPS Module */
	gps_power_EnOrDi(DISABLE);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f008 f95b 	bl	8009e0c <gps_power_EnOrDi>

	/* DeInit the RX pin of UART */
	softUART_DeInit();
 8001b56:	f7ff fd5b 	bl	8001610 <softUART_DeInit>

	/* Enter sleep mode */
	printf("Enter Stop Mode:\r\n");
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <Stop_Callback+0x44>)
 8001b5c:	f008 ff5c 	bl	800aa18 <puts>

	g_bIsStop = true;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <Stop_Callback+0x48>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]

	HAL_SuspendTick();
 8001b66:	f000 fc17 	bl	8002398 <HAL_SuspendTick>

	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f002 f8f7 	bl	8003d60 <HAL_PWR_EnterSTOPMode>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	0800e778 	.word	0x0800e778
 8001b7c:	0800e794 	.word	0x0800e794
 8001b80:	20000209 	.word	0x20000209

08001b84 <LTE_Init>:

static void LTE_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	memset(&g_test_L76, 0, sizeof(g_test_L76));
 8001b88:	2218      	movs	r2, #24
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4812      	ldr	r0, [pc, #72]	; (8001bd8 <LTE_Init+0x54>)
 8001b8e:	f008 fa4b 	bl	800a028 <memset>

	softUART_DeInit();
 8001b92:	f7ff fd3d 	bl	8001610 <softUART_DeInit>
	Enable_LTE();
 8001b96:	f004 ff89 	bl	8006aac <Enable_LTE>

	//HAL_Delay(15000);
	printf("LTE Enabled!!\r\n");
 8001b9a:	4810      	ldr	r0, [pc, #64]	; (8001bdc <LTE_Init+0x58>)
 8001b9c:	f008 ff3c 	bl	800aa18 <puts>

	HAL_Delay(1000);
 8001ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ba4:	f000 fbd4 	bl	8002350 <HAL_Delay>
	Trans_Data(&UartEmulHandle, (uint8_t*)"AT+GMI\r", 7);
 8001ba8:	2207      	movs	r2, #7
 8001baa:	490d      	ldr	r1, [pc, #52]	; (8001be0 <LTE_Init+0x5c>)
 8001bac:	480d      	ldr	r0, [pc, #52]	; (8001be4 <LTE_Init+0x60>)
 8001bae:	f005 fbf3 	bl	8007398 <Trans_Data>

	if (Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK)
 8001bb2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001bb6:	480b      	ldr	r0, [pc, #44]	; (8001be4 <LTE_Init+0x60>)
 8001bb8:	f005 fca2 	bl	8007500 <Recv_Response>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d104      	bne.n	8001bcc <LTE_Init+0x48>
	{
		Log_Info((uint8_t*)"RES_OK\n", 7);
 8001bc2:	2107      	movs	r1, #7
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <LTE_Init+0x64>)
 8001bc6:	f004 fc81 	bl	80064cc <Log_Info>
	/* Select ME Memory store sms*/
	//Select_ME_Memory();

	/* Delete ME Memory store sms*/
	//Delete_Memory_SMS();
}
 8001bca:	e003      	b.n	8001bd4 <LTE_Init+0x50>
		  Log_Info((uint8_t*)"RES_ERR\n", 8);
 8001bcc:	2108      	movs	r1, #8
 8001bce:	4807      	ldr	r0, [pc, #28]	; (8001bec <LTE_Init+0x68>)
 8001bd0:	f004 fc7c 	bl	80064cc <Log_Info>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000d80 	.word	0x20000d80
 8001bdc:	0800e7a8 	.word	0x0800e7a8
 8001be0:	0800e7b8 	.word	0x0800e7b8
 8001be4:	20000d4c 	.word	0x20000d4c
 8001be8:	0800e7c0 	.word	0x0800e7c0
 8001bec:	0800e7c8 	.word	0x0800e7c8

08001bf0 <Flash_Init>:

static void Flash_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	Log_Info((uint8_t*)"Inited Flash\n", 13);
 8001bf4:	210d      	movs	r1, #13
 8001bf6:	4804      	ldr	r0, [pc, #16]	; (8001c08 <Flash_Init+0x18>)
 8001bf8:	f004 fc68 	bl	80064cc <Log_Info>
	W25Q16_Init();
 8001bfc:	f004 fd5e 	bl	80066bc <W25Q16_Init>
	W25Q16_Erase_Chip();
 8001c00:	f004 fdf6 	bl	80067f0 <W25Q16_Erase_Chip>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0800e7d4 	.word	0x0800e7d4

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c30:	6453      	str	r3, [r2, #68]	; 0x44
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_I2C_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12b      	bne.n	8001ce6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cae:	2312      	movs	r3, #18
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <HAL_I2C_MspInit+0x8c>)
 8001cc6:	f000 fe1b 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400

08001cfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_SPI_MspInit+0x84>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d12c      	bne.n	8001d78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_SPI_MspInit+0x88>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d68:	2305      	movs	r3, #5
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_SPI_MspInit+0x8c>)
 8001d74:	f000 fdc4 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40003800 	.word	0x40003800
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020400 	.word	0x40020400

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10d      	bne.n	8001dba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_TIM_Base_MspInit+0x40>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_TIM_Base_MspInit+0x40>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_TIM_Base_MspInit+0x40>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	; 0x30
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a36      	ldr	r2, [pc, #216]	; (8001ec8 <HAL_UART_MspInit+0xf8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d12d      	bne.n	8001e4e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a34      	ldr	r2, [pc, #208]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001dfc:	f043 0310 	orr.w	r3, r3, #16
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <HAL_UART_MspInit+0x100>)
 8001e48:	f000 fd5a 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e4c:	e038      	b.n	8001ec0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <HAL_UART_MspInit+0x104>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d133      	bne.n	8001ec0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_UART_MspInit+0xfc>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e90:	230c      	movs	r3, #12
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_UART_MspInit+0x100>)
 8001eac:	f000 fd28 	bl	8002900 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2026      	movs	r0, #38	; 0x26
 8001eb6:	f000 fb6a 	bl	800258e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eba:	2026      	movs	r0, #38	; 0x26
 8001ebc:	f000 fb83 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 8001ec0:	bf00      	nop
 8001ec2:	3730      	adds	r7, #48	; 0x30
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <HAL_UART_Emul_MspInit>:
 *           - Pin Tx and Rx
  * @param  htim: UART Emulation handle pointer
  * @retval None
  */
void HAL_UART_Emul_MspInit(UART_Emul_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #######################*/
  /* Enable clock for UART Emul */
  __UART_EMUL_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef0:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a2c      	ldr	r2, [pc, #176]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIO TX/RX clock */
  UART_EMUL_TX_GPIO_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
  UART_EMUL_RX_GPIO_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_UART_Emul_MspInit+0xe0>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]

  /* Initialize UART Emulation port name */
  UartEmulHandle.TxPortName = UART_EMUL_TX_PORT;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_UART_Emul_MspInit+0xe4>)
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_UART_Emul_MspInit+0xe8>)
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
  UartEmulHandle.RxPortName = UART_EMUL_RX_PORT;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_UART_Emul_MspInit+0xe4>)
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_UART_Emul_MspInit+0xe8>)
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Initialize UART Emulation pin number for Tx */
  UartEmulHandle.Init.RxPinNumber = UART_EMUL_RX_PIN;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_UART_Emul_MspInit+0xe4>)
 8001f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f62:	821a      	strh	r2, [r3, #16]
  UartEmulHandle.Init.TxPinNumber = UART_EMUL_TX_PIN;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_UART_Emul_MspInit+0xe4>)
 8001f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f6a:	825a      	strh	r2, [r3, #18]

  /* Configure GPIOE for UART Emulation Tx */
  GPIO_InitStruct.Pin    = UART_EMUL_TX_PIN;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_GPIO_Init(UART_EMUL_TX_PORT, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	480e      	ldr	r0, [pc, #56]	; (8001fc0 <HAL_UART_Emul_MspInit+0xe8>)
 8001f86:	f000 fcbb 	bl	8002900 <HAL_GPIO_Init>

  /* Configure GPIOC for UART Emulation Rx */
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_UART_Emul_MspInit+0xec>)
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin  = UART_EMUL_RX_PIN;
 8001f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f92:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(UART_EMUL_RX_PORT, &GPIO_InitStruct);
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <HAL_UART_Emul_MspInit+0xe8>)
 8001f9c:	f000 fcb0 	bl	8002900 <HAL_GPIO_Init>

  /*##-2- Enable NVIC for line Rx  #################################*/
  /* Enable and set EXTI Line Interrupt to the highest priority */
  HAL_NVIC_SetPriority(UART_EMUL_EXTI_IRQ, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2028      	movs	r0, #40	; 0x28
 8001fa6:	f000 faf2 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART_EMUL_EXTI_IRQ);
 8001faa:	2028      	movs	r0, #40	; 0x28
 8001fac:	f000 fb0b 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 8001fb0:	bf00      	nop
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	20000d4c 	.word	0x20000d4c
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	10210000 	.word	0x10210000

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <UsageFault_Handler+0x4>

08001fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f000 f978 	bl	8002310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002028:	2001      	movs	r0, #1
 800202a:	f000 feeb 	bl	8002e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  printf("MOTION DETECTED !!\r\n");
 800202e:	4802      	ldr	r0, [pc, #8]	; (8002038 <EXTI0_IRQHandler+0x14>)
 8002030:	f008 fcf2 	bl	800aa18 <puts>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	0800e7e4 	.word	0x0800e7e4

0800203c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <USART2_IRQHandler+0x10>)
 8002042:	f003 fc27 	bl	8005894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000d98 	.word	0x20000d98

08002050 <EXTI15_10_IRQHandler>:
* @brief  This function handles EXTI interrupt Rx Line.
* @param  None
* @retval None
*/
void UART_EMUL_EXTI_IRQHandler (void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(UART_EMUL_RX_PIN);
 8002054:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002058:	f000 fed4 	bl	8002e04 <HAL_GPIO_EXTI_IRQHandler>
  //printf("Detected SOFTUART!!!\r\n");
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
	return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_kill>:

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800207a:	f007 ffab 	bl	8009fd4 <__errno>
 800207e:	4603      	mov	r3, r0
 8002080:	2216      	movs	r2, #22
 8002082:	601a      	str	r2, [r3, #0]
	return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020a2:	e7fe      	b.n	80020a2 <_exit+0x12>

080020a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e00a      	b.n	80020cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020b6:	f3af 8000 	nop.w
 80020ba:	4601      	mov	r1, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	60ba      	str	r2, [r7, #8]
 80020c2:	b2ca      	uxtb	r2, r1
 80020c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbf0      	blt.n	80020b6 <_read+0x12>
	}

return len;
 80020d4:	687b      	ldr	r3, [r7, #4]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e009      	b.n	8002104 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	60ba      	str	r2, [r7, #8]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe ff2f 	bl	8000f5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf1      	blt.n	80020f0 <_write+0x12>
	}
	return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_close>:

int _close(int file)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
	return -1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800213e:	605a      	str	r2, [r3, #4]
	return 0;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_isatty>:

int _isatty(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
	return 1;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
	return 0;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <_sbrk+0x5c>)
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <_sbrk+0x60>)
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b0:	f007 ff10 	bl	8009fd4 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20010000 	.word	0x20010000
 80021e0:	00000400 	.word	0x00000400
 80021e4:	20000660 	.word	0x20000660
 80021e8:	20000e08 	.word	0x20000e08

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <SystemInit+0x28>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <SystemInit+0x28>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SystemInit+0x28>)
 8002202:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002206:	609a      	str	r2, [r3, #8]
#endif
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800221c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800221e:	e003      	b.n	8002228 <LoopCopyDataInit>

08002220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002226:	3104      	adds	r1, #4

08002228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800222c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002230:	d3f6      	bcc.n	8002220 <CopyDataInit>
  ldr  r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002234:	e002      	b.n	800223c <LoopFillZerobss>

08002236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002238:	f842 3b04 	str.w	r3, [r2], #4

0800223c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800223e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002240:	d3f9      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7ff ffd3 	bl	80021ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f007 fecb 	bl	8009fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe fee5 	bl	8001018 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002254:	0800f47c 	.word	0x0800f47c
  ldr  r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800225c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002260:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002264:	20000e08 	.word	0x20000e08

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f96f 	bl	8002578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	2000      	movs	r0, #0
 800229c:	f000 f808 	bl	80022b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fcbc 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_InitTick+0x54>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x58>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f987 	bl	80025e2 <HAL_SYSTICK_Config>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e00e      	b.n	80022fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d80a      	bhi.n	80022fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f94f 	bl	800258e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <HAL_InitTick+0x5c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000008 	.word	0x20000008
 8002308:	20000010 	.word	0x20000010
 800230c:	2000000c 	.word	0x2000000c

08002310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x20>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x24>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4413      	add	r3, r2
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_IncTick+0x24>)
 8002322:	6013      	str	r3, [r2, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000010 	.word	0x20000010
 8002334:	20000dd8 	.word	0x20000dd8

08002338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return uwTick;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTick+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000dd8 	.word	0x20000dd8

08002350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff ffee 	bl	8002338 <HAL_GetTick>
 800235c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d005      	beq.n	8002376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_Delay+0x44>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002376:	bf00      	nop
 8002378:	f7ff ffde 	bl	8002338 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	429a      	cmp	r2, r3
 8002386:	d8f7      	bhi.n	8002378 <HAL_Delay+0x28>
  {
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000010 	.word	0x20000010

08002398 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_SuspendTick+0x1c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_SuspendTick+0x1c>)
 80023a2:	f023 0302 	bic.w	r3, r3, #2
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e010 	.word	0xe000e010

080023b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_ResumeTick+0x1c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_ResumeTick+0x1c>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e010 	.word	0xe000e010

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <__NVIC_EnableIRQ+0x38>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000e100 	.word	0xe000e100

08002478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db0a      	blt.n	80024a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	490c      	ldr	r1, [pc, #48]	; (80024c4 <__NVIC_SetPriority+0x4c>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	440b      	add	r3, r1
 800249c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a0:	e00a      	b.n	80024b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4908      	ldr	r1, [pc, #32]	; (80024c8 <__NVIC_SetPriority+0x50>)
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	3b04      	subs	r3, #4
 80024b0:	0112      	lsls	r2, r2, #4
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	440b      	add	r3, r1
 80024b6:	761a      	strb	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f1c3 0307 	rsb	r3, r3, #7
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	bf28      	it	cs
 80024ea:	2304      	movcs	r3, #4
 80024ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d902      	bls.n	80024fc <NVIC_EncodePriority+0x30>
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3b03      	subs	r3, #3
 80024fa:	e000      	b.n	80024fe <NVIC_EncodePriority+0x32>
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	f04f 32ff 	mov.w	r2, #4294967295
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	401a      	ands	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002514:	f04f 31ff 	mov.w	r1, #4294967295
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	43d9      	mvns	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	4313      	orrs	r3, r2
         );
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002544:	d301      	bcc.n	800254a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002546:	2301      	movs	r3, #1
 8002548:	e00f      	b.n	800256a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <SysTick_Config+0x40>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3b01      	subs	r3, #1
 8002550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002552:	210f      	movs	r1, #15
 8002554:	f04f 30ff 	mov.w	r0, #4294967295
 8002558:	f7ff ff8e 	bl	8002478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SysTick_Config+0x40>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SysTick_Config+0x40>)
 8002564:	2207      	movs	r2, #7
 8002566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff29 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a0:	f7ff ff3e 	bl	8002420 <__NVIC_GetPriorityGrouping>
 80025a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff8e 	bl	80024cc <NVIC_EncodePriority>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff5d 	bl	8002478 <__NVIC_SetPriority>
}
 80025be:	bf00      	nop
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff31 	bl	800243c <__NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ffa2 	bl	8002534 <SysTick_Config>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002608:	f7ff fe96 	bl	8002338 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e099      	b.n	800274c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002638:	e00f      	b.n	800265a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263a:	f7ff fe7d 	bl	8002338 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b05      	cmp	r3, #5
 8002646:	d908      	bls.n	800265a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2203      	movs	r2, #3
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e078      	b.n	800274c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e8      	bne.n	800263a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_DMA_Init+0x158>)
 8002674:	4013      	ands	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4313      	orrs	r3, r2
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f023 0307 	bic.w	r3, r3, #7
 80026da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d117      	bne.n	800271e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00e      	beq.n	800271e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f881 	bl	8002808 <DMA_CheckFifoParam>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2240      	movs	r2, #64	; 0x40
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800271a:	2301      	movs	r3, #1
 800271c:	e016      	b.n	800274c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f838 	bl	800279c <DMA_CalcBaseAndBitshift>
 800272c:	4603      	mov	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002734:	223f      	movs	r2, #63	; 0x3f
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	f010803f 	.word	0xf010803f

08002758 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d004      	beq.n	8002776 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00c      	b.n	8002790 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2205      	movs	r2, #5
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0201 	bic.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3b10      	subs	r3, #16
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <DMA_CalcBaseAndBitshift+0x64>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <DMA_CalcBaseAndBitshift+0x68>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d909      	bls.n	80027de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
 80027dc:	e007      	b.n	80027ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	aaaaaaab 	.word	0xaaaaaaab
 8002804:	0800efb8 	.word	0x0800efb8

08002808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0x5a>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d856      	bhi.n	80028d6 <DMA_CheckFifoParam+0xce>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x28>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002841 	.word	0x08002841
 8002834:	08002853 	.word	0x08002853
 8002838:	08002841 	.word	0x08002841
 800283c:	080028d7 	.word	0x080028d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d046      	beq.n	80028da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e043      	b.n	80028da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285a:	d140      	bne.n	80028de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e03d      	b.n	80028de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d121      	bne.n	80028b0 <DMA_CheckFifoParam+0xa8>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d837      	bhi.n	80028e2 <DMA_CheckFifoParam+0xda>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <DMA_CheckFifoParam+0x70>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	0800288f 	.word	0x0800288f
 8002880:	08002889 	.word	0x08002889
 8002884:	080028a1 	.word	0x080028a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e030      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d025      	beq.n	80028e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e022      	b.n	80028e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a8:	d11f      	bne.n	80028ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ae:	e01c      	b.n	80028ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d903      	bls.n	80028be <DMA_CheckFifoParam+0xb6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d003      	beq.n	80028c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028bc:	e018      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      break;
 80028c2:	e015      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e00b      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028d6:	bf00      	nop
 80028d8:	e00a      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e008      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e006      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e004      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
    }
  } 
  
  return status; 
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e159      	b.n	8002bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8148 	bne.w	8002bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00b      	beq.n	800295a <HAL_GPIO_Init+0x5a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294e:	2b11      	cmp	r3, #17
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0xfc>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a2 	beq.w	8002bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <HAL_GPIO_Init+0x2f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d019      	beq.n	8002b02 <HAL_GPIO_Init+0x202>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a48      	ldr	r2, [pc, #288]	; (8002bf4 <HAL_GPIO_Init+0x2f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0x1fe>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <HAL_GPIO_Init+0x2f8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_GPIO_Init+0x1fa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x1f6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_GPIO_Init+0x1f2>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4935      	ldr	r1, [pc, #212]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f aea2 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020c00 	.word	0x40020c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e0bb      	b.n	8002d9c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c24:	2201      	movs	r2, #1
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f040 80ab 	bne.w	8002d96 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c40:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <HAL_GPIO_DeInit+0x1ac>)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	220f      	movs	r2, #15
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a54      	ldr	r2, [pc, #336]	; (8002db8 <HAL_GPIO_DeInit+0x1b0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d019      	beq.n	8002c9e <HAL_GPIO_DeInit+0x96>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <HAL_GPIO_DeInit+0x1b4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_GPIO_DeInit+0x92>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_GPIO_DeInit+0x1b8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00d      	beq.n	8002c96 <HAL_GPIO_DeInit+0x8e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a51      	ldr	r2, [pc, #324]	; (8002dc4 <HAL_GPIO_DeInit+0x1bc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <HAL_GPIO_DeInit+0x8a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a50      	ldr	r2, [pc, #320]	; (8002dc8 <HAL_GPIO_DeInit+0x1c0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_GPIO_DeInit+0x86>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_DeInit+0x98>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_DeInit+0x98>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_DeInit+0x98>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_DeInit+0x98>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_DeInit+0x98>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d132      	bne.n	8002d16 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4944      	ldr	r1, [pc, #272]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002cbe:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4941      	ldr	r1, [pc, #260]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	493d      	ldr	r1, [pc, #244]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002cda:	4b3c      	ldr	r3, [pc, #240]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	493a      	ldr	r1, [pc, #232]	; (8002dcc <HAL_GPIO_DeInit+0x1c4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <HAL_GPIO_DeInit+0x1ac>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	43da      	mvns	r2, r3
 8002d08:	482a      	ldr	r0, [pc, #168]	; (8002db4 <HAL_GPIO_DeInit+0x1ac>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	400a      	ands	r2, r1
 8002d10:	3302      	adds	r3, #2
 8002d12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2103      	movs	r1, #3
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	08d2      	lsrs	r2, r2, #3
 8002d4c:	4019      	ands	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2103      	movs	r1, #3
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	2101      	movs	r1, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2103      	movs	r1, #3
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	f67f af40 	bls.w	8002c24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40013800 	.word	0x40013800
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dec:	e003      	b.n	8002df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	041a      	lsls	r2, r3, #16
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	619a      	str	r2, [r3, #24]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	695a      	ldr	r2, [r3, #20]
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d006      	beq.n	8002e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	88fb      	ldrh	r3, [r7, #6]
 8002e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f005 f958 	bl	80080d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e12b      	b.n	800309e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe ff06 	bl	8001c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e98:	f001 fba6 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a81      	ldr	r2, [pc, #516]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d807      	bhi.n	8002eb8 <HAL_I2C_Init+0x84>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_I2C_Init+0x278>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bf94      	ite	ls
 8002eb0:	2301      	movls	r3, #1
 8002eb2:	2300      	movhi	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e006      	b.n	8002ec6 <HAL_I2C_Init+0x92>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a7d      	ldr	r2, [pc, #500]	; (80030b0 <HAL_I2C_Init+0x27c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0e7      	b.n	800309e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4a78      	ldr	r2, [pc, #480]	; (80030b4 <HAL_I2C_Init+0x280>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	0c9b      	lsrs	r3, r3, #18
 8002ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d802      	bhi.n	8002f08 <HAL_I2C_Init+0xd4>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3301      	adds	r3, #1
 8002f06:	e009      	b.n	8002f1c <HAL_I2C_Init+0xe8>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	4a69      	ldr	r2, [pc, #420]	; (80030b8 <HAL_I2C_Init+0x284>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	099b      	lsrs	r3, r3, #6
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	495c      	ldr	r1, [pc, #368]	; (80030a8 <HAL_I2C_Init+0x274>)
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d819      	bhi.n	8002f70 <HAL_I2C_Init+0x13c>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e59      	subs	r1, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f4a:	1c59      	adds	r1, r3, #1
 8002f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f50:	400b      	ands	r3, r1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_I2C_Init+0x138>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1e59      	subs	r1, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	e051      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	e04f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d111      	bne.n	8002f9c <HAL_I2C_Init+0x168>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	1e58      	subs	r0, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e012      	b.n	8002fc2 <HAL_I2C_Init+0x18e>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	0099      	lsls	r1, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Init+0x196>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_I2C_Init+0x1bc>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1e58      	subs	r0, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6859      	ldr	r1, [r3, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	440b      	add	r3, r1
 8002fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fee:	e00f      	b.n	8003010 <HAL_I2C_Init+0x1dc>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6809      	ldr	r1, [r1, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800303e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6911      	ldr	r1, [r2, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	4311      	orrs	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	000186a0 	.word	0x000186a0
 80030ac:	001e847f 	.word	0x001e847f
 80030b0:	003d08ff 	.word	0x003d08ff
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	10624dd3 	.word	0x10624dd3

080030bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	460b      	mov	r3, r1
 80030ca:	817b      	strh	r3, [r7, #10]
 80030cc:	4613      	mov	r3, r2
 80030ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff f932 	bl	8002338 <HAL_GetTick>
 80030d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 80e0 	bne.w	80032a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2319      	movs	r3, #25
 80030ea:	2201      	movs	r2, #1
 80030ec:	4970      	ldr	r1, [pc, #448]	; (80032b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fc58 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0d3      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_I2C_Master_Transmit+0x50>
 8003108:	2302      	movs	r3, #2
 800310a:	e0cc      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d007      	beq.n	8003132 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2221      	movs	r2, #33	; 0x21
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2210      	movs	r2, #16
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	893a      	ldrh	r2, [r7, #8]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003174:	8979      	ldrh	r1, [r7, #10]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6a3a      	ldr	r2, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fac2 	bl	8003704 <I2C_MasterRequestWrite>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e08d      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031a0:	e066      	b.n	8003270 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	6a39      	ldr	r1, [r7, #32]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fcd2 	bl	8003b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d107      	bne.n	80031ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06b      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d11b      	bne.n	8003244 <HAL_I2C_Master_Transmit+0x188>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	6a39      	ldr	r1, [r7, #32]
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fcc2 	bl	8003bd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01a      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d194      	bne.n	80031a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	00100002 	.word	0x00100002
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	817b      	strh	r3, [r7, #10]
 80032c8:	4613      	mov	r3, r2
 80032ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff f834 	bl	8002338 <HAL_GetTick>
 80032d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f040 820b 	bne.w	80036f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	2319      	movs	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	497c      	ldr	r1, [pc, #496]	; (80034dc <HAL_I2C_Master_Receive+0x224>)
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fb5a 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
 80032f8:	e1fe      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_I2C_Master_Receive+0x50>
 8003304:	2302      	movs	r3, #2
 8003306:	e1f7      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d007      	beq.n	800332e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2222      	movs	r2, #34	; 0x22
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2210      	movs	r2, #16
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	893a      	ldrh	r2, [r7, #8]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4a5c      	ldr	r2, [pc, #368]	; (80034e0 <HAL_I2C_Master_Receive+0x228>)
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fa46 	bl	8003808 <I2C_MasterRequestRead>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1b8      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d113      	bne.n	80033b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e18c      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d11b      	bne.n	80033f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e16c      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d11b      	bne.n	8003436 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	e14c      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003444:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800345c:	e138      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	2b03      	cmp	r3, #3
 8003464:	f200 80f1 	bhi.w	800364a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b01      	cmp	r3, #1
 800346e:	d123      	bne.n	80034b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003472:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fbed 	bl	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e139      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b6:	e10b      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d14e      	bne.n	800355e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	2200      	movs	r2, #0
 80034c8:	4906      	ldr	r1, [pc, #24]	; (80034e4 <HAL_I2C_Master_Receive+0x22c>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fa6a 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e10e      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000
 80034e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800355c:	e0b8      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	4966      	ldr	r1, [pc, #408]	; (8003700 <HAL_I2C_Master_Receive+0x448>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa1b 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0bf      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	2200      	movs	r2, #0
 80035c2:	494f      	ldr	r1, [pc, #316]	; (8003700 <HAL_I2C_Master_Receive+0x448>)
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f9ed 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e091      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003648:	e042      	b.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fb00 	bl	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e04c      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d118      	bne.n	80036d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f aec2 	bne.w	800345e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
  }
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	00010004 	.word	0x00010004

08003704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d006      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d003      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e00b      	b.n	8003758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	2b12      	cmp	r3, #18
 8003746:	d107      	bne.n	8003758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f91d 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377e:	d103      	bne.n	8003788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e035      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003794:	d108      	bne.n	80037a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a4:	611a      	str	r2, [r3, #16]
 80037a6:	e01b      	b.n	80037e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	11db      	asrs	r3, r3, #7
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0306 	and.w	r3, r3, #6
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f063 030f 	orn	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	490e      	ldr	r1, [pc, #56]	; (8003800 <I2C_MasterRequestWrite+0xfc>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f943 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e010      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <I2C_MasterRequestWrite+0x100>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f933 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	00010008 	.word	0x00010008
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	460b      	mov	r3, r1
 8003816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d006      	beq.n	8003842 <I2C_MasterRequestRead+0x3a>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d003      	beq.n	8003842 <I2C_MasterRequestRead+0x3a>
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003840:	d108      	bne.n	8003854 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00b      	b.n	800386c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b11      	cmp	r3, #17
 800385a:	d107      	bne.n	800386c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f893 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003892:	d103      	bne.n	800389c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e079      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a8:	d108      	bne.n	80038bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	e05f      	b.n	800397c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038bc:	897b      	ldrh	r3, [r7, #10]
 80038be:	11db      	asrs	r3, r3, #7
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	f003 0306 	and.w	r3, r3, #6
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f063 030f 	orn	r3, r3, #15
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4930      	ldr	r1, [pc, #192]	; (800399c <I2C_MasterRequestRead+0x194>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f8b9 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e054      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4929      	ldr	r1, [pc, #164]	; (80039a0 <I2C_MasterRequestRead+0x198>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8a9 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e044      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f831 	bl	80039a4 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00d      	beq.n	8003964 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003956:	d103      	bne.n	8003960 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e017      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	11db      	asrs	r3, r3, #7
 8003968:	b2db      	uxtb	r3, r3
 800396a:	f003 0306 	and.w	r3, r3, #6
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f063 030e 	orn	r3, r3, #14
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <I2C_MasterRequestRead+0x198>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f865 	bl	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	00010008 	.word	0x00010008
 80039a0:	00010002 	.word	0x00010002

080039a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b4:	e025      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d021      	beq.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039be:	f7fe fcbb 	bl	8002338 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d302      	bcc.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d116      	bne.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e023      	b.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10d      	bne.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	e00c      	b.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d0b6      	beq.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b084      	sub	sp, #16
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a60:	e051      	b.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d123      	bne.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0204 	orr.w	r2, r3, #4
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e046      	b.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d021      	beq.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe fc39 	bl	8002338 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d116      	bne.n	8003b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e020      	b.n	8003b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d10c      	bne.n	8003b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	e00b      	b.n	8003b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d18d      	bne.n	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5c:	e02d      	b.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f8ce 	bl	8003d00 <I2C_IsAcknowledgeFailed>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e02d      	b.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d021      	beq.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b76:	f7fe fbdf 	bl	8002338 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d302      	bcc.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d116      	bne.n	8003bba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e007      	b.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d1ca      	bne.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bde:	e02d      	b.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f88d 	bl	8003d00 <I2C_IsAcknowledgeFailed>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e02d      	b.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d021      	beq.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf8:	f7fe fb9e 	bl	8002338 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e007      	b.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d1ca      	bne.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	e042      	b.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d119      	bne.n	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0210 	mvn.w	r2, #16
 8003c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e029      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7fe fb48 	bl	8002338 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d116      	bne.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0220 	orr.w	r2, r3, #32
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e007      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d1b5      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d11b      	bne.n	8003d50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_PWR_EnterSTOPMode+0x50>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 0203 	bic.w	r2, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_PWR_EnterSTOPMode+0x50>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_PWR_EnterSTOPMode+0x54>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <HAL_PWR_EnterSTOPMode+0x54>)
 8003d82:	f043 0304 	orr.w	r3, r3, #4
 8003d86:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8003d8e:	bf30      	wfi
 8003d90:	e002      	b.n	8003d98 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d92:	bf40      	sev
    __WFE();
 8003d94:	bf20      	wfe
    __WFE();
 8003d96:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_PWR_EnterSTOPMode+0x54>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_PWR_EnterSTOPMode+0x54>)
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6113      	str	r3, [r2, #16]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40007000 	.word	0x40007000
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e25b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d075      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	4ba3      	ldr	r3, [pc, #652]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de2:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d112      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b9d      	ldr	r3, [pc, #628]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4b99      	ldr	r3, [pc, #612]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d05b      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x108>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d157      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e236      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x74>
 8003e1e:	4b91      	ldr	r3, [pc, #580]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a90      	ldr	r2, [pc, #576]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e01d      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x98>
 8003e36:	4b8b      	ldr	r3, [pc, #556]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a8a      	ldr	r2, [pc, #552]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	4b88      	ldr	r3, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0xb0>
 8003e50:	4b84      	ldr	r3, [pc, #528]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a83      	ldr	r2, [pc, #524]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a80      	ldr	r2, [pc, #512]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d013      	beq.n	8003e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e70:	f7fe fa62 	bl	8002338 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe fa5e 	bl	8002338 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e1fb      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b76      	ldr	r3, [pc, #472]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCC_OscConfig+0xc0>
 8003e96:	e014      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fe fa4e 	bl	8002338 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fa4a 	bl	8002338 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b64      	cmp	r3, #100	; 0x64
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e1e7      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb2:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0xe8>
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d063      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	4b65      	ldr	r3, [pc, #404]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eda:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e1bb      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	4b56      	ldr	r3, [pc, #344]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4952      	ldr	r1, [pc, #328]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	e03a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f28:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <HAL_RCC_OscConfig+0x2b0>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fa03 	bl	8002338 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fe f9ff 	bl	8002338 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e19c      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f48:	4b46      	ldr	r3, [pc, #280]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4940      	ldr	r1, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6a:	4b3f      	ldr	r3, [pc, #252]	; (8004068 <HAL_RCC_OscConfig+0x2b0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe f9e2 	bl	8002338 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f78:	f7fe f9de 	bl	8002338 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e17b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	4b36      	ldr	r3, [pc, #216]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d030      	beq.n	8004004 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <HAL_RCC_OscConfig+0x2b4>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe f9c2 	bl	8002338 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fe f9be 	bl	8002338 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e15b      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x200>
 8003fd6:	e015      	b.n	8004004 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <HAL_RCC_OscConfig+0x2b4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fe f9ab 	bl	8002338 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe6:	f7fe f9a7 	bl	8002338 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e144      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80a0 	beq.w	8004152 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10f      	bne.n	8004042 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d121      	bne.n	8004092 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_RCC_OscConfig+0x2b8>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7fe f96d 	bl	8002338 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e011      	b.n	8004086 <HAL_RCC_OscConfig+0x2ce>
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	42470000 	.word	0x42470000
 800406c:	42470e80 	.word	0x42470e80
 8004070:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004074:	f7fe f960 	bl	8002338 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0fd      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x4d4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
 800409a:	4b7d      	ldr	r3, [pc, #500]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	4a7c      	ldr	r2, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	6713      	str	r3, [r2, #112]	; 0x70
 80040a6:	e01c      	b.n	80040e2 <HAL_RCC_OscConfig+0x32a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x312>
 80040b0:	4b77      	ldr	r3, [pc, #476]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a76      	ldr	r2, [pc, #472]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040b6:	f043 0304 	orr.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b74      	ldr	r3, [pc, #464]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a73      	ldr	r2, [pc, #460]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x32a>
 80040ca:	4b71      	ldr	r3, [pc, #452]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a70      	ldr	r2, [pc, #448]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b6e      	ldr	r3, [pc, #440]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a6d      	ldr	r2, [pc, #436]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ea:	f7fe f925 	bl	8002338 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fe f921 	bl	8002338 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0bc      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ee      	beq.n	80040f2 <HAL_RCC_OscConfig+0x33a>
 8004114:	e014      	b.n	8004140 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fe f90f 	bl	8002338 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe f90b 	bl	8002338 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0a6      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	4b56      	ldr	r3, [pc, #344]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d105      	bne.n	8004152 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b52      	ldr	r3, [pc, #328]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a51      	ldr	r2, [pc, #324]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8092 	beq.w	8004280 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415c:	4b4c      	ldr	r3, [pc, #304]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 030c 	and.w	r3, r3, #12
 8004164:	2b08      	cmp	r3, #8
 8004166:	d05c      	beq.n	8004222 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d141      	bne.n	80041f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004170:	4b48      	ldr	r3, [pc, #288]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004176:	f7fe f8df 	bl	8002338 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417e:	f7fe f8db 	bl	8002338 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e078      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004190:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	019b      	lsls	r3, r3, #6
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	4933      	ldr	r1, [pc, #204]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c6:	4b33      	ldr	r3, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe f8b4 	bl	8002338 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fe f8b0 	bl	8002338 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e04d      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x41c>
 80041f2:	e045      	b.n	8004280 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x4dc>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fa:	f7fe f89d 	bl	8002338 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fe f899 	bl	8002338 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e036      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x44a>
 8004220:	e02e      	b.n	8004280 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e029      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800422e:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_RCC_OscConfig+0x4d8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	429a      	cmp	r2, r3
 8004240:	d11c      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d115      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004256:	4013      	ands	r3, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425c:	4293      	cmp	r3, r2
 800425e:	d10d      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d106      	bne.n	800427c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40007000 	.word	0x40007000
 8004290:	40023800 	.word	0x40023800
 8004294:	42470060 	.word	0x42470060

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0cc      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b68      	ldr	r3, [pc, #416]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d90c      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800430e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d044      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d119      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d003      	beq.n	8004356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	2b03      	cmp	r3, #3
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e067      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4934      	ldr	r1, [pc, #208]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004388:	f7fd ffd6 	bl	8002338 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fd ffd2 	bl	8002338 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e04f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 020c 	and.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1eb      	bne.n	8004390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d20c      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f821 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	490a      	ldr	r1, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1c8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd ff36 	bl	80022b0 <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023c00 	.word	0x40023c00
 8004454:	40023800 	.word	0x40023800
 8004458:	0800efa0 	.word	0x0800efa0
 800445c:	20000008 	.word	0x20000008
 8004460:	2000000c 	.word	0x2000000c

08004464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004464:	b5b0      	push	{r4, r5, r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800446a:	2100      	movs	r1, #0
 800446c:	6079      	str	r1, [r7, #4]
 800446e:	2100      	movs	r1, #0
 8004470:	60f9      	str	r1, [r7, #12]
 8004472:	2100      	movs	r1, #0
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004476:	2100      	movs	r1, #0
 8004478:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800447a:	4952      	ldr	r1, [pc, #328]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800447c:	6889      	ldr	r1, [r1, #8]
 800447e:	f001 010c 	and.w	r1, r1, #12
 8004482:	2908      	cmp	r1, #8
 8004484:	d00d      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x3e>
 8004486:	2908      	cmp	r1, #8
 8004488:	f200 8094 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x150>
 800448c:	2900      	cmp	r1, #0
 800448e:	d002      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x32>
 8004490:	2904      	cmp	r1, #4
 8004492:	d003      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x38>
 8004494:	e08e      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004496:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004498:	60bb      	str	r3, [r7, #8]
       break;
 800449a:	e08e      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800449c:	4b4b      	ldr	r3, [pc, #300]	; (80045cc <HAL_RCC_GetSysClockFreq+0x168>)
 800449e:	60bb      	str	r3, [r7, #8]
      break;
 80044a0:	e08b      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a2:	4948      	ldr	r1, [pc, #288]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a4:	6849      	ldr	r1, [r1, #4]
 80044a6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80044aa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ac:	4945      	ldr	r1, [pc, #276]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80044ae:	6849      	ldr	r1, [r1, #4]
 80044b0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d024      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b8:	4942      	ldr	r1, [pc, #264]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80044ba:	6849      	ldr	r1, [r1, #4]
 80044bc:	0989      	lsrs	r1, r1, #6
 80044be:	4608      	mov	r0, r1
 80044c0:	f04f 0100 	mov.w	r1, #0
 80044c4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044c8:	f04f 0500 	mov.w	r5, #0
 80044cc:	ea00 0204 	and.w	r2, r0, r4
 80044d0:	ea01 0305 	and.w	r3, r1, r5
 80044d4:	493d      	ldr	r1, [pc, #244]	; (80045cc <HAL_RCC_GetSysClockFreq+0x168>)
 80044d6:	fb01 f003 	mul.w	r0, r1, r3
 80044da:	2100      	movs	r1, #0
 80044dc:	fb01 f102 	mul.w	r1, r1, r2
 80044e0:	1844      	adds	r4, r0, r1
 80044e2:	493a      	ldr	r1, [pc, #232]	; (80045cc <HAL_RCC_GetSysClockFreq+0x168>)
 80044e4:	fba2 0101 	umull	r0, r1, r2, r1
 80044e8:	1863      	adds	r3, r4, r1
 80044ea:	4619      	mov	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	f7fc fb80 	bl	8000bf8 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e04a      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004502:	4b30      	ldr	r3, [pc, #192]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	461a      	mov	r2, r3
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	ea02 0400 	and.w	r4, r2, r0
 800451a:	ea03 0501 	and.w	r5, r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	014b      	lsls	r3, r1, #5
 800452c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004530:	0142      	lsls	r2, r0, #5
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	1b00      	subs	r0, r0, r4
 8004538:	eb61 0105 	sbc.w	r1, r1, r5
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	018b      	lsls	r3, r1, #6
 8004546:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800454a:	0182      	lsls	r2, r0, #6
 800454c:	1a12      	subs	r2, r2, r0
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	00d9      	lsls	r1, r3, #3
 800455c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004560:	00d0      	lsls	r0, r2, #3
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	1912      	adds	r2, r2, r4
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	f04f 0000 	mov.w	r0, #0
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	0299      	lsls	r1, r3, #10
 8004576:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800457a:	0290      	lsls	r0, r2, #10
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	461a      	mov	r2, r3
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	f7fc fb34 	bl	8000bf8 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x160>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	60bb      	str	r3, [r7, #8]
      break;
 80045b2:	e002      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x164>)
 80045b6:	60bb      	str	r3, [r7, #8]
      break;
 80045b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ba:	68bb      	ldr	r3, [r7, #8]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bdb0      	pop	{r4, r5, r7, pc}
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	017d7840 	.word	0x017d7840

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000008 	.word	0x20000008

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	; (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	0800efb0 	.word	0x0800efb0

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004614:	f7ff ffdc 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0b5b      	lsrs	r3, r3, #13
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	0800efb0 	.word	0x0800efb0

08004638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e056      	b.n	80046f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d106      	bne.n	800466a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fd fb49 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2202      	movs	r2, #2
 800466e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004680:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	ea42 0103 	orr.w	r1, r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	f003 0104 	and.w	r1, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_SPI_Transmit+0x22>
 800471e:	2302      	movs	r3, #2
 8004720:	e11e      	b.n	8004960 <HAL_SPI_Transmit+0x260>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800472a:	f7fd fe05 	bl	8002338 <HAL_GetTick>
 800472e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004740:	2302      	movs	r3, #2
 8004742:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004744:	e103      	b.n	800494e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_SPI_Transmit+0x52>
 800474c:	88fb      	ldrh	r3, [r7, #6]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d102      	bne.n	8004758 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004756:	e0fa      	b.n	800494e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2203      	movs	r2, #3
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d107      	bne.n	80047b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d007      	beq.n	80047ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d14b      	bne.n	8004870 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SPI_Transmit+0xe6>
 80047e0:	8afb      	ldrh	r3, [r7, #22]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d13e      	bne.n	8004864 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	881a      	ldrh	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	1c9a      	adds	r2, r3, #2
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800480a:	e02b      	b.n	8004864 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d112      	bne.n	8004840 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	881a      	ldrh	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	86da      	strh	r2, [r3, #54]	; 0x36
 800483e:	e011      	b.n	8004864 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004840:	f7fd fd7a 	bl	8002338 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d803      	bhi.n	8004858 <HAL_SPI_Transmit+0x158>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d102      	bne.n	800485e <HAL_SPI_Transmit+0x15e>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004862:	e074      	b.n	800494e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ce      	bne.n	800480c <HAL_SPI_Transmit+0x10c>
 800486e:	e04c      	b.n	800490a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_SPI_Transmit+0x17e>
 8004878:	8afb      	ldrh	r3, [r7, #22]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d140      	bne.n	8004900 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048a4:	e02c      	b.n	8004900 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d113      	bne.n	80048dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80048da:	e011      	b.n	8004900 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048dc:	f7fd fd2c 	bl	8002338 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d803      	bhi.n	80048f4 <HAL_SPI_Transmit+0x1f4>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x1fa>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048fe:	e026      	b.n	800494e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1cd      	bne.n	80048a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fba4 	bl	800505c <SPI_EndRxTxTransaction>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e000      	b.n	800494e <HAL_SPI_Transmit+0x24e>
  }

error:
 800494c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800495e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004984:	d112      	bne.n	80049ac <HAL_SPI_Receive+0x44>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10e      	bne.n	80049ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2204      	movs	r2, #4
 8004992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f8e9 	bl	8004b7a <HAL_SPI_TransmitReceive>
 80049a8:	4603      	mov	r3, r0
 80049aa:	e0e2      	b.n	8004b72 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Receive+0x52>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0db      	b.n	8004b72 <HAL_SPI_Receive+0x20a>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c2:	f7fd fcb9 	bl	8002338 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d002      	beq.n	80049da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
 80049d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049d8:	e0c2      	b.n	8004b60 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_SPI_Receive+0x7e>
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ea:	e0b9      	b.n	8004b60 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2204      	movs	r2, #4
 80049f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	88fa      	ldrh	r2, [r7, #6]
 8004a0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a32:	d107      	bne.n	8004a44 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4e:	2b40      	cmp	r3, #64	; 0x40
 8004a50:	d007      	beq.n	8004a62 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d162      	bne.n	8004b30 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a6a:	e02e      	b.n	8004aca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d115      	bne.n	8004aa6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f103 020c 	add.w	r2, r3, #12
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aa4:	e011      	b.n	8004aca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aa6:	f7fd fc47 	bl	8002338 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d803      	bhi.n	8004abe <HAL_SPI_Receive+0x156>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d102      	bne.n	8004ac4 <HAL_SPI_Receive+0x15c>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ac8:	e04a      	b.n	8004b60 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1cb      	bne.n	8004a6c <HAL_SPI_Receive+0x104>
 8004ad4:	e031      	b.n	8004b3a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d113      	bne.n	8004b0c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	b292      	uxth	r2, r2
 8004af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b0a:	e011      	b.n	8004b30 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b0c:	f7fd fc14 	bl	8002338 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d803      	bhi.n	8004b24 <HAL_SPI_Receive+0x1bc>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d102      	bne.n	8004b2a <HAL_SPI_Receive+0x1c2>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d102      	bne.n	8004b30 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b2e:	e017      	b.n	8004b60 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1cd      	bne.n	8004ad6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	6839      	ldr	r1, [r7, #0]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fa27 	bl	8004f92 <SPI_EndRxTransaction>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]
 8004b5c:	e000      	b.n	8004b60 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004b5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b08c      	sub	sp, #48	; 0x30
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x26>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e18a      	b.n	8004eb6 <HAL_SPI_TransmitReceive+0x33c>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba8:	f7fd fbc6 	bl	8002338 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d00f      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x70>
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd0:	d107      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <HAL_SPI_TransmitReceive+0x68>
 8004bda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d003      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
 8004be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004be8:	e15b      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_SPI_TransmitReceive+0x82>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_TransmitReceive+0x82>
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c02:	e14e      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d003      	beq.n	8004c18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2205      	movs	r2, #5
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	887a      	ldrh	r2, [r7, #2]
 8004c28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	887a      	ldrh	r2, [r7, #2]
 8004c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	887a      	ldrh	r2, [r7, #2]
 8004c3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b40      	cmp	r3, #64	; 0x40
 8004c5a:	d007      	beq.n	8004c6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c74:	d178      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x10a>
 8004c7e:	8b7b      	ldrh	r3, [r7, #26]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d166      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c88:	881a      	ldrh	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	1c9a      	adds	r2, r3, #2
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca8:	e053      	b.n	8004d52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d11b      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x176>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x176>
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d113      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	881a      	ldrh	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	1c9a      	adds	r2, r3, #2
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d119      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x1b8>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d014      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	b292      	uxth	r2, r2
 8004d14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	1c9a      	adds	r2, r3, #2
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d32:	f7fd fb01 	bl	8002338 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d807      	bhi.n	8004d52 <HAL_SPI_TransmitReceive+0x1d8>
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d48:	d003      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d50:	e0a7      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1a6      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x130>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1a1      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x130>
 8004d66:	e07c      	b.n	8004e62 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0x1fc>
 8004d70:	8b7b      	ldrh	r3, [r7, #26]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d16b      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d9c:	e057      	b.n	8004e4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d11c      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x26c>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x26c>
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d114      	bne.n	8004de6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	7812      	ldrb	r2, [r2, #0]
 8004dc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d119      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x2ae>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d014      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e24:	2301      	movs	r3, #1
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e28:	f7fd fa86 	bl	8002338 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d803      	bhi.n	8004e40 <HAL_SPI_TransmitReceive+0x2c6>
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x2cc>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d103      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e4c:	e029      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1a2      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x224>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d19d      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f8f8 	bl	800505c <SPI_EndRxTxTransaction>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e7e:	e010      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10b      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	e000      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ea0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3730      	adds	r7, #48	; 0x30
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ece:	e04c      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d048      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ed8:	f7fd fa2e 	bl	8002338 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d902      	bls.n	8004eee <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d13d      	bne.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f06:	d111      	bne.n	8004f2c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f10:	d004      	beq.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1a:	d107      	bne.n	8004f2c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f34:	d10f      	bne.n	8004f56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e00f      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1a3      	bne.n	8004ed0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa6:	d111      	bne.n	8004fcc <SPI_EndRxTransaction+0x3a>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fb0:	d004      	beq.n	8004fbc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fba:	d107      	bne.n	8004fcc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd4:	d12a      	bne.n	800502c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fde:	d012      	beq.n	8005006 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2180      	movs	r1, #128	; 0x80
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7ff ff67 	bl	8004ebe <SPI_WaitFlagStateUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02d      	beq.n	8005052 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f043 0220 	orr.w	r2, r3, #32
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e026      	b.n	8005054 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2200      	movs	r2, #0
 800500e:	2101      	movs	r1, #1
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f7ff ff54 	bl	8004ebe <SPI_WaitFlagStateUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01a      	beq.n	8005052 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e013      	b.n	8005054 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff ff41 	bl	8004ebe <SPI_WaitFlagStateUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e000      	b.n	8005054 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005068:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <SPI_EndRxTxTransaction+0x7c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <SPI_EndRxTxTransaction+0x80>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	0d5b      	lsrs	r3, r3, #21
 8005074:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005086:	d112      	bne.n	80050ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2200      	movs	r2, #0
 8005090:	2180      	movs	r1, #128	; 0x80
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f7ff ff13 	bl	8004ebe <SPI_WaitFlagStateUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	f043 0220 	orr.w	r2, r3, #32
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e00f      	b.n	80050ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b80      	cmp	r3, #128	; 0x80
 80050c6:	d0f2      	beq.n	80050ae <SPI_EndRxTxTransaction+0x52>
 80050c8:	e000      	b.n	80050cc <SPI_EndRxTxTransaction+0x70>
        break;
 80050ca:	bf00      	nop
  }

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000008 	.word	0x20000008
 80050dc:	165e9f81 	.word	0x165e9f81

080050e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e01d      	b.n	800512e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fc fe40 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 f8ce 	bl	80052c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_TIM_ConfigClockSource+0x18>
 800514a:	2302      	movs	r3, #2
 800514c:	e0b3      	b.n	80052b6 <HAL_TIM_ConfigClockSource+0x180>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2202      	movs	r2, #2
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800516c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005174:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	d03e      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xd0>
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	f200 8087 	bhi.w	800529e <HAL_TIM_ConfigClockSource+0x168>
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005194:	f000 8085 	beq.w	80052a2 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800519c:	d87f      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 800519e:	2b70      	cmp	r3, #112	; 0x70
 80051a0:	d01a      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0xa2>
 80051a2:	2b70      	cmp	r3, #112	; 0x70
 80051a4:	d87b      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 80051a6:	2b60      	cmp	r3, #96	; 0x60
 80051a8:	d050      	beq.n	800524c <HAL_TIM_ConfigClockSource+0x116>
 80051aa:	2b60      	cmp	r3, #96	; 0x60
 80051ac:	d877      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 80051ae:	2b50      	cmp	r3, #80	; 0x50
 80051b0:	d03c      	beq.n	800522c <HAL_TIM_ConfigClockSource+0xf6>
 80051b2:	2b50      	cmp	r3, #80	; 0x50
 80051b4:	d873      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	d058      	beq.n	800526c <HAL_TIM_ConfigClockSource+0x136>
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d86f      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 80051be:	2b30      	cmp	r3, #48	; 0x30
 80051c0:	d064      	beq.n	800528c <HAL_TIM_ConfigClockSource+0x156>
 80051c2:	2b30      	cmp	r3, #48	; 0x30
 80051c4:	d86b      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d060      	beq.n	800528c <HAL_TIM_ConfigClockSource+0x156>
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d867      	bhi.n	800529e <HAL_TIM_ConfigClockSource+0x168>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d05c      	beq.n	800528c <HAL_TIM_ConfigClockSource+0x156>
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d05a      	beq.n	800528c <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80051d6:	e062      	b.n	800529e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f000 f964 	bl	80054b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]
      break;
 8005204:	e04e      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f000 f94d 	bl	80054b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005228:	609a      	str	r2, [r3, #8]
      break;
 800522a:	e03b      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6859      	ldr	r1, [r3, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	461a      	mov	r2, r3
 800523a:	f000 f8c1 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2150      	movs	r1, #80	; 0x50
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f91a 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 800524a:	e02b      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	461a      	mov	r2, r3
 800525a:	f000 f8e0 	bl	800541e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2160      	movs	r1, #96	; 0x60
 8005264:	4618      	mov	r0, r3
 8005266:	f000 f90a 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 800526a:	e01b      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	461a      	mov	r2, r3
 800527a:	f000 f8a1 	bl	80053c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2140      	movs	r1, #64	; 0x40
 8005284:	4618      	mov	r0, r3
 8005286:	f000 f8fa 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 800528a:	e00b      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f000 f8f1 	bl	800547e <TIM_ITRx_SetConfig>
      break;
 800529c:	e002      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a34      	ldr	r2, [pc, #208]	; (80053a4 <TIM_Base_SetConfig+0xe4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00f      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052de:	d00b      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a31      	ldr	r2, [pc, #196]	; (80053a8 <TIM_Base_SetConfig+0xe8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d007      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a30      	ldr	r2, [pc, #192]	; (80053ac <TIM_Base_SetConfig+0xec>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d003      	beq.n	80052f8 <TIM_Base_SetConfig+0x38>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a2f      	ldr	r2, [pc, #188]	; (80053b0 <TIM_Base_SetConfig+0xf0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d108      	bne.n	800530a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a25      	ldr	r2, [pc, #148]	; (80053a4 <TIM_Base_SetConfig+0xe4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01b      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005318:	d017      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <TIM_Base_SetConfig+0xe8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a21      	ldr	r2, [pc, #132]	; (80053ac <TIM_Base_SetConfig+0xec>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00f      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <TIM_Base_SetConfig+0xf0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00b      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <TIM_Base_SetConfig+0xf4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <TIM_Base_SetConfig+0xf8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_Base_SetConfig+0x8a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <TIM_Base_SetConfig+0xfc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d108      	bne.n	800535c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <TIM_Base_SetConfig+0xe4>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d103      	bne.n	8005390 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	615a      	str	r2, [r3, #20]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40014400 	.word	0x40014400
 80053bc:	40014800 	.word	0x40014800

080053c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f023 030a 	bic.w	r3, r3, #10
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	621a      	str	r2, [r3, #32]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800541e:	b480      	push	{r7}
 8005420:	b087      	sub	sp, #28
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f023 0210 	bic.w	r2, r3, #16
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	031b      	lsls	r3, r3, #12
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800545a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	621a      	str	r2, [r3, #32]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	f043 0307 	orr.w	r3, r3, #7
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2201      	movs	r2, #1
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	43db      	mvns	r3, r3
 8005516:	401a      	ands	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 031f 	and.w	r3, r3, #31
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005554:	2302      	movs	r3, #2
 8005556:	e050      	b.n	80055fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d013      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a16      	ldr	r2, [pc, #88]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a15      	ldr	r2, [pc, #84]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10c      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40014000 	.word	0x40014000

0800561c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e03f      	b.n	80056ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fbc4 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2224      	movs	r2, #36	; 0x24
 800564c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800565e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fb97 	bl	8005d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b088      	sub	sp, #32
 80056ba:	af02      	add	r7, sp, #8
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	f040 8083 	bne.w	80057de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_UART_Transmit+0x2e>
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e07b      	b.n	80057e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Transmit+0x40>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e074      	b.n	80057e0 <HAL_UART_Transmit+0x12a>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2221      	movs	r2, #33	; 0x21
 8005708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800570c:	f7fc fe14 	bl	8002338 <HAL_GetTick>
 8005710:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005726:	e042      	b.n	80057ae <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573e:	d122      	bne.n	8005786 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2200      	movs	r2, #0
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f9b6 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e042      	b.n	80057e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800576c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d103      	bne.n	800577e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3302      	adds	r3, #2
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	e017      	b.n	80057ae <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3301      	adds	r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	e013      	b.n	80057ae <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f993 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e01f      	b.n	80057e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	60ba      	str	r2, [r7, #8]
 80057a6:	781a      	ldrb	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1b7      	bne.n	8005728 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f97a 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e006      	b.n	80057e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e000      	b.n	80057e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d140      	bne.n	8005884 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_UART_Receive_IT+0x26>
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e039      	b.n	8005886 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_UART_Receive_IT+0x38>
 800581c:	2302      	movs	r3, #2
 800581e:	e032      	b.n	8005886 <HAL_UART_Receive_IT+0x9e>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2222      	movs	r2, #34	; 0x22
 8005844:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0220 	orr.w	r2, r2, #32
 800587e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_UART_IRQHandler+0x52>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9d6 	bl	8005c90 <UART_Receive_IT>
      return;
 80058e4:	e0d0      	b.n	8005a88 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80b0 	beq.w	8005a4e <HAL_UART_IRQHandler+0x1ba>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d105      	bne.n	8005904 <HAL_UART_IRQHandler+0x70>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80a5 	beq.w	8005a4e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_UART_IRQHandler+0x90>
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	f043 0201 	orr.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_UART_IRQHandler+0xb0>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	f043 0202 	orr.w	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_UART_IRQHandler+0xd0>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <HAL_UART_IRQHandler+0xfa>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <HAL_UART_IRQHandler+0xee>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	f043 0208 	orr.w	r2, r3, #8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d077      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_UART_IRQHandler+0x11c>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f970 	bl	8005c90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	bf0c      	ite	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	2300      	movne	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_UART_IRQHandler+0x144>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d031      	beq.n	8005a3c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f8b9 	bl	8005b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d123      	bne.n	8005a34 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <HAL_UART_IRQHandler+0x1fc>)
 8005a0a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fc fea1 	bl	8002758 <HAL_DMA_Abort_IT>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d016      	beq.n	8005a4a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a26:	4610      	mov	r0, r2
 8005a28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2a:	e00e      	b.n	8005a4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f83b 	bl	8005aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a32:	e00a      	b.n	8005a4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f837 	bl	8005aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3a:	e006      	b.n	8005a4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f833 	bl	8005aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a48:	e01d      	b.n	8005a86 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	bf00      	nop
    return;
 8005a4c:	e01b      	b.n	8005a86 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_UART_IRQHandler+0x1d6>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f8a6 	bl	8005bb4 <UART_Transmit_IT>
    return;
 8005a68:	e00e      	b.n	8005a88 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_UART_IRQHandler+0x1f4>
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f8ee 	bl	8005c60 <UART_EndTransmit_IT>
    return;
 8005a84:	e000      	b.n	8005a88 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005a86:	bf00      	nop
  }
}
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08005b8d 	.word	0x08005b8d

08005a94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005acc:	e02c      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d028      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0x30>
 8005adc:	f7fc fc2c 	bl	8002338 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d21d      	bcs.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005afa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e00f      	b.n	8005b48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d0c3      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ff7e 	bl	8005aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d144      	bne.n	8005c52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d11a      	bne.n	8005c08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]
 8005bfa:	e00e      	b.n	8005c1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]
 8005c06:	e008      	b.n	8005c1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6211      	str	r1, [r2, #32]
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4619      	mov	r1, r3
 8005c28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff07 	bl	8005a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b22      	cmp	r3, #34	; 0x22
 8005ca2:	d171      	bne.n	8005d88 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cac:	d123      	bne.n	8005cf6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10e      	bne.n	8005cda <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	1c9a      	adds	r2, r3, #2
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8005cd8:	e029      	b.n	8005d2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf4:	e01b      	b.n	8005d2e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6858      	ldr	r0, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	1c59      	adds	r1, r3, #1
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6291      	str	r1, [r2, #40]	; 0x28
 8005d0e:	b2c2      	uxtb	r2, r0
 8005d10:	701a      	strb	r2, [r3, #0]
 8005d12:	e00c      	b.n	8005d2e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	1c58      	adds	r0, r3, #1
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	6288      	str	r0, [r1, #40]	; 0x28
 8005d26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d120      	bne.n	8005d84 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0220 	bic.w	r2, r2, #32
 8005d50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fb fc36 	bl	80015ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e002      	b.n	8005d8a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	b0bd      	sub	sp, #244	; 0xf4
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db0:	68d9      	ldr	r1, [r3, #12]
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	ea40 0301 	orr.w	r3, r0, r1
 8005dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dec:	f021 010c 	bic.w	r1, r1, #12
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	6999      	ldr	r1, [r3, #24]
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	ea40 0301 	orr.w	r3, r0, r1
 8005e1a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	f040 81a5 	bne.w	8006174 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4bcd      	ldr	r3, [pc, #820]	; (8006168 <UART_SetConfig+0x3d4>)
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d006      	beq.n	8005e44 <UART_SetConfig+0xb0>
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	4bcb      	ldr	r3, [pc, #812]	; (800616c <UART_SetConfig+0x3d8>)
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	f040 80cb 	bne.w	8005fda <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e44:	f7fe fbe4 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8005e48:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e50:	461c      	mov	r4, r3
 8005e52:	f04f 0500 	mov.w	r5, #0
 8005e56:	4622      	mov	r2, r4
 8005e58:	462b      	mov	r3, r5
 8005e5a:	1891      	adds	r1, r2, r2
 8005e5c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005e60:	415b      	adcs	r3, r3
 8005e62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e66:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005e6a:	1912      	adds	r2, r2, r4
 8005e6c:	eb45 0303 	adc.w	r3, r5, r3
 8005e70:	f04f 0000 	mov.w	r0, #0
 8005e74:	f04f 0100 	mov.w	r1, #0
 8005e78:	00d9      	lsls	r1, r3, #3
 8005e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e7e:	00d0      	lsls	r0, r2, #3
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	1911      	adds	r1, r2, r4
 8005e86:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005e8a:	416b      	adcs	r3, r5
 8005e8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005eac:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005eb0:	f7fa fea2 	bl	8000bf8 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4bad      	ldr	r3, [pc, #692]	; (8006170 <UART_SetConfig+0x3dc>)
 8005eba:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	011e      	lsls	r6, r3, #4
 8005ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ec6:	461c      	mov	r4, r3
 8005ec8:	f04f 0500 	mov.w	r5, #0
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	67b9      	str	r1, [r7, #120]	; 0x78
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ed8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005edc:	1912      	adds	r2, r2, r4
 8005ede:	eb45 0303 	adc.w	r3, r5, r3
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	00d9      	lsls	r1, r3, #3
 8005eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef0:	00d0      	lsls	r0, r2, #3
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	1911      	adds	r1, r2, r4
 8005ef8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005efc:	416b      	adcs	r3, r5
 8005efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	1891      	adds	r1, r2, r2
 8005f10:	6739      	str	r1, [r7, #112]	; 0x70
 8005f12:	415b      	adcs	r3, r3
 8005f14:	677b      	str	r3, [r7, #116]	; 0x74
 8005f16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005f1a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005f1e:	f7fa fe6b 	bl	8000bf8 <__aeabi_uldivmod>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4b92      	ldr	r3, [pc, #584]	; (8006170 <UART_SetConfig+0x3dc>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	2164      	movs	r1, #100	; 0x64
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	3332      	adds	r3, #50	; 0x32
 8005f3a:	4a8d      	ldr	r2, [pc, #564]	; (8006170 <UART_SetConfig+0x3dc>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f48:	441e      	add	r6, r3
 8005f4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f04f 0100 	mov.w	r1, #0
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	1894      	adds	r4, r2, r2
 8005f5a:	66bc      	str	r4, [r7, #104]	; 0x68
 8005f5c:	415b      	adcs	r3, r3
 8005f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005f64:	1812      	adds	r2, r2, r0
 8005f66:	eb41 0303 	adc.w	r3, r1, r3
 8005f6a:	f04f 0400 	mov.w	r4, #0
 8005f6e:	f04f 0500 	mov.w	r5, #0
 8005f72:	00dd      	lsls	r5, r3, #3
 8005f74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f78:	00d4      	lsls	r4, r2, #3
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	1814      	adds	r4, r2, r0
 8005f80:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005f84:	414b      	adcs	r3, r1
 8005f86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	461a      	mov	r2, r3
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	1891      	adds	r1, r2, r2
 8005f98:	6639      	str	r1, [r7, #96]	; 0x60
 8005f9a:	415b      	adcs	r3, r3
 8005f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005fa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fa6:	f7fa fe27 	bl	8000bf8 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4b70      	ldr	r3, [pc, #448]	; (8006170 <UART_SetConfig+0x3dc>)
 8005fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	2164      	movs	r1, #100	; 0x64
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	3332      	adds	r3, #50	; 0x32
 8005fc2:	4a6b      	ldr	r2, [pc, #428]	; (8006170 <UART_SetConfig+0x3dc>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f003 0207 	and.w	r2, r3, #7
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4432      	add	r2, r6
 8005fd6:	609a      	str	r2, [r3, #8]
 8005fd8:	e26d      	b.n	80064b6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fda:	f7fe fb05 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005fde:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fe6:	461c      	mov	r4, r3
 8005fe8:	f04f 0500 	mov.w	r5, #0
 8005fec:	4622      	mov	r2, r4
 8005fee:	462b      	mov	r3, r5
 8005ff0:	1891      	adds	r1, r2, r2
 8005ff2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ff4:	415b      	adcs	r3, r3
 8005ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ffc:	1912      	adds	r2, r2, r4
 8005ffe:	eb45 0303 	adc.w	r3, r5, r3
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	00d9      	lsls	r1, r3, #3
 800600c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006010:	00d0      	lsls	r0, r2, #3
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	1911      	adds	r1, r2, r4
 8006018:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800601c:	416b      	adcs	r3, r5
 800601e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	461a      	mov	r2, r3
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	1891      	adds	r1, r2, r2
 8006030:	6539      	str	r1, [r7, #80]	; 0x50
 8006032:	415b      	adcs	r3, r3
 8006034:	657b      	str	r3, [r7, #84]	; 0x54
 8006036:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800603a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800603e:	f7fa fddb 	bl	8000bf8 <__aeabi_uldivmod>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4b4a      	ldr	r3, [pc, #296]	; (8006170 <UART_SetConfig+0x3dc>)
 8006048:	fba3 2302 	umull	r2, r3, r3, r2
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	011e      	lsls	r6, r3, #4
 8006050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006054:	461c      	mov	r4, r3
 8006056:	f04f 0500 	mov.w	r5, #0
 800605a:	4622      	mov	r2, r4
 800605c:	462b      	mov	r3, r5
 800605e:	1891      	adds	r1, r2, r2
 8006060:	64b9      	str	r1, [r7, #72]	; 0x48
 8006062:	415b      	adcs	r3, r3
 8006064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006066:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800606a:	1912      	adds	r2, r2, r4
 800606c:	eb45 0303 	adc.w	r3, r5, r3
 8006070:	f04f 0000 	mov.w	r0, #0
 8006074:	f04f 0100 	mov.w	r1, #0
 8006078:	00d9      	lsls	r1, r3, #3
 800607a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800607e:	00d0      	lsls	r0, r2, #3
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	1911      	adds	r1, r2, r4
 8006086:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800608a:	416b      	adcs	r3, r5
 800608c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	461a      	mov	r2, r3
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	1891      	adds	r1, r2, r2
 800609e:	6439      	str	r1, [r7, #64]	; 0x40
 80060a0:	415b      	adcs	r3, r3
 80060a2:	647b      	str	r3, [r7, #68]	; 0x44
 80060a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80060ac:	f7fa fda4 	bl	8000bf8 <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4b2e      	ldr	r3, [pc, #184]	; (8006170 <UART_SetConfig+0x3dc>)
 80060b6:	fba3 1302 	umull	r1, r3, r3, r2
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	2164      	movs	r1, #100	; 0x64
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	3332      	adds	r3, #50	; 0x32
 80060c8:	4a29      	ldr	r2, [pc, #164]	; (8006170 <UART_SetConfig+0x3dc>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060d6:	441e      	add	r6, r3
 80060d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060dc:	4618      	mov	r0, r3
 80060de:	f04f 0100 	mov.w	r1, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	1894      	adds	r4, r2, r2
 80060e8:	63bc      	str	r4, [r7, #56]	; 0x38
 80060ea:	415b      	adcs	r3, r3
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060f2:	1812      	adds	r2, r2, r0
 80060f4:	eb41 0303 	adc.w	r3, r1, r3
 80060f8:	f04f 0400 	mov.w	r4, #0
 80060fc:	f04f 0500 	mov.w	r5, #0
 8006100:	00dd      	lsls	r5, r3, #3
 8006102:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006106:	00d4      	lsls	r4, r2, #3
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	1814      	adds	r4, r2, r0
 800610e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006112:	414b      	adcs	r3, r1
 8006114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	461a      	mov	r2, r3
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	1891      	adds	r1, r2, r2
 8006126:	6339      	str	r1, [r7, #48]	; 0x30
 8006128:	415b      	adcs	r3, r3
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
 800612c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006130:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006134:	f7fa fd60 	bl	8000bf8 <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4b0c      	ldr	r3, [pc, #48]	; (8006170 <UART_SetConfig+0x3dc>)
 800613e:	fba3 1302 	umull	r1, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2164      	movs	r1, #100	; 0x64
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	3332      	adds	r3, #50	; 0x32
 8006150:	4a07      	ldr	r2, [pc, #28]	; (8006170 <UART_SetConfig+0x3dc>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f003 0207 	and.w	r2, r3, #7
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4432      	add	r2, r6
 8006164:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006166:	e1a6      	b.n	80064b6 <UART_SetConfig+0x722>
 8006168:	40011000 	.word	0x40011000
 800616c:	40011400 	.word	0x40011400
 8006170:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4bd1      	ldr	r3, [pc, #836]	; (80064c0 <UART_SetConfig+0x72c>)
 800617c:	429a      	cmp	r2, r3
 800617e:	d006      	beq.n	800618e <UART_SetConfig+0x3fa>
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	4bcf      	ldr	r3, [pc, #828]	; (80064c4 <UART_SetConfig+0x730>)
 8006188:	429a      	cmp	r2, r3
 800618a:	f040 80ca 	bne.w	8006322 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800618e:	f7fe fa3f 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8006192:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800619a:	461c      	mov	r4, r3
 800619c:	f04f 0500 	mov.w	r5, #0
 80061a0:	4622      	mov	r2, r4
 80061a2:	462b      	mov	r3, r5
 80061a4:	1891      	adds	r1, r2, r2
 80061a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80061a8:	415b      	adcs	r3, r3
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061b0:	1912      	adds	r2, r2, r4
 80061b2:	eb45 0303 	adc.w	r3, r5, r3
 80061b6:	f04f 0000 	mov.w	r0, #0
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	00d9      	lsls	r1, r3, #3
 80061c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061c4:	00d0      	lsls	r0, r2, #3
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	eb12 0a04 	adds.w	sl, r2, r4
 80061ce:	eb43 0b05 	adc.w	fp, r3, r5
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	f04f 0100 	mov.w	r1, #0
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061ec:	0082      	lsls	r2, r0, #2
 80061ee:	4650      	mov	r0, sl
 80061f0:	4659      	mov	r1, fp
 80061f2:	f7fa fd01 	bl	8000bf8 <__aeabi_uldivmod>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4bb3      	ldr	r3, [pc, #716]	; (80064c8 <UART_SetConfig+0x734>)
 80061fc:	fba3 2302 	umull	r2, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	011e      	lsls	r6, r3, #4
 8006204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006208:	4618      	mov	r0, r3
 800620a:	f04f 0100 	mov.w	r1, #0
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	1894      	adds	r4, r2, r2
 8006214:	623c      	str	r4, [r7, #32]
 8006216:	415b      	adcs	r3, r3
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
 800621a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800621e:	1812      	adds	r2, r2, r0
 8006220:	eb41 0303 	adc.w	r3, r1, r3
 8006224:	f04f 0400 	mov.w	r4, #0
 8006228:	f04f 0500 	mov.w	r5, #0
 800622c:	00dd      	lsls	r5, r3, #3
 800622e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006232:	00d4      	lsls	r4, r2, #3
 8006234:	4622      	mov	r2, r4
 8006236:	462b      	mov	r3, r5
 8006238:	1814      	adds	r4, r2, r0
 800623a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800623e:	414b      	adcs	r3, r1
 8006240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	4618      	mov	r0, r3
 800624c:	f04f 0100 	mov.w	r1, #0
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	008b      	lsls	r3, r1, #2
 800625a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800625e:	0082      	lsls	r2, r0, #2
 8006260:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006264:	f7fa fcc8 	bl	8000bf8 <__aeabi_uldivmod>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4b96      	ldr	r3, [pc, #600]	; (80064c8 <UART_SetConfig+0x734>)
 800626e:	fba3 1302 	umull	r1, r3, r3, r2
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2164      	movs	r1, #100	; 0x64
 8006276:	fb01 f303 	mul.w	r3, r1, r3
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	3332      	adds	r3, #50	; 0x32
 8006280:	4a91      	ldr	r2, [pc, #580]	; (80064c8 <UART_SetConfig+0x734>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628c:	441e      	add	r6, r3
 800628e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006292:	4618      	mov	r0, r3
 8006294:	f04f 0100 	mov.w	r1, #0
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	1894      	adds	r4, r2, r2
 800629e:	61bc      	str	r4, [r7, #24]
 80062a0:	415b      	adcs	r3, r3
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a8:	1812      	adds	r2, r2, r0
 80062aa:	eb41 0303 	adc.w	r3, r1, r3
 80062ae:	f04f 0400 	mov.w	r4, #0
 80062b2:	f04f 0500 	mov.w	r5, #0
 80062b6:	00dd      	lsls	r5, r3, #3
 80062b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062bc:	00d4      	lsls	r4, r2, #3
 80062be:	4622      	mov	r2, r4
 80062c0:	462b      	mov	r3, r5
 80062c2:	1814      	adds	r4, r2, r0
 80062c4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80062c8:	414b      	adcs	r3, r1
 80062ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f04f 0100 	mov.w	r1, #0
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	008b      	lsls	r3, r1, #2
 80062e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062e8:	0082      	lsls	r2, r0, #2
 80062ea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80062ee:	f7fa fc83 	bl	8000bf8 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b74      	ldr	r3, [pc, #464]	; (80064c8 <UART_SetConfig+0x734>)
 80062f8:	fba3 1302 	umull	r1, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	2164      	movs	r1, #100	; 0x64
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	3332      	adds	r3, #50	; 0x32
 800630a:	4a6f      	ldr	r2, [pc, #444]	; (80064c8 <UART_SetConfig+0x734>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f003 020f 	and.w	r2, r3, #15
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4432      	add	r2, r6
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	e0c9      	b.n	80064b6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006322:	f7fe f961 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006326:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800632a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800632e:	461c      	mov	r4, r3
 8006330:	f04f 0500 	mov.w	r5, #0
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	1891      	adds	r1, r2, r2
 800633a:	6139      	str	r1, [r7, #16]
 800633c:	415b      	adcs	r3, r3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006344:	1912      	adds	r2, r2, r4
 8006346:	eb45 0303 	adc.w	r3, r5, r3
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	00d9      	lsls	r1, r3, #3
 8006354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006358:	00d0      	lsls	r0, r2, #3
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	eb12 0804 	adds.w	r8, r2, r4
 8006362:	eb43 0905 	adc.w	r9, r3, r5
 8006366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	008b      	lsls	r3, r1, #2
 800637c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006380:	0082      	lsls	r2, r0, #2
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7fa fc37 	bl	8000bf8 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4b4e      	ldr	r3, [pc, #312]	; (80064c8 <UART_SetConfig+0x734>)
 8006390:	fba3 2302 	umull	r2, r3, r3, r2
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	011e      	lsls	r6, r3, #4
 8006398:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800639c:	4618      	mov	r0, r3
 800639e:	f04f 0100 	mov.w	r1, #0
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	1894      	adds	r4, r2, r2
 80063a8:	60bc      	str	r4, [r7, #8]
 80063aa:	415b      	adcs	r3, r3
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b2:	1812      	adds	r2, r2, r0
 80063b4:	eb41 0303 	adc.w	r3, r1, r3
 80063b8:	f04f 0400 	mov.w	r4, #0
 80063bc:	f04f 0500 	mov.w	r5, #0
 80063c0:	00dd      	lsls	r5, r3, #3
 80063c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063c6:	00d4      	lsls	r4, r2, #3
 80063c8:	4622      	mov	r2, r4
 80063ca:	462b      	mov	r3, r5
 80063cc:	1814      	adds	r4, r2, r0
 80063ce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80063d2:	414b      	adcs	r3, r1
 80063d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	4618      	mov	r0, r3
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	008b      	lsls	r3, r1, #2
 80063ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063f2:	0082      	lsls	r2, r0, #2
 80063f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063f8:	f7fa fbfe 	bl	8000bf8 <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4b31      	ldr	r3, [pc, #196]	; (80064c8 <UART_SetConfig+0x734>)
 8006402:	fba3 1302 	umull	r1, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2164      	movs	r1, #100	; 0x64
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	3332      	adds	r3, #50	; 0x32
 8006414:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <UART_SetConfig+0x734>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006420:	441e      	add	r6, r3
 8006422:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006426:	4618      	mov	r0, r3
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	1894      	adds	r4, r2, r2
 8006432:	603c      	str	r4, [r7, #0]
 8006434:	415b      	adcs	r3, r3
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800643c:	1812      	adds	r2, r2, r0
 800643e:	eb41 0303 	adc.w	r3, r1, r3
 8006442:	f04f 0400 	mov.w	r4, #0
 8006446:	f04f 0500 	mov.w	r5, #0
 800644a:	00dd      	lsls	r5, r3, #3
 800644c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006450:	00d4      	lsls	r4, r2, #3
 8006452:	4622      	mov	r2, r4
 8006454:	462b      	mov	r3, r5
 8006456:	1814      	adds	r4, r2, r0
 8006458:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800645c:	414b      	adcs	r3, r1
 800645e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4618      	mov	r0, r3
 800646a:	f04f 0100 	mov.w	r1, #0
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	f04f 0300 	mov.w	r3, #0
 8006476:	008b      	lsls	r3, r1, #2
 8006478:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800647c:	0082      	lsls	r2, r0, #2
 800647e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006482:	f7fa fbb9 	bl	8000bf8 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <UART_SetConfig+0x734>)
 800648c:	fba3 1302 	umull	r1, r3, r3, r2
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	2164      	movs	r1, #100	; 0x64
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	3332      	adds	r3, #50	; 0x32
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <UART_SetConfig+0x734>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	f003 020f 	and.w	r2, r3, #15
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4432      	add	r2, r6
 80064b2:	609a      	str	r2, [r3, #8]
}
 80064b4:	e7ff      	b.n	80064b6 <UART_SetConfig+0x722>
 80064b6:	bf00      	nop
 80064b8:	37f4      	adds	r7, #244	; 0xf4
 80064ba:	46bd      	mov	sp, r7
 80064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c0:	40011000 	.word	0x40011000
 80064c4:	40011400 	.word	0x40011400
 80064c8:	51eb851f 	.word	0x51eb851f

080064cc <Log_Info>:
  * @param  sizeStr  Amount of data elements to be sent
  * @param  inputStr pointer to data elements to be sent
  * @retval none
  */
void Log_Info(uint8_t* inputStr,  uint8_t sizeStr)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
		if(inputStr != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <Log_Info+0x24>
		{
		    HAL_UART_Transmit(&UART_LOG, inputStr, sizeStr, 1000);
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4807      	ldr	r0, [pc, #28]	; (8006508 <Log_Info+0x3c>)
 80064ea:	f7ff f8e4 	bl	80056b6 <HAL_UART_Transmit>
		}
		else
		{
				HAL_UART_Transmit(&UART_LOG, (uint8_t*)"Data Log NULL\r\n", 15, 1000);
		}
}
 80064ee:	e006      	b.n	80064fe <Log_Info+0x32>
				HAL_UART_Transmit(&UART_LOG, (uint8_t*)"Data Log NULL\r\n", 15, 1000);
 80064f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064f4:	220f      	movs	r2, #15
 80064f6:	4905      	ldr	r1, [pc, #20]	; (800650c <Log_Info+0x40>)
 80064f8:	4803      	ldr	r0, [pc, #12]	; (8006508 <Log_Info+0x3c>)
 80064fa:	f7ff f8dc 	bl	80056b6 <HAL_UART_Transmit>
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000d0c 	.word	0x20000d0c
 800650c:	0800e7f8 	.word	0x0800e7f8

08006510 <W25Q16_Trans_Recv>:
 *
 *
 * @param[in] data: value to be sent
 */
uint8_t W25Q16_Trans_Recv(uint8_t data)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af02      	add	r7, sp, #8
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
		uint8_t retValue = 0;	//local variable to return
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_TransmitReceive(&W25Q16_SPI, &data, &retValue, 1, 100);
 800651e:	f107 020f 	add.w	r2, r7, #15
 8006522:	1df9      	adds	r1, r7, #7
 8006524:	2364      	movs	r3, #100	; 0x64
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2301      	movs	r3, #1
 800652a:	4804      	ldr	r0, [pc, #16]	; (800653c <W25Q16_Trans_Recv+0x2c>)
 800652c:	f7fe fb25 	bl	8004b7a <HAL_SPI_TransmitReceive>
		return retValue;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000c18 	.word	0x20000c18

08006540 <W25Q16_Read_UniqID>:
 * This function reads Unique ID of W25Q16
 *
 * @param[in] none
 */
void W25Q16_Read_UniqID(void)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
		3. Send 4 dummy bytes
		4. Send 8 dummy byes and receive 8byte uniqueID
		5. Disable SPI
		******************************************************************************
		*/
		W25Q16_CS_EN; //Enable SPI
 8006546:	2200      	movs	r2, #0
 8006548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800654c:	4816      	ldr	r0, [pc, #88]	; (80065a8 <W25Q16_Read_UniqID+0x68>)
 800654e:	f7fc fc3f 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(READ_UNIQUE_ID); //Send READ_UNIQUE_ID Instruction
 8006552:	204b      	movs	r0, #75	; 0x4b
 8006554:	f7ff ffdc 	bl	8006510 <W25Q16_Trans_Recv>
		for(uint8_t i = 0; i < 4; i++) //Send 4 dummy bytes
 8006558:	2300      	movs	r3, #0
 800655a:	71fb      	strb	r3, [r7, #7]
 800655c:	e005      	b.n	800656a <W25Q16_Read_UniqID+0x2a>
		{
				W25Q16_Trans_Recv(DUMMY_BYTE);
 800655e:	20a5      	movs	r0, #165	; 0xa5
 8006560:	f7ff ffd6 	bl	8006510 <W25Q16_Trans_Recv>
		for(uint8_t i = 0; i < 4; i++) //Send 4 dummy bytes
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	3301      	adds	r3, #1
 8006568:	71fb      	strb	r3, [r7, #7]
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	2b03      	cmp	r3, #3
 800656e:	d9f6      	bls.n	800655e <W25Q16_Read_UniqID+0x1e>
		}
		for(uint8_t i = 0; i < 8; i++) //Send 8 dummy byes and receive 8byte uniqueID
 8006570:	2300      	movs	r3, #0
 8006572:	71bb      	strb	r3, [r7, #6]
 8006574:	e00a      	b.n	800658c <W25Q16_Read_UniqID+0x4c>
		{
			myDevice.uniqID[i] = W25Q16_Trans_Recv(DUMMY_BYTE);
 8006576:	79bc      	ldrb	r4, [r7, #6]
 8006578:	20a5      	movs	r0, #165	; 0xa5
 800657a:	f7ff ffc9 	bl	8006510 <W25Q16_Trans_Recv>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <W25Q16_Read_UniqID+0x6c>)
 8006584:	551a      	strb	r2, [r3, r4]
		for(uint8_t i = 0; i < 8; i++) //Send 8 dummy byes and receive 8byte uniqueID
 8006586:	79bb      	ldrb	r3, [r7, #6]
 8006588:	3301      	adds	r3, #1
 800658a:	71bb      	strb	r3, [r7, #6]
 800658c:	79bb      	ldrb	r3, [r7, #6]
 800658e:	2b07      	cmp	r3, #7
 8006590:	d9f1      	bls.n	8006576 <W25Q16_Read_UniqID+0x36>
		}
		W25Q16_CS_DIS; //Disable SPI
 8006592:	2201      	movs	r2, #1
 8006594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006598:	4803      	ldr	r0, [pc, #12]	; (80065a8 <W25Q16_Read_UniqID+0x68>)
 800659a:	f7fc fc19 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd90      	pop	{r4, r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40020400 	.word	0x40020400
 80065ac:	20000ddc 	.word	0x20000ddc

080065b0 <W25Q16_Enable_Write>:
 * @brief enable write operation with W25Q16
 *
 * @param[in] none
 */
void W25Q16_Enable_Write(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
		1. Enable SPI
		2. Send WRITE_ENABLE Instruction
		3. Disable SPI
		******************************************************************************
		*/
		W25Q16_CS_EN;
 80065b4:	2200      	movs	r2, #0
 80065b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065ba:	4808      	ldr	r0, [pc, #32]	; (80065dc <W25Q16_Enable_Write+0x2c>)
 80065bc:	f7fc fc08 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(WRITE_ENABLE);
 80065c0:	2006      	movs	r0, #6
 80065c2:	f7ff ffa5 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_CS_DIS;
 80065c6:	2201      	movs	r2, #1
 80065c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065cc:	4803      	ldr	r0, [pc, #12]	; (80065dc <W25Q16_Enable_Write+0x2c>)
 80065ce:	f7fc fbff 	bl	8002dd0 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80065d2:	2064      	movs	r0, #100	; 0x64
 80065d4:	f7fb febc 	bl	8002350 <HAL_Delay>
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	40020400 	.word	0x40020400

080065e0 <W25Q16_Read_StatusReg>:
 * @brief read status register of W25Q16
 *
 * @param[in] regID: 1 or 2 or 3 corresponding to id register
 */
uint8_t W25Q16_Read_StatusReg(uint8_t regID)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	71fb      	strb	r3, [r7, #7]
		2. Check ID of Register
		3. Send READ_STATUS_REG corresponding
		4. Disable SPI
		******************************************************************************
		*/
		uint8_t retValue = 0;	//local variable to return
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
		W25Q16_CS_EN;
 80065ee:	2200      	movs	r2, #0
 80065f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065f4:	481b      	ldr	r0, [pc, #108]	; (8006664 <W25Q16_Read_StatusReg+0x84>)
 80065f6:	f7fc fbeb 	bl	8002dd0 <HAL_GPIO_WritePin>
		switch(regID)
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d002      	beq.n	8006606 <W25Q16_Read_StatusReg+0x26>
 8006600:	2b02      	cmp	r3, #2
 8006602:	d00c      	beq.n	800661e <W25Q16_Read_StatusReg+0x3e>
 8006604:	e017      	b.n	8006636 <W25Q16_Read_StatusReg+0x56>
		{
				case 1:
				{
						W25Q16_Trans_Recv(READ_STATUS_REG1);
 8006606:	2005      	movs	r0, #5
 8006608:	f7ff ff82 	bl	8006510 <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 800660c:	20a5      	movs	r0, #165	; 0xa5
 800660e:	f7ff ff7f 	bl	8006510 <W25Q16_Trans_Recv>
 8006612:	4603      	mov	r3, r0
 8006614:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg1 = retValue;
 8006616:	4a14      	ldr	r2, [pc, #80]	; (8006668 <W25Q16_Read_StatusReg+0x88>)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	7593      	strb	r3, [r2, #22]
						break;
 800661c:	e017      	b.n	800664e <W25Q16_Read_StatusReg+0x6e>
				}
				case 2:
				{
						W25Q16_Trans_Recv(READ_STATUS_REG2);
 800661e:	2035      	movs	r0, #53	; 0x35
 8006620:	f7ff ff76 	bl	8006510 <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 8006624:	20a5      	movs	r0, #165	; 0xa5
 8006626:	f7ff ff73 	bl	8006510 <W25Q16_Trans_Recv>
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg2 = retValue;
 800662e:	4a0e      	ldr	r2, [pc, #56]	; (8006668 <W25Q16_Read_StatusReg+0x88>)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	75d3      	strb	r3, [r2, #23]
						break;
 8006634:	e00b      	b.n	800664e <W25Q16_Read_StatusReg+0x6e>
				}
				default:
						W25Q16_Trans_Recv(READ_STATUS_REG3);
 8006636:	2015      	movs	r0, #21
 8006638:	f7ff ff6a 	bl	8006510 <W25Q16_Trans_Recv>
						retValue = W25Q16_Trans_Recv(DUMMY_BYTE);
 800663c:	20a5      	movs	r0, #165	; 0xa5
 800663e:	f7ff ff67 	bl	8006510 <W25Q16_Trans_Recv>
 8006642:	4603      	mov	r3, r0
 8006644:	73fb      	strb	r3, [r7, #15]
						myDevice.statusReg3 = retValue;
 8006646:	4a08      	ldr	r2, [pc, #32]	; (8006668 <W25Q16_Read_StatusReg+0x88>)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	7613      	strb	r3, [r2, #24]
						break;
 800664c:	bf00      	nop
		} //end switch
		W25Q16_CS_DIS; //disable SPI
 800664e:	2201      	movs	r2, #1
 8006650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006654:	4803      	ldr	r0, [pc, #12]	; (8006664 <W25Q16_Read_StatusReg+0x84>)
 8006656:	f7fc fbbb 	bl	8002dd0 <HAL_GPIO_WritePin>

		return retValue;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40020400 	.word	0x40020400
 8006668:	20000ddc 	.word	0x20000ddc

0800666c <W25Q16_Wait_EndBusy>:
 * @brief wait for end busy
 *
 * @param[in] none
 */
void W25Q16_Wait_EndBusy(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
		2. Send READ_STATUS_REG1
		3. Wait until MSB bit of status register 1 != 1
		4. Disable SPI
		******************************************************************************
		*/
		HAL_Delay(1);
 8006670:	2001      	movs	r0, #1
 8006672:	f7fb fe6d 	bl	8002350 <HAL_Delay>
		W25Q16_CS_EN;	//Enable SPI
 8006676:	2200      	movs	r2, #0
 8006678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800667c:	480d      	ldr	r0, [pc, #52]	; (80066b4 <W25Q16_Wait_EndBusy+0x48>)
 800667e:	f7fc fba7 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(READ_STATUS_REG1); //Send READ_STATUS_REG1
 8006682:	2005      	movs	r0, #5
 8006684:	f7ff ff44 	bl	8006510 <W25Q16_Trans_Recv>
		do //Wait until MSB bit of status register 1 != 1
		{
				myDevice.statusReg1 = W25Q16_Trans_Recv(DUMMY_BYTE);
 8006688:	20a5      	movs	r0, #165	; 0xa5
 800668a:	f7ff ff41 	bl	8006510 <W25Q16_Trans_Recv>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <W25Q16_Wait_EndBusy+0x4c>)
 8006694:	759a      	strb	r2, [r3, #22]
		}while((myDevice.statusReg1 & 0x01) == 0x01);
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <W25Q16_Wait_EndBusy+0x4c>)
 8006698:	7d9b      	ldrb	r3, [r3, #22]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f2      	bne.n	8006688 <W25Q16_Wait_EndBusy+0x1c>
		W25Q16_CS_DIS; //Disable SPI
 80066a2:	2201      	movs	r2, #1
 80066a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066a8:	4802      	ldr	r0, [pc, #8]	; (80066b4 <W25Q16_Wait_EndBusy+0x48>)
 80066aa:	f7fc fb91 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40020400 	.word	0x40020400
 80066b8:	20000ddc 	.word	0x20000ddc

080066bc <W25Q16_Init>:
 * This function initializes the IC
 *
 * @param[in] none
 */
bool W25Q16_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
		6. Set idle status for device
		******************************************************************************
		*/
		char buffer_to_log[20];	//buffer for data to log via uart

		myDevice.isBusy = BUSY; //Set busy status for device
 80066c2:	4b42      	ldr	r3, [pc, #264]	; (80067cc <W25Q16_Init+0x110>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	765a      	strb	r2, [r3, #25]
		W25Q16_CS_DIS; //Disable SPI
 80066c8:	2201      	movs	r2, #1
 80066ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066ce:	4840      	ldr	r0, [pc, #256]	; (80067d0 <W25Q16_Init+0x114>)
 80066d0:	f7fc fb7e 	bl	8002dd0 <HAL_GPIO_WritePin>

		/*Config parameters of Device*/
		myDevice.numBlock   = NUM_BLOCK;
 80066d4:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <W25Q16_Init+0x110>)
 80066d6:	2220      	movs	r2, #32
 80066d8:	829a      	strh	r2, [r3, #20]
		myDevice.numSector  = NUM_SECTOR;
 80066da:	4b3c      	ldr	r3, [pc, #240]	; (80067cc <W25Q16_Init+0x110>)
 80066dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e0:	81da      	strh	r2, [r3, #14]
		myDevice.numPage		= NUM_PAGE;
 80066e2:	4b3a      	ldr	r3, [pc, #232]	; (80067cc <W25Q16_Init+0x110>)
 80066e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066e8:	815a      	strh	r2, [r3, #10]
		myDevice.sizePage   = SIZE_PAGE;
 80066ea:	4b38      	ldr	r3, [pc, #224]	; (80067cc <W25Q16_Init+0x110>)
 80066ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066f0:	811a      	strh	r2, [r3, #8]
		myDevice.sizeSector = SIZE_SECTOR;
 80066f2:	4b36      	ldr	r3, [pc, #216]	; (80067cc <W25Q16_Init+0x110>)
 80066f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066f8:	819a      	strh	r2, [r3, #12]
		myDevice.sizeBlock  = SIZE_BLOCK;
 80066fa:	4b34      	ldr	r3, [pc, #208]	; (80067cc <W25Q16_Init+0x110>)
 80066fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006700:	611a      	str	r2, [r3, #16]

		W25Q16_Read_UniqID();
 8006702:	f7ff ff1d 	bl	8006540 <W25Q16_Read_UniqID>
		W25Q16_Read_StatusReg(1);
 8006706:	2001      	movs	r0, #1
 8006708:	f7ff ff6a 	bl	80065e0 <W25Q16_Read_StatusReg>
		W25Q16_Read_StatusReg(2);
 800670c:	2002      	movs	r0, #2
 800670e:	f7ff ff67 	bl	80065e0 <W25Q16_Read_StatusReg>
		W25Q16_Read_StatusReg(3);
 8006712:	2003      	movs	r0, #3
 8006714:	f7ff ff64 	bl	80065e0 <W25Q16_Read_StatusReg>


		/*Log informations of device*/
		Log_Info((uint8_t*)"Initialize\n", 12);
 8006718:	210c      	movs	r1, #12
 800671a:	482e      	ldr	r0, [pc, #184]	; (80067d4 <W25Q16_Init+0x118>)
 800671c:	f7ff fed6 	bl	80064cc <Log_Info>
		sprintf((char*)buffer_to_log, "NumBlock = %d\r\n", myDevice.numBlock);
 8006720:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <W25Q16_Init+0x110>)
 8006722:	8a9b      	ldrh	r3, [r3, #20]
 8006724:	461a      	mov	r2, r3
 8006726:	1d3b      	adds	r3, r7, #4
 8006728:	492b      	ldr	r1, [pc, #172]	; (80067d8 <W25Q16_Init+0x11c>)
 800672a:	4618      	mov	r0, r3
 800672c:	f004 f97c 	bl	800aa28 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	2110      	movs	r1, #16
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fec9 	bl	80064cc <Log_Info>
		sprintf((char*)buffer_to_log, "NumSector = %d\r\n", myDevice.numSector);
 800673a:	4b24      	ldr	r3, [pc, #144]	; (80067cc <W25Q16_Init+0x110>)
 800673c:	89db      	ldrh	r3, [r3, #14]
 800673e:	461a      	mov	r2, r3
 8006740:	1d3b      	adds	r3, r7, #4
 8006742:	4926      	ldr	r1, [pc, #152]	; (80067dc <W25Q16_Init+0x120>)
 8006744:	4618      	mov	r0, r3
 8006746:	f004 f96f 	bl	800aa28 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 17);
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	2111      	movs	r1, #17
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff febc 	bl	80064cc <Log_Info>
		sprintf((char*)buffer_to_log, "NumPage = %d\r\n", myDevice.numPage);
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <W25Q16_Init+0x110>)
 8006756:	895b      	ldrh	r3, [r3, #10]
 8006758:	461a      	mov	r2, r3
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	4920      	ldr	r1, [pc, #128]	; (80067e0 <W25Q16_Init+0x124>)
 800675e:	4618      	mov	r0, r3
 8006760:	f004 f962 	bl	800aa28 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	2110      	movs	r1, #16
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff feaf 	bl	80064cc <Log_Info>
		sprintf((char*)buffer_to_log, "SizePage = %d\r\n", myDevice.sizePage);
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <W25Q16_Init+0x110>)
 8006770:	891b      	ldrh	r3, [r3, #8]
 8006772:	461a      	mov	r2, r3
 8006774:	1d3b      	adds	r3, r7, #4
 8006776:	491b      	ldr	r1, [pc, #108]	; (80067e4 <W25Q16_Init+0x128>)
 8006778:	4618      	mov	r0, r3
 800677a:	f004 f955 	bl	800aa28 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 16);
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	2110      	movs	r1, #16
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fea2 	bl	80064cc <Log_Info>
		sprintf((char*)buffer_to_log, "SizeSector = %d\r\n", myDevice.sizeSector);
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <W25Q16_Init+0x110>)
 800678a:	899b      	ldrh	r3, [r3, #12]
 800678c:	461a      	mov	r2, r3
 800678e:	1d3b      	adds	r3, r7, #4
 8006790:	4915      	ldr	r1, [pc, #84]	; (80067e8 <W25Q16_Init+0x12c>)
 8006792:	4618      	mov	r0, r3
 8006794:	f004 f948 	bl	800aa28 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 19);
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	2113      	movs	r1, #19
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fe95 	bl	80064cc <Log_Info>
		sprintf((char*)buffer_to_log, "SizeBlock = %ld\r\n", myDevice.sizeBlock);
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <W25Q16_Init+0x110>)
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	1d3b      	adds	r3, r7, #4
 80067a8:	4910      	ldr	r1, [pc, #64]	; (80067ec <W25Q16_Init+0x130>)
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 f93c 	bl	800aa28 <siprintf>
		Log_Info((uint8_t*)buffer_to_log, 19);
 80067b0:	1d3b      	adds	r3, r7, #4
 80067b2:	2113      	movs	r1, #19
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fe89 	bl	80064cc <Log_Info>

		myDevice.isBusy = IDLE; //Set idle status for device
 80067ba:	4b04      	ldr	r3, [pc, #16]	; (80067cc <W25Q16_Init+0x110>)
 80067bc:	2200      	movs	r2, #0
 80067be:	765a      	strb	r2, [r3, #25]

		return true;
 80067c0:	2301      	movs	r3, #1
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000ddc 	.word	0x20000ddc
 80067d0:	40020400 	.word	0x40020400
 80067d4:	0800e808 	.word	0x0800e808
 80067d8:	0800e814 	.word	0x0800e814
 80067dc:	0800e824 	.word	0x0800e824
 80067e0:	0800e838 	.word	0x0800e838
 80067e4:	0800e848 	.word	0x0800e848
 80067e8:	0800e858 	.word	0x0800e858
 80067ec:	0800e86c 	.word	0x0800e86c

080067f0 <W25Q16_Erase_Chip>:
 * @brief erase full chip
 *
 * @param[in] none
 */
void W25Q16_Erase_Chip(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
		6. Disable SPI
		7. Wait for end operation
		8. Set idle status for device
		******************************************************************************
		*/
		while(myDevice.isBusy == BUSY); //Wait end busy status
 80067f4:	bf00      	nop
 80067f6:	4b13      	ldr	r3, [pc, #76]	; (8006844 <W25Q16_Erase_Chip+0x54>)
 80067f8:	7e5b      	ldrb	r3, [r3, #25]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d0fb      	beq.n	80067f6 <W25Q16_Erase_Chip+0x6>
		myDevice.isBusy  = BUSY;	//Set busy status for device
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <W25Q16_Erase_Chip+0x54>)
 8006800:	2201      	movs	r2, #1
 8006802:	765a      	strb	r2, [r3, #25]
		W25Q16_Enable_Write();	//Write enable
 8006804:	f7ff fed4 	bl	80065b0 <W25Q16_Enable_Write>
		W25Q16_CS_EN; //Enable SPI
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800680e:	480e      	ldr	r0, [pc, #56]	; (8006848 <W25Q16_Erase_Chip+0x58>)
 8006810:	f7fc fade 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(CHIP_ERASE); //Send CHIP_ERASE instruction
 8006814:	20c7      	movs	r0, #199	; 0xc7
 8006816:	f7ff fe7b 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_CS_DIS; //Disable SPI
 800681a:	2201      	movs	r2, #1
 800681c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006820:	4809      	ldr	r0, [pc, #36]	; (8006848 <W25Q16_Erase_Chip+0x58>)
 8006822:	f7fc fad5 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy(); //Wait for end operation
 8006826:	f7ff ff21 	bl	800666c <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Erase chip success!!\r\n", 22);
 800682a:	2116      	movs	r1, #22
 800682c:	4807      	ldr	r0, [pc, #28]	; (800684c <W25Q16_Erase_Chip+0x5c>)
 800682e:	f7ff fe4d 	bl	80064cc <Log_Info>
		HAL_Delay(10);
 8006832:	200a      	movs	r0, #10
 8006834:	f7fb fd8c 	bl	8002350 <HAL_Delay>

		myDevice.isBusy = IDLE; //Set idle status for device
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <W25Q16_Erase_Chip+0x54>)
 800683a:	2200      	movs	r2, #0
 800683c:	765a      	strb	r2, [r3, #25]
}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000ddc 	.word	0x20000ddc
 8006848:	40020400 	.word	0x40020400
 800684c:	0800e880 	.word	0x0800e880

08006850 <W25Q16_WritePage>:
 * @param[in] number: number of datas to write
 * @param[in] offSet: offset value of start address (byte)
 */
void W25Q16_WritePage(uint8_t* pData,
											uint16_t idPage, uint8_t offSet, uint8_t number)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	4608      	mov	r0, r1
 800685a:	4611      	mov	r1, r2
 800685c:	461a      	mov	r2, r3
 800685e:	4603      	mov	r3, r0
 8006860:	807b      	strh	r3, [r7, #2]
 8006862:	460b      	mov	r3, r1
 8006864:	707b      	strb	r3, [r7, #1]
 8006866:	4613      	mov	r3, r2
 8006868:	703b      	strb	r3, [r7, #0]
		7. Disable SPI
		8. Wait for end operation
		9. Set idle status for device
		******************************************************************************
		*/
		uint32_t addrPage = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
		while(myDevice.isBusy == BUSY);
 800686e:	bf00      	nop
 8006870:	4b29      	ldr	r3, [pc, #164]	; (8006918 <W25Q16_WritePage+0xc8>)
 8006872:	7e5b      	ldrb	r3, [r3, #25]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d0fb      	beq.n	8006870 <W25Q16_WritePage+0x20>
		myDevice.isBusy  = BUSY;
 8006878:	4b27      	ldr	r3, [pc, #156]	; (8006918 <W25Q16_WritePage+0xc8>)
 800687a:	2201      	movs	r2, #1
 800687c:	765a      	strb	r2, [r3, #25]
		if((number + offSet) > myDevice.sizePage) number = myDevice.sizePage - offSet;
 800687e:	783a      	ldrb	r2, [r7, #0]
 8006880:	787b      	ldrb	r3, [r7, #1]
 8006882:	4413      	add	r3, r2
 8006884:	4a24      	ldr	r2, [pc, #144]	; (8006918 <W25Q16_WritePage+0xc8>)
 8006886:	8912      	ldrh	r2, [r2, #8]
 8006888:	4293      	cmp	r3, r2
 800688a:	dd05      	ble.n	8006898 <W25Q16_WritePage+0x48>
 800688c:	4b22      	ldr	r3, [pc, #136]	; (8006918 <W25Q16_WritePage+0xc8>)
 800688e:	891b      	ldrh	r3, [r3, #8]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	787b      	ldrb	r3, [r7, #1]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	703b      	strb	r3, [r7, #0]

		W25Q16_Wait_EndBusy();
 8006898:	f7ff fee8 	bl	800666c <W25Q16_Wait_EndBusy>
		addrPage = (idPage * myDevice.sizePage) + offSet;
 800689c:	887b      	ldrh	r3, [r7, #2]
 800689e:	4a1e      	ldr	r2, [pc, #120]	; (8006918 <W25Q16_WritePage+0xc8>)
 80068a0:	8912      	ldrh	r2, [r2, #8]
 80068a2:	fb02 f203 	mul.w	r2, r2, r3
 80068a6:	787b      	ldrb	r3, [r7, #1]
 80068a8:	4413      	add	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
		W25Q16_Enable_Write();	//Write enable
 80068ac:	f7ff fe80 	bl	80065b0 <W25Q16_Enable_Write>
		W25Q16_CS_EN;
 80068b0:	2200      	movs	r2, #0
 80068b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068b6:	4819      	ldr	r0, [pc, #100]	; (800691c <W25Q16_WritePage+0xcc>)
 80068b8:	f7fc fa8a 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(PAGE_PROGRAM);
 80068bc:	2002      	movs	r0, #2
 80068be:	f7ff fe27 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF0000) >> 16);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fe21 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF00) >> 8);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	0a1b      	lsrs	r3, r3, #8
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fe1b 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrPage  & 0xFF) >> 0);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff fe16 	bl	8006510 <W25Q16_Trans_Recv>
		HAL_SPI_Transmit(&W25Q16_SPI, pData, number, 100);
 80068e4:	783b      	ldrb	r3, [r7, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	2364      	movs	r3, #100	; 0x64
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	480c      	ldr	r0, [pc, #48]	; (8006920 <W25Q16_WritePage+0xd0>)
 80068ee:	f7fd ff07 	bl	8004700 <HAL_SPI_Transmit>
		W25Q16_CS_DIS;
 80068f2:	2201      	movs	r2, #1
 80068f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068f8:	4808      	ldr	r0, [pc, #32]	; (800691c <W25Q16_WritePage+0xcc>)
 80068fa:	f7fc fa69 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Wait_EndBusy();
 80068fe:	f7ff feb5 	bl	800666c <W25Q16_Wait_EndBusy>

		Log_Info((uint8_t*)"Write page SUCCESS\r\n", 22);
 8006902:	2116      	movs	r1, #22
 8006904:	4807      	ldr	r0, [pc, #28]	; (8006924 <W25Q16_WritePage+0xd4>)
 8006906:	f7ff fde1 	bl	80064cc <Log_Info>
		myDevice.isBusy = IDLE;
 800690a:	4b03      	ldr	r3, [pc, #12]	; (8006918 <W25Q16_WritePage+0xc8>)
 800690c:	2200      	movs	r2, #0
 800690e:	765a      	strb	r2, [r3, #25]
}
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000ddc 	.word	0x20000ddc
 800691c:	40020400 	.word	0x40020400
 8006920:	20000c18 	.word	0x20000c18
 8006924:	0800e8e4 	.word	0x0800e8e4

08006928 <W25Q16_ReadSomeBytes>:
 * @param[in] addrToRead: address of byte to write
 * @param[in] number: number of bytes to read
 */
void W25Q16_ReadSomeBytes(uint8_t* pBuffer,
													uint32_t addrToRead, uint32_t number)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
		8. Wait for end operation
		9. Set idle status for device
		******************************************************************************
		*/
		//char buffer_to_log[30];
		while(myDevice.isBusy == BUSY);
 8006934:	bf00      	nop
 8006936:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <W25Q16_ReadSomeBytes+0x84>)
 8006938:	7e5b      	ldrb	r3, [r3, #25]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d0fb      	beq.n	8006936 <W25Q16_ReadSomeBytes+0xe>
		myDevice.isBusy  = BUSY;
 800693e:	4b1b      	ldr	r3, [pc, #108]	; (80069ac <W25Q16_ReadSomeBytes+0x84>)
 8006940:	2201      	movs	r2, #1
 8006942:	765a      	strb	r2, [r3, #25]
		W25Q16_Wait_EndBusy();
 8006944:	f7ff fe92 	bl	800666c <W25Q16_Wait_EndBusy>
		W25Q16_CS_EN;
 8006948:	2200      	movs	r2, #0
 800694a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800694e:	4818      	ldr	r0, [pc, #96]	; (80069b0 <W25Q16_ReadSomeBytes+0x88>)
 8006950:	f7fc fa3e 	bl	8002dd0 <HAL_GPIO_WritePin>
		W25Q16_Trans_Recv(FAST_READ);
 8006954:	200b      	movs	r0, #11
 8006956:	f7ff fddb 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF0000) >> 16);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fdd5 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF00) >> 8);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	0a1b      	lsrs	r3, r3, #8
 800696a:	b2db      	uxtb	r3, r3
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fdcf 	bl	8006510 <W25Q16_Trans_Recv>
		W25Q16_Trans_Recv((addrToRead & 0xFF) >> 0);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fdca 	bl	8006510 <W25Q16_Trans_Recv>
		//W25Q16_Trans_Recv(DUMMY_BYTE);
		W25Q16_Trans_Recv(0);
 800697c:	2000      	movs	r0, #0
 800697e:	f7ff fdc7 	bl	8006510 <W25Q16_Trans_Recv>
		HAL_SPI_Receive(&W25Q16_SPI, pBuffer, number, 1000);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	b29a      	uxth	r2, r3
 8006986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	4809      	ldr	r0, [pc, #36]	; (80069b4 <W25Q16_ReadSomeBytes+0x8c>)
 800698e:	f7fd ffeb 	bl	8004968 <HAL_SPI_Receive>

		W25Q16_CS_DIS;
 8006992:	2201      	movs	r2, #1
 8006994:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006998:	4805      	ldr	r0, [pc, #20]	; (80069b0 <W25Q16_ReadSomeBytes+0x88>)
 800699a:	f7fc fa19 	bl	8002dd0 <HAL_GPIO_WritePin>
				sprintf(buffer_to_log, "Read a byte %02x\r\n", pBuffer[i]);
				Log_Info((uint8_t*)buffer_to_log, 16);
		}
		#endif

		myDevice.isBusy = IDLE;
 800699e:	4b03      	ldr	r3, [pc, #12]	; (80069ac <W25Q16_ReadSomeBytes+0x84>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	765a      	strb	r2, [r3, #25]
}
 80069a4:	bf00      	nop
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000ddc 	.word	0x20000ddc
 80069b0:	40020400 	.word	0x40020400
 80069b4:	20000c18 	.word	0x20000c18

080069b8 <u16_to_String>:
    }
}

/*Functions relate convert uint16_t to string*/
void u16_to_String(char* res, uint16_t inputValue)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	807b      	strh	r3, [r7, #2]
    uint8_t i = 0, count = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73fb      	strb	r3, [r7, #15]
 80069c8:	2300      	movs	r3, #0
 80069ca:	73bb      	strb	r3, [r7, #14]
    uint16_t temp = inputValue;
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	81bb      	strh	r3, [r7, #12]
    if(temp == 0) *res = 0x30;
 80069d0:	89bb      	ldrh	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10c      	bne.n	80069f0 <u16_to_String+0x38>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2230      	movs	r2, #48	; 0x30
 80069da:	701a      	strb	r2, [r3, #0]
    while(temp != 0)
 80069dc:	e008      	b.n	80069f0 <u16_to_String+0x38>
    {
        temp = temp /10;
 80069de:	89bb      	ldrh	r3, [r7, #12]
 80069e0:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <u16_to_String+0x94>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	08db      	lsrs	r3, r3, #3
 80069e8:	81bb      	strh	r3, [r7, #12]
        count++;
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	3301      	adds	r3, #1
 80069ee:	73bb      	strb	r3, [r7, #14]
    while(temp != 0)
 80069f0:	89bb      	ldrh	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f3      	bne.n	80069de <u16_to_String+0x26>
    }
    i = count - 1;
 80069f6:	7bbb      	ldrb	r3, [r7, #14]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
    while(inputValue != 0)
 80069fc:	e01b      	b.n	8006a36 <u16_to_String+0x7e>
    {
        temp = inputValue % 10;
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <u16_to_String+0x94>)
 8006a02:	fba3 1302 	umull	r1, r3, r3, r2
 8006a06:	08d9      	lsrs	r1, r3, #3
 8006a08:	460b      	mov	r3, r1
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	81bb      	strh	r3, [r7, #12]
        *(res + i) = temp + 0x30;
 8006a14:	89bb      	ldrh	r3, [r7, #12]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3230      	adds	r2, #48	; 0x30
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]
        i--;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
        inputValue /= 10;
 8006a2a:	887b      	ldrh	r3, [r7, #2]
 8006a2c:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <u16_to_String+0x94>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	08db      	lsrs	r3, r3, #3
 8006a34:	807b      	strh	r3, [r7, #2]
    while(inputValue != 0)
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e0      	bne.n	80069fe <u16_to_String+0x46>
    }
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	cccccccd 	.word	0xcccccccd

08006a50 <LTE_PWRCRL_OFF>:
		HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_SET);
		HAL_Delay(550);
		HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_RESET);
}
void LTE_PWRCRL_OFF(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
	/* keep Power Key at high level */
	HAL_GPIO_WritePin(PWRKEY_CTRL_PORT, PWRKEY_CTRL_PIN, GPIO_PIN_SET);
 8006a54:	2201      	movs	r2, #1
 8006a56:	2120      	movs	r1, #32
 8006a58:	480f      	ldr	r0, [pc, #60]	; (8006a98 <LTE_PWRCRL_OFF+0x48>)
 8006a5a:	f7fc f9b9 	bl	8002dd0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8006a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a62:	f7fb fc75 	bl	8002350 <HAL_Delay>
	Trans_Data(&UartEmulHandle, (uint8_t*)"0AT+QPOWD\r", 10);
 8006a66:	220a      	movs	r2, #10
 8006a68:	490c      	ldr	r1, [pc, #48]	; (8006a9c <LTE_PWRCRL_OFF+0x4c>)
 8006a6a:	480d      	ldr	r0, [pc, #52]	; (8006aa0 <LTE_PWRCRL_OFF+0x50>)
 8006a6c:	f000 fc94 	bl	8007398 <Trans_Data>
	if(Recv_Response(&UartEmulHandle, 2000) == RESPONSE_OK) Log_Info((uint8_t*)"RES_OK\n", 7);
 8006a70:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a74:	480a      	ldr	r0, [pc, #40]	; (8006aa0 <LTE_PWRCRL_OFF+0x50>)
 8006a76:	f000 fd43 	bl	8007500 <Recv_Response>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d104      	bne.n	8006a8a <LTE_PWRCRL_OFF+0x3a>
 8006a80:	2107      	movs	r1, #7
 8006a82:	4808      	ldr	r0, [pc, #32]	; (8006aa4 <LTE_PWRCRL_OFF+0x54>)
 8006a84:	f7ff fd22 	bl	80064cc <Log_Info>
	else Log_Info((uint8_t*)"RES_ERR\n", 8);
}
 8006a88:	e003      	b.n	8006a92 <LTE_PWRCRL_OFF+0x42>
	else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8006a8a:	2108      	movs	r1, #8
 8006a8c:	4806      	ldr	r0, [pc, #24]	; (8006aa8 <LTE_PWRCRL_OFF+0x58>)
 8006a8e:	f7ff fd1d 	bl	80064cc <Log_Info>
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40020400 	.word	0x40020400
 8006a9c:	0800e910 	.word	0x0800e910
 8006aa0:	20000d4c 	.word	0x20000d4c
 8006aa4:	0800e91c 	.word	0x0800e91c
 8006aa8:	0800e924 	.word	0x0800e924

08006aac <Enable_LTE>:
void Enable_LTE(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(PWR_EN_PORT, PWR_EN_PIN, GPIO_PIN_RESET);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ab6:	4802      	ldr	r0, [pc, #8]	; (8006ac0 <Enable_LTE+0x14>)
 8006ab8:	f7fc f98a 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8006abc:	bf00      	nop
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40020800 	.word	0x40020800

08006ac4 <MQTT_Recv_Mode>:
	* @param  msgLenEnabe:  Whether length of MQTT message received from server will be contained in URC (0 or 1)
  * @retval OK or ERR
  */
response_t MQTT_Recv_Mode(uint8_t clientIndex,
													uint8_t msgRecvMode, uint8_t msgLenEnabe)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	71bb      	strb	r3, [r7, #6]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	717b      	strb	r3, [r7, #5]
		HAL_Delay(1000);
 8006ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ada:	f7fb fc39 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=recv/mode,%d,%d,%d\r", clientIndex, msgRecvMode, msgLenEnabe);
 8006ade:	79fa      	ldrb	r2, [r7, #7]
 8006ae0:	79b9      	ldrb	r1, [r7, #6]
 8006ae2:	797b      	ldrb	r3, [r7, #5]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	490f      	ldr	r1, [pc, #60]	; (8006b28 <MQTT_Recv_Mode+0x64>)
 8006aea:	4810      	ldr	r0, [pc, #64]	; (8006b2c <MQTT_Recv_Mode+0x68>)
 8006aec:	f003 ff9c 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 27);
 8006af0:	221b      	movs	r2, #27
 8006af2:	490e      	ldr	r1, [pc, #56]	; (8006b2c <MQTT_Recv_Mode+0x68>)
 8006af4:	480e      	ldr	r0, [pc, #56]	; (8006b30 <MQTT_Recv_Mode+0x6c>)
 8006af6:	f000 fc4f 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8006afa:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006afe:	480c      	ldr	r0, [pc, #48]	; (8006b30 <MQTT_Recv_Mode+0x6c>)
 8006b00:	f000 fcfe 	bl	8007500 <Recv_Response>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <MQTT_Recv_Mode+0x52>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8006b0a:	2107      	movs	r1, #7
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <MQTT_Recv_Mode+0x70>)
 8006b0e:	f7ff fcdd 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e004      	b.n	8006b20 <MQTT_Recv_Mode+0x5c>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8006b16:	2108      	movs	r1, #8
 8006b18:	4807      	ldr	r0, [pc, #28]	; (8006b38 <MQTT_Recv_Mode+0x74>)
 8006b1a:	f7ff fcd7 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	0800e9a0 	.word	0x0800e9a0
 8006b2c:	20000558 	.word	0x20000558
 8006b30:	20000d4c 	.word	0x20000d4c
 8006b34:	0800e91c 	.word	0x0800e91c
 8006b38:	0800e924 	.word	0x0800e924

08006b3c <MQTT_Session>:
	* @param  sessionMode: Configure the session type (0 or 1)
  * @retval OK or ERR
  */
response_t MQTT_Session(uint8_t clientIndex,
												uint8_t sessionMode)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	460a      	mov	r2, r1
 8006b46:	71fb      	strb	r3, [r7, #7]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 8006b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b50:	f7fb fbfe 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=session,%d,%d\r", clientIndex, sessionMode);
 8006b54:	79fa      	ldrb	r2, [r7, #7]
 8006b56:	79bb      	ldrb	r3, [r7, #6]
 8006b58:	490f      	ldr	r1, [pc, #60]	; (8006b98 <MQTT_Session+0x5c>)
 8006b5a:	4810      	ldr	r0, [pc, #64]	; (8006b9c <MQTT_Session+0x60>)
 8006b5c:	f003 ff64 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 23);
 8006b60:	2217      	movs	r2, #23
 8006b62:	490e      	ldr	r1, [pc, #56]	; (8006b9c <MQTT_Session+0x60>)
 8006b64:	480e      	ldr	r0, [pc, #56]	; (8006ba0 <MQTT_Session+0x64>)
 8006b66:	f000 fc17 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8006b6a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006b6e:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <MQTT_Session+0x64>)
 8006b70:	f000 fcc6 	bl	8007500 <Recv_Response>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d105      	bne.n	8006b86 <MQTT_Session+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8006b7a:	2107      	movs	r1, #7
 8006b7c:	4809      	ldr	r0, [pc, #36]	; (8006ba4 <MQTT_Session+0x68>)
 8006b7e:	f7ff fca5 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e004      	b.n	8006b90 <MQTT_Session+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 8006b86:	2108      	movs	r1, #8
 8006b88:	4807      	ldr	r0, [pc, #28]	; (8006ba8 <MQTT_Session+0x6c>)
 8006b8a:	f7ff fc9f 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	0800e9c0 	.word	0x0800e9c0
 8006b9c:	20000558 	.word	0x20000558
 8006ba0:	20000d4c 	.word	0x20000d4c
 8006ba4:	0800e91c 	.word	0x0800e91c
 8006ba8:	0800e924 	.word	0x0800e924

08006bac <MQTT_Open>:
	* @param  port: port id (4 digits)
  * @retval OK or ERR
  */
response_t MQTT_Open(uint8_t clientIndex,
										 uint8_t* hostName, uint16_t port)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	71fb      	strb	r3, [r7, #7]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	80bb      	strh	r3, [r7, #4]
		HAL_Delay(1000);
 8006bbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bc0:	f7fb fbc6 	bl	8002350 <HAL_Delay>
//		uint8_t lenBuffTrans = 20+lenHostName;	
		uint8_t lenBuffTrans = 20 + strlen((char*)hostName);
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f7f9 fb0b 	bl	80001e0 <strlen>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	3314      	adds	r3, #20
 8006bd0:	73fb      	strb	r3, [r7, #15]
		sprintf((char*) g_buff_temp, "0AT+QMTOPEN=%d,%s,%d\r", clientIndex, hostName, port);
 8006bd2:	79fa      	ldrb	r2, [r7, #7]
 8006bd4:	88bb      	ldrh	r3, [r7, #4]
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4924      	ldr	r1, [pc, #144]	; (8006c6c <MQTT_Open+0xc0>)
 8006bdc:	4824      	ldr	r0, [pc, #144]	; (8006c70 <MQTT_Open+0xc4>)
 8006bde:	f003 ff23 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	4921      	ldr	r1, [pc, #132]	; (8006c70 <MQTT_Open+0xc4>)
 8006bea:	4822      	ldr	r0, [pc, #136]	; (8006c74 <MQTT_Open+0xc8>)
 8006bec:	f000 fbd4 	bl	8007398 <Trans_Data>
		/*wait response of +QMTOPEN*/
		Recv_Response(&UartEmulHandle, WAIT_OPEN);
 8006bf0:	f241 3188 	movw	r1, #5000	; 0x1388
 8006bf4:	481f      	ldr	r0, [pc, #124]	; (8006c74 <MQTT_Open+0xc8>)
 8006bf6:	f000 fc83 	bl	8007500 <Recv_Response>
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8006bfa:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <MQTT_Open+0xcc>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	3b03      	subs	r3, #3
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	4b1d      	ldr	r3, [pc, #116]	; (8006c78 <MQTT_Open+0xcc>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3b03      	subs	r3, #3
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	491c      	ldr	r1, [pc, #112]	; (8006c7c <MQTT_Open+0xd0>)
 8006c0c:	4818      	ldr	r0, [pc, #96]	; (8006c70 <MQTT_Open+0xc4>)
 8006c0e:	f000 fcd1 	bl	80075b4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8006c12:	2201      	movs	r2, #1
 8006c14:	491a      	ldr	r1, [pc, #104]	; (8006c80 <MQTT_Open+0xd4>)
 8006c16:	4816      	ldr	r0, [pc, #88]	; (8006c70 <MQTT_Open+0xc4>)
 8006c18:	f000 fc24 	bl	8007464 <Compare_Str>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <MQTT_Open+0x8a>
		{
				Log_Info((uint8_t*)"Open Success!\n", 14);
 8006c22:	210e      	movs	r1, #14
 8006c24:	4817      	ldr	r0, [pc, #92]	; (8006c84 <MQTT_Open+0xd8>)
 8006c26:	f7ff fc51 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006c2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c2e:	f7fb fb8f 	bl	8002350 <HAL_Delay>
				return RESPONSE_OK;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e016      	b.n	8006c64 <MQTT_Open+0xb8>
		}
		if(Compare_Str(g_buff_temp, (uint8_t*)"2", 1))
 8006c36:	2201      	movs	r2, #1
 8006c38:	4913      	ldr	r1, [pc, #76]	; (8006c88 <MQTT_Open+0xdc>)
 8006c3a:	480d      	ldr	r0, [pc, #52]	; (8006c70 <MQTT_Open+0xc4>)
 8006c3c:	f000 fc12 	bl	8007464 <Compare_Str>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <MQTT_Open+0xae>
		{
				Log_Info((uint8_t*)"Open Before!\n", 13);
 8006c46:	210d      	movs	r1, #13
 8006c48:	4810      	ldr	r0, [pc, #64]	; (8006c8c <MQTT_Open+0xe0>)
 8006c4a:	f7ff fc3f 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006c4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c52:	f7fb fb7d 	bl	8002350 <HAL_Delay>
				return RESPONSE_MQTT_EXIST;
 8006c56:	2304      	movs	r3, #4
 8006c58:	e004      	b.n	8006c64 <MQTT_Open+0xb8>
		}
		HAL_Delay(MAX_WAIT_TIME);
 8006c5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c5e:	f7fb fb77 	bl	8002350 <HAL_Delay>
		return RESPONSE_ERR;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	0800e9dc 	.word	0x0800e9dc
 8006c70:	20000558 	.word	0x20000558
 8006c74:	20000d4c 	.word	0x20000d4c
 8006c78:	20000455 	.word	0x20000455
 8006c7c:	20000458 	.word	0x20000458
 8006c80:	0800e9f4 	.word	0x0800e9f4
 8006c84:	0800e9f8 	.word	0x0800e9f8
 8006c88:	0800ea08 	.word	0x0800ea08
 8006c8c:	0800ea0c 	.word	0x0800ea0c

08006c90 <MQTT_Close>:
  * @brief  Close a Network for MQTT Client
    * @param  clientIndex: MQTT client identifier (0-5)
  * @retval OK or ERR
  */
response_t MQTT_Close(uint8_t clientIndex)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(1000);
 8006c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c9e:	f7fb fb57 	bl	8002350 <HAL_Delay>

        uint8_t lenBuffTrans = 15;
 8006ca2:	230f      	movs	r3, #15
 8006ca4:	73fb      	strb	r3, [r7, #15]
        sprintf((char*) g_buff_temp, "0AT+QMTCLOSE=%d\r", clientIndex);
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	491b      	ldr	r1, [pc, #108]	; (8006d18 <MQTT_Close+0x88>)
 8006cac:	481b      	ldr	r0, [pc, #108]	; (8006d1c <MQTT_Close+0x8c>)
 8006cae:	f003 febb 	bl	800aa28 <siprintf>
        Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4918      	ldr	r1, [pc, #96]	; (8006d1c <MQTT_Close+0x8c>)
 8006cba:	4819      	ldr	r0, [pc, #100]	; (8006d20 <MQTT_Close+0x90>)
 8006cbc:	f000 fb6c 	bl	8007398 <Trans_Data>
        /*wait response of + QMTCLOSE*/
        Recv_Response(&UartEmulHandle, WAIT_OPEN);
 8006cc0:	f241 3188 	movw	r1, #5000	; 0x1388
 8006cc4:	4816      	ldr	r0, [pc, #88]	; (8006d20 <MQTT_Close+0x90>)
 8006cc6:	f000 fc1b 	bl	8007500 <Recv_Response>
        Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8006cca:	4b16      	ldr	r3, [pc, #88]	; (8006d24 <MQTT_Close+0x94>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	3b03      	subs	r3, #3
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <MQTT_Close+0x94>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	3b03      	subs	r3, #3
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	4913      	ldr	r1, [pc, #76]	; (8006d28 <MQTT_Close+0x98>)
 8006cdc:	480f      	ldr	r0, [pc, #60]	; (8006d1c <MQTT_Close+0x8c>)
 8006cde:	f000 fc69 	bl	80075b4 <Get_Paragraph>
        if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	4911      	ldr	r1, [pc, #68]	; (8006d2c <MQTT_Close+0x9c>)
 8006ce6:	480d      	ldr	r0, [pc, #52]	; (8006d1c <MQTT_Close+0x8c>)
 8006ce8:	f000 fbbc 	bl	8007464 <Compare_Str>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <MQTT_Close+0x76>
        {
                Log_Info((uint8_t*)"Close Success!\n", 14);
 8006cf2:	210e      	movs	r1, #14
 8006cf4:	480e      	ldr	r0, [pc, #56]	; (8006d30 <MQTT_Close+0xa0>)
 8006cf6:	f7ff fbe9 	bl	80064cc <Log_Info>
                HAL_Delay(MAX_WAIT_TIME);
 8006cfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006cfe:	f7fb fb27 	bl	8002350 <HAL_Delay>
                return RESPONSE_OK;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e004      	b.n	8006d10 <MQTT_Close+0x80>
        }
        HAL_Delay(MAX_WAIT_TIME);
 8006d06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006d0a:	f7fb fb21 	bl	8002350 <HAL_Delay>
        return RESPONSE_ERR;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	0800ea1c 	.word	0x0800ea1c
 8006d1c:	20000558 	.word	0x20000558
 8006d20:	20000d4c 	.word	0x20000d4c
 8006d24:	20000455 	.word	0x20000455
 8006d28:	20000458 	.word	0x20000458
 8006d2c:	0800e9f4 	.word	0x0800e9f4
 8006d30:	0800ea30 	.word	0x0800ea30

08006d34 <MQTT_Connect>:
	* @param  passWord: password corresponding to the user name of the client
  * @retval OK or ERR
  */
response_t MQTT_Connect(uint8_t clientIndex,
												uint8_t* clientID, uint8_t* userName, uint8_t* passWord)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(MAX_WAIT_TIME);
 8006d44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006d48:	f7fb fb02 	bl	8002350 <HAL_Delay>
//		uint8_t lenBuffTrans = 18 + lenUser + lenPass;
		uint8_t lenBuffTrans = 17 + strlen((char*)clientID) + strlen((char*)userName) + strlen((char*)passWord);
 8006d4c:	68b8      	ldr	r0, [r7, #8]
 8006d4e:	f7f9 fa47 	bl	80001e0 <strlen>
 8006d52:	4603      	mov	r3, r0
 8006d54:	b2dc      	uxtb	r4, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7f9 fa42 	bl	80001e0 <strlen>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	4423      	add	r3, r4
 8006d62:	b2dc      	uxtb	r4, r3
 8006d64:	6838      	ldr	r0, [r7, #0]
 8006d66:	f7f9 fa3b 	bl	80001e0 <strlen>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	4423      	add	r3, r4
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	3311      	adds	r3, #17
 8006d74:	75fb      	strb	r3, [r7, #23]
		sprintf((char*) g_buff_temp, "0AT+QMTCONN=%d,%s,%s,%s\r", clientIndex, clientID, userName, passWord);
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4922      	ldr	r1, [pc, #136]	; (8006e0c <MQTT_Connect+0xd8>)
 8006d84:	4822      	ldr	r0, [pc, #136]	; (8006e10 <MQTT_Connect+0xdc>)
 8006d86:	f003 fe4f 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	491f      	ldr	r1, [pc, #124]	; (8006e10 <MQTT_Connect+0xdc>)
 8006d92:	4820      	ldr	r0, [pc, #128]	; (8006e14 <MQTT_Connect+0xe0>)
 8006d94:	f000 fb00 	bl	8007398 <Trans_Data>
		/*wait response of +QMTCONN*/
		if(Recv_Response(&UartEmulHandle, WAIT_CONNECT) == RESPONSE_MQTT_CLOSE) 
 8006d98:	f241 3188 	movw	r1, #5000	; 0x1388
 8006d9c:	481d      	ldr	r0, [pc, #116]	; (8006e14 <MQTT_Connect+0xe0>)
 8006d9e:	f000 fbaf 	bl	8007500 <Recv_Response>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d109      	bne.n	8006dbc <MQTT_Connect+0x88>
		{
				Log_Info((uint8_t*)"CONNECT-CLOSE\n", 14);
 8006da8:	210e      	movs	r1, #14
 8006daa:	481b      	ldr	r0, [pc, #108]	; (8006e18 <MQTT_Connect+0xe4>)
 8006dac:	f7ff fb8e 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006db0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006db4:	f7fb facc 	bl	8002350 <HAL_Delay>
				return RESPONSE_MQTT_CLOSE;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e022      	b.n	8006e02 <MQTT_Connect+0xce>
		}
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8006dbc:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <MQTT_Connect+0xe8>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	3b03      	subs	r3, #3
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <MQTT_Connect+0xe8>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	3b03      	subs	r3, #3
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	4914      	ldr	r1, [pc, #80]	; (8006e20 <MQTT_Connect+0xec>)
 8006dce:	4810      	ldr	r0, [pc, #64]	; (8006e10 <MQTT_Connect+0xdc>)
 8006dd0:	f000 fbf0 	bl	80075b4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4913      	ldr	r1, [pc, #76]	; (8006e24 <MQTT_Connect+0xf0>)
 8006dd8:	480d      	ldr	r0, [pc, #52]	; (8006e10 <MQTT_Connect+0xdc>)
 8006dda:	f000 fb43 	bl	8007464 <Compare_Str>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <MQTT_Connect+0xc4>
		{
				Log_Info((uint8_t*)"Connect Success!\n", 17);
 8006de4:	2111      	movs	r1, #17
 8006de6:	4810      	ldr	r0, [pc, #64]	; (8006e28 <MQTT_Connect+0xf4>)
 8006de8:	f7ff fb70 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006dec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006df0:	f7fb faae 	bl	8002350 <HAL_Delay>
				return RESPONSE_OK;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e004      	b.n	8006e02 <MQTT_Connect+0xce>
		}
		HAL_Delay(MAX_WAIT_TIME);
 8006df8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006dfc:	f7fb faa8 	bl	8002350 <HAL_Delay>
		return RESPONSE_ERR;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd90      	pop	{r4, r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	0800ea40 	.word	0x0800ea40
 8006e10:	20000558 	.word	0x20000558
 8006e14:	20000d4c 	.word	0x20000d4c
 8006e18:	0800ea5c 	.word	0x0800ea5c
 8006e1c:	20000455 	.word	0x20000455
 8006e20:	20000458 	.word	0x20000458
 8006e24:	0800e9f4 	.word	0x0800e9f4
 8006e28:	0800ea6c 	.word	0x0800ea6c

08006e2c <MQTT_Check_Connect>:
/**
  * @brief  Check MQTT Connect
  * @retval OK or ERR
  */
response_t MQTT_Check_Connect(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
		Trans_Data(&UartEmulHandle, (uint8_t*)"0AT+QMTCONN?\r", 13);
 8006e30:	220d      	movs	r2, #13
 8006e32:	4919      	ldr	r1, [pc, #100]	; (8006e98 <MQTT_Check_Connect+0x6c>)
 8006e34:	4819      	ldr	r0, [pc, #100]	; (8006e9c <MQTT_Check_Connect+0x70>)
 8006e36:	f000 faaf 	bl	8007398 <Trans_Data>
		Recv_Response(&UartEmulHandle, 300);
 8006e3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006e3e:	4817      	ldr	r0, [pc, #92]	; (8006e9c <MQTT_Check_Connect+0x70>)
 8006e40:	f000 fb5e 	bl	8007500 <Recv_Response>
		if(g_count_temp < 20)
 8006e44:	4b16      	ldr	r3, [pc, #88]	; (8006ea0 <MQTT_Check_Connect+0x74>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b13      	cmp	r3, #19
 8006e4a:	d809      	bhi.n	8006e60 <MQTT_Check_Connect+0x34>
		{
				Log_Info((uint8_t*)"Not connect!\n", 13);
 8006e4c:	210d      	movs	r1, #13
 8006e4e:	4815      	ldr	r0, [pc, #84]	; (8006ea4 <MQTT_Check_Connect+0x78>)
 8006e50:	f7ff fb3c 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006e54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006e58:	f7fb fa7a 	bl	8002350 <HAL_Delay>
				return RESPONSE_ERR; //not connect
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e018      	b.n	8006e92 <MQTT_Check_Connect+0x66>
		}
		Get_Paragraph(g_buff_temp, g_recv_buff, 26, 26);
 8006e60:	231a      	movs	r3, #26
 8006e62:	221a      	movs	r2, #26
 8006e64:	4910      	ldr	r1, [pc, #64]	; (8006ea8 <MQTT_Check_Connect+0x7c>)
 8006e66:	4811      	ldr	r0, [pc, #68]	; (8006eac <MQTT_Check_Connect+0x80>)
 8006e68:	f000 fba4 	bl	80075b4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"3", 1))
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	4910      	ldr	r1, [pc, #64]	; (8006eb0 <MQTT_Check_Connect+0x84>)
 8006e70:	480e      	ldr	r0, [pc, #56]	; (8006eac <MQTT_Check_Connect+0x80>)
 8006e72:	f000 faf7 	bl	8007464 <Compare_Str>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <MQTT_Check_Connect+0x64>
		{
				Log_Info((uint8_t*)"Connect Exist!\n", 15);
 8006e7c:	210f      	movs	r1, #15
 8006e7e:	480d      	ldr	r0, [pc, #52]	; (8006eb4 <MQTT_Check_Connect+0x88>)
 8006e80:	f7ff fb24 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006e84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006e88:	f7fb fa62 	bl	8002350 <HAL_Delay>
				return RESPONSE_OK;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <MQTT_Check_Connect+0x66>
		}
		return RESPONSE_ERR; //not connect
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	0800ea80 	.word	0x0800ea80
 8006e9c:	20000d4c 	.word	0x20000d4c
 8006ea0:	20000455 	.word	0x20000455
 8006ea4:	0800ea90 	.word	0x0800ea90
 8006ea8:	20000458 	.word	0x20000458
 8006eac:	20000558 	.word	0x20000558
 8006eb0:	0800eaa0 	.word	0x0800eaa0
 8006eb4:	0800eaa4 	.word	0x0800eaa4

08006eb8 <MQTT_Publish>:
  * @retval OK or ERR
  */
response_t MQTT_Publish(uint8_t clientIndex,
												uint8_t msgId, uint8_t QoS, uint8_t retain, 
												uint8_t* topic, uint8_t lenData, uint8_t* pData)
{
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b089      	sub	sp, #36	; 0x24
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	71fb      	strb	r3, [r7, #7]
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71bb      	strb	r3, [r7, #6]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	717b      	strb	r3, [r7, #5]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	713b      	strb	r3, [r7, #4]
		HAL_Delay(MAX_WAIT_TIME);
 8006ed6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006eda:	f7fb fa39 	bl	8002350 <HAL_Delay>
		uint8_t lenOfLenData;
		if(lenData <= 9 ) lenOfLenData = 1;
 8006ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ee2:	2b09      	cmp	r3, #9
 8006ee4:	d802      	bhi.n	8006eec <MQTT_Publish+0x34>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	73fb      	strb	r3, [r7, #15]
 8006eea:	e010      	b.n	8006f0e <MQTT_Publish+0x56>
		else if(lenData > 9 && lenData < 100) lenOfLenData = 2;
 8006eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ef0:	2b09      	cmp	r3, #9
 8006ef2:	d906      	bls.n	8006f02 <MQTT_Publish+0x4a>
 8006ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ef8:	2b63      	cmp	r3, #99	; 0x63
 8006efa:	d802      	bhi.n	8006f02 <MQTT_Publish+0x4a>
 8006efc:	2302      	movs	r3, #2
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	e005      	b.n	8006f0e <MQTT_Publish+0x56>
		else if(lenData >= 100) lenOfLenData = 3;
 8006f02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f06:	2b63      	cmp	r3, #99	; 0x63
 8006f08:	d901      	bls.n	8006f0e <MQTT_Publish+0x56>
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	73fb      	strb	r3, [r7, #15]
		uint8_t lenBuffTrans = 23 + strlen((char*)topic) + lenOfLenData;
 8006f0e:	6a38      	ldr	r0, [r7, #32]
 8006f10:	f7f9 f966 	bl	80001e0 <strlen>
 8006f14:	4603      	mov	r3, r0
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3317      	adds	r3, #23
 8006f20:	73bb      	strb	r3, [r7, #14]
		sprintf((char*) g_buff_temp, "0AT+QMTPUBEX=%d,%d,%d,%d,%s,%d\r", clientIndex, msgId, QoS, retain, topic, lenData);
 8006f22:	79f8      	ldrb	r0, [r7, #7]
 8006f24:	79bc      	ldrb	r4, [r7, #6]
 8006f26:	797b      	ldrb	r3, [r7, #5]
 8006f28:	793a      	ldrb	r2, [r7, #4]
 8006f2a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8006f2e:	9103      	str	r1, [sp, #12]
 8006f30:	6a39      	ldr	r1, [r7, #32]
 8006f32:	9102      	str	r1, [sp, #8]
 8006f34:	9201      	str	r2, [sp, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4623      	mov	r3, r4
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4923      	ldr	r1, [pc, #140]	; (8006fcc <MQTT_Publish+0x114>)
 8006f3e:	4824      	ldr	r0, [pc, #144]	; (8006fd0 <MQTT_Publish+0x118>)
 8006f40:	f003 fd72 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, lenBuffTrans);
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	4921      	ldr	r1, [pc, #132]	; (8006fd0 <MQTT_Publish+0x118>)
 8006f4c:	4821      	ldr	r0, [pc, #132]	; (8006fd4 <MQTT_Publish+0x11c>)
 8006f4e:	f000 fa23 	bl	8007398 <Trans_Data>
		Recv_Response(&UartEmulHandle, 200);
 8006f52:	21c8      	movs	r1, #200	; 0xc8
 8006f54:	481f      	ldr	r0, [pc, #124]	; (8006fd4 <MQTT_Publish+0x11c>)
 8006f56:	f000 fad3 	bl	8007500 <Recv_Response>
	
		/*transmit data buffer*/
		Trans_Data(&UartEmulHandle, pData, lenData);
 8006f5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f64:	481b      	ldr	r0, [pc, #108]	; (8006fd4 <MQTT_Publish+0x11c>)
 8006f66:	f000 fa17 	bl	8007398 <Trans_Data>
		/*wait response of +QMTCONN*/
		Recv_Response(&UartEmulHandle, MAX_WAIT_TIME);
 8006f6a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006f6e:	4819      	ldr	r0, [pc, #100]	; (8006fd4 <MQTT_Publish+0x11c>)
 8006f70:	f000 fac6 	bl	8007500 <Recv_Response>
		Get_Paragraph(g_buff_temp, g_recv_buff, g_count_temp - 3, g_count_temp - 3);
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <MQTT_Publish+0x120>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	3b03      	subs	r3, #3
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <MQTT_Publish+0x120>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	3b03      	subs	r3, #3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	4915      	ldr	r1, [pc, #84]	; (8006fdc <MQTT_Publish+0x124>)
 8006f86:	4812      	ldr	r0, [pc, #72]	; (8006fd0 <MQTT_Publish+0x118>)
 8006f88:	f000 fb14 	bl	80075b4 <Get_Paragraph>
		if(Compare_Str(g_buff_temp, (uint8_t*)"0", 1))
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	4914      	ldr	r1, [pc, #80]	; (8006fe0 <MQTT_Publish+0x128>)
 8006f90:	480f      	ldr	r0, [pc, #60]	; (8006fd0 <MQTT_Publish+0x118>)
 8006f92:	f000 fa67 	bl	8007464 <Compare_Str>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d009      	beq.n	8006fb0 <MQTT_Publish+0xf8>
		{
				Log_Info((uint8_t*)"Publish Success!\n", 17);
 8006f9c:	2111      	movs	r1, #17
 8006f9e:	4811      	ldr	r0, [pc, #68]	; (8006fe4 <MQTT_Publish+0x12c>)
 8006fa0:	f7ff fa94 	bl	80064cc <Log_Info>
				HAL_Delay(MAX_WAIT_TIME);
 8006fa4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fa8:	f7fb f9d2 	bl	8002350 <HAL_Delay>
				return RESPONSE_OK;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e008      	b.n	8006fc2 <MQTT_Publish+0x10a>
		}
		else
		{
			Log_Info((uint8_t*)"Publish not Success!\n", 21);
 8006fb0:	2115      	movs	r1, #21
 8006fb2:	480d      	ldr	r0, [pc, #52]	; (8006fe8 <MQTT_Publish+0x130>)
 8006fb4:	f7ff fa8a 	bl	80064cc <Log_Info>
		}
		HAL_Delay(MAX_WAIT_TIME);
 8006fb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fbc:	f7fb f9c8 	bl	8002350 <HAL_Delay>
		return RESPONSE_ERR;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd90      	pop	{r4, r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	0800eab4 	.word	0x0800eab4
 8006fd0:	20000558 	.word	0x20000558
 8006fd4:	20000d4c 	.word	0x20000d4c
 8006fd8:	20000455 	.word	0x20000455
 8006fdc:	20000458 	.word	0x20000458
 8006fe0:	0800e9f4 	.word	0x0800e9f4
 8006fe4:	0800ead4 	.word	0x0800ead4
 8006fe8:	0800eae8 	.word	0x0800eae8

08006fec <MQTT_SSL_Mode>:
  * @param  sslIndex: SSL context index (0-5)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Mode(uint8_t clientIndex,
												 uint8_t mode, uint8_t sslIndex)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	71fb      	strb	r3, [r7, #7]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	71bb      	strb	r3, [r7, #6]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	717b      	strb	r3, [r7, #5]
		HAL_Delay(1000);
 8006ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007002:	f7fb f9a5 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QMTCFG=ssl,%d,%d,%d\r", clientIndex, mode, sslIndex);
 8007006:	79fa      	ldrb	r2, [r7, #7]
 8007008:	79b9      	ldrb	r1, [r7, #6]
 800700a:	797b      	ldrb	r3, [r7, #5]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	460b      	mov	r3, r1
 8007010:	490f      	ldr	r1, [pc, #60]	; (8007050 <MQTT_SSL_Mode+0x64>)
 8007012:	4810      	ldr	r0, [pc, #64]	; (8007054 <MQTT_SSL_Mode+0x68>)
 8007014:	f003 fd08 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 21);
 8007018:	2215      	movs	r2, #21
 800701a:	490e      	ldr	r1, [pc, #56]	; (8007054 <MQTT_SSL_Mode+0x68>)
 800701c:	480e      	ldr	r0, [pc, #56]	; (8007058 <MQTT_SSL_Mode+0x6c>)
 800701e:	f000 f9bb 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8007022:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007026:	480c      	ldr	r0, [pc, #48]	; (8007058 <MQTT_SSL_Mode+0x6c>)
 8007028:	f000 fa6a 	bl	8007500 <Recv_Response>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d105      	bne.n	800703e <MQTT_SSL_Mode+0x52>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8007032:	2107      	movs	r1, #7
 8007034:	4809      	ldr	r0, [pc, #36]	; (800705c <MQTT_SSL_Mode+0x70>)
 8007036:	f7ff fa49 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 800703a:	2301      	movs	r3, #1
 800703c:	e004      	b.n	8007048 <MQTT_SSL_Mode+0x5c>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800703e:	2108      	movs	r1, #8
 8007040:	4807      	ldr	r0, [pc, #28]	; (8007060 <MQTT_SSL_Mode+0x74>)
 8007042:	f7ff fa43 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	0800eb00 	.word	0x0800eb00
 8007054:	20000558 	.word	0x20000558
 8007058:	20000d4c 	.word	0x20000d4c
 800705c:	0800e91c 	.word	0x0800e91c
 8007060:	0800e924 	.word	0x0800e924

08007064 <MQTT_SSL_Certificate>:
  * @brief  Config Certificates of SSL from file in UFS
	* @param  sslIndex: SSL context index (0-5)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Certificate(uint8_t sslIndex)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800706e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007072:	f7fb f96d 	bl	8002350 <HAL_Delay>
		/*Send CA*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=cacert,%d,cacert.pem\r", sslIndex);
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	461a      	mov	r2, r3
 800707a:	4929      	ldr	r1, [pc, #164]	; (8007120 <MQTT_SSL_Certificate+0xbc>)
 800707c:	4829      	ldr	r0, [pc, #164]	; (8007124 <MQTT_SSL_Certificate+0xc0>)
 800707e:	f003 fcd3 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 33);
 8007082:	2221      	movs	r2, #33	; 0x21
 8007084:	4927      	ldr	r1, [pc, #156]	; (8007124 <MQTT_SSL_Certificate+0xc0>)
 8007086:	4828      	ldr	r0, [pc, #160]	; (8007128 <MQTT_SSL_Certificate+0xc4>)
 8007088:	f000 f986 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK) 
 800708c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007090:	4825      	ldr	r0, [pc, #148]	; (8007128 <MQTT_SSL_Certificate+0xc4>)
 8007092:	f000 fa35 	bl	8007500 <Recv_Response>
 8007096:	4603      	mov	r3, r0
 8007098:	2b01      	cmp	r3, #1
 800709a:	d005      	beq.n	80070a8 <MQTT_SSL_Certificate+0x44>
		{
				Log_Info((uint8_t*)"CA_ERR\n", 7);
 800709c:	2107      	movs	r1, #7
 800709e:	4823      	ldr	r0, [pc, #140]	; (800712c <MQTT_SSL_Certificate+0xc8>)
 80070a0:	f7ff fa14 	bl	80064cc <Log_Info>
				return RESPONSE_ERR;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e036      	b.n	8007116 <MQTT_SSL_Certificate+0xb2>
		}
		
		/*Send CC*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=clientcert,%d,client.pem\r", sslIndex);
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	461a      	mov	r2, r3
 80070ac:	4920      	ldr	r1, [pc, #128]	; (8007130 <MQTT_SSL_Certificate+0xcc>)
 80070ae:	481d      	ldr	r0, [pc, #116]	; (8007124 <MQTT_SSL_Certificate+0xc0>)
 80070b0:	f003 fcba 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 36);
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	491b      	ldr	r1, [pc, #108]	; (8007124 <MQTT_SSL_Certificate+0xc0>)
 80070b8:	481b      	ldr	r0, [pc, #108]	; (8007128 <MQTT_SSL_Certificate+0xc4>)
 80070ba:	f000 f96d 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK) 
 80070be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80070c2:	4819      	ldr	r0, [pc, #100]	; (8007128 <MQTT_SSL_Certificate+0xc4>)
 80070c4:	f000 fa1c 	bl	8007500 <Recv_Response>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d005      	beq.n	80070da <MQTT_SSL_Certificate+0x76>
		{
				Log_Info((uint8_t*)"CC_ERR\n", 7);
 80070ce:	2107      	movs	r1, #7
 80070d0:	4818      	ldr	r0, [pc, #96]	; (8007134 <MQTT_SSL_Certificate+0xd0>)
 80070d2:	f7ff f9fb 	bl	80064cc <Log_Info>
				return RESPONSE_ERR;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e01d      	b.n	8007116 <MQTT_SSL_Certificate+0xb2>
		}
		
		/*Send CK*/
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=clientkey,%d,user_key.pem\r", sslIndex);
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	461a      	mov	r2, r3
 80070de:	4916      	ldr	r1, [pc, #88]	; (8007138 <MQTT_SSL_Certificate+0xd4>)
 80070e0:	4810      	ldr	r0, [pc, #64]	; (8007124 <MQTT_SSL_Certificate+0xc0>)
 80070e2:	f003 fca1 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 37);
 80070e6:	2225      	movs	r2, #37	; 0x25
 80070e8:	490e      	ldr	r1, [pc, #56]	; (8007124 <MQTT_SSL_Certificate+0xc0>)
 80070ea:	480f      	ldr	r0, [pc, #60]	; (8007128 <MQTT_SSL_Certificate+0xc4>)
 80070ec:	f000 f954 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) != RESPONSE_OK)
 80070f0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80070f4:	480c      	ldr	r0, [pc, #48]	; (8007128 <MQTT_SSL_Certificate+0xc4>)
 80070f6:	f000 fa03 	bl	8007500 <Recv_Response>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d005      	beq.n	800710c <MQTT_SSL_Certificate+0xa8>
		{
				Log_Info((uint8_t*)"CK_ERR\n", 7);
 8007100:	2107      	movs	r1, #7
 8007102:	480e      	ldr	r0, [pc, #56]	; (800713c <MQTT_SSL_Certificate+0xd8>)
 8007104:	f7ff f9e2 	bl	80064cc <Log_Info>
				return RESPONSE_ERR;
 8007108:	2300      	movs	r3, #0
 800710a:	e004      	b.n	8007116 <MQTT_SSL_Certificate+0xb2>
		}
		else Log_Info((uint8_t*)"RES_OK\n", 7);
 800710c:	2107      	movs	r1, #7
 800710e:	480c      	ldr	r0, [pc, #48]	; (8007140 <MQTT_SSL_Certificate+0xdc>)
 8007110:	f7ff f9dc 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	0800eb1c 	.word	0x0800eb1c
 8007124:	20000558 	.word	0x20000558
 8007128:	20000d4c 	.word	0x20000d4c
 800712c:	0800eb40 	.word	0x0800eb40
 8007130:	0800eb48 	.word	0x0800eb48
 8007134:	0800eb70 	.word	0x0800eb70
 8007138:	0800eb78 	.word	0x0800eb78
 800713c:	0800eba0 	.word	0x0800eba0
 8007140:	0800e91c 	.word	0x0800e91c

08007144 <MQTT_SSL_Level>:
  * @param  level: SSL level (0-2)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Level(uint8_t sslIndex,
												  uint8_t level)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	460a      	mov	r2, r1
 800714e:	71fb      	strb	r3, [r7, #7]
 8007150:	4613      	mov	r3, r2
 8007152:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 8007154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007158:	f7fb f8fa 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=seclevel,%d,%d\r", sslIndex, level);
 800715c:	79fa      	ldrb	r2, [r7, #7]
 800715e:	79bb      	ldrb	r3, [r7, #6]
 8007160:	490f      	ldr	r1, [pc, #60]	; (80071a0 <MQTT_SSL_Level+0x5c>)
 8007162:	4810      	ldr	r0, [pc, #64]	; (80071a4 <MQTT_SSL_Level+0x60>)
 8007164:	f003 fc60 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 25);
 8007168:	2219      	movs	r2, #25
 800716a:	490e      	ldr	r1, [pc, #56]	; (80071a4 <MQTT_SSL_Level+0x60>)
 800716c:	480e      	ldr	r0, [pc, #56]	; (80071a8 <MQTT_SSL_Level+0x64>)
 800716e:	f000 f913 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 8007172:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007176:	480c      	ldr	r0, [pc, #48]	; (80071a8 <MQTT_SSL_Level+0x64>)
 8007178:	f000 f9c2 	bl	8007500 <Recv_Response>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d105      	bne.n	800718e <MQTT_SSL_Level+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 8007182:	2107      	movs	r1, #7
 8007184:	4809      	ldr	r0, [pc, #36]	; (80071ac <MQTT_SSL_Level+0x68>)
 8007186:	f7ff f9a1 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 800718a:	2301      	movs	r3, #1
 800718c:	e004      	b.n	8007198 <MQTT_SSL_Level+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800718e:	2108      	movs	r1, #8
 8007190:	4807      	ldr	r0, [pc, #28]	; (80071b0 <MQTT_SSL_Level+0x6c>)
 8007192:	f7ff f99b 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	0800eba8 	.word	0x0800eba8
 80071a4:	20000558 	.word	0x20000558
 80071a8:	20000d4c 	.word	0x20000d4c
 80071ac:	0800e91c 	.word	0x0800e91c
 80071b0:	0800e924 	.word	0x0800e924

080071b4 <MQTT_SSL_Version>:
  * @param  version: SSL version (0-4)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Version(uint8_t sslIndex,
												    uint8_t version)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	460a      	mov	r2, r1
 80071be:	71fb      	strb	r3, [r7, #7]
 80071c0:	4613      	mov	r3, r2
 80071c2:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 80071c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071c8:	f7fb f8c2 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=sslversion,%d,%d\r", sslIndex, version);
 80071cc:	79fa      	ldrb	r2, [r7, #7]
 80071ce:	79bb      	ldrb	r3, [r7, #6]
 80071d0:	490f      	ldr	r1, [pc, #60]	; (8007210 <MQTT_SSL_Version+0x5c>)
 80071d2:	4810      	ldr	r0, [pc, #64]	; (8007214 <MQTT_SSL_Version+0x60>)
 80071d4:	f003 fc28 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 27);
 80071d8:	221b      	movs	r2, #27
 80071da:	490e      	ldr	r1, [pc, #56]	; (8007214 <MQTT_SSL_Version+0x60>)
 80071dc:	480e      	ldr	r0, [pc, #56]	; (8007218 <MQTT_SSL_Version+0x64>)
 80071de:	f000 f8db 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80071e2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80071e6:	480c      	ldr	r0, [pc, #48]	; (8007218 <MQTT_SSL_Version+0x64>)
 80071e8:	f000 f98a 	bl	8007500 <Recv_Response>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d105      	bne.n	80071fe <MQTT_SSL_Version+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80071f2:	2107      	movs	r1, #7
 80071f4:	4809      	ldr	r0, [pc, #36]	; (800721c <MQTT_SSL_Version+0x68>)
 80071f6:	f7ff f969 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e004      	b.n	8007208 <MQTT_SSL_Version+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80071fe:	2108      	movs	r1, #8
 8007200:	4807      	ldr	r0, [pc, #28]	; (8007220 <MQTT_SSL_Version+0x6c>)
 8007202:	f7ff f963 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	0800ebc4 	.word	0x0800ebc4
 8007214:	20000558 	.word	0x20000558
 8007218:	20000d4c 	.word	0x20000d4c
 800721c:	0800e91c 	.word	0x0800e91c
 8007220:	0800e924 	.word	0x0800e924

08007224 <MQTT_SSL_Ciphersuite>:
  * @param  cipherSuite: string type format 0xYYYY
  * @retval OK or ERR
  */
response_t MQTT_SSL_Ciphersuite(uint8_t sslIndex,
																uint8_t* cipherSuite)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	6039      	str	r1, [r7, #0]
 800722e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8007230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007234:	f7fb f88c 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=ciphersuite,%d,%s\r", sslIndex, cipherSuite);
 8007238:	79fa      	ldrb	r2, [r7, #7]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	490f      	ldr	r1, [pc, #60]	; (800727c <MQTT_SSL_Ciphersuite+0x58>)
 800723e:	4810      	ldr	r0, [pc, #64]	; (8007280 <MQTT_SSL_Ciphersuite+0x5c>)
 8007240:	f003 fbf2 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 33);
 8007244:	2221      	movs	r2, #33	; 0x21
 8007246:	490e      	ldr	r1, [pc, #56]	; (8007280 <MQTT_SSL_Ciphersuite+0x5c>)
 8007248:	480e      	ldr	r0, [pc, #56]	; (8007284 <MQTT_SSL_Ciphersuite+0x60>)
 800724a:	f000 f8a5 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 800724e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007252:	480c      	ldr	r0, [pc, #48]	; (8007284 <MQTT_SSL_Ciphersuite+0x60>)
 8007254:	f000 f954 	bl	8007500 <Recv_Response>
 8007258:	4603      	mov	r3, r0
 800725a:	2b01      	cmp	r3, #1
 800725c:	d105      	bne.n	800726a <MQTT_SSL_Ciphersuite+0x46>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 800725e:	2107      	movs	r1, #7
 8007260:	4809      	ldr	r0, [pc, #36]	; (8007288 <MQTT_SSL_Ciphersuite+0x64>)
 8007262:	f7ff f933 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 8007266:	2301      	movs	r3, #1
 8007268:	e004      	b.n	8007274 <MQTT_SSL_Ciphersuite+0x50>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 800726a:	2108      	movs	r1, #8
 800726c:	4807      	ldr	r0, [pc, #28]	; (800728c <MQTT_SSL_Ciphersuite+0x68>)
 800726e:	f7ff f92d 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	0800ebe4 	.word	0x0800ebe4
 8007280:	20000558 	.word	0x20000558
 8007284:	20000d4c 	.word	0x20000d4c
 8007288:	0800e91c 	.word	0x0800e91c
 800728c:	0800e924 	.word	0x0800e924

08007290 <MQTT_SSL_Ignore>:
  * @param  ignoreltime: 0 (care about validity check for certificate) or 1 (ignore)
  * @retval OK or ERR
  */
response_t MQTT_SSL_Ignore(uint8_t sslIndex,
													 uint8_t ignoreltime)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	460a      	mov	r2, r1
 800729a:	71fb      	strb	r3, [r7, #7]
 800729c:	4613      	mov	r3, r2
 800729e:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(1000);
 80072a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072a4:	f7fb f854 	bl	8002350 <HAL_Delay>
		sprintf((char*) g_buff_temp, "0AT+QSSLCFG=ignorelocaltime,%d,%d\r", sslIndex, ignoreltime);
 80072a8:	79fa      	ldrb	r2, [r7, #7]
 80072aa:	79bb      	ldrb	r3, [r7, #6]
 80072ac:	490f      	ldr	r1, [pc, #60]	; (80072ec <MQTT_SSL_Ignore+0x5c>)
 80072ae:	4810      	ldr	r0, [pc, #64]	; (80072f0 <MQTT_SSL_Ignore+0x60>)
 80072b0:	f003 fbba 	bl	800aa28 <siprintf>
		Trans_Data(&UartEmulHandle, (uint8_t*)g_buff_temp, 32);
 80072b4:	2220      	movs	r2, #32
 80072b6:	490e      	ldr	r1, [pc, #56]	; (80072f0 <MQTT_SSL_Ignore+0x60>)
 80072b8:	480e      	ldr	r0, [pc, #56]	; (80072f4 <MQTT_SSL_Ignore+0x64>)
 80072ba:	f000 f86d 	bl	8007398 <Trans_Data>
		if(Recv_Response(&UartEmulHandle, 350) == RESPONSE_OK) 
 80072be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80072c2:	480c      	ldr	r0, [pc, #48]	; (80072f4 <MQTT_SSL_Ignore+0x64>)
 80072c4:	f000 f91c 	bl	8007500 <Recv_Response>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d105      	bne.n	80072da <MQTT_SSL_Ignore+0x4a>
		{
				Log_Info((uint8_t*)"RES_OK\n", 7);
 80072ce:	2107      	movs	r1, #7
 80072d0:	4809      	ldr	r0, [pc, #36]	; (80072f8 <MQTT_SSL_Ignore+0x68>)
 80072d2:	f7ff f8fb 	bl	80064cc <Log_Info>
				return RESPONSE_OK;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e004      	b.n	80072e4 <MQTT_SSL_Ignore+0x54>
		}
		else Log_Info((uint8_t*)"RES_ERR\n", 8);
 80072da:	2108      	movs	r1, #8
 80072dc:	4807      	ldr	r0, [pc, #28]	; (80072fc <MQTT_SSL_Ignore+0x6c>)
 80072de:	f7ff f8f5 	bl	80064cc <Log_Info>
		return RESPONSE_ERR;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	0800ec04 	.word	0x0800ec04
 80072f0:	20000558 	.word	0x20000558
 80072f4:	20000d4c 	.word	0x20000d4c
 80072f8:	0800e91c 	.word	0x0800e91c
 80072fc:	0800e924 	.word	0x0800e924

08007300 <UartEmul_Init>:
  * @brief  Initializes the UART Emulation 
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void UartEmul_Init(UART_Emul_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
		huart->Init.Mode        = UART_EMUL_MODE_TX_RX;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2203      	movs	r2, #3
 800730c:	711a      	strb	r2, [r3, #4]
		huart->Init.BaudRate    = 4800; //9600; //115200;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8007314:	609a      	str	r2, [r3, #8]
		huart->Init.StopBits    = UART_EMUL_STOPBITS_1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	735a      	strb	r2, [r3, #13]
		huart->Init.Parity      = UART_EMUL_PARITY_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	739a      	strb	r2, [r3, #14]
		huart->Init.WordLength  = UART_EMUL_WORDLENGTH_8B;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2208      	movs	r2, #8
 8007326:	731a      	strb	r2, [r3, #12]
		
		if (HAL_UART_Emul_Init(huart) != HAL_OK)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f98d 	bl	8007648 <HAL_UART_Emul_Init>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <UartEmul_Init+0x3c>
		{
				HAL_Delay(500);
 8007334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007338:	f7fb f80a 	bl	8002350 <HAL_Delay>
		}
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_UART_Emul_RxCpltCallback>:
  * @brief  Receive data complete callback
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void HAL_UART_Emul_RxCpltCallback(UART_Emul_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
		g_recv_buff[g_count++] = g_recv_byte;
 800734c:	4b08      	ldr	r3, [pc, #32]	; (8007370 <HAL_UART_Emul_RxCpltCallback+0x2c>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	b2d1      	uxtb	r1, r2
 8007354:	4a06      	ldr	r2, [pc, #24]	; (8007370 <HAL_UART_Emul_RxCpltCallback+0x2c>)
 8007356:	7011      	strb	r1, [r2, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	4b06      	ldr	r3, [pc, #24]	; (8007374 <HAL_UART_Emul_RxCpltCallback+0x30>)
 800735c:	7819      	ldrb	r1, [r3, #0]
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <HAL_UART_Emul_RxCpltCallback+0x34>)
 8007360:	5499      	strb	r1, [r3, r2]
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000454 	.word	0x20000454
 8007374:	20000453 	.word	0x20000453
 8007378:	20000458 	.word	0x20000458

0800737c <HAL_UART_Emul_ErrorCallback>:
  * @brief  UART Emul error callback
  * @param  huart: UART Emulation Handle
  * @retval None
  */
void HAL_UART_Emul_ErrorCallback(UART_Emul_HandleTypeDef *UartEmulHandle)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
		Log_Info((uint8_t*)"BUG\n", 4);
 8007384:	2104      	movs	r1, #4
 8007386:	4803      	ldr	r0, [pc, #12]	; (8007394 <HAL_UART_Emul_ErrorCallback+0x18>)
 8007388:	f7ff f8a0 	bl	80064cc <Log_Info>
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	0800ed1c 	.word	0x0800ed1c

08007398 <Trans_Data>:
	* @param  pData: pointer to data string
	* @param  Size: size of data
  * @retval None
  */
void Trans_Data(UART_Emul_HandleTypeDef * huart, uint8_t *pData, uint16_t Size)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	4613      	mov	r3, r2
 80073a4:	80fb      	strh	r3, [r7, #6]
		UartEmul_Init(huart);
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7ff ffaa 	bl	8007300 <UartEmul_Init>
		HAL_Delay(10);
 80073ac:	200a      	movs	r0, #10
 80073ae:	f7fa ffcf 	bl	8002350 <HAL_Delay>
		UartEmul_Init(huart);
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff ffa4 	bl	8007300 <UartEmul_Init>
		HAL_Delay(10);
 80073b8:	200a      	movs	r0, #10
 80073ba:	f7fa ffc9 	bl	8002350 <HAL_Delay>
		if (HAL_UART_Emul_Transmit_DMA(huart, pData, Size) != HAL_OK)
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f96b 	bl	80076a0 <HAL_UART_Emul_Transmit_DMA>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <Trans_Data+0x40>
		{
				Log_Info((uint8_t*)"Error_Handler\n", 14);
 80073d0:	210e      	movs	r1, #14
 80073d2:	4808      	ldr	r0, [pc, #32]	; (80073f4 <Trans_Data+0x5c>)
 80073d4:	f7ff f87a 	bl	80064cc <Log_Info>
		}
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_TC) != SET){};
 80073d8:	bf00      	nop
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d1f8      	bne.n	80073da <Trans_Data+0x42>
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	0800ed24 	.word	0x0800ed24

080073f8 <Recv_Data>:
	* @param  timeNow: tick value of moment call this function
	* @param  timeOut: time to wait response
  * @retval none
  */
void Recv_Data(UART_Emul_HandleTypeDef * huart, uint32_t timeNow, uint32_t timeOut)
{		
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
//		UartEmul_Init(huart);
		if (HAL_UART_Emul_Receive_DMA(huart, &g_recv_byte, 1) != HAL_OK)
 8007404:	2201      	movs	r2, #1
 8007406:	4915      	ldr	r1, [pc, #84]	; (800745c <Recv_Data+0x64>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f9c3 	bl	8007794 <HAL_UART_Emul_Receive_DMA>
		{
//				HAL_Delay(500);
//				Log_Info((uint8_t*)"Error_Handler\n", 14);
		}
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_RC) != SET)
 800740e:	e012      	b.n	8007436 <Recv_Data+0x3e>
		{
				if ((HAL_GetTick() - timeNow) > timeOut)
 8007410:	f7fa ff92 	bl	8002338 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d20a      	bcs.n	8007436 <Recv_Data+0x3e>
				{
						__HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_RC);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	f043 0301 	orr.w	r3, r3, #1
 800742a:	b2da      	uxtb	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	701a      	strb	r2, [r3, #0]
						g_isDone = RX_TRUE;	
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <Recv_Data+0x68>)
 8007432:	2201      	movs	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
		while (__HAL_UART_EMUL_GET_FLAG(huart, UART_EMUL_FLAG_RC) != SET)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d1e5      	bne.n	8007410 <Recv_Data+0x18>
				}
		}
		__HAL_UART_EMUL_CLEAR_FLAG(huart, UART_EMUL_FLAG_RC);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	b2da      	uxtb	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	701a      	strb	r2, [r3, #0]
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20000453 	.word	0x20000453
 8007460:	20000456 	.word	0x20000456

08007464 <Compare_Str>:
  * @param  str1, str2: pointer to 2 addresses of strings
	* @param  len: length of datas to compare
  * @retval true(1) or false(0)
  */
uint8_t Compare_Str(uint8_t* str1, uint8_t* str2, uint8_t len)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	71fb      	strb	r3, [r7, #7]
		while(len)
 8007472:	e00e      	b.n	8007492 <Compare_Str+0x2e>
		{
				if(*str1++ != *str2++)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	60fa      	str	r2, [r7, #12]
 800747a:	781a      	ldrb	r2, [r3, #0]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1c59      	adds	r1, r3, #1
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <Compare_Str+0x28>
				{
						return 0;
 8007488:	2300      	movs	r3, #0
 800748a:	e006      	b.n	800749a <Compare_Str+0x36>
				}
				len--;
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	3b01      	subs	r3, #1
 8007490:	71fb      	strb	r3, [r7, #7]
		while(len)
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1ed      	bne.n	8007474 <Compare_Str+0x10>
		}
		return 1;
 8007498:	2301      	movs	r3, #1
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <Confirm_OK>:
  * @brief  Compare string with "\r\nOK\r\n" 
  * @param  inputStr: pointer to addres of string input
  * @retval true(1) or false(0)
  */
uint8_t Confirm_OK(uint8_t* inputStr)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
		if(Compare_Str(inputStr, (uint8_t*)"\r\nOK\r\n", 6)) return 1;
 80074b0:	2206      	movs	r2, #6
 80074b2:	4907      	ldr	r1, [pc, #28]	; (80074d0 <Confirm_OK+0x28>)
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff ffd5 	bl	8007464 <Compare_Str>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <Confirm_OK+0x1c>
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <Confirm_OK+0x1e>
		return 0;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	0800ed34 	.word	0x0800ed34

080074d4 <Check_MQTT>:
  * @brief  Check response from UART, if MQTT Status is close
	* @param  inputStr: pointer to input string
  * @retval true(1) or false(0)
  */
uint8_t Check_MQTT(uint8_t* inputStr)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
		if(Compare_Str(inputStr, (uint8_t*)"\r\n+QMTSTAT: 0,1\r\n", 17)) return 1;
 80074dc:	2211      	movs	r2, #17
 80074de:	4907      	ldr	r1, [pc, #28]	; (80074fc <Check_MQTT+0x28>)
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7ff ffbf 	bl	8007464 <Compare_Str>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <Check_MQTT+0x1c>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <Check_MQTT+0x1e>
		return 0;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	0800ed3c 	.word	0x0800ed3c

08007500 <Recv_Response>:
  * @param  huart: UART Emulation Handle
	* @param  timeOut: time to wait response
  * @retval RESPONSE_OK, RESPONSE_ERR or RESPONSE_NEW_MSG
  */
response_t Recv_Response(UART_Emul_HandleTypeDef *huart, uint32_t timeOut)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
			response_t retValue = RESPONSE_ERR;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
			while(!g_isDone)
 800750e:	e00b      	b.n	8007528 <Recv_Response+0x28>
			{		
					g_timeNow = HAL_GetTick();		
 8007510:	f7fa ff12 	bl	8002338 <HAL_GetTick>
 8007514:	4603      	mov	r3, r0
 8007516:	4a22      	ldr	r2, [pc, #136]	; (80075a0 <Recv_Response+0xa0>)
 8007518:	6013      	str	r3, [r2, #0]
					Recv_Data(huart, g_timeNow, timeOut);
 800751a:	4b21      	ldr	r3, [pc, #132]	; (80075a0 <Recv_Response+0xa0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff ff68 	bl	80073f8 <Recv_Data>
			while(!g_isDone)
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <Recv_Response+0xa4>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0ef      	beq.n	8007510 <Recv_Response+0x10>
			}
			Log_Info(g_recv_buff, g_count);
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <Recv_Response+0xa8>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	4619      	mov	r1, r3
 8007536:	481d      	ldr	r0, [pc, #116]	; (80075ac <Recv_Response+0xac>)
 8007538:	f7fe ffc8 	bl	80064cc <Log_Info>
			g_isDone = RX_FALSE;
 800753c:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <Recv_Response+0xa4>)
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
			
			if(Confirm_OK(&g_recv_buff[g_count-6])) //if response stop by "\r\nOK\r\n"
 8007542:	4b19      	ldr	r3, [pc, #100]	; (80075a8 <Recv_Response+0xa8>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	3b06      	subs	r3, #6
 8007548:	4a18      	ldr	r2, [pc, #96]	; (80075ac <Recv_Response+0xac>)
 800754a:	4413      	add	r3, r2
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff ffab 	bl	80074a8 <Confirm_OK>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <Recv_Response+0x5c>
			{
				retValue = RESPONSE_OK;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
			}
			if(Check_New_Msg(g_recv_buff))	//if response start by "\r\n+CTMI"
 800755c:	4813      	ldr	r0, [pc, #76]	; (80075ac <Recv_Response+0xac>)
 800755e:	f000 f855 	bl	800760c <Check_New_Msg>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <Recv_Response+0x6c>
			{
				retValue = RESPONSE_NEW_MSG;
 8007568:	2302      	movs	r3, #2
 800756a:	73fb      	strb	r3, [r7, #15]
			}
			if(Check_MQTT(&g_recv_buff[g_count-17]))
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <Recv_Response+0xa8>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	3b11      	subs	r3, #17
 8007572:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <Recv_Response+0xac>)
 8007574:	4413      	add	r3, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff ffac 	bl	80074d4 <Check_MQTT>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <Recv_Response+0x86>
			{
					retValue = RESPONSE_MQTT_CLOSE;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
			}
			g_count_temp = g_count;	//pass value of 'g_count' into 'g_count_temp' to use in user file
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <Recv_Response+0xa8>)
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <Recv_Response+0xb0>)
 800758c:	701a      	strb	r2, [r3, #0]
			g_count = 0;
 800758e:	4b06      	ldr	r3, [pc, #24]	; (80075a8 <Recv_Response+0xa8>)
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
			return retValue;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000065c 	.word	0x2000065c
 80075a4:	20000456 	.word	0x20000456
 80075a8:	20000454 	.word	0x20000454
 80075ac:	20000458 	.word	0x20000458
 80075b0:	20000455 	.word	0x20000455

080075b4 <Get_Paragraph>:
	* @param  idStartSource: id start copy of source str
	* @param  idStopSource: id stop copy of source str
  * @retval none
  */
void Get_Paragraph(uint8_t* strTarget, uint8_t* strSource, uint8_t idStartSource, uint8_t idStopSource)
{	
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4611      	mov	r1, r2
 80075c0:	461a      	mov	r2, r3
 80075c2:	460b      	mov	r3, r1
 80075c4:	71fb      	strb	r3, [r7, #7]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71bb      	strb	r3, [r7, #6]
		uint8_t number = idStopSource - idStartSource + 1;
 80075ca:	79ba      	ldrb	r2, [r7, #6]
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	3301      	adds	r3, #1
 80075d4:	75bb      	strb	r3, [r7, #22]
		for(uint8_t i = 0; i < number; i++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	75fb      	strb	r3, [r7, #23]
 80075da:	e00c      	b.n	80075f6 <Get_Paragraph+0x42>
		{
				*(strTarget + i) = *(strSource + idStartSource + i);
 80075dc:	79fa      	ldrb	r2, [r7, #7]
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	4413      	add	r3, r2
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	441a      	add	r2, r3
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	68f9      	ldr	r1, [r7, #12]
 80075ea:	440b      	add	r3, r1
 80075ec:	7812      	ldrb	r2, [r2, #0]
 80075ee:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < number; i++)
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	3301      	adds	r3, #1
 80075f4:	75fb      	strb	r3, [r7, #23]
 80075f6:	7dfa      	ldrb	r2, [r7, #23]
 80075f8:	7dbb      	ldrb	r3, [r7, #22]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d3ee      	bcc.n	80075dc <Get_Paragraph+0x28>
		}
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	371c      	adds	r7, #28
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <Check_New_Msg>:
  * @brief  Check response from UART, is a new message or not
	* @param  inputStr: pointer to input string
  * @retval true(1) or false(0)
  */
uint8_t Check_New_Msg(uint8_t* inputStr)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
    Get_Paragraph(g_buff_temp, inputStr, 0, 6);
 8007614:	2306      	movs	r3, #6
 8007616:	2200      	movs	r2, #0
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	4809      	ldr	r0, [pc, #36]	; (8007640 <Check_New_Msg+0x34>)
 800761c:	f7ff ffca 	bl	80075b4 <Get_Paragraph>
    if(Compare_Str(g_buff_temp, (uint8_t*)"\r\n+CMTI", 7)) return 1;
 8007620:	2207      	movs	r2, #7
 8007622:	4908      	ldr	r1, [pc, #32]	; (8007644 <Check_New_Msg+0x38>)
 8007624:	4806      	ldr	r0, [pc, #24]	; (8007640 <Check_New_Msg+0x34>)
 8007626:	f7ff ff1d 	bl	8007464 <Compare_Str>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <Check_New_Msg+0x28>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <Check_New_Msg+0x2a>
        else return 0;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3708      	adds	r7, #8
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000558 	.word	0x20000558
 8007644:	0800ed50 	.word	0x0800ed50

08007648 <HAL_UART_Emul_Init>:
  *         the UART_Emul_InitTypeDef and create the associated handle.
  * @param  huart: UART Emulation handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Emul_Init(UART_Emul_HandleTypeDef *huart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_UART_Emul_Init+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e01b      	b.n	8007692 <HAL_UART_Emul_Init+0x4a>
  }

  if (huart->State == HAL_UART_EMUL_STATE_RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <HAL_UART_Emul_Init+0x24>
  {
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_Emul_MspInit(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fa fc36 	bl	8001ed8 <HAL_UART_Emul_MspInit>
  }

  /* Get Structure for uart emul Handle */
  huart_emul = huart;
 800766c:	4a0b      	ldr	r2, [pc, #44]	; (800769c <HAL_UART_Emul_Init+0x54>)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6013      	str	r3, [r2, #0]

  /* Set the TIM state */
  huart->State = HAL_UART_EMUL_STATE_BUSY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the UART Emulation Communication parameters */
  UART_Emul_SetConfig(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 face 	bl	8008c1c <UART_Emul_SetConfig>

  /* Initialize the UART Emulation state */
  huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  huart->State = HAL_UART_EMUL_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000764 	.word	0x20000764

080076a0 <HAL_UART_Emul_Transmit_DMA>:
 * @param  pData: Pointer to data buffer
 * @param  Size: Amount of data to be sent
 * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Emul_Transmit_DMA(UART_Emul_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	617b      	str	r3, [r7, #20]

  tmp = huart->State;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	617b      	str	r3, [r7, #20]
  if ((tmp == HAL_UART_EMUL_STATE_READY) || (tmp == HAL_UART_EMUL_STATE_BUSY_RX))
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d002      	beq.n	80076c8 <HAL_UART_Emul_Transmit_DMA+0x28>
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d154      	bne.n	8007772 <HAL_UART_Emul_Transmit_DMA+0xd2>
  {
    if ((pData == NULL ) || (Size == 0))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <HAL_UART_Emul_Transmit_DMA+0x34>
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_UART_Emul_Transmit_DMA+0x38>
    {
      return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e04d      	b.n	8007774 <HAL_UART_Emul_Transmit_DMA+0xd4>
    }

    huart->TxXferSize = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	831a      	strh	r2, [r3, #24]
    huart->pTxBuffPtr = pData;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	615a      	str	r2, [r3, #20]
    huart->TxXferCount = 1;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	835a      	strh	r2, [r3, #26]
    huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a receive process is ongoing or not */
    if (huart->State == HAL_UART_EMUL_STATE_BUSY_RX)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d104      	bne.n	8007708 <HAL_UART_Emul_Transmit_DMA+0x68>
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX_RX;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2210      	movs	r2, #16
 8007702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007706:	e003      	b.n	8007710 <HAL_UART_Emul_Transmit_DMA+0x70>
    }
    else
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2204      	movs	r2, #4
 800770c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Set the UART Emulation DMA transfer complete callback */
    TimHandle.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = UART_Emul_DMATransmitCplt;
 8007710:	4b1a      	ldr	r3, [pc, #104]	; (800777c <HAL_UART_Emul_Transmit_DMA+0xdc>)
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <HAL_UART_Emul_Transmit_DMA+0xe0>)
 8007716:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    TimHandle.hdma[TIM_DMA_ID_CC1]->XferErrorCallback = UART_Emul_DMAError;
 8007718:	4b18      	ldr	r3, [pc, #96]	; (800777c <HAL_UART_Emul_Transmit_DMA+0xdc>)
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	4a19      	ldr	r2, [pc, #100]	; (8007784 <HAL_UART_Emul_Transmit_DMA+0xe4>)
 800771e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Format first Frame to be sent */
    if (huart->TxXferCount == FIRST_BYTE)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8b5b      	ldrh	r3, [r3, #26]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d10e      	bne.n	8007746 <HAL_UART_Emul_Transmit_DMA+0xa6>
    {
      /* Format Frame to be sent */
      UART_Emul_TransmitFormatFrame(huart, *(pData), (uint32_t*)pFirstBuffer_Tx);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4a16      	ldr	r2, [pc, #88]	; (8007788 <HAL_UART_Emul_Transmit_DMA+0xe8>)
 800772e:	4619      	mov	r1, r3
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f001 fc43 	bl	8008fbc <UART_Emul_TransmitFormatFrame>

      /* Enable the Capture compare channel */
      TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007736:	2201      	movs	r2, #1
 8007738:	2100      	movs	r1, #0
 800773a:	4814      	ldr	r0, [pc, #80]	; (800778c <HAL_UART_Emul_Transmit_DMA+0xec>)
 800773c:	f7fd feda 	bl	80054f4 <TIM_CCxChannelCmd>

      /* Send Frames */
      UART_Emul_TransmitFrame(huart);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f001 fcf3 	bl	800912c <UART_Emul_TransmitFrame>
    }

    if ((huart->TxXferCount == FIRST_BYTE) && (huart->TxXferCount < Size))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8b5b      	ldrh	r3, [r3, #26]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d10f      	bne.n	800776e <HAL_UART_Emul_Transmit_DMA+0xce>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8b5b      	ldrh	r3, [r3, #26]
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	429a      	cmp	r2, r3
 8007756:	d90a      	bls.n	800776e <HAL_UART_Emul_Transmit_DMA+0xce>
    { 
      /* Format Second Frame to be sent */
      UART_Emul_TransmitFormatFrame(huart, *(pData + huart->TxXferCount), (uint32_t*)pSecondBuffer_Tx);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8b5b      	ldrh	r3, [r3, #26]
 800775c:	461a      	mov	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4413      	add	r3, r2
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	4a0a      	ldr	r2, [pc, #40]	; (8007790 <HAL_UART_Emul_Transmit_DMA+0xf0>)
 8007766:	4619      	mov	r1, r3
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f001 fc27 	bl	8008fbc <UART_Emul_TransmitFormatFrame>
    }

    return HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	e000      	b.n	8007774 <HAL_UART_Emul_Transmit_DMA+0xd4>
  }
  else
  {
    return HAL_BUSY;
 8007772:	2302      	movs	r3, #2
  }
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000724 	.word	0x20000724
 8007780:	08009201 	.word	0x08009201
 8007784:	08009311 	.word	0x08009311
 8007788:	200007c8 	.word	0x200007c8
 800778c:	40010000 	.word	0x40010000
 8007790:	200007f8 	.word	0x200007f8

08007794 <HAL_UART_Emul_Receive_DMA>:
 * @param  Size: Amount of data to be received
 * @retval HAL status
*/

HAL_StatusTypeDef HAL_UART_Emul_Receive_DMA(UART_Emul_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]

  tmp = huart->State;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	617b      	str	r3, [r7, #20]
//	sprintf((char*)log_buff, "State = %x\n", huart->State);
//	Log_Info((uint8_t*)log_buff, 11);
//	sprintf((char*)log_buff, "SR = %x\n", huart->Instance.SR);
//	Log_Info((uint8_t*)log_buff, 7);
  if ((tmp == HAL_UART_EMUL_STATE_READY) || (tmp == HAL_UART_EMUL_STATE_BUSY_TX))
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d002      	beq.n	80077bc <HAL_UART_Emul_Receive_DMA+0x28>
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d132      	bne.n	8007822 <HAL_UART_Emul_Receive_DMA+0x8e>
  {
    if ((pData == NULL ) || (Size == 0))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_UART_Emul_Receive_DMA+0x34>
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Emul_Receive_DMA+0x38>
    {
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e02b      	b.n	8007824 <HAL_UART_Emul_Receive_DMA+0x90>
    }

    huart->pRxBuffPtr = pData;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	61da      	str	r2, [r3, #28]
    huart->RxXferSize = Size;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	88fa      	ldrh	r2, [r7, #6]
 80077d6:	841a      	strh	r2, [r3, #32]
    huart->RxXferCount = 1;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	845a      	strh	r2, [r3, #34]	; 0x22

    huart->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a transmit process is ongoing or not */
    if (huart->State == HAL_UART_EMUL_STATE_BUSY_TX)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d104      	bne.n	80077fc <HAL_UART_Emul_Receive_DMA+0x68>
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_TX_RX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2210      	movs	r2, #16
 80077f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80077fa:	e003      	b.n	8007804 <HAL_UART_Emul_Receive_DMA+0x70>
    }
    else
    {
      huart->State = HAL_UART_EMUL_STATE_BUSY_RX;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2208      	movs	r2, #8
 8007800:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }
//		sprintf((char*)log_buff, "State = %x\n", huart->State);
//		Log_Info((uint8_t*)log_buff, 11);
    /* Set the UART Emulation DMA transfer complete callback */
    TimHandle.hdma[TIM_DMA_ID_CC2]->XferCpltCallback = UART_Emul_DMAReceiveCplt;
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <HAL_UART_Emul_Receive_DMA+0x98>)
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	4a09      	ldr	r2, [pc, #36]	; (8007830 <HAL_UART_Emul_Receive_DMA+0x9c>)
 800780a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    TimHandle.hdma[TIM_DMA_ID_CC2]->XferErrorCallback = UART_Emul_DMAError;
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <HAL_UART_Emul_Receive_DMA+0x98>)
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	4a08      	ldr	r2, [pc, #32]	; (8007834 <HAL_UART_Emul_Receive_DMA+0xa0>)
 8007812:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(TIM1, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007814:	2201      	movs	r2, #1
 8007816:	2104      	movs	r1, #4
 8007818:	4807      	ldr	r0, [pc, #28]	; (8007838 <HAL_UART_Emul_Receive_DMA+0xa4>)
 800781a:	f7fd fe6b 	bl	80054f4 <TIM_CCxChannelCmd>
//		sprintf((char*)log_buff, "SR = %x\n", huart->Instance.SR);
//		Log_Info((uint8_t*)log_buff, 7);
    return HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	e000      	b.n	8007824 <HAL_UART_Emul_Receive_DMA+0x90>
  }
  else
  {
    return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
  }
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000724 	.word	0x20000724
 8007830:	08008a35 	.word	0x08008a35
 8007834:	08009311 	.word	0x08009311
 8007838:	40010000 	.word	0x40010000

0800783c <DMA2_Stream2_IRQHandler>:
* @brief  This function handles DMA interrupt request for TC.
* @param  None
* @retval None
*/
void UART_EMUL_RX_DMA_IRQHandler(void)
{ 
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* Increment Counter of Frame */
  huart_emul->RxXferCount ++;
 8007840:	4b81      	ldr	r3, [pc, #516]	; (8007a48 <DMA2_Stream2_IRQHandler+0x20c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8007846:	3201      	adds	r2, #1
 8007848:	b292      	uxth	r2, r2
 800784a:	845a      	strh	r2, [r3, #34]	; 0x22

  /* Enable External interrupt for next Frame */
  EXTI->IMR |= huart_emul->Init.RxPinNumber;
 800784c:	4b7f      	ldr	r3, [pc, #508]	; (8007a4c <DMA2_Stream2_IRQHandler+0x210>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a7d      	ldr	r2, [pc, #500]	; (8007a48 <DMA2_Stream2_IRQHandler+0x20c>)
 8007852:	6812      	ldr	r2, [r2, #0]
 8007854:	8a12      	ldrh	r2, [r2, #16]
 8007856:	4611      	mov	r1, r2
 8007858:	4a7c      	ldr	r2, [pc, #496]	; (8007a4c <DMA2_Stream2_IRQHandler+0x210>)
 800785a:	430b      	orrs	r3, r1
 800785c:	6013      	str	r3, [r2, #0]

  if (__HAL_DMA_GET_FLAG(TimHandle.hdma[TIM_DMA_ID_CC2], __HAL_DMA_GET_TE_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC2])) != RESET)
 800785e:	4b7c      	ldr	r3, [pc, #496]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	4b7b      	ldr	r3, [pc, #492]	; (8007a54 <DMA2_Stream2_IRQHandler+0x218>)
 8007868:	429a      	cmp	r2, r3
 800786a:	d972      	bls.n	8007952 <DMA2_Stream2_IRQHandler+0x116>
 800786c:	4b7a      	ldr	r3, [pc, #488]	; (8007a58 <DMA2_Stream2_IRQHandler+0x21c>)
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	4b77      	ldr	r3, [pc, #476]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4979      	ldr	r1, [pc, #484]	; (8007a5c <DMA2_Stream2_IRQHandler+0x220>)
 8007878:	428b      	cmp	r3, r1
 800787a:	d062      	beq.n	8007942 <DMA2_Stream2_IRQHandler+0x106>
 800787c:	4b74      	ldr	r3, [pc, #464]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4977      	ldr	r1, [pc, #476]	; (8007a60 <DMA2_Stream2_IRQHandler+0x224>)
 8007884:	428b      	cmp	r3, r1
 8007886:	d05a      	beq.n	800793e <DMA2_Stream2_IRQHandler+0x102>
 8007888:	4b71      	ldr	r3, [pc, #452]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4975      	ldr	r1, [pc, #468]	; (8007a64 <DMA2_Stream2_IRQHandler+0x228>)
 8007890:	428b      	cmp	r3, r1
 8007892:	d052      	beq.n	800793a <DMA2_Stream2_IRQHandler+0xfe>
 8007894:	4b6e      	ldr	r3, [pc, #440]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4973      	ldr	r1, [pc, #460]	; (8007a68 <DMA2_Stream2_IRQHandler+0x22c>)
 800789c:	428b      	cmp	r3, r1
 800789e:	d04a      	beq.n	8007936 <DMA2_Stream2_IRQHandler+0xfa>
 80078a0:	4b6b      	ldr	r3, [pc, #428]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4971      	ldr	r1, [pc, #452]	; (8007a6c <DMA2_Stream2_IRQHandler+0x230>)
 80078a8:	428b      	cmp	r3, r1
 80078aa:	d041      	beq.n	8007930 <DMA2_Stream2_IRQHandler+0xf4>
 80078ac:	4b68      	ldr	r3, [pc, #416]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	496f      	ldr	r1, [pc, #444]	; (8007a70 <DMA2_Stream2_IRQHandler+0x234>)
 80078b4:	428b      	cmp	r3, r1
 80078b6:	d038      	beq.n	800792a <DMA2_Stream2_IRQHandler+0xee>
 80078b8:	4b65      	ldr	r3, [pc, #404]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	496d      	ldr	r1, [pc, #436]	; (8007a74 <DMA2_Stream2_IRQHandler+0x238>)
 80078c0:	428b      	cmp	r3, r1
 80078c2:	d02f      	beq.n	8007924 <DMA2_Stream2_IRQHandler+0xe8>
 80078c4:	4b62      	ldr	r3, [pc, #392]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	496b      	ldr	r1, [pc, #428]	; (8007a78 <DMA2_Stream2_IRQHandler+0x23c>)
 80078cc:	428b      	cmp	r3, r1
 80078ce:	d026      	beq.n	800791e <DMA2_Stream2_IRQHandler+0xe2>
 80078d0:	4b5f      	ldr	r3, [pc, #380]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4969      	ldr	r1, [pc, #420]	; (8007a7c <DMA2_Stream2_IRQHandler+0x240>)
 80078d8:	428b      	cmp	r3, r1
 80078da:	d01d      	beq.n	8007918 <DMA2_Stream2_IRQHandler+0xdc>
 80078dc:	4b5c      	ldr	r3, [pc, #368]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4967      	ldr	r1, [pc, #412]	; (8007a80 <DMA2_Stream2_IRQHandler+0x244>)
 80078e4:	428b      	cmp	r3, r1
 80078e6:	d014      	beq.n	8007912 <DMA2_Stream2_IRQHandler+0xd6>
 80078e8:	4b59      	ldr	r3, [pc, #356]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4965      	ldr	r1, [pc, #404]	; (8007a84 <DMA2_Stream2_IRQHandler+0x248>)
 80078f0:	428b      	cmp	r3, r1
 80078f2:	d00b      	beq.n	800790c <DMA2_Stream2_IRQHandler+0xd0>
 80078f4:	4b56      	ldr	r3, [pc, #344]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4963      	ldr	r1, [pc, #396]	; (8007a88 <DMA2_Stream2_IRQHandler+0x24c>)
 80078fc:	428b      	cmp	r3, r1
 80078fe:	d102      	bne.n	8007906 <DMA2_Stream2_IRQHandler+0xca>
 8007900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007904:	e01e      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800790a:	e01b      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 800790c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007910:	e018      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007916:	e015      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800791c:	e012      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 800791e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007922:	e00f      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007928:	e00c      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 800792a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800792e:	e009      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007934:	e006      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007936:	2308      	movs	r3, #8
 8007938:	e004      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 800793a:	2308      	movs	r3, #8
 800793c:	e002      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 800793e:	2308      	movs	r3, #8
 8007940:	e000      	b.n	8007944 <DMA2_Stream2_IRQHandler+0x108>
 8007942:	2308      	movs	r3, #8
 8007944:	4013      	ands	r3, r2
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf14      	ite	ne
 800794a:	2301      	movne	r3, #1
 800794c:	2300      	moveq	r3, #0
 800794e:	b2db      	uxtb	r3, r3
 8007950:	e1a9      	b.n	8007ca6 <DMA2_Stream2_IRQHandler+0x46a>
 8007952:	4b3f      	ldr	r3, [pc, #252]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	461a      	mov	r2, r3
 800795a:	4b4c      	ldr	r3, [pc, #304]	; (8007a8c <DMA2_Stream2_IRQHandler+0x250>)
 800795c:	429a      	cmp	r2, r3
 800795e:	f240 8097 	bls.w	8007a90 <DMA2_Stream2_IRQHandler+0x254>
 8007962:	4b3d      	ldr	r3, [pc, #244]	; (8007a58 <DMA2_Stream2_IRQHandler+0x21c>)
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b3a      	ldr	r3, [pc, #232]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	493b      	ldr	r1, [pc, #236]	; (8007a5c <DMA2_Stream2_IRQHandler+0x220>)
 800796e:	428b      	cmp	r3, r1
 8007970:	d062      	beq.n	8007a38 <DMA2_Stream2_IRQHandler+0x1fc>
 8007972:	4b37      	ldr	r3, [pc, #220]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4939      	ldr	r1, [pc, #228]	; (8007a60 <DMA2_Stream2_IRQHandler+0x224>)
 800797a:	428b      	cmp	r3, r1
 800797c:	d05a      	beq.n	8007a34 <DMA2_Stream2_IRQHandler+0x1f8>
 800797e:	4b34      	ldr	r3, [pc, #208]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4937      	ldr	r1, [pc, #220]	; (8007a64 <DMA2_Stream2_IRQHandler+0x228>)
 8007986:	428b      	cmp	r3, r1
 8007988:	d052      	beq.n	8007a30 <DMA2_Stream2_IRQHandler+0x1f4>
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4935      	ldr	r1, [pc, #212]	; (8007a68 <DMA2_Stream2_IRQHandler+0x22c>)
 8007992:	428b      	cmp	r3, r1
 8007994:	d04a      	beq.n	8007a2c <DMA2_Stream2_IRQHandler+0x1f0>
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 8007998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4933      	ldr	r1, [pc, #204]	; (8007a6c <DMA2_Stream2_IRQHandler+0x230>)
 800799e:	428b      	cmp	r3, r1
 80079a0:	d041      	beq.n	8007a26 <DMA2_Stream2_IRQHandler+0x1ea>
 80079a2:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4931      	ldr	r1, [pc, #196]	; (8007a70 <DMA2_Stream2_IRQHandler+0x234>)
 80079aa:	428b      	cmp	r3, r1
 80079ac:	d038      	beq.n	8007a20 <DMA2_Stream2_IRQHandler+0x1e4>
 80079ae:	4b28      	ldr	r3, [pc, #160]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	492f      	ldr	r1, [pc, #188]	; (8007a74 <DMA2_Stream2_IRQHandler+0x238>)
 80079b6:	428b      	cmp	r3, r1
 80079b8:	d02f      	beq.n	8007a1a <DMA2_Stream2_IRQHandler+0x1de>
 80079ba:	4b25      	ldr	r3, [pc, #148]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	492d      	ldr	r1, [pc, #180]	; (8007a78 <DMA2_Stream2_IRQHandler+0x23c>)
 80079c2:	428b      	cmp	r3, r1
 80079c4:	d026      	beq.n	8007a14 <DMA2_Stream2_IRQHandler+0x1d8>
 80079c6:	4b22      	ldr	r3, [pc, #136]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	492b      	ldr	r1, [pc, #172]	; (8007a7c <DMA2_Stream2_IRQHandler+0x240>)
 80079ce:	428b      	cmp	r3, r1
 80079d0:	d01d      	beq.n	8007a0e <DMA2_Stream2_IRQHandler+0x1d2>
 80079d2:	4b1f      	ldr	r3, [pc, #124]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4929      	ldr	r1, [pc, #164]	; (8007a80 <DMA2_Stream2_IRQHandler+0x244>)
 80079da:	428b      	cmp	r3, r1
 80079dc:	d014      	beq.n	8007a08 <DMA2_Stream2_IRQHandler+0x1cc>
 80079de:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4927      	ldr	r1, [pc, #156]	; (8007a84 <DMA2_Stream2_IRQHandler+0x248>)
 80079e6:	428b      	cmp	r3, r1
 80079e8:	d00b      	beq.n	8007a02 <DMA2_Stream2_IRQHandler+0x1c6>
 80079ea:	4b19      	ldr	r3, [pc, #100]	; (8007a50 <DMA2_Stream2_IRQHandler+0x214>)
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4925      	ldr	r1, [pc, #148]	; (8007a88 <DMA2_Stream2_IRQHandler+0x24c>)
 80079f2:	428b      	cmp	r3, r1
 80079f4:	d102      	bne.n	80079fc <DMA2_Stream2_IRQHandler+0x1c0>
 80079f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80079fa:	e01e      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 80079fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a00:	e01b      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a06:	e018      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a0c:	e015      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a12:	e012      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a18:	e00f      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1e:	e00c      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a24:	e009      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a2a:	e006      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	e004      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a30:	2308      	movs	r3, #8
 8007a32:	e002      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a34:	2308      	movs	r3, #8
 8007a36:	e000      	b.n	8007a3a <DMA2_Stream2_IRQHandler+0x1fe>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
 8007a42:	2300      	moveq	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	e12e      	b.n	8007ca6 <DMA2_Stream2_IRQHandler+0x46a>
 8007a48:	20000764 	.word	0x20000764
 8007a4c:	40013c00 	.word	0x40013c00
 8007a50:	20000724 	.word	0x20000724
 8007a54:	40026458 	.word	0x40026458
 8007a58:	40026400 	.word	0x40026400
 8007a5c:	40026010 	.word	0x40026010
 8007a60:	40026410 	.word	0x40026410
 8007a64:	40026070 	.word	0x40026070
 8007a68:	40026470 	.word	0x40026470
 8007a6c:	40026028 	.word	0x40026028
 8007a70:	40026428 	.word	0x40026428
 8007a74:	40026088 	.word	0x40026088
 8007a78:	40026488 	.word	0x40026488
 8007a7c:	40026040 	.word	0x40026040
 8007a80:	40026440 	.word	0x40026440
 8007a84:	400260a0 	.word	0x400260a0
 8007a88:	400264a0 	.word	0x400264a0
 8007a8c:	400260b8 	.word	0x400260b8
 8007a90:	4b72      	ldr	r3, [pc, #456]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	4b71      	ldr	r3, [pc, #452]	; (8007c60 <DMA2_Stream2_IRQHandler+0x424>)
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d972      	bls.n	8007b84 <DMA2_Stream2_IRQHandler+0x348>
 8007a9e:	4b71      	ldr	r3, [pc, #452]	; (8007c64 <DMA2_Stream2_IRQHandler+0x428>)
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	4b6e      	ldr	r3, [pc, #440]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	496f      	ldr	r1, [pc, #444]	; (8007c68 <DMA2_Stream2_IRQHandler+0x42c>)
 8007aaa:	428b      	cmp	r3, r1
 8007aac:	d062      	beq.n	8007b74 <DMA2_Stream2_IRQHandler+0x338>
 8007aae:	4b6b      	ldr	r3, [pc, #428]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	496d      	ldr	r1, [pc, #436]	; (8007c6c <DMA2_Stream2_IRQHandler+0x430>)
 8007ab6:	428b      	cmp	r3, r1
 8007ab8:	d05a      	beq.n	8007b70 <DMA2_Stream2_IRQHandler+0x334>
 8007aba:	4b68      	ldr	r3, [pc, #416]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	496b      	ldr	r1, [pc, #428]	; (8007c70 <DMA2_Stream2_IRQHandler+0x434>)
 8007ac2:	428b      	cmp	r3, r1
 8007ac4:	d052      	beq.n	8007b6c <DMA2_Stream2_IRQHandler+0x330>
 8007ac6:	4b65      	ldr	r3, [pc, #404]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4969      	ldr	r1, [pc, #420]	; (8007c74 <DMA2_Stream2_IRQHandler+0x438>)
 8007ace:	428b      	cmp	r3, r1
 8007ad0:	d04a      	beq.n	8007b68 <DMA2_Stream2_IRQHandler+0x32c>
 8007ad2:	4b62      	ldr	r3, [pc, #392]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4967      	ldr	r1, [pc, #412]	; (8007c78 <DMA2_Stream2_IRQHandler+0x43c>)
 8007ada:	428b      	cmp	r3, r1
 8007adc:	d041      	beq.n	8007b62 <DMA2_Stream2_IRQHandler+0x326>
 8007ade:	4b5f      	ldr	r3, [pc, #380]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4965      	ldr	r1, [pc, #404]	; (8007c7c <DMA2_Stream2_IRQHandler+0x440>)
 8007ae6:	428b      	cmp	r3, r1
 8007ae8:	d038      	beq.n	8007b5c <DMA2_Stream2_IRQHandler+0x320>
 8007aea:	4b5c      	ldr	r3, [pc, #368]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4963      	ldr	r1, [pc, #396]	; (8007c80 <DMA2_Stream2_IRQHandler+0x444>)
 8007af2:	428b      	cmp	r3, r1
 8007af4:	d02f      	beq.n	8007b56 <DMA2_Stream2_IRQHandler+0x31a>
 8007af6:	4b59      	ldr	r3, [pc, #356]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4961      	ldr	r1, [pc, #388]	; (8007c84 <DMA2_Stream2_IRQHandler+0x448>)
 8007afe:	428b      	cmp	r3, r1
 8007b00:	d026      	beq.n	8007b50 <DMA2_Stream2_IRQHandler+0x314>
 8007b02:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	495f      	ldr	r1, [pc, #380]	; (8007c88 <DMA2_Stream2_IRQHandler+0x44c>)
 8007b0a:	428b      	cmp	r3, r1
 8007b0c:	d01d      	beq.n	8007b4a <DMA2_Stream2_IRQHandler+0x30e>
 8007b0e:	4b53      	ldr	r3, [pc, #332]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	495d      	ldr	r1, [pc, #372]	; (8007c8c <DMA2_Stream2_IRQHandler+0x450>)
 8007b16:	428b      	cmp	r3, r1
 8007b18:	d014      	beq.n	8007b44 <DMA2_Stream2_IRQHandler+0x308>
 8007b1a:	4b50      	ldr	r3, [pc, #320]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	495b      	ldr	r1, [pc, #364]	; (8007c90 <DMA2_Stream2_IRQHandler+0x454>)
 8007b22:	428b      	cmp	r3, r1
 8007b24:	d00b      	beq.n	8007b3e <DMA2_Stream2_IRQHandler+0x302>
 8007b26:	4b4d      	ldr	r3, [pc, #308]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4959      	ldr	r1, [pc, #356]	; (8007c94 <DMA2_Stream2_IRQHandler+0x458>)
 8007b2e:	428b      	cmp	r3, r1
 8007b30:	d102      	bne.n	8007b38 <DMA2_Stream2_IRQHandler+0x2fc>
 8007b32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b36:	e01e      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b3c:	e01b      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b42:	e018      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b48:	e015      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b4e:	e012      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b54:	e00f      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b5a:	e00c      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b60:	e009      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b66:	e006      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	e004      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b6c:	2308      	movs	r3, #8
 8007b6e:	e002      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b70:	2308      	movs	r3, #8
 8007b72:	e000      	b.n	8007b76 <DMA2_Stream2_IRQHandler+0x33a>
 8007b74:	2308      	movs	r3, #8
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf14      	ite	ne
 8007b7c:	2301      	movne	r3, #1
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	e090      	b.n	8007ca6 <DMA2_Stream2_IRQHandler+0x46a>
 8007b84:	4b37      	ldr	r3, [pc, #220]	; (8007c64 <DMA2_Stream2_IRQHandler+0x428>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4936      	ldr	r1, [pc, #216]	; (8007c68 <DMA2_Stream2_IRQHandler+0x42c>)
 8007b90:	428b      	cmp	r3, r1
 8007b92:	f000 8081 	beq.w	8007c98 <DMA2_Stream2_IRQHandler+0x45c>
 8007b96:	4b31      	ldr	r3, [pc, #196]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4933      	ldr	r1, [pc, #204]	; (8007c6c <DMA2_Stream2_IRQHandler+0x430>)
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d05a      	beq.n	8007c58 <DMA2_Stream2_IRQHandler+0x41c>
 8007ba2:	4b2e      	ldr	r3, [pc, #184]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4931      	ldr	r1, [pc, #196]	; (8007c70 <DMA2_Stream2_IRQHandler+0x434>)
 8007baa:	428b      	cmp	r3, r1
 8007bac:	d052      	beq.n	8007c54 <DMA2_Stream2_IRQHandler+0x418>
 8007bae:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	492f      	ldr	r1, [pc, #188]	; (8007c74 <DMA2_Stream2_IRQHandler+0x438>)
 8007bb6:	428b      	cmp	r3, r1
 8007bb8:	d04a      	beq.n	8007c50 <DMA2_Stream2_IRQHandler+0x414>
 8007bba:	4b28      	ldr	r3, [pc, #160]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	492d      	ldr	r1, [pc, #180]	; (8007c78 <DMA2_Stream2_IRQHandler+0x43c>)
 8007bc2:	428b      	cmp	r3, r1
 8007bc4:	d041      	beq.n	8007c4a <DMA2_Stream2_IRQHandler+0x40e>
 8007bc6:	4b25      	ldr	r3, [pc, #148]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	492b      	ldr	r1, [pc, #172]	; (8007c7c <DMA2_Stream2_IRQHandler+0x440>)
 8007bce:	428b      	cmp	r3, r1
 8007bd0:	d038      	beq.n	8007c44 <DMA2_Stream2_IRQHandler+0x408>
 8007bd2:	4b22      	ldr	r3, [pc, #136]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4929      	ldr	r1, [pc, #164]	; (8007c80 <DMA2_Stream2_IRQHandler+0x444>)
 8007bda:	428b      	cmp	r3, r1
 8007bdc:	d02f      	beq.n	8007c3e <DMA2_Stream2_IRQHandler+0x402>
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4927      	ldr	r1, [pc, #156]	; (8007c84 <DMA2_Stream2_IRQHandler+0x448>)
 8007be6:	428b      	cmp	r3, r1
 8007be8:	d026      	beq.n	8007c38 <DMA2_Stream2_IRQHandler+0x3fc>
 8007bea:	4b1c      	ldr	r3, [pc, #112]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4925      	ldr	r1, [pc, #148]	; (8007c88 <DMA2_Stream2_IRQHandler+0x44c>)
 8007bf2:	428b      	cmp	r3, r1
 8007bf4:	d01d      	beq.n	8007c32 <DMA2_Stream2_IRQHandler+0x3f6>
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4923      	ldr	r1, [pc, #140]	; (8007c8c <DMA2_Stream2_IRQHandler+0x450>)
 8007bfe:	428b      	cmp	r3, r1
 8007c00:	d014      	beq.n	8007c2c <DMA2_Stream2_IRQHandler+0x3f0>
 8007c02:	4b16      	ldr	r3, [pc, #88]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4921      	ldr	r1, [pc, #132]	; (8007c90 <DMA2_Stream2_IRQHandler+0x454>)
 8007c0a:	428b      	cmp	r3, r1
 8007c0c:	d00b      	beq.n	8007c26 <DMA2_Stream2_IRQHandler+0x3ea>
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <DMA2_Stream2_IRQHandler+0x420>)
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	491f      	ldr	r1, [pc, #124]	; (8007c94 <DMA2_Stream2_IRQHandler+0x458>)
 8007c16:	428b      	cmp	r3, r1
 8007c18:	d102      	bne.n	8007c20 <DMA2_Stream2_IRQHandler+0x3e4>
 8007c1a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c1e:	e03c      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c24:	e039      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c2a:	e036      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c30:	e033      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c32:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c36:	e030      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c3c:	e02d      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c42:	e02a      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c48:	e027      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4e:	e024      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c50:	2308      	movs	r3, #8
 8007c52:	e022      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c54:	2308      	movs	r3, #8
 8007c56:	e020      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c58:	2308      	movs	r3, #8
 8007c5a:	e01e      	b.n	8007c9a <DMA2_Stream2_IRQHandler+0x45e>
 8007c5c:	20000724 	.word	0x20000724
 8007c60:	40026058 	.word	0x40026058
 8007c64:	40026000 	.word	0x40026000
 8007c68:	40026010 	.word	0x40026010
 8007c6c:	40026410 	.word	0x40026410
 8007c70:	40026070 	.word	0x40026070
 8007c74:	40026470 	.word	0x40026470
 8007c78:	40026028 	.word	0x40026028
 8007c7c:	40026428 	.word	0x40026428
 8007c80:	40026088 	.word	0x40026088
 8007c84:	40026488 	.word	0x40026488
 8007c88:	40026040 	.word	0x40026040
 8007c8c:	40026440 	.word	0x40026440
 8007c90:	400260a0 	.word	0x400260a0
 8007c94:	400264a0 	.word	0x400264a0
 8007c98:	2308      	movs	r3, #8
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <DMA2_Stream2_IRQHandler+0x474>
  {
    UART_Emul_DMAError(&hdma_rx);
 8007caa:	4876      	ldr	r0, [pc, #472]	; (8007e84 <DMA2_Stream2_IRQHandler+0x648>)
 8007cac:	f001 fb30 	bl	8009310 <UART_Emul_DMAError>
  }

  /* Clear the transfer complete flag */
  __HAL_DMA_CLEAR_FLAG(TimHandle.hdma[TIM_DMA_ID_CC2], __HAL_DMA_GET_TC_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC2]));
 8007cb0:	4b75      	ldr	r3, [pc, #468]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <DMA2_Stream2_IRQHandler+0x650>)
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d96c      	bls.n	8007d98 <DMA2_Stream2_IRQHandler+0x55c>
 8007cbe:	4b72      	ldr	r3, [pc, #456]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a72      	ldr	r2, [pc, #456]	; (8007e90 <DMA2_Stream2_IRQHandler+0x654>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d062      	beq.n	8007d90 <DMA2_Stream2_IRQHandler+0x554>
 8007cca:	4b6f      	ldr	r3, [pc, #444]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a70      	ldr	r2, [pc, #448]	; (8007e94 <DMA2_Stream2_IRQHandler+0x658>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d05a      	beq.n	8007d8c <DMA2_Stream2_IRQHandler+0x550>
 8007cd6:	4b6c      	ldr	r3, [pc, #432]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a6e      	ldr	r2, [pc, #440]	; (8007e98 <DMA2_Stream2_IRQHandler+0x65c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d052      	beq.n	8007d88 <DMA2_Stream2_IRQHandler+0x54c>
 8007ce2:	4b69      	ldr	r3, [pc, #420]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a6c      	ldr	r2, [pc, #432]	; (8007e9c <DMA2_Stream2_IRQHandler+0x660>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d04a      	beq.n	8007d84 <DMA2_Stream2_IRQHandler+0x548>
 8007cee:	4b66      	ldr	r3, [pc, #408]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a6a      	ldr	r2, [pc, #424]	; (8007ea0 <DMA2_Stream2_IRQHandler+0x664>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d041      	beq.n	8007d7e <DMA2_Stream2_IRQHandler+0x542>
 8007cfa:	4b63      	ldr	r3, [pc, #396]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a68      	ldr	r2, [pc, #416]	; (8007ea4 <DMA2_Stream2_IRQHandler+0x668>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d038      	beq.n	8007d78 <DMA2_Stream2_IRQHandler+0x53c>
 8007d06:	4b60      	ldr	r3, [pc, #384]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a66      	ldr	r2, [pc, #408]	; (8007ea8 <DMA2_Stream2_IRQHandler+0x66c>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d02f      	beq.n	8007d72 <DMA2_Stream2_IRQHandler+0x536>
 8007d12:	4b5d      	ldr	r3, [pc, #372]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a64      	ldr	r2, [pc, #400]	; (8007eac <DMA2_Stream2_IRQHandler+0x670>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d026      	beq.n	8007d6c <DMA2_Stream2_IRQHandler+0x530>
 8007d1e:	4b5a      	ldr	r3, [pc, #360]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a62      	ldr	r2, [pc, #392]	; (8007eb0 <DMA2_Stream2_IRQHandler+0x674>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01d      	beq.n	8007d66 <DMA2_Stream2_IRQHandler+0x52a>
 8007d2a:	4b57      	ldr	r3, [pc, #348]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a60      	ldr	r2, [pc, #384]	; (8007eb4 <DMA2_Stream2_IRQHandler+0x678>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d014      	beq.n	8007d60 <DMA2_Stream2_IRQHandler+0x524>
 8007d36:	4b54      	ldr	r3, [pc, #336]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a5e      	ldr	r2, [pc, #376]	; (8007eb8 <DMA2_Stream2_IRQHandler+0x67c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00b      	beq.n	8007d5a <DMA2_Stream2_IRQHandler+0x51e>
 8007d42:	4b51      	ldr	r3, [pc, #324]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a5c      	ldr	r2, [pc, #368]	; (8007ebc <DMA2_Stream2_IRQHandler+0x680>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d102      	bne.n	8007d54 <DMA2_Stream2_IRQHandler+0x518>
 8007d4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d52:	e01e      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d58:	e01b      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d5e:	e018      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d64:	e015      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d6a:	e012      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d70:	e00f      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d76:	e00c      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d7c:	e009      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d82:	e006      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d84:	2320      	movs	r3, #32
 8007d86:	e004      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d88:	2320      	movs	r3, #32
 8007d8a:	e002      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	e000      	b.n	8007d92 <DMA2_Stream2_IRQHandler+0x556>
 8007d90:	2320      	movs	r3, #32
 8007d92:	4a4b      	ldr	r2, [pc, #300]	; (8007ec0 <DMA2_Stream2_IRQHandler+0x684>)
 8007d94:	60d3      	str	r3, [r2, #12]
 8007d96:	e177      	b.n	8008088 <DMA2_Stream2_IRQHandler+0x84c>
 8007d98:	4b3b      	ldr	r3, [pc, #236]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b48      	ldr	r3, [pc, #288]	; (8007ec4 <DMA2_Stream2_IRQHandler+0x688>)
 8007da2:	429a      	cmp	r2, r3
 8007da4:	f240 8090 	bls.w	8007ec8 <DMA2_Stream2_IRQHandler+0x68c>
 8007da8:	4b37      	ldr	r3, [pc, #220]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a38      	ldr	r2, [pc, #224]	; (8007e90 <DMA2_Stream2_IRQHandler+0x654>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d062      	beq.n	8007e7a <DMA2_Stream2_IRQHandler+0x63e>
 8007db4:	4b34      	ldr	r3, [pc, #208]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a36      	ldr	r2, [pc, #216]	; (8007e94 <DMA2_Stream2_IRQHandler+0x658>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d05a      	beq.n	8007e76 <DMA2_Stream2_IRQHandler+0x63a>
 8007dc0:	4b31      	ldr	r3, [pc, #196]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a34      	ldr	r2, [pc, #208]	; (8007e98 <DMA2_Stream2_IRQHandler+0x65c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d052      	beq.n	8007e72 <DMA2_Stream2_IRQHandler+0x636>
 8007dcc:	4b2e      	ldr	r3, [pc, #184]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a32      	ldr	r2, [pc, #200]	; (8007e9c <DMA2_Stream2_IRQHandler+0x660>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d04a      	beq.n	8007e6e <DMA2_Stream2_IRQHandler+0x632>
 8007dd8:	4b2b      	ldr	r3, [pc, #172]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a30      	ldr	r2, [pc, #192]	; (8007ea0 <DMA2_Stream2_IRQHandler+0x664>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d041      	beq.n	8007e68 <DMA2_Stream2_IRQHandler+0x62c>
 8007de4:	4b28      	ldr	r3, [pc, #160]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a2e      	ldr	r2, [pc, #184]	; (8007ea4 <DMA2_Stream2_IRQHandler+0x668>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d038      	beq.n	8007e62 <DMA2_Stream2_IRQHandler+0x626>
 8007df0:	4b25      	ldr	r3, [pc, #148]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a2c      	ldr	r2, [pc, #176]	; (8007ea8 <DMA2_Stream2_IRQHandler+0x66c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d02f      	beq.n	8007e5c <DMA2_Stream2_IRQHandler+0x620>
 8007dfc:	4b22      	ldr	r3, [pc, #136]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a2a      	ldr	r2, [pc, #168]	; (8007eac <DMA2_Stream2_IRQHandler+0x670>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d026      	beq.n	8007e56 <DMA2_Stream2_IRQHandler+0x61a>
 8007e08:	4b1f      	ldr	r3, [pc, #124]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a28      	ldr	r2, [pc, #160]	; (8007eb0 <DMA2_Stream2_IRQHandler+0x674>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d01d      	beq.n	8007e50 <DMA2_Stream2_IRQHandler+0x614>
 8007e14:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a26      	ldr	r2, [pc, #152]	; (8007eb4 <DMA2_Stream2_IRQHandler+0x678>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d014      	beq.n	8007e4a <DMA2_Stream2_IRQHandler+0x60e>
 8007e20:	4b19      	ldr	r3, [pc, #100]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a24      	ldr	r2, [pc, #144]	; (8007eb8 <DMA2_Stream2_IRQHandler+0x67c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d00b      	beq.n	8007e44 <DMA2_Stream2_IRQHandler+0x608>
 8007e2c:	4b16      	ldr	r3, [pc, #88]	; (8007e88 <DMA2_Stream2_IRQHandler+0x64c>)
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <DMA2_Stream2_IRQHandler+0x680>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d102      	bne.n	8007e3e <DMA2_Stream2_IRQHandler+0x602>
 8007e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e3c:	e01e      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e42:	e01b      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e48:	e018      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e4e:	e015      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e54:	e012      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e5a:	e00f      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e60:	e00c      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e66:	e009      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e6c:	e006      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e6e:	2320      	movs	r3, #32
 8007e70:	e004      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e72:	2320      	movs	r3, #32
 8007e74:	e002      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e76:	2320      	movs	r3, #32
 8007e78:	e000      	b.n	8007e7c <DMA2_Stream2_IRQHandler+0x640>
 8007e7a:	2320      	movs	r3, #32
 8007e7c:	4a10      	ldr	r2, [pc, #64]	; (8007ec0 <DMA2_Stream2_IRQHandler+0x684>)
 8007e7e:	6093      	str	r3, [r2, #8]
 8007e80:	e102      	b.n	8008088 <DMA2_Stream2_IRQHandler+0x84c>
 8007e82:	bf00      	nop
 8007e84:	200006c4 	.word	0x200006c4
 8007e88:	20000724 	.word	0x20000724
 8007e8c:	40026458 	.word	0x40026458
 8007e90:	40026010 	.word	0x40026010
 8007e94:	40026410 	.word	0x40026410
 8007e98:	40026070 	.word	0x40026070
 8007e9c:	40026470 	.word	0x40026470
 8007ea0:	40026028 	.word	0x40026028
 8007ea4:	40026428 	.word	0x40026428
 8007ea8:	40026088 	.word	0x40026088
 8007eac:	40026488 	.word	0x40026488
 8007eb0:	40026040 	.word	0x40026040
 8007eb4:	40026440 	.word	0x40026440
 8007eb8:	400260a0 	.word	0x400260a0
 8007ebc:	400264a0 	.word	0x400264a0
 8007ec0:	40026400 	.word	0x40026400
 8007ec4:	400260b8 	.word	0x400260b8
 8007ec8:	4b74      	ldr	r3, [pc, #464]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4b73      	ldr	r3, [pc, #460]	; (80080a0 <DMA2_Stream2_IRQHandler+0x864>)
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d96c      	bls.n	8007fb0 <DMA2_Stream2_IRQHandler+0x774>
 8007ed6:	4b71      	ldr	r3, [pc, #452]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a71      	ldr	r2, [pc, #452]	; (80080a4 <DMA2_Stream2_IRQHandler+0x868>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d062      	beq.n	8007fa8 <DMA2_Stream2_IRQHandler+0x76c>
 8007ee2:	4b6e      	ldr	r3, [pc, #440]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a6f      	ldr	r2, [pc, #444]	; (80080a8 <DMA2_Stream2_IRQHandler+0x86c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d05a      	beq.n	8007fa4 <DMA2_Stream2_IRQHandler+0x768>
 8007eee:	4b6b      	ldr	r3, [pc, #428]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a6d      	ldr	r2, [pc, #436]	; (80080ac <DMA2_Stream2_IRQHandler+0x870>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d052      	beq.n	8007fa0 <DMA2_Stream2_IRQHandler+0x764>
 8007efa:	4b68      	ldr	r3, [pc, #416]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6b      	ldr	r2, [pc, #428]	; (80080b0 <DMA2_Stream2_IRQHandler+0x874>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d04a      	beq.n	8007f9c <DMA2_Stream2_IRQHandler+0x760>
 8007f06:	4b65      	ldr	r3, [pc, #404]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a69      	ldr	r2, [pc, #420]	; (80080b4 <DMA2_Stream2_IRQHandler+0x878>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d041      	beq.n	8007f96 <DMA2_Stream2_IRQHandler+0x75a>
 8007f12:	4b62      	ldr	r3, [pc, #392]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a67      	ldr	r2, [pc, #412]	; (80080b8 <DMA2_Stream2_IRQHandler+0x87c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d038      	beq.n	8007f90 <DMA2_Stream2_IRQHandler+0x754>
 8007f1e:	4b5f      	ldr	r3, [pc, #380]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a65      	ldr	r2, [pc, #404]	; (80080bc <DMA2_Stream2_IRQHandler+0x880>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d02f      	beq.n	8007f8a <DMA2_Stream2_IRQHandler+0x74e>
 8007f2a:	4b5c      	ldr	r3, [pc, #368]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a63      	ldr	r2, [pc, #396]	; (80080c0 <DMA2_Stream2_IRQHandler+0x884>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d026      	beq.n	8007f84 <DMA2_Stream2_IRQHandler+0x748>
 8007f36:	4b59      	ldr	r3, [pc, #356]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a61      	ldr	r2, [pc, #388]	; (80080c4 <DMA2_Stream2_IRQHandler+0x888>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01d      	beq.n	8007f7e <DMA2_Stream2_IRQHandler+0x742>
 8007f42:	4b56      	ldr	r3, [pc, #344]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a5f      	ldr	r2, [pc, #380]	; (80080c8 <DMA2_Stream2_IRQHandler+0x88c>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d014      	beq.n	8007f78 <DMA2_Stream2_IRQHandler+0x73c>
 8007f4e:	4b53      	ldr	r3, [pc, #332]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a5d      	ldr	r2, [pc, #372]	; (80080cc <DMA2_Stream2_IRQHandler+0x890>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <DMA2_Stream2_IRQHandler+0x736>
 8007f5a:	4b50      	ldr	r3, [pc, #320]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5b      	ldr	r2, [pc, #364]	; (80080d0 <DMA2_Stream2_IRQHandler+0x894>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d102      	bne.n	8007f6c <DMA2_Stream2_IRQHandler+0x730>
 8007f66:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f6a:	e01e      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f70:	e01b      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f76:	e018      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f7c:	e015      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007f82:	e012      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f88:	e00f      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f8e:	e00c      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f94:	e009      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f9a:	e006      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007f9c:	2320      	movs	r3, #32
 8007f9e:	e004      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007fa0:	2320      	movs	r3, #32
 8007fa2:	e002      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007fa4:	2320      	movs	r3, #32
 8007fa6:	e000      	b.n	8007faa <DMA2_Stream2_IRQHandler+0x76e>
 8007fa8:	2320      	movs	r3, #32
 8007faa:	4a4a      	ldr	r2, [pc, #296]	; (80080d4 <DMA2_Stream2_IRQHandler+0x898>)
 8007fac:	60d3      	str	r3, [r2, #12]
 8007fae:	e06b      	b.n	8008088 <DMA2_Stream2_IRQHandler+0x84c>
 8007fb0:	4b3a      	ldr	r3, [pc, #232]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a3b      	ldr	r2, [pc, #236]	; (80080a4 <DMA2_Stream2_IRQHandler+0x868>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d062      	beq.n	8008082 <DMA2_Stream2_IRQHandler+0x846>
 8007fbc:	4b37      	ldr	r3, [pc, #220]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a39      	ldr	r2, [pc, #228]	; (80080a8 <DMA2_Stream2_IRQHandler+0x86c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d05a      	beq.n	800807e <DMA2_Stream2_IRQHandler+0x842>
 8007fc8:	4b34      	ldr	r3, [pc, #208]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a37      	ldr	r2, [pc, #220]	; (80080ac <DMA2_Stream2_IRQHandler+0x870>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d052      	beq.n	800807a <DMA2_Stream2_IRQHandler+0x83e>
 8007fd4:	4b31      	ldr	r3, [pc, #196]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a35      	ldr	r2, [pc, #212]	; (80080b0 <DMA2_Stream2_IRQHandler+0x874>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d04a      	beq.n	8008076 <DMA2_Stream2_IRQHandler+0x83a>
 8007fe0:	4b2e      	ldr	r3, [pc, #184]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a33      	ldr	r2, [pc, #204]	; (80080b4 <DMA2_Stream2_IRQHandler+0x878>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d041      	beq.n	8008070 <DMA2_Stream2_IRQHandler+0x834>
 8007fec:	4b2b      	ldr	r3, [pc, #172]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a31      	ldr	r2, [pc, #196]	; (80080b8 <DMA2_Stream2_IRQHandler+0x87c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d038      	beq.n	800806a <DMA2_Stream2_IRQHandler+0x82e>
 8007ff8:	4b28      	ldr	r3, [pc, #160]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8007ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a2f      	ldr	r2, [pc, #188]	; (80080bc <DMA2_Stream2_IRQHandler+0x880>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d02f      	beq.n	8008064 <DMA2_Stream2_IRQHandler+0x828>
 8008004:	4b25      	ldr	r3, [pc, #148]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2d      	ldr	r2, [pc, #180]	; (80080c0 <DMA2_Stream2_IRQHandler+0x884>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d026      	beq.n	800805e <DMA2_Stream2_IRQHandler+0x822>
 8008010:	4b22      	ldr	r3, [pc, #136]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8008012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a2b      	ldr	r2, [pc, #172]	; (80080c4 <DMA2_Stream2_IRQHandler+0x888>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d01d      	beq.n	8008058 <DMA2_Stream2_IRQHandler+0x81c>
 800801c:	4b1f      	ldr	r3, [pc, #124]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a29      	ldr	r2, [pc, #164]	; (80080c8 <DMA2_Stream2_IRQHandler+0x88c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d014      	beq.n	8008052 <DMA2_Stream2_IRQHandler+0x816>
 8008028:	4b1c      	ldr	r3, [pc, #112]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a27      	ldr	r2, [pc, #156]	; (80080cc <DMA2_Stream2_IRQHandler+0x890>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00b      	beq.n	800804c <DMA2_Stream2_IRQHandler+0x810>
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a25      	ldr	r2, [pc, #148]	; (80080d0 <DMA2_Stream2_IRQHandler+0x894>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d102      	bne.n	8008046 <DMA2_Stream2_IRQHandler+0x80a>
 8008040:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008044:	e01e      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800804a:	e01b      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 800804c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008050:	e018      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008052:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008056:	e015      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800805c:	e012      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 800805e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008062:	e00f      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008068:	e00c      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 800806a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800806e:	e009      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008070:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008074:	e006      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008076:	2320      	movs	r3, #32
 8008078:	e004      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 800807a:	2320      	movs	r3, #32
 800807c:	e002      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 800807e:	2320      	movs	r3, #32
 8008080:	e000      	b.n	8008084 <DMA2_Stream2_IRQHandler+0x848>
 8008082:	2320      	movs	r3, #32
 8008084:	4a13      	ldr	r2, [pc, #76]	; (80080d4 <DMA2_Stream2_IRQHandler+0x898>)
 8008086:	6093      	str	r3, [r2, #8]
 
  /* Transfer complete callback */
  TimHandle.hdma[TIM_DMA_ID_CC2]->XferCpltCallback(TimHandle.hdma[TIM_DMA_ID_CC2]);
 8008088:	4b04      	ldr	r3, [pc, #16]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808e:	4a03      	ldr	r2, [pc, #12]	; (800809c <DMA2_Stream2_IRQHandler+0x860>)
 8008090:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008092:	4610      	mov	r0, r2
 8008094:	4798      	blx	r3
}
 8008096:	bf00      	nop
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20000724 	.word	0x20000724
 80080a0:	40026058 	.word	0x40026058
 80080a4:	40026010 	.word	0x40026010
 80080a8:	40026410 	.word	0x40026410
 80080ac:	40026070 	.word	0x40026070
 80080b0:	40026470 	.word	0x40026470
 80080b4:	40026028 	.word	0x40026028
 80080b8:	40026428 	.word	0x40026428
 80080bc:	40026088 	.word	0x40026088
 80080c0:	40026488 	.word	0x40026488
 80080c4:	40026040 	.word	0x40026040
 80080c8:	40026440 	.word	0x40026440
 80080cc:	400260a0 	.word	0x400260a0
 80080d0:	400264a0 	.word	0x400264a0
 80080d4:	40026000 	.word	0x40026000

080080d8 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void UART_EMUL_EXTI_RX(uint16_t GPIO_Pin)
{ 	
 80080d8:	b5b0      	push	{r4, r5, r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	80fb      	strh	r3, [r7, #6]
	  uint32_t tmpreceive = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]
	  uint32_t tmpformat = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
	  uint32_t tmpdata = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]

   //TRUNG's callback function
	   //Prevent unused argument(s) compilation warning
		if (GPIO_Pin == GPIO_PIN_0)
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d111      	bne.n	8008118 <HAL_GPIO_EXTI_Callback+0x40>
		{
			g_u8StatusInt1++;
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <HAL_GPIO_EXTI_Callback+0xc4>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	4b27      	ldr	r3, [pc, #156]	; (800819c <HAL_GPIO_EXTI_Callback+0xc4>)
 80080fe:	701a      	strb	r2, [r3, #0]
			g_u32CurrentTime = HAL_GetTick();
 8008100:	f7fa f91a 	bl	8002338 <HAL_GetTick>
 8008104:	4603      	mov	r3, r0
 8008106:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8008108:	6013      	str	r3, [r2, #0]
			g_bIsMotion = true;
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 800810c:	2201      	movs	r2, #1
 800810e:	701a      	strb	r2, [r3, #0]
			g_bIsSetGPS = true;
 8008110:	4b25      	ldr	r3, [pc, #148]	; (80081a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
			  {
			  // Format frame
				*(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
			  }
		}
}
 8008116:	e03c      	b.n	8008192 <HAL_GPIO_EXTI_Callback+0xba>
		else if (GPIO_Pin == UART_EMUL_RX_PIN)
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800811e:	d138      	bne.n	8008192 <HAL_GPIO_EXTI_Callback+0xba>
			  EXTI->IMR &= ~huart_emul->Init.RxPinNumber;
 8008120:	4b22      	ldr	r3, [pc, #136]	; (80081ac <HAL_GPIO_EXTI_Callback+0xd4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8008126:	6812      	ldr	r2, [r2, #0]
 8008128:	8a12      	ldrh	r2, [r2, #16]
 800812a:	43d2      	mvns	r2, r2
 800812c:	4611      	mov	r1, r2
 800812e:	4a1f      	ldr	r2, [pc, #124]	; (80081ac <HAL_GPIO_EXTI_Callback+0xd4>)
 8008130:	400b      	ands	r3, r1
 8008132:	6013      	str	r3, [r2, #0]
			  if ((huart_emul->RxXferCount % 2) != 0)
 8008134:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <HAL_GPIO_EXTI_Callback+0x76>
				tmpreceive = (uint32_t)pFirstBuffer_Rx;
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8008146:	617b      	str	r3, [r7, #20]
				tmpformat = (uint32_t)pSecondBuffer_Rx;
 8008148:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <HAL_GPIO_EXTI_Callback+0xe0>)
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	e003      	b.n	8008156 <HAL_GPIO_EXTI_Callback+0x7e>
				tmpreceive = (uint32_t)pSecondBuffer_Rx;
 800814e:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8008150:	617b      	str	r3, [r7, #20]
				tmpformat = (uint32_t)pFirstBuffer_Rx;
 8008152:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8008154:	613b      	str	r3, [r7, #16]
			  UART_Emul_ReceiveFrame(huart_emul, (uint32_t*)tmpreceive);
 8008156:	4b16      	ldr	r3, [pc, #88]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	4611      	mov	r1, r2
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fce0 	bl	8008b24 <UART_Emul_ReceiveFrame>
			  if (huart_emul->RxXferCount > 1)
 8008164:	4b12      	ldr	r3, [pc, #72]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800816a:	2b01      	cmp	r3, #1
 800816c:	d911      	bls.n	8008192 <HAL_GPIO_EXTI_Callback+0xba>
				*(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	6939      	ldr	r1, [r7, #16]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	b2dd      	uxtb	r5, r3
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69da      	ldr	r2, [r3, #28]
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_GPIO_EXTI_Callback+0xd8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008184:	3b02      	subs	r3, #2
 8008186:	18d4      	adds	r4, r2, r3
 8008188:	462a      	mov	r2, r5
 800818a:	f000 fe4f 	bl	8008e2c <UART_Emul_ReceiveFormatFrame>
 800818e:	4603      	mov	r3, r0
 8008190:	7023      	strb	r3, [r4, #0]
}
 8008192:	bf00      	nop
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bdb0      	pop	{r4, r5, r7, pc}
 800819a:	bf00      	nop
 800819c:	20000205 	.word	0x20000205
 80081a0:	2000020c 	.word	0x2000020c
 80081a4:	20000206 	.word	0x20000206
 80081a8:	20000208 	.word	0x20000208
 80081ac:	40013c00 	.word	0x40013c00
 80081b0:	20000764 	.word	0x20000764
 80081b4:	20000768 	.word	0x20000768
 80081b8:	20000798 	.word	0x20000798

080081bc <DMA2_Stream1_IRQHandler>:
* @brief  This function handles DMA interrupt request for TC.
* @param  None
* @retval None
*/
void UART_EMUL_TX_DMA_IRQHandler(void)
{ 
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  if (__HAL_DMA_GET_FLAG(TimHandle.hdma[TIM_DMA_ID_CC1], __HAL_DMA_GET_TE_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC1])) != RESET)
 80081c0:	4b7a      	ldr	r3, [pc, #488]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	4b79      	ldr	r3, [pc, #484]	; (80083b0 <DMA2_Stream1_IRQHandler+0x1f4>)
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d972      	bls.n	80082b4 <DMA2_Stream1_IRQHandler+0xf8>
 80081ce:	4b79      	ldr	r3, [pc, #484]	; (80083b4 <DMA2_Stream1_IRQHandler+0x1f8>)
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4b76      	ldr	r3, [pc, #472]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4977      	ldr	r1, [pc, #476]	; (80083b8 <DMA2_Stream1_IRQHandler+0x1fc>)
 80081da:	428b      	cmp	r3, r1
 80081dc:	d062      	beq.n	80082a4 <DMA2_Stream1_IRQHandler+0xe8>
 80081de:	4b73      	ldr	r3, [pc, #460]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4975      	ldr	r1, [pc, #468]	; (80083bc <DMA2_Stream1_IRQHandler+0x200>)
 80081e6:	428b      	cmp	r3, r1
 80081e8:	d05a      	beq.n	80082a0 <DMA2_Stream1_IRQHandler+0xe4>
 80081ea:	4b70      	ldr	r3, [pc, #448]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4973      	ldr	r1, [pc, #460]	; (80083c0 <DMA2_Stream1_IRQHandler+0x204>)
 80081f2:	428b      	cmp	r3, r1
 80081f4:	d052      	beq.n	800829c <DMA2_Stream1_IRQHandler+0xe0>
 80081f6:	4b6d      	ldr	r3, [pc, #436]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4971      	ldr	r1, [pc, #452]	; (80083c4 <DMA2_Stream1_IRQHandler+0x208>)
 80081fe:	428b      	cmp	r3, r1
 8008200:	d04a      	beq.n	8008298 <DMA2_Stream1_IRQHandler+0xdc>
 8008202:	4b6a      	ldr	r3, [pc, #424]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	496f      	ldr	r1, [pc, #444]	; (80083c8 <DMA2_Stream1_IRQHandler+0x20c>)
 800820a:	428b      	cmp	r3, r1
 800820c:	d041      	beq.n	8008292 <DMA2_Stream1_IRQHandler+0xd6>
 800820e:	4b67      	ldr	r3, [pc, #412]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	496d      	ldr	r1, [pc, #436]	; (80083cc <DMA2_Stream1_IRQHandler+0x210>)
 8008216:	428b      	cmp	r3, r1
 8008218:	d038      	beq.n	800828c <DMA2_Stream1_IRQHandler+0xd0>
 800821a:	4b64      	ldr	r3, [pc, #400]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 800821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	496b      	ldr	r1, [pc, #428]	; (80083d0 <DMA2_Stream1_IRQHandler+0x214>)
 8008222:	428b      	cmp	r3, r1
 8008224:	d02f      	beq.n	8008286 <DMA2_Stream1_IRQHandler+0xca>
 8008226:	4b61      	ldr	r3, [pc, #388]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4969      	ldr	r1, [pc, #420]	; (80083d4 <DMA2_Stream1_IRQHandler+0x218>)
 800822e:	428b      	cmp	r3, r1
 8008230:	d026      	beq.n	8008280 <DMA2_Stream1_IRQHandler+0xc4>
 8008232:	4b5e      	ldr	r3, [pc, #376]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4967      	ldr	r1, [pc, #412]	; (80083d8 <DMA2_Stream1_IRQHandler+0x21c>)
 800823a:	428b      	cmp	r3, r1
 800823c:	d01d      	beq.n	800827a <DMA2_Stream1_IRQHandler+0xbe>
 800823e:	4b5b      	ldr	r3, [pc, #364]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4965      	ldr	r1, [pc, #404]	; (80083dc <DMA2_Stream1_IRQHandler+0x220>)
 8008246:	428b      	cmp	r3, r1
 8008248:	d014      	beq.n	8008274 <DMA2_Stream1_IRQHandler+0xb8>
 800824a:	4b58      	ldr	r3, [pc, #352]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4963      	ldr	r1, [pc, #396]	; (80083e0 <DMA2_Stream1_IRQHandler+0x224>)
 8008252:	428b      	cmp	r3, r1
 8008254:	d00b      	beq.n	800826e <DMA2_Stream1_IRQHandler+0xb2>
 8008256:	4b55      	ldr	r3, [pc, #340]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4961      	ldr	r1, [pc, #388]	; (80083e4 <DMA2_Stream1_IRQHandler+0x228>)
 800825e:	428b      	cmp	r3, r1
 8008260:	d102      	bne.n	8008268 <DMA2_Stream1_IRQHandler+0xac>
 8008262:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008266:	e01e      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 8008268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800826c:	e01b      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 800826e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008272:	e018      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 8008274:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008278:	e015      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 800827a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800827e:	e012      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 8008280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008284:	e00f      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 8008286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800828a:	e00c      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 800828c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008290:	e009      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 8008292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008296:	e006      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 8008298:	2308      	movs	r3, #8
 800829a:	e004      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 800829c:	2308      	movs	r3, #8
 800829e:	e002      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 80082a0:	2308      	movs	r3, #8
 80082a2:	e000      	b.n	80082a6 <DMA2_Stream1_IRQHandler+0xea>
 80082a4:	2308      	movs	r3, #8
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	bf14      	ite	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	2300      	moveq	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	e1a6      	b.n	8008602 <DMA2_Stream1_IRQHandler+0x446>
 80082b4:	4b3d      	ldr	r3, [pc, #244]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	4b4a      	ldr	r3, [pc, #296]	; (80083e8 <DMA2_Stream1_IRQHandler+0x22c>)
 80082be:	429a      	cmp	r2, r3
 80082c0:	f240 8094 	bls.w	80083ec <DMA2_Stream1_IRQHandler+0x230>
 80082c4:	4b3b      	ldr	r3, [pc, #236]	; (80083b4 <DMA2_Stream1_IRQHandler+0x1f8>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b38      	ldr	r3, [pc, #224]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	493a      	ldr	r1, [pc, #232]	; (80083b8 <DMA2_Stream1_IRQHandler+0x1fc>)
 80082d0:	428b      	cmp	r3, r1
 80082d2:	d062      	beq.n	800839a <DMA2_Stream1_IRQHandler+0x1de>
 80082d4:	4b35      	ldr	r3, [pc, #212]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4938      	ldr	r1, [pc, #224]	; (80083bc <DMA2_Stream1_IRQHandler+0x200>)
 80082dc:	428b      	cmp	r3, r1
 80082de:	d05a      	beq.n	8008396 <DMA2_Stream1_IRQHandler+0x1da>
 80082e0:	4b32      	ldr	r3, [pc, #200]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4936      	ldr	r1, [pc, #216]	; (80083c0 <DMA2_Stream1_IRQHandler+0x204>)
 80082e8:	428b      	cmp	r3, r1
 80082ea:	d052      	beq.n	8008392 <DMA2_Stream1_IRQHandler+0x1d6>
 80082ec:	4b2f      	ldr	r3, [pc, #188]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4934      	ldr	r1, [pc, #208]	; (80083c4 <DMA2_Stream1_IRQHandler+0x208>)
 80082f4:	428b      	cmp	r3, r1
 80082f6:	d04a      	beq.n	800838e <DMA2_Stream1_IRQHandler+0x1d2>
 80082f8:	4b2c      	ldr	r3, [pc, #176]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4932      	ldr	r1, [pc, #200]	; (80083c8 <DMA2_Stream1_IRQHandler+0x20c>)
 8008300:	428b      	cmp	r3, r1
 8008302:	d041      	beq.n	8008388 <DMA2_Stream1_IRQHandler+0x1cc>
 8008304:	4b29      	ldr	r3, [pc, #164]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4930      	ldr	r1, [pc, #192]	; (80083cc <DMA2_Stream1_IRQHandler+0x210>)
 800830c:	428b      	cmp	r3, r1
 800830e:	d038      	beq.n	8008382 <DMA2_Stream1_IRQHandler+0x1c6>
 8008310:	4b26      	ldr	r3, [pc, #152]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	492e      	ldr	r1, [pc, #184]	; (80083d0 <DMA2_Stream1_IRQHandler+0x214>)
 8008318:	428b      	cmp	r3, r1
 800831a:	d02f      	beq.n	800837c <DMA2_Stream1_IRQHandler+0x1c0>
 800831c:	4b23      	ldr	r3, [pc, #140]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	492c      	ldr	r1, [pc, #176]	; (80083d4 <DMA2_Stream1_IRQHandler+0x218>)
 8008324:	428b      	cmp	r3, r1
 8008326:	d026      	beq.n	8008376 <DMA2_Stream1_IRQHandler+0x1ba>
 8008328:	4b20      	ldr	r3, [pc, #128]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	492a      	ldr	r1, [pc, #168]	; (80083d8 <DMA2_Stream1_IRQHandler+0x21c>)
 8008330:	428b      	cmp	r3, r1
 8008332:	d01d      	beq.n	8008370 <DMA2_Stream1_IRQHandler+0x1b4>
 8008334:	4b1d      	ldr	r3, [pc, #116]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4928      	ldr	r1, [pc, #160]	; (80083dc <DMA2_Stream1_IRQHandler+0x220>)
 800833c:	428b      	cmp	r3, r1
 800833e:	d014      	beq.n	800836a <DMA2_Stream1_IRQHandler+0x1ae>
 8008340:	4b1a      	ldr	r3, [pc, #104]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4926      	ldr	r1, [pc, #152]	; (80083e0 <DMA2_Stream1_IRQHandler+0x224>)
 8008348:	428b      	cmp	r3, r1
 800834a:	d00b      	beq.n	8008364 <DMA2_Stream1_IRQHandler+0x1a8>
 800834c:	4b17      	ldr	r3, [pc, #92]	; (80083ac <DMA2_Stream1_IRQHandler+0x1f0>)
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4924      	ldr	r1, [pc, #144]	; (80083e4 <DMA2_Stream1_IRQHandler+0x228>)
 8008354:	428b      	cmp	r3, r1
 8008356:	d102      	bne.n	800835e <DMA2_Stream1_IRQHandler+0x1a2>
 8008358:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800835c:	e01e      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 800835e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008362:	e01b      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008364:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008368:	e018      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 800836a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800836e:	e015      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008370:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008374:	e012      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800837a:	e00f      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 800837c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008380:	e00c      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008386:	e009      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800838c:	e006      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 800838e:	2308      	movs	r3, #8
 8008390:	e004      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008392:	2308      	movs	r3, #8
 8008394:	e002      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 8008396:	2308      	movs	r3, #8
 8008398:	e000      	b.n	800839c <DMA2_Stream1_IRQHandler+0x1e0>
 800839a:	2308      	movs	r3, #8
 800839c:	4013      	ands	r3, r2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bf14      	ite	ne
 80083a2:	2301      	movne	r3, #1
 80083a4:	2300      	moveq	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	e12b      	b.n	8008602 <DMA2_Stream1_IRQHandler+0x446>
 80083aa:	bf00      	nop
 80083ac:	20000724 	.word	0x20000724
 80083b0:	40026458 	.word	0x40026458
 80083b4:	40026400 	.word	0x40026400
 80083b8:	40026010 	.word	0x40026010
 80083bc:	40026410 	.word	0x40026410
 80083c0:	40026070 	.word	0x40026070
 80083c4:	40026470 	.word	0x40026470
 80083c8:	40026028 	.word	0x40026028
 80083cc:	40026428 	.word	0x40026428
 80083d0:	40026088 	.word	0x40026088
 80083d4:	40026488 	.word	0x40026488
 80083d8:	40026040 	.word	0x40026040
 80083dc:	40026440 	.word	0x40026440
 80083e0:	400260a0 	.word	0x400260a0
 80083e4:	400264a0 	.word	0x400264a0
 80083e8:	400260b8 	.word	0x400260b8
 80083ec:	4b72      	ldr	r3, [pc, #456]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	4b71      	ldr	r3, [pc, #452]	; (80085bc <DMA2_Stream1_IRQHandler+0x400>)
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d972      	bls.n	80084e0 <DMA2_Stream1_IRQHandler+0x324>
 80083fa:	4b71      	ldr	r3, [pc, #452]	; (80085c0 <DMA2_Stream1_IRQHandler+0x404>)
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	4b6e      	ldr	r3, [pc, #440]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	496f      	ldr	r1, [pc, #444]	; (80085c4 <DMA2_Stream1_IRQHandler+0x408>)
 8008406:	428b      	cmp	r3, r1
 8008408:	d062      	beq.n	80084d0 <DMA2_Stream1_IRQHandler+0x314>
 800840a:	4b6b      	ldr	r3, [pc, #428]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	496d      	ldr	r1, [pc, #436]	; (80085c8 <DMA2_Stream1_IRQHandler+0x40c>)
 8008412:	428b      	cmp	r3, r1
 8008414:	d05a      	beq.n	80084cc <DMA2_Stream1_IRQHandler+0x310>
 8008416:	4b68      	ldr	r3, [pc, #416]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	496b      	ldr	r1, [pc, #428]	; (80085cc <DMA2_Stream1_IRQHandler+0x410>)
 800841e:	428b      	cmp	r3, r1
 8008420:	d052      	beq.n	80084c8 <DMA2_Stream1_IRQHandler+0x30c>
 8008422:	4b65      	ldr	r3, [pc, #404]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4969      	ldr	r1, [pc, #420]	; (80085d0 <DMA2_Stream1_IRQHandler+0x414>)
 800842a:	428b      	cmp	r3, r1
 800842c:	d04a      	beq.n	80084c4 <DMA2_Stream1_IRQHandler+0x308>
 800842e:	4b62      	ldr	r3, [pc, #392]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4967      	ldr	r1, [pc, #412]	; (80085d4 <DMA2_Stream1_IRQHandler+0x418>)
 8008436:	428b      	cmp	r3, r1
 8008438:	d041      	beq.n	80084be <DMA2_Stream1_IRQHandler+0x302>
 800843a:	4b5f      	ldr	r3, [pc, #380]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4965      	ldr	r1, [pc, #404]	; (80085d8 <DMA2_Stream1_IRQHandler+0x41c>)
 8008442:	428b      	cmp	r3, r1
 8008444:	d038      	beq.n	80084b8 <DMA2_Stream1_IRQHandler+0x2fc>
 8008446:	4b5c      	ldr	r3, [pc, #368]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4963      	ldr	r1, [pc, #396]	; (80085dc <DMA2_Stream1_IRQHandler+0x420>)
 800844e:	428b      	cmp	r3, r1
 8008450:	d02f      	beq.n	80084b2 <DMA2_Stream1_IRQHandler+0x2f6>
 8008452:	4b59      	ldr	r3, [pc, #356]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4961      	ldr	r1, [pc, #388]	; (80085e0 <DMA2_Stream1_IRQHandler+0x424>)
 800845a:	428b      	cmp	r3, r1
 800845c:	d026      	beq.n	80084ac <DMA2_Stream1_IRQHandler+0x2f0>
 800845e:	4b56      	ldr	r3, [pc, #344]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	495f      	ldr	r1, [pc, #380]	; (80085e4 <DMA2_Stream1_IRQHandler+0x428>)
 8008466:	428b      	cmp	r3, r1
 8008468:	d01d      	beq.n	80084a6 <DMA2_Stream1_IRQHandler+0x2ea>
 800846a:	4b53      	ldr	r3, [pc, #332]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	495d      	ldr	r1, [pc, #372]	; (80085e8 <DMA2_Stream1_IRQHandler+0x42c>)
 8008472:	428b      	cmp	r3, r1
 8008474:	d014      	beq.n	80084a0 <DMA2_Stream1_IRQHandler+0x2e4>
 8008476:	4b50      	ldr	r3, [pc, #320]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	495b      	ldr	r1, [pc, #364]	; (80085ec <DMA2_Stream1_IRQHandler+0x430>)
 800847e:	428b      	cmp	r3, r1
 8008480:	d00b      	beq.n	800849a <DMA2_Stream1_IRQHandler+0x2de>
 8008482:	4b4d      	ldr	r3, [pc, #308]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4959      	ldr	r1, [pc, #356]	; (80085f0 <DMA2_Stream1_IRQHandler+0x434>)
 800848a:	428b      	cmp	r3, r1
 800848c:	d102      	bne.n	8008494 <DMA2_Stream1_IRQHandler+0x2d8>
 800848e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008492:	e01e      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 8008494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008498:	e01b      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 800849a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800849e:	e018      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084a4:	e015      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084aa:	e012      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084b0:	e00f      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084b6:	e00c      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084bc:	e009      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c2:	e006      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084c4:	2308      	movs	r3, #8
 80084c6:	e004      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084c8:	2308      	movs	r3, #8
 80084ca:	e002      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084cc:	2308      	movs	r3, #8
 80084ce:	e000      	b.n	80084d2 <DMA2_Stream1_IRQHandler+0x316>
 80084d0:	2308      	movs	r3, #8
 80084d2:	4013      	ands	r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bf14      	ite	ne
 80084d8:	2301      	movne	r3, #1
 80084da:	2300      	moveq	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	e090      	b.n	8008602 <DMA2_Stream1_IRQHandler+0x446>
 80084e0:	4b37      	ldr	r3, [pc, #220]	; (80085c0 <DMA2_Stream1_IRQHandler+0x404>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	4b34      	ldr	r3, [pc, #208]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4936      	ldr	r1, [pc, #216]	; (80085c4 <DMA2_Stream1_IRQHandler+0x408>)
 80084ec:	428b      	cmp	r3, r1
 80084ee:	f000 8081 	beq.w	80085f4 <DMA2_Stream1_IRQHandler+0x438>
 80084f2:	4b31      	ldr	r3, [pc, #196]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4933      	ldr	r1, [pc, #204]	; (80085c8 <DMA2_Stream1_IRQHandler+0x40c>)
 80084fa:	428b      	cmp	r3, r1
 80084fc:	d05a      	beq.n	80085b4 <DMA2_Stream1_IRQHandler+0x3f8>
 80084fe:	4b2e      	ldr	r3, [pc, #184]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4931      	ldr	r1, [pc, #196]	; (80085cc <DMA2_Stream1_IRQHandler+0x410>)
 8008506:	428b      	cmp	r3, r1
 8008508:	d052      	beq.n	80085b0 <DMA2_Stream1_IRQHandler+0x3f4>
 800850a:	4b2b      	ldr	r3, [pc, #172]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	492f      	ldr	r1, [pc, #188]	; (80085d0 <DMA2_Stream1_IRQHandler+0x414>)
 8008512:	428b      	cmp	r3, r1
 8008514:	d04a      	beq.n	80085ac <DMA2_Stream1_IRQHandler+0x3f0>
 8008516:	4b28      	ldr	r3, [pc, #160]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	492d      	ldr	r1, [pc, #180]	; (80085d4 <DMA2_Stream1_IRQHandler+0x418>)
 800851e:	428b      	cmp	r3, r1
 8008520:	d041      	beq.n	80085a6 <DMA2_Stream1_IRQHandler+0x3ea>
 8008522:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	492b      	ldr	r1, [pc, #172]	; (80085d8 <DMA2_Stream1_IRQHandler+0x41c>)
 800852a:	428b      	cmp	r3, r1
 800852c:	d038      	beq.n	80085a0 <DMA2_Stream1_IRQHandler+0x3e4>
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4929      	ldr	r1, [pc, #164]	; (80085dc <DMA2_Stream1_IRQHandler+0x420>)
 8008536:	428b      	cmp	r3, r1
 8008538:	d02f      	beq.n	800859a <DMA2_Stream1_IRQHandler+0x3de>
 800853a:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4927      	ldr	r1, [pc, #156]	; (80085e0 <DMA2_Stream1_IRQHandler+0x424>)
 8008542:	428b      	cmp	r3, r1
 8008544:	d026      	beq.n	8008594 <DMA2_Stream1_IRQHandler+0x3d8>
 8008546:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4925      	ldr	r1, [pc, #148]	; (80085e4 <DMA2_Stream1_IRQHandler+0x428>)
 800854e:	428b      	cmp	r3, r1
 8008550:	d01d      	beq.n	800858e <DMA2_Stream1_IRQHandler+0x3d2>
 8008552:	4b19      	ldr	r3, [pc, #100]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4923      	ldr	r1, [pc, #140]	; (80085e8 <DMA2_Stream1_IRQHandler+0x42c>)
 800855a:	428b      	cmp	r3, r1
 800855c:	d014      	beq.n	8008588 <DMA2_Stream1_IRQHandler+0x3cc>
 800855e:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4921      	ldr	r1, [pc, #132]	; (80085ec <DMA2_Stream1_IRQHandler+0x430>)
 8008566:	428b      	cmp	r3, r1
 8008568:	d00b      	beq.n	8008582 <DMA2_Stream1_IRQHandler+0x3c6>
 800856a:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <DMA2_Stream1_IRQHandler+0x3fc>)
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	491f      	ldr	r1, [pc, #124]	; (80085f0 <DMA2_Stream1_IRQHandler+0x434>)
 8008572:	428b      	cmp	r3, r1
 8008574:	d102      	bne.n	800857c <DMA2_Stream1_IRQHandler+0x3c0>
 8008576:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800857a:	e03c      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 800857c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008580:	e039      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 8008582:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008586:	e036      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 8008588:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800858c:	e033      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 800858e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008592:	e030      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 8008594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008598:	e02d      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 800859a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800859e:	e02a      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 80085a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a4:	e027      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 80085a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085aa:	e024      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 80085ac:	2308      	movs	r3, #8
 80085ae:	e022      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 80085b0:	2308      	movs	r3, #8
 80085b2:	e020      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 80085b4:	2308      	movs	r3, #8
 80085b6:	e01e      	b.n	80085f6 <DMA2_Stream1_IRQHandler+0x43a>
 80085b8:	20000724 	.word	0x20000724
 80085bc:	40026058 	.word	0x40026058
 80085c0:	40026000 	.word	0x40026000
 80085c4:	40026010 	.word	0x40026010
 80085c8:	40026410 	.word	0x40026410
 80085cc:	40026070 	.word	0x40026070
 80085d0:	40026470 	.word	0x40026470
 80085d4:	40026028 	.word	0x40026028
 80085d8:	40026428 	.word	0x40026428
 80085dc:	40026088 	.word	0x40026088
 80085e0:	40026488 	.word	0x40026488
 80085e4:	40026040 	.word	0x40026040
 80085e8:	40026440 	.word	0x40026440
 80085ec:	400260a0 	.word	0x400260a0
 80085f0:	400264a0 	.word	0x400264a0
 80085f4:	2308      	movs	r3, #8
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <DMA2_Stream1_IRQHandler+0x450>
  {
    UART_Emul_DMAError(&hdma_tx);
 8008606:	4876      	ldr	r0, [pc, #472]	; (80087e0 <DMA2_Stream1_IRQHandler+0x624>)
 8008608:	f000 fe82 	bl	8009310 <UART_Emul_DMAError>
  }

  /* Clear the transfer complete flag */
  __HAL_DMA_CLEAR_FLAG(TimHandle.hdma[TIM_DMA_ID_CC1], __HAL_DMA_GET_TC_FLAG_INDEX(TimHandle.hdma[TIM_DMA_ID_CC1]));
 800860c:	4b75      	ldr	r3, [pc, #468]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	4b74      	ldr	r3, [pc, #464]	; (80087e8 <DMA2_Stream1_IRQHandler+0x62c>)
 8008616:	429a      	cmp	r2, r3
 8008618:	d96c      	bls.n	80086f4 <DMA2_Stream1_IRQHandler+0x538>
 800861a:	4b72      	ldr	r3, [pc, #456]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a72      	ldr	r2, [pc, #456]	; (80087ec <DMA2_Stream1_IRQHandler+0x630>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d062      	beq.n	80086ec <DMA2_Stream1_IRQHandler+0x530>
 8008626:	4b6f      	ldr	r3, [pc, #444]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a70      	ldr	r2, [pc, #448]	; (80087f0 <DMA2_Stream1_IRQHandler+0x634>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d05a      	beq.n	80086e8 <DMA2_Stream1_IRQHandler+0x52c>
 8008632:	4b6c      	ldr	r3, [pc, #432]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a6e      	ldr	r2, [pc, #440]	; (80087f4 <DMA2_Stream1_IRQHandler+0x638>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d052      	beq.n	80086e4 <DMA2_Stream1_IRQHandler+0x528>
 800863e:	4b69      	ldr	r3, [pc, #420]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a6c      	ldr	r2, [pc, #432]	; (80087f8 <DMA2_Stream1_IRQHandler+0x63c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d04a      	beq.n	80086e0 <DMA2_Stream1_IRQHandler+0x524>
 800864a:	4b66      	ldr	r3, [pc, #408]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a6a      	ldr	r2, [pc, #424]	; (80087fc <DMA2_Stream1_IRQHandler+0x640>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d041      	beq.n	80086da <DMA2_Stream1_IRQHandler+0x51e>
 8008656:	4b63      	ldr	r3, [pc, #396]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a68      	ldr	r2, [pc, #416]	; (8008800 <DMA2_Stream1_IRQHandler+0x644>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d038      	beq.n	80086d4 <DMA2_Stream1_IRQHandler+0x518>
 8008662:	4b60      	ldr	r3, [pc, #384]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a66      	ldr	r2, [pc, #408]	; (8008804 <DMA2_Stream1_IRQHandler+0x648>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d02f      	beq.n	80086ce <DMA2_Stream1_IRQHandler+0x512>
 800866e:	4b5d      	ldr	r3, [pc, #372]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a64      	ldr	r2, [pc, #400]	; (8008808 <DMA2_Stream1_IRQHandler+0x64c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d026      	beq.n	80086c8 <DMA2_Stream1_IRQHandler+0x50c>
 800867a:	4b5a      	ldr	r3, [pc, #360]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a62      	ldr	r2, [pc, #392]	; (800880c <DMA2_Stream1_IRQHandler+0x650>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d01d      	beq.n	80086c2 <DMA2_Stream1_IRQHandler+0x506>
 8008686:	4b57      	ldr	r3, [pc, #348]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a60      	ldr	r2, [pc, #384]	; (8008810 <DMA2_Stream1_IRQHandler+0x654>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d014      	beq.n	80086bc <DMA2_Stream1_IRQHandler+0x500>
 8008692:	4b54      	ldr	r3, [pc, #336]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a5e      	ldr	r2, [pc, #376]	; (8008814 <DMA2_Stream1_IRQHandler+0x658>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00b      	beq.n	80086b6 <DMA2_Stream1_IRQHandler+0x4fa>
 800869e:	4b51      	ldr	r3, [pc, #324]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a5c      	ldr	r2, [pc, #368]	; (8008818 <DMA2_Stream1_IRQHandler+0x65c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d102      	bne.n	80086b0 <DMA2_Stream1_IRQHandler+0x4f4>
 80086aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086ae:	e01e      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086b4:	e01b      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086ba:	e018      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086c0:	e015      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086c6:	e012      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086cc:	e00f      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d2:	e00c      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d8:	e009      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086de:	e006      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086e0:	2320      	movs	r3, #32
 80086e2:	e004      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086e4:	2320      	movs	r3, #32
 80086e6:	e002      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086e8:	2320      	movs	r3, #32
 80086ea:	e000      	b.n	80086ee <DMA2_Stream1_IRQHandler+0x532>
 80086ec:	2320      	movs	r3, #32
 80086ee:	4a4b      	ldr	r2, [pc, #300]	; (800881c <DMA2_Stream1_IRQHandler+0x660>)
 80086f0:	60d3      	str	r3, [r2, #12]
 80086f2:	e177      	b.n	80089e4 <DMA2_Stream1_IRQHandler+0x828>
 80086f4:	4b3b      	ldr	r3, [pc, #236]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	4b48      	ldr	r3, [pc, #288]	; (8008820 <DMA2_Stream1_IRQHandler+0x664>)
 80086fe:	429a      	cmp	r2, r3
 8008700:	f240 8090 	bls.w	8008824 <DMA2_Stream1_IRQHandler+0x668>
 8008704:	4b37      	ldr	r3, [pc, #220]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a38      	ldr	r2, [pc, #224]	; (80087ec <DMA2_Stream1_IRQHandler+0x630>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d062      	beq.n	80087d6 <DMA2_Stream1_IRQHandler+0x61a>
 8008710:	4b34      	ldr	r3, [pc, #208]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a36      	ldr	r2, [pc, #216]	; (80087f0 <DMA2_Stream1_IRQHandler+0x634>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d05a      	beq.n	80087d2 <DMA2_Stream1_IRQHandler+0x616>
 800871c:	4b31      	ldr	r3, [pc, #196]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a34      	ldr	r2, [pc, #208]	; (80087f4 <DMA2_Stream1_IRQHandler+0x638>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d052      	beq.n	80087ce <DMA2_Stream1_IRQHandler+0x612>
 8008728:	4b2e      	ldr	r3, [pc, #184]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a32      	ldr	r2, [pc, #200]	; (80087f8 <DMA2_Stream1_IRQHandler+0x63c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d04a      	beq.n	80087ca <DMA2_Stream1_IRQHandler+0x60e>
 8008734:	4b2b      	ldr	r3, [pc, #172]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a30      	ldr	r2, [pc, #192]	; (80087fc <DMA2_Stream1_IRQHandler+0x640>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d041      	beq.n	80087c4 <DMA2_Stream1_IRQHandler+0x608>
 8008740:	4b28      	ldr	r3, [pc, #160]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2e      	ldr	r2, [pc, #184]	; (8008800 <DMA2_Stream1_IRQHandler+0x644>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d038      	beq.n	80087be <DMA2_Stream1_IRQHandler+0x602>
 800874c:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a2c      	ldr	r2, [pc, #176]	; (8008804 <DMA2_Stream1_IRQHandler+0x648>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d02f      	beq.n	80087b8 <DMA2_Stream1_IRQHandler+0x5fc>
 8008758:	4b22      	ldr	r3, [pc, #136]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a2a      	ldr	r2, [pc, #168]	; (8008808 <DMA2_Stream1_IRQHandler+0x64c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d026      	beq.n	80087b2 <DMA2_Stream1_IRQHandler+0x5f6>
 8008764:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a28      	ldr	r2, [pc, #160]	; (800880c <DMA2_Stream1_IRQHandler+0x650>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d01d      	beq.n	80087ac <DMA2_Stream1_IRQHandler+0x5f0>
 8008770:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a26      	ldr	r2, [pc, #152]	; (8008810 <DMA2_Stream1_IRQHandler+0x654>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d014      	beq.n	80087a6 <DMA2_Stream1_IRQHandler+0x5ea>
 800877c:	4b19      	ldr	r3, [pc, #100]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a24      	ldr	r2, [pc, #144]	; (8008814 <DMA2_Stream1_IRQHandler+0x658>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d00b      	beq.n	80087a0 <DMA2_Stream1_IRQHandler+0x5e4>
 8008788:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <DMA2_Stream1_IRQHandler+0x628>)
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a22      	ldr	r2, [pc, #136]	; (8008818 <DMA2_Stream1_IRQHandler+0x65c>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d102      	bne.n	800879a <DMA2_Stream1_IRQHandler+0x5de>
 8008794:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008798:	e01e      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 800879a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800879e:	e01b      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087a4:	e018      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087aa:	e015      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087b0:	e012      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087b6:	e00f      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087bc:	e00c      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c2:	e009      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c8:	e006      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087ca:	2320      	movs	r3, #32
 80087cc:	e004      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087ce:	2320      	movs	r3, #32
 80087d0:	e002      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087d2:	2320      	movs	r3, #32
 80087d4:	e000      	b.n	80087d8 <DMA2_Stream1_IRQHandler+0x61c>
 80087d6:	2320      	movs	r3, #32
 80087d8:	4a10      	ldr	r2, [pc, #64]	; (800881c <DMA2_Stream1_IRQHandler+0x660>)
 80087da:	6093      	str	r3, [r2, #8]
 80087dc:	e102      	b.n	80089e4 <DMA2_Stream1_IRQHandler+0x828>
 80087de:	bf00      	nop
 80087e0:	20000664 	.word	0x20000664
 80087e4:	20000724 	.word	0x20000724
 80087e8:	40026458 	.word	0x40026458
 80087ec:	40026010 	.word	0x40026010
 80087f0:	40026410 	.word	0x40026410
 80087f4:	40026070 	.word	0x40026070
 80087f8:	40026470 	.word	0x40026470
 80087fc:	40026028 	.word	0x40026028
 8008800:	40026428 	.word	0x40026428
 8008804:	40026088 	.word	0x40026088
 8008808:	40026488 	.word	0x40026488
 800880c:	40026040 	.word	0x40026040
 8008810:	40026440 	.word	0x40026440
 8008814:	400260a0 	.word	0x400260a0
 8008818:	400264a0 	.word	0x400264a0
 800881c:	40026400 	.word	0x40026400
 8008820:	400260b8 	.word	0x400260b8
 8008824:	4b74      	ldr	r3, [pc, #464]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	4b73      	ldr	r3, [pc, #460]	; (80089fc <DMA2_Stream1_IRQHandler+0x840>)
 800882e:	429a      	cmp	r2, r3
 8008830:	d96c      	bls.n	800890c <DMA2_Stream1_IRQHandler+0x750>
 8008832:	4b71      	ldr	r3, [pc, #452]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a71      	ldr	r2, [pc, #452]	; (8008a00 <DMA2_Stream1_IRQHandler+0x844>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d062      	beq.n	8008904 <DMA2_Stream1_IRQHandler+0x748>
 800883e:	4b6e      	ldr	r3, [pc, #440]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a6f      	ldr	r2, [pc, #444]	; (8008a04 <DMA2_Stream1_IRQHandler+0x848>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d05a      	beq.n	8008900 <DMA2_Stream1_IRQHandler+0x744>
 800884a:	4b6b      	ldr	r3, [pc, #428]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a6d      	ldr	r2, [pc, #436]	; (8008a08 <DMA2_Stream1_IRQHandler+0x84c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d052      	beq.n	80088fc <DMA2_Stream1_IRQHandler+0x740>
 8008856:	4b68      	ldr	r3, [pc, #416]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a6b      	ldr	r2, [pc, #428]	; (8008a0c <DMA2_Stream1_IRQHandler+0x850>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d04a      	beq.n	80088f8 <DMA2_Stream1_IRQHandler+0x73c>
 8008862:	4b65      	ldr	r3, [pc, #404]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a69      	ldr	r2, [pc, #420]	; (8008a10 <DMA2_Stream1_IRQHandler+0x854>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d041      	beq.n	80088f2 <DMA2_Stream1_IRQHandler+0x736>
 800886e:	4b62      	ldr	r3, [pc, #392]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a67      	ldr	r2, [pc, #412]	; (8008a14 <DMA2_Stream1_IRQHandler+0x858>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d038      	beq.n	80088ec <DMA2_Stream1_IRQHandler+0x730>
 800887a:	4b5f      	ldr	r3, [pc, #380]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a65      	ldr	r2, [pc, #404]	; (8008a18 <DMA2_Stream1_IRQHandler+0x85c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d02f      	beq.n	80088e6 <DMA2_Stream1_IRQHandler+0x72a>
 8008886:	4b5c      	ldr	r3, [pc, #368]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a63      	ldr	r2, [pc, #396]	; (8008a1c <DMA2_Stream1_IRQHandler+0x860>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d026      	beq.n	80088e0 <DMA2_Stream1_IRQHandler+0x724>
 8008892:	4b59      	ldr	r3, [pc, #356]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a61      	ldr	r2, [pc, #388]	; (8008a20 <DMA2_Stream1_IRQHandler+0x864>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d01d      	beq.n	80088da <DMA2_Stream1_IRQHandler+0x71e>
 800889e:	4b56      	ldr	r3, [pc, #344]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a5f      	ldr	r2, [pc, #380]	; (8008a24 <DMA2_Stream1_IRQHandler+0x868>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d014      	beq.n	80088d4 <DMA2_Stream1_IRQHandler+0x718>
 80088aa:	4b53      	ldr	r3, [pc, #332]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a5d      	ldr	r2, [pc, #372]	; (8008a28 <DMA2_Stream1_IRQHandler+0x86c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d00b      	beq.n	80088ce <DMA2_Stream1_IRQHandler+0x712>
 80088b6:	4b50      	ldr	r3, [pc, #320]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a5b      	ldr	r2, [pc, #364]	; (8008a2c <DMA2_Stream1_IRQHandler+0x870>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d102      	bne.n	80088c8 <DMA2_Stream1_IRQHandler+0x70c>
 80088c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088c6:	e01e      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088cc:	e01b      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088d2:	e018      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088d8:	e015      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088de:	e012      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088e4:	e00f      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ea:	e00c      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f0:	e009      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f6:	e006      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088f8:	2320      	movs	r3, #32
 80088fa:	e004      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 80088fc:	2320      	movs	r3, #32
 80088fe:	e002      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 8008900:	2320      	movs	r3, #32
 8008902:	e000      	b.n	8008906 <DMA2_Stream1_IRQHandler+0x74a>
 8008904:	2320      	movs	r3, #32
 8008906:	4a4a      	ldr	r2, [pc, #296]	; (8008a30 <DMA2_Stream1_IRQHandler+0x874>)
 8008908:	60d3      	str	r3, [r2, #12]
 800890a:	e06b      	b.n	80089e4 <DMA2_Stream1_IRQHandler+0x828>
 800890c:	4b3a      	ldr	r3, [pc, #232]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a3b      	ldr	r2, [pc, #236]	; (8008a00 <DMA2_Stream1_IRQHandler+0x844>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d062      	beq.n	80089de <DMA2_Stream1_IRQHandler+0x822>
 8008918:	4b37      	ldr	r3, [pc, #220]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a39      	ldr	r2, [pc, #228]	; (8008a04 <DMA2_Stream1_IRQHandler+0x848>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d05a      	beq.n	80089da <DMA2_Stream1_IRQHandler+0x81e>
 8008924:	4b34      	ldr	r3, [pc, #208]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a37      	ldr	r2, [pc, #220]	; (8008a08 <DMA2_Stream1_IRQHandler+0x84c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d052      	beq.n	80089d6 <DMA2_Stream1_IRQHandler+0x81a>
 8008930:	4b31      	ldr	r3, [pc, #196]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a35      	ldr	r2, [pc, #212]	; (8008a0c <DMA2_Stream1_IRQHandler+0x850>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d04a      	beq.n	80089d2 <DMA2_Stream1_IRQHandler+0x816>
 800893c:	4b2e      	ldr	r3, [pc, #184]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a33      	ldr	r2, [pc, #204]	; (8008a10 <DMA2_Stream1_IRQHandler+0x854>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d041      	beq.n	80089cc <DMA2_Stream1_IRQHandler+0x810>
 8008948:	4b2b      	ldr	r3, [pc, #172]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a31      	ldr	r2, [pc, #196]	; (8008a14 <DMA2_Stream1_IRQHandler+0x858>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d038      	beq.n	80089c6 <DMA2_Stream1_IRQHandler+0x80a>
 8008954:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a2f      	ldr	r2, [pc, #188]	; (8008a18 <DMA2_Stream1_IRQHandler+0x85c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d02f      	beq.n	80089c0 <DMA2_Stream1_IRQHandler+0x804>
 8008960:	4b25      	ldr	r3, [pc, #148]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2d      	ldr	r2, [pc, #180]	; (8008a1c <DMA2_Stream1_IRQHandler+0x860>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d026      	beq.n	80089ba <DMA2_Stream1_IRQHandler+0x7fe>
 800896c:	4b22      	ldr	r3, [pc, #136]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a2b      	ldr	r2, [pc, #172]	; (8008a20 <DMA2_Stream1_IRQHandler+0x864>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d01d      	beq.n	80089b4 <DMA2_Stream1_IRQHandler+0x7f8>
 8008978:	4b1f      	ldr	r3, [pc, #124]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a29      	ldr	r2, [pc, #164]	; (8008a24 <DMA2_Stream1_IRQHandler+0x868>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d014      	beq.n	80089ae <DMA2_Stream1_IRQHandler+0x7f2>
 8008984:	4b1c      	ldr	r3, [pc, #112]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a27      	ldr	r2, [pc, #156]	; (8008a28 <DMA2_Stream1_IRQHandler+0x86c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00b      	beq.n	80089a8 <DMA2_Stream1_IRQHandler+0x7ec>
 8008990:	4b19      	ldr	r3, [pc, #100]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a25      	ldr	r2, [pc, #148]	; (8008a2c <DMA2_Stream1_IRQHandler+0x870>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d102      	bne.n	80089a2 <DMA2_Stream1_IRQHandler+0x7e6>
 800899c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089a0:	e01e      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089a6:	e01b      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089ac:	e018      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089b2:	e015      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089b8:	e012      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089be:	e00f      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089c4:	e00c      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ca:	e009      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089d0:	e006      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089d2:	2320      	movs	r3, #32
 80089d4:	e004      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089d6:	2320      	movs	r3, #32
 80089d8:	e002      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089da:	2320      	movs	r3, #32
 80089dc:	e000      	b.n	80089e0 <DMA2_Stream1_IRQHandler+0x824>
 80089de:	2320      	movs	r3, #32
 80089e0:	4a13      	ldr	r2, [pc, #76]	; (8008a30 <DMA2_Stream1_IRQHandler+0x874>)
 80089e2:	6093      	str	r3, [r2, #8]
   
  /* Transfer complete callback */
  TimHandle.hdma[TIM_DMA_ID_CC1]->XferCpltCallback(TimHandle.hdma[TIM_DMA_ID_CC1]);
 80089e4:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ea:	4a03      	ldr	r2, [pc, #12]	; (80089f8 <DMA2_Stream1_IRQHandler+0x83c>)
 80089ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
}
 80089f2:	bf00      	nop
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	20000724 	.word	0x20000724
 80089fc:	40026058 	.word	0x40026058
 8008a00:	40026010 	.word	0x40026010
 8008a04:	40026410 	.word	0x40026410
 8008a08:	40026070 	.word	0x40026070
 8008a0c:	40026470 	.word	0x40026470
 8008a10:	40026028 	.word	0x40026028
 8008a14:	40026428 	.word	0x40026428
 8008a18:	40026088 	.word	0x40026088
 8008a1c:	40026488 	.word	0x40026488
 8008a20:	40026040 	.word	0x40026040
 8008a24:	40026440 	.word	0x40026440
 8008a28:	400260a0 	.word	0x400260a0
 8008a2c:	400264a0 	.word	0x400264a0
 8008a30:	40026000 	.word	0x40026000

08008a34 <UART_Emul_DMAReceiveCplt>:
  * @brief  This function is executed in case of Receive Complete for last frame.
  * @param  None
  * @retval None
  */
static void UART_Emul_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a34:	b5b0      	push	{r4, r5, r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpformat = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpdata = 0;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60bb      	str	r3, [r7, #8]
//	Log_Info((uint8_t*)"x",1);
  if (huart_emul->RxXferCount > huart_emul->RxXferSize)
 8008a44:	4b32      	ldr	r3, [pc, #200]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8008a4a:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	8c1b      	ldrh	r3, [r3, #32]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d958      	bls.n	8008b06 <UART_Emul_DMAReceiveCplt+0xd2>
  {
    /*Disable EXTI line Rx  */
//    EXTI->IMR &= ~huart_emul->Init.RxPinNumber;
    /* Disable the Peripheral */
    __HAL_DMA_DISABLE(&hdma_rx);
 8008a54:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <UART_Emul_DMAReceiveCplt+0xe0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <UART_Emul_DMAReceiveCplt+0xe0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0201 	bic.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]

    /* Disable the TIM Update DMA request */
    __HAL_TIM_DISABLE_DMA(&TimHandle, TIM_DMA_CC2);
 8008a64:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <UART_Emul_DMAReceiveCplt+0xe4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	4b2b      	ldr	r3, [pc, #172]	; (8008b18 <UART_Emul_DMAReceiveCplt+0xe4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a72:	60da      	str	r2, [r3, #12]
    if ((huart_emul->RxXferCount % 2) == 0)
 8008a74:	4b26      	ldr	r3, [pc, #152]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <UART_Emul_DMAReceiveCplt+0x56>
    {
      tmpformat = (uint32_t)pFirstBuffer_Rx;
 8008a84:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <UART_Emul_DMAReceiveCplt+0xe8>)
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	e001      	b.n	8008a8e <UART_Emul_DMAReceiveCplt+0x5a>
    }
    else
    {
      tmpformat = (uint32_t)pSecondBuffer_Rx;
 8008a8a:	4b25      	ldr	r3, [pc, #148]	; (8008b20 <UART_Emul_DMAReceiveCplt+0xec>)
 8008a8c:	60fb      	str	r3, [r7, #12]
    }
 
    /* Formatted Last Frame */
    *(uint8_t*)((huart_emul->pRxBuffPtr) + (huart_emul->RxXferCount - 2)) = UART_Emul_ReceiveFormatFrame(huart_emul, (uint32_t*)tmpformat, (uint8_t)tmpdata);
 8008a8e:	4b20      	ldr	r3, [pc, #128]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	b2dd      	uxtb	r5, r3
 8008a98:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69da      	ldr	r2, [r3, #28]
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008aa4:	3b02      	subs	r3, #2
 8008aa6:	18d4      	adds	r4, r2, r3
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	f000 f9bf 	bl	8008e2c <UART_Emul_ReceiveFormatFrame>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	7023      	strb	r3, [r4, #0]

    /* Set RC falg receiver complete */
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_RC);
 8008ab2:	4b17      	ldr	r3, [pc, #92]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4b15      	ldr	r3, [pc, #84]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	b2d2      	uxtb	r2, r2
 8008ac4:	701a      	strb	r2, [r3, #0]

    /* De_Initialize counter frame for Rx */
    huart_emul->RxXferCount = 0;
 8008ac6:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Initialize the UART Emulation  state */
    huart_emul->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 8008ace:	4b10      	ldr	r3, [pc, #64]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if a transmit process is ongoing or not */
    if (huart_emul->State == HAL_UART_EMUL_STATE_BUSY_TX_RX)
 8008ad8:	4b0d      	ldr	r3, [pc, #52]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b10      	cmp	r3, #16
 8008ae4:	d105      	bne.n	8008af2 <UART_Emul_DMAReceiveCplt+0xbe>
    {
      huart_emul->State = HAL_UART_EMUL_STATE_BUSY_TX;
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2204      	movs	r2, #4
 8008aec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008af0:	e004      	b.n	8008afc <UART_Emul_DMAReceiveCplt+0xc8>
    }
    else
    {
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
 8008af2:	4b07      	ldr	r3, [pc, #28]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Handle for UART Emulation Receive Complete */
//		Log_Info((uint8_t*)"y",1);
    HAL_UART_Emul_RxCpltCallback(huart_emul);
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <UART_Emul_DMAReceiveCplt+0xdc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fc1f 	bl	8007344 <HAL_UART_Emul_RxCpltCallback>
//		Log_Info((uint8_t*)"z",1);
  }
}
 8008b06:	bf00      	nop
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20000764 	.word	0x20000764
 8008b14:	200006c4 	.word	0x200006c4
 8008b18:	20000724 	.word	0x20000724
 8008b1c:	20000768 	.word	0x20000768
 8008b20:	20000798 	.word	0x20000798

08008b24 <UART_Emul_ReceiveFrame>:
 * @param  huart: UART Emulation handle
 * @param  pData: Frame to be Received
 * @retval None
*/
static void UART_Emul_ReceiveFrame(UART_Emul_HandleTypeDef *huart, uint32_t *pData)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_sr =0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ds =0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
  uint32_t tmp_size =0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_arr =0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]

	tmp_arr = TIM1->ARR;
 8008b3e:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <UART_Emul_ReceiveFrame+0xe8>)
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	60bb      	str	r3, [r7, #8]
  tmp_ds = (uint32_t)pData;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	613b      	str	r3, [r7, #16]
  tmp_sr = (uint32_t) & (huart->RxPortName->IDR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	3310      	adds	r3, #16
 8008b4e:	617b      	str	r3, [r7, #20]
  tmp_size =  __HAL_UART_EMUL_FRAME_LENGTH(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7b1b      	ldrb	r3, [r3, #12]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7b5b      	ldrb	r3, [r3, #13]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	3301      	adds	r3, #1
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	60fb      	str	r3, [r7, #12]

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_rx, DMA_IT_TC);
 8008b66:	4b2a      	ldr	r3, [pc, #168]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	4b28      	ldr	r3, [pc, #160]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f042 0210 	orr.w	r2, r2, #16
 8008b74:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_rx, DMA_IT_TE);
 8008b76:	4b26      	ldr	r3, [pc, #152]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	4b24      	ldr	r3, [pc, #144]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f042 0204 	orr.w	r2, r2, #4
 8008b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma_rx.Instance->NDTR = tmp_size;
 8008b86:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Stream source address */
  hdma_rx.Instance->PAR = tmp_sr;
 8008b8e:	4b20      	ldr	r3, [pc, #128]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	609a      	str	r2, [r3, #8]

  /* Configure DMA Stream destination address */
  hdma_rx.Instance->M0AR = tmp_ds;
 8008b96:	4b1e      	ldr	r3, [pc, #120]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(&hdma_rx);
 8008b9e:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	; (8008c10 <UART_Emul_ReceiveFrame+0xec>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f042 0201 	orr.w	r2, r2, #1
 8008bac:	601a      	str	r2, [r3, #0]

  if ((huart_emul->RxXferCount == 1)||(huart->State != HAL_UART_EMUL_STATE_BUSY_TX_RX))
 8008bae:	4b19      	ldr	r3, [pc, #100]	; (8008c14 <UART_Emul_ReceiveFrame+0xf0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <UART_Emul_ReceiveFrame+0xa0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b10      	cmp	r3, #16
 8008bc2:	d00d      	beq.n	8008be0 <UART_Emul_ReceiveFrame+0xbc>
  {
    TIM1->CCR2 = ((TIM1->CNT + (tmp_arr / 2)) % tmp_arr);
 8008bc4:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <UART_Emul_ReceiveFrame+0xe8>)
 8008bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	4413      	add	r3, r2
 8008bce:	480f      	ldr	r0, [pc, #60]	; (8008c0c <UART_Emul_ReceiveFrame+0xe8>)
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	fb01 f202 	mul.w	r2, r1, r2
 8008bdc:	1a9b      	subs	r3, r3, r2
 8008bde:	6383      	str	r3, [r0, #56]	; 0x38
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(&TimHandle, TIM_DMA_CC2);
 8008be0:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <UART_Emul_ReceiveFrame+0xf4>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <UART_Emul_ReceiveFrame+0xf4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bee:	60da      	str	r2, [r3, #12]

  /* Enable Timer */
  __HAL_TIM_ENABLE(&TimHandle);
 8008bf0:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <UART_Emul_ReceiveFrame+0xf4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <UART_Emul_ReceiveFrame+0xf4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0201 	orr.w	r2, r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]

}
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	200006c4 	.word	0x200006c4
 8008c14:	20000764 	.word	0x20000764
 8008c18:	20000724 	.word	0x20000724

08008c1c <UART_Emul_SetConfig>:
             + DMA2 Configuration channel, Stream, Mode,...
  * @param  huart: UART Emulation handle
  * @retval None
  */
static void UART_Emul_SetConfig (UART_Emul_HandleTypeDef *huart)
{
 8008c1c:	b5b0      	push	{r4, r5, r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t bit_time = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_EMUL_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_EMUL_MODE(huart->Init.Mode));
  assert_param(IS_UART_EMUL_MODE(huart->Init.Parity));

  /* Init Bit Time */
if((HAL_RCC_GetSysClockFreq()/HAL_RCC_GetPCLK2Freq()== 1) | (HAL_RCC_GetSysClockFreq()/HAL_RCC_GetPCLK2Freq()== 2))
 8008c28:	f7fb fc1c 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	f7fb fcef 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8008c32:	4603      	mov	r3, r0
 8008c34:	fbb4 f3f3 	udiv	r3, r4, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2dc      	uxtb	r4, r3
 8008c42:	f7fb fc0f 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8008c46:	4605      	mov	r5, r0
 8008c48:	f7fb fce2 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	fbb5 f3f3 	udiv	r3, r5, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	bf0c      	ite	eq
 8008c56:	2301      	moveq	r3, #1
 8008c58:	2300      	movne	r3, #0
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	4323      	orrs	r3, r4
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d009      	beq.n	8008c78 <UART_Emul_SetConfig+0x5c>
{
  bit_time = ((uint32_t) ((HAL_RCC_GetSysClockFreq()/huart->Init.BaudRate) - 1));	
 8008c64:	f7fb fbfe 	bl	8004464 <HAL_RCC_GetSysClockFreq>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c72:	3b01      	subs	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
 8008c76:	e009      	b.n	8008c8c <UART_Emul_SetConfig+0x70>
}
else
{
  bit_time = ((uint32_t) (((HAL_RCC_GetPCLK2Freq()*2)/huart->Init.BaudRate) - 1));
 8008c78:	f7fb fcca 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	005a      	lsls	r2, r3, #1
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
  + Period = TimerPeriod 
  + Prescaler = 0
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Instance            = TIM1;
 8008c8c:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <UART_Emul_SetConfig+0xc0>)
 8008c8e:	4a14      	ldr	r2, [pc, #80]	; (8008ce0 <UART_Emul_SetConfig+0xc4>)
 8008c90:	601a      	str	r2, [r3, #0]
  TimHandle.Init.Period         = bit_time;
 8008c92:	4a12      	ldr	r2, [pc, #72]	; (8008cdc <UART_Emul_SetConfig+0xc0>)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	60d3      	str	r3, [r2, #12]
  TimHandle.Init.Prescaler      = 0;
 8008c98:	4b10      	ldr	r3, [pc, #64]	; (8008cdc <UART_Emul_SetConfig+0xc0>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision  = 0;
 8008c9e:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <UART_Emul_SetConfig+0xc0>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode    = TIM_COUNTERMODE_UP;
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <UART_Emul_SetConfig+0xc0>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	609a      	str	r2, [r3, #8]
  HAL_TIM_Base_Init(&TimHandle);
 8008caa:	480c      	ldr	r0, [pc, #48]	; (8008cdc <UART_Emul_SetConfig+0xc0>)
 8008cac:	f7fc fa18 	bl	80050e0 <HAL_TIM_Base_Init>

  if (huart->Init.Mode == UART_EMUL_MODE_TX)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d102      	bne.n	8008cbe <UART_Emul_SetConfig+0xa2>
  {
    /* Configure UART Emulation in Transmission mode */
    UART_Emul_SetConfig_DMATx();
 8008cb8:	f000 f814 	bl	8008ce4 <UART_Emul_SetConfig_DMATx>
  {
    /* Configure UART Emulation in full-duplex mode */
    UART_Emul_SetConfig_DMATx();
    UART_Emul_SetConfig_DMARx();
  }
}
 8008cbc:	e00a      	b.n	8008cd4 <UART_Emul_SetConfig+0xb8>
  else if (huart->Init.Mode == UART_EMUL_MODE_RX)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	791b      	ldrb	r3, [r3, #4]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d102      	bne.n	8008ccc <UART_Emul_SetConfig+0xb0>
    UART_Emul_SetConfig_DMARx();
 8008cc6:	f000 f867 	bl	8008d98 <UART_Emul_SetConfig_DMARx>
}
 8008cca:	e003      	b.n	8008cd4 <UART_Emul_SetConfig+0xb8>
    UART_Emul_SetConfig_DMATx();
 8008ccc:	f000 f80a 	bl	8008ce4 <UART_Emul_SetConfig_DMATx>
    UART_Emul_SetConfig_DMARx();
 8008cd0:	f000 f862 	bl	8008d98 <UART_Emul_SetConfig_DMARx>
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bdb0      	pop	{r4, r5, r7, pc}
 8008cdc:	20000724 	.word	0x20000724
 8008ce0:	40010000 	.word	0x40010000

08008ce4 <UART_Emul_SetConfig_DMATx>:
             + DMA2 Configuration channel, Stream, Mode, ...
  * @param  None
  * @retval None
  */
static void UART_Emul_SetConfig_DMATx(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* Init Idle */
  HAL_GPIO_WritePin((huart_emul->TxPortName), (huart_emul->Init.TxPinNumber), GPIO_PIN_SET);
 8008ce8:	4b27      	ldr	r3, [pc, #156]	; (8008d88 <UART_Emul_SetConfig_DMATx+0xa4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008cee:	4b26      	ldr	r3, [pc, #152]	; (8008d88 <UART_Emul_SetConfig_DMATx+0xa4>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	8a5b      	ldrh	r3, [r3, #18]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	f7fa f86a 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*##-1- Configure  DMA For UART Emulation TX #############################*/
  /* Set the parameters to be configured */
  hdma_tx.Init.Channel             = DMA_CHANNEL_6;                /* DMA_CHANNEL_6                        */
 8008cfc:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008cfe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008d02:	605a      	str	r2, [r3, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;         /* Transfer mode                        */
 8008d04:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d06:	2240      	movs	r2, #64	; 0x40
 8008d08:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;             /* Peripheral increment mode Disable    */
 8008d0a:	4b20      	ldr	r3, [pc, #128]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;              /* Memory increment mode Enable         */
 8008d10:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d16:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD ;         /* Peripheral data alignment : Word     */
 8008d18:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d1e:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD ;         /* memory data alignment :  Word        */
 8008d20:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d26:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;                   /* Normal DMA mode                      */
 8008d28:	4b18      	ldr	r3, [pc, #96]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	61da      	str	r2, [r3, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;       /* priority level : very high           */
 8008d2e:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008d34:	621a      	str	r2, [r3, #32]
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         /* FIFO mode disabled                   */
 8008d36:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;      /* FIFO threshold full configuration    */
 8008d3c:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d3e:	2203      	movs	r2, #3
 8008d40:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_tx.Init.MemBurst            = DMA_MBURST_SINGLE;            /* Memory burst                         */
 8008d42:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;            /* Peripheral burst                     */
 8008d48:	4b10      	ldr	r3, [pc, #64]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set hdma_tim instance */
  hdma_tx.Instance = DMA2_Stream1;
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d50:	4a0f      	ldr	r2, [pc, #60]	; (8008d90 <UART_Emul_SetConfig_DMATx+0xac>)
 8008d52:	601a      	str	r2, [r3, #0]
  hdma_tx.Parent = TimHandle.hdma[1];
 8008d54:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <UART_Emul_SetConfig_DMATx+0xb0>)
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	4a0c      	ldr	r2, [pc, #48]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d5a:	6393      	str	r3, [r2, #56]	; 0x38
  /* Link hdma_tim to hdma[ ] ( channel Tx or Rx) */
  __HAL_LINKDMA(&TimHandle, hdma[1] , hdma_tx);
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <UART_Emul_SetConfig_DMATx+0xb0>)
 8008d5e:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d60:	625a      	str	r2, [r3, #36]	; 0x24
 8008d62:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <UART_Emul_SetConfig_DMATx+0xa8>)
 8008d64:	4a0b      	ldr	r2, [pc, #44]	; (8008d94 <UART_Emul_SetConfig_DMATx+0xb0>)
 8008d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(TimHandle.hdma[1]);
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <UART_Emul_SetConfig_DMATx+0xb0>)
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7f9 fc45 	bl	80025fc <HAL_DMA_Init>

  /*##-2- NVIC configuration for DMA transfer complete interrupt ###########*/
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 3, 3);
 8008d72:	2203      	movs	r2, #3
 8008d74:	2103      	movs	r1, #3
 8008d76:	2039      	movs	r0, #57	; 0x39
 8008d78:	f7f9 fc09 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008d7c:	2039      	movs	r0, #57	; 0x39
 8008d7e:	f7f9 fc22 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 8008d82:	bf00      	nop
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000764 	.word	0x20000764
 8008d8c:	20000664 	.word	0x20000664
 8008d90:	40026428 	.word	0x40026428
 8008d94:	20000724 	.word	0x20000724

08008d98 <UART_Emul_SetConfig_DMARx>:
             + DMA2 Configuration channel, Stream, Mode, ...
  * @param  None
  * @retval None
  */
static void UART_Emul_SetConfig_DMARx(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
  /*##-1- Configure  DMA For UART Emulation RX #############################*/
  /* Set the parameters to be configured */
  hdma_rx.Init.Channel             = DMA_CHANNEL_6;                /* DMA_CHANNEL_6                        */
 8008d9c:	4b20      	ldr	r3, [pc, #128]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008d9e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008da2:	605a      	str	r2, [r3, #4]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;         /* Transfer mode                        */
 8008da4:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	609a      	str	r2, [r3, #8]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;             /* Peripheral increment mode Disable    */
 8008daa:	4b1d      	ldr	r3, [pc, #116]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	60da      	str	r2, [r3, #12]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;              /* Memory increment mode Enable         */
 8008db0:	4b1b      	ldr	r3, [pc, #108]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008db6:	611a      	str	r2, [r3, #16]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;          /* Peripheral data alignment :Word      */
 8008db8:	4b19      	ldr	r3, [pc, #100]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008dbe:	615a      	str	r2, [r3, #20]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;          /* memory data alignment : Word         */
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008dc6:	619a      	str	r2, [r3, #24]
  hdma_rx.Init.Mode                = DMA_NORMAL;                   /* Normal DMA mode                      */
 8008dc8:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	61da      	str	r2, [r3, #28]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;       /* priority level : very high           */
 8008dce:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008dd4:	621a      	str	r2, [r3, #32]
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         /* FIFO mode disabled                   */
 8008dd6:	4b12      	ldr	r3, [pc, #72]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;      /* FIFO threshold full configuration    */
 8008ddc:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dde:	2203      	movs	r2, #3
 8008de0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_rx.Init.MemBurst            = DMA_MBURST_SINGLE;            /* Memory burst                         */
 8008de2:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_SINGLE;            /* Peripheral burst                      */
 8008de8:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set hdma_tim instance */
  hdma_rx.Instance = DMA2_Stream2;
 8008dee:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008df0:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <UART_Emul_SetConfig_DMARx+0x8c>)
 8008df2:	601a      	str	r2, [r3, #0]

  /* Link hdma_tim to hdma[ ] ( channel Tx or Rx) */
  __HAL_LINKDMA(&TimHandle, hdma[2], hdma_rx);
 8008df4:	4b0c      	ldr	r3, [pc, #48]	; (8008e28 <UART_Emul_SetConfig_DMARx+0x90>)
 8008df6:	4a0a      	ldr	r2, [pc, #40]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008df8:	629a      	str	r2, [r3, #40]	; 0x28
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <UART_Emul_SetConfig_DMARx+0x88>)
 8008dfc:	4a0a      	ldr	r2, [pc, #40]	; (8008e28 <UART_Emul_SetConfig_DMARx+0x90>)
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize TIMx DMA handle */
  HAL_DMA_Init(TimHandle.hdma[2]);
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <UART_Emul_SetConfig_DMARx+0x90>)
 8008e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7f9 fbf9 	bl	80025fc <HAL_DMA_Init>

  /*##-2- NVIC configuration for DMA transfer complete interrupt ###########*/
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 1);
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	203a      	movs	r0, #58	; 0x3a
 8008e10:	f7f9 fbbd 	bl	800258e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008e14:	203a      	movs	r0, #58	; 0x3a
 8008e16:	f7f9 fbd6 	bl	80025c6 <HAL_NVIC_EnableIRQ>
}
 8008e1a:	bf00      	nop
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	200006c4 	.word	0x200006c4
 8008e24:	40026440 	.word	0x40026440
 8008e28:	20000724 	.word	0x20000724

08008e2c <UART_Emul_ReceiveFormatFrame>:
 * @param  pBuffer: pointer of receiver Buffer
 * @param  pFrame: pointer of Frame
 * @retval None
*/
static uint8_t UART_Emul_ReceiveFormatFrame(UART_Emul_HandleTypeDef *huart, uint32_t *pBuf, uint8_t Data)
{ 
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61fb      	str	r3, [r7, #28]
  uint32_t length = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]
  uint32_t cntparity = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	613b      	str	r3, [r7, #16]

  if (huart->Init.Parity != UART_EMUL_PARITY_NONE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	7b9b      	ldrb	r3, [r3, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <UART_Emul_ReceiveFormatFrame+0x30>
  {
    /* Get Length of frame */
    length = huart->Init.WordLength -1 ;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	7b1b      	ldrb	r3, [r3, #12]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	61bb      	str	r3, [r7, #24]
 8008e5a:	e002      	b.n	8008e62 <UART_Emul_ReceiveFormatFrame+0x36>
  }
  else
  {
    /* Get Length of frame */
    length = huart->Init.WordLength ;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	7b1b      	ldrb	r3, [r3, #12]
 8008e60:	61bb      	str	r3, [r7, #24]
  }

  if ((pBuf[huart->Init.WordLength+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	7b1b      	ldrb	r3, [r3, #12]
 8008e66:	3301      	adds	r3, #1
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	8a12      	ldrh	r2, [r2, #16]
 8008e74:	4013      	ands	r3, r2
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	8a12      	ldrh	r2, [r2, #16]
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01f      	beq.n	8008ebe <UART_Emul_ReceiveFormatFrame+0x92>
  {
    /* UART Emulation frame error occurred */
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_FE);
 8008e7e:	4b4d      	ldr	r3, [pc, #308]	; (8008fb4 <UART_Emul_ReceiveFormatFrame+0x188>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	4b4b      	ldr	r3, [pc, #300]	; (8008fb4 <UART_Emul_ReceiveFormatFrame+0x188>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f042 0204 	orr.w	r2, r2, #4
 8008e8e:	b2d2      	uxtb	r2, r2
 8008e90:	701a      	strb	r2, [r3, #0]

    huart->ErrorCode |= HAL_UART_EMUL_ERROR_FE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f043 0301 	orr.w	r3, r3, #1
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable External interrupt for next Frame */
    EXTI->IMR &= ~EXTI_EMR_MR3;
 8008ea6:	4b44      	ldr	r3, [pc, #272]	; (8008fb8 <UART_Emul_ReceiveFormatFrame+0x18c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a43      	ldr	r2, [pc, #268]	; (8008fb8 <UART_Emul_ReceiveFormatFrame+0x18c>)
 8008eac:	f023 0308 	bic.w	r3, r3, #8
 8008eb0:	6013      	str	r3, [r2, #0]

    /* Handle for UART Emulation Error */
    HAL_UART_Emul_ErrorCallback(huart);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7fe fa62 	bl	800737c <HAL_UART_Emul_ErrorCallback>

    tmp = RESET;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	e073      	b.n	8008fa6 <UART_Emul_ReceiveFormatFrame+0x17a>
  }
  else
  {
    /* format data */
    for (counter = 0; counter < length; counter++)
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	e01c      	b.n	8008efe <UART_Emul_ReceiveFormatFrame+0xd2>
    {
      if ((pBuf[counter+1]&(huart->Init.RxPinNumber)) == (huart->Init.RxPinNumber))
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4413      	add	r3, r2
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	8a12      	ldrh	r2, [r2, #16]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	8a12      	ldrh	r2, [r2, #16]
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d10c      	bne.n	8008ef8 <UART_Emul_ReceiveFormatFrame+0xcc>
      {
        Data = (0x01 << counter) | Data;
 8008ede:	2201      	movs	r2, #1
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee6:	b25a      	sxtb	r2, r3
 8008ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	b25b      	sxtb	r3, r3
 8008ef0:	71fb      	strb	r3, [r7, #7]
        cntparity ++;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]
    for (counter = 0; counter < length; counter++)
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	3301      	adds	r3, #1
 8008efc:	61fb      	str	r3, [r7, #28]
 8008efe:	69fa      	ldr	r2, [r7, #28]
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d3de      	bcc.n	8008ec4 <UART_Emul_ReceiveFormatFrame+0x98>
      }
    }
    /* Parity Bit */
    if (huart->Init.Parity == UART_EMUL_PARITY_ODD)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	7b9b      	ldrb	r3, [r3, #14]
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d11c      	bne.n	8008f48 <UART_Emul_ReceiveFormatFrame+0x11c>
    {
			
      if (((cntparity % 2) != SET) && ((pBuf[length+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber))
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d117      	bne.n	8008f48 <UART_Emul_ReceiveFormatFrame+0x11c>
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	8a12      	ldrh	r2, [r2, #16]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	8a12      	ldrh	r2, [r2, #16]
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00a      	beq.n	8008f48 <UART_Emul_ReceiveFormatFrame+0x11c>
      {
        /* Set flag PE */
        __HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_PE);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	f043 0308 	orr.w	r3, r3, #8
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	701a      	strb	r2, [r3, #0]

        HAL_UART_Emul_ErrorCallback(huart);
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7fe fa1a 	bl	800737c <HAL_UART_Emul_ErrorCallback>
      }
    }
    if (huart->Init.Parity == UART_EMUL_PARITY_EVEN)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7b9b      	ldrb	r3, [r3, #14]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d126      	bne.n	8008f9e <UART_Emul_ReceiveFormatFrame+0x172>
    {

      if (((cntparity % 2) != RESET) && ((pBuf[length+1]&huart->Init.RxPinNumber) != huart->Init.RxPinNumber))
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d021      	beq.n	8008f9e <UART_Emul_ReceiveFormatFrame+0x172>
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	8a12      	ldrh	r2, [r2, #16]
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	8a12      	ldrh	r2, [r2, #16]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d014      	beq.n	8008f9e <UART_Emul_ReceiveFormatFrame+0x172>
      {
        /* UART Emulation parity error occurred */
        __HAL_UART_EMUL_SET_FLAG(huart, UART_EMUL_FLAG_PE);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	f043 0308 	orr.w	r3, r3, #8
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	701a      	strb	r2, [r3, #0]

        huart->ErrorCode |= HAL_UART_EMUL_ERROR_PE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f043 0304 	orr.w	r3, r3, #4
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        HAL_UART_Emul_ErrorCallback(huart);
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f7fe f9ef 	bl	800737c <HAL_UART_Emul_ErrorCallback>
      }
    }

    /* Reset counter parity */
    cntparity = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]

    tmp = Data;
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	617b      	str	r3, [r7, #20]
  }

  return tmp;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	b2db      	uxtb	r3, r3
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000764 	.word	0x20000764
 8008fb8:	40013c00 	.word	0x40013c00

08008fbc <UART_Emul_TransmitFormatFrame>:
  * @param  UART Emulation Handle
  * @param  pdata pinteur in data
  * @retval None
  */
static void UART_Emul_TransmitFormatFrame(UART_Emul_HandleTypeDef *huart , uint8_t Data, uint32_t *pBuffer_Tx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	72fb      	strb	r3, [r7, #11]
uint32_t counter = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	61fb      	str	r3, [r7, #28]
uint32_t bitmask = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	617b      	str	r3, [r7, #20]
uint32_t length = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	613b      	str	r3, [r7, #16]
uint32_t cntparity = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	61bb      	str	r3, [r7, #24]


  length = huart->Init.WordLength;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	7b1b      	ldrb	r3, [r3, #12]
 8008fde:	613b      	str	r3, [r7, #16]

  /* Get the Pin Number */
  bitmask = (uint32_t)huart->Init.TxPinNumber;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8a5b      	ldrh	r3, [r3, #18]
 8008fe4:	617b      	str	r3, [r7, #20]

/* with no parity */
if(huart->Init.Parity == 0x00)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	7b9b      	ldrb	r3, [r3, #14]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d122      	bne.n	8009034 <UART_Emul_TransmitFormatFrame+0x78>
{		
  for (counter = 0; counter < length; counter++)
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	e01a      	b.n	800902a <UART_Emul_TransmitFormatFrame+0x6e>
  {
    if (((Data >> counter)&BitMask) != 0)
 8008ff4:	7afa      	ldrb	r2, [r7, #11]
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	fa42 f303 	asr.w	r3, r2, r3
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	d007      	beq.n	8009014 <UART_Emul_TransmitFormatFrame+0x58>
    {
      pBuffer_Tx[counter+1] = bitmask;
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	3301      	adds	r3, #1
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	e007      	b.n	8009024 <UART_Emul_TransmitFormatFrame+0x68>
    }
    else
    {
      pBuffer_Tx[counter+1] = (bitmask << 16);
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	3301      	adds	r3, #1
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	697a      	ldr	r2, [r7, #20]
 8009020:	0412      	lsls	r2, r2, #16
 8009022:	601a      	str	r2, [r3, #0]
  for (counter = 0; counter < length; counter++)
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	3301      	adds	r3, #1
 8009028:	61fb      	str	r3, [r7, #28]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	429a      	cmp	r2, r3
 8009030:	d3e0      	bcc.n	8008ff4 <UART_Emul_TransmitFormatFrame+0x38>
 8009032:	e025      	b.n	8009080 <UART_Emul_TransmitFormatFrame+0xc4>
  }
}
/* with parity */
else
{
  for (counter = 0; counter < length-1; counter++)
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]
 8009038:	e01d      	b.n	8009076 <UART_Emul_TransmitFormatFrame+0xba>
  {
    if (((Data >> counter)&BitMask) != 0)
 800903a:	7afa      	ldrb	r2, [r7, #11]
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	fa42 f303 	asr.w	r3, r2, r3
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_Emul_TransmitFormatFrame+0xa4>
    {
      pBuffer_Tx[counter+1] = bitmask;
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	3301      	adds	r3, #1
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	601a      	str	r2, [r3, #0]
      cntparity ++;
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	3301      	adds	r3, #1
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	e007      	b.n	8009070 <UART_Emul_TransmitFormatFrame+0xb4>
    }
    else
    {
      pBuffer_Tx[counter+1] = (bitmask << 16);
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	3301      	adds	r3, #1
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	0412      	lsls	r2, r2, #16
 800906e:	601a      	str	r2, [r3, #0]
  for (counter = 0; counter < length-1; counter++)
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	3301      	adds	r3, #1
 8009074:	61fb      	str	r3, [r7, #28]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3b01      	subs	r3, #1
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	429a      	cmp	r2, r3
 800907e:	d3dc      	bcc.n	800903a <UART_Emul_TransmitFormatFrame+0x7e>
    }
  }	
}	
	
  switch  (huart->Init.Parity)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	7b9b      	ldrb	r3, [r3, #14]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d015      	beq.n	80090b4 <UART_Emul_TransmitFormatFrame+0xf8>
 8009088:	2b02      	cmp	r3, #2
 800908a:	d127      	bne.n	80090dc <UART_Emul_TransmitFormatFrame+0x120>
  {
    case UART_EMUL_PARITY_ODD:
    {
      /* Initialize Parity Bit */
      if ((cntparity % 2) != SET)
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <UART_Emul_TransmitFormatFrame+0xe8>
      {
        pBuffer_Tx[length] = bitmask;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	601a      	str	r2, [r3, #0]
      {
        pBuffer_Tx[length] = (bitmask << 16);
      }

    }
    break;
 80090a2:	e01c      	b.n	80090de <UART_Emul_TransmitFormatFrame+0x122>
        pBuffer_Tx[length] = (bitmask << 16);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	0412      	lsls	r2, r2, #16
 80090b0:	601a      	str	r2, [r3, #0]
    break;
 80090b2:	e014      	b.n	80090de <UART_Emul_TransmitFormatFrame+0x122>
    case UART_EMUL_PARITY_EVEN:
    {
      /* Initialize Parity Bit */
      if ((cntparity % 2) != SET)
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d107      	bne.n	80090ce <UART_Emul_TransmitFormatFrame+0x112>
      {
        pBuffer_Tx[length] = (bitmask << 16);
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	4413      	add	r3, r2
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	0412      	lsls	r2, r2, #16
 80090ca:	601a      	str	r2, [r3, #0]
      else
      {
        pBuffer_Tx[length] = bitmask;
      }
    }
    break;
 80090cc:	e007      	b.n	80090de <UART_Emul_TransmitFormatFrame+0x122>
        pBuffer_Tx[length] = bitmask;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	601a      	str	r2, [r3, #0]
    break;
 80090da:	e000      	b.n	80090de <UART_Emul_TransmitFormatFrame+0x122>
    default:
      break;
 80090dc:	bf00      	nop
  }
  /* Initialize Bit Start */
  pBuffer_Tx[0] = (bitmask << 16);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	041a      	lsls	r2, r3, #16
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]

  if (huart->Init.StopBits == UART_EMUL_STOPBITS_1)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	7b5b      	ldrb	r3, [r3, #13]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d107      	bne.n	80090fe <UART_Emul_TransmitFormatFrame+0x142>
  {
    /* Initialize Bit Stop  */
    pBuffer_Tx[length+1] = bitmask;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	3301      	adds	r3, #1
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	e00d      	b.n	800911a <UART_Emul_TransmitFormatFrame+0x15e>
  }
  else
  {
    /* Initialize Bit Stop  */
    pBuffer_Tx[length+1] = bitmask;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3301      	adds	r3, #1
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	601a      	str	r2, [r3, #0]
    pBuffer_Tx[length+2] = bitmask;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3302      	adds	r3, #2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	4413      	add	r3, r2
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	601a      	str	r2, [r3, #0]
  }
  /* Reset counter parity */
  cntparity = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	61bb      	str	r3, [r7, #24]
}
 800911e:	bf00      	nop
 8009120:	3724      	adds	r7, #36	; 0x24
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <UART_Emul_TransmitFrame>:
  * @param  huart: UART Emulation handle
  * @param  pData: Frame to be sent
  * @retval None
  */
static void UART_Emul_TransmitFrame(UART_Emul_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
  uint32_t tmp_ds = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_size = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]

	
  if ((huart_emul->TxXferCount % 2 ) != 0)
 8009140:	4b2a      	ldr	r3, [pc, #168]	; (80091ec <UART_Emul_TransmitFrame+0xc0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	8b5b      	ldrh	r3, [r3, #26]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	b29b      	uxth	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <UART_Emul_TransmitFrame+0x2a>
  {
    tmp_sr = (uint32_t)pFirstBuffer_Tx;
 8009150:	4b27      	ldr	r3, [pc, #156]	; (80091f0 <UART_Emul_TransmitFrame+0xc4>)
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e001      	b.n	800915a <UART_Emul_TransmitFrame+0x2e>
  }
  else
  {
    tmp_sr = (uint32_t)pSecondBuffer_Tx;
 8009156:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <UART_Emul_TransmitFrame+0xc8>)
 8009158:	617b      	str	r3, [r7, #20]
  }

	tmp_ds = (uint32_t) & ((huart->TxPortName)->BSRR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	3318      	adds	r3, #24
 8009160:	613b      	str	r3, [r7, #16]
	
  tmp_size = __HAL_UART_EMUL_FRAME_LENGTH(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7b1b      	ldrb	r3, [r3, #12]
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	7b5b      	ldrb	r3, [r3, #13]
 800916c:	b29b      	uxth	r3, r3
 800916e:	4413      	add	r3, r2
 8009170:	b29b      	uxth	r3, r3
 8009172:	3301      	adds	r3, #1
 8009174:	b29b      	uxth	r3, r3
 8009176:	60fb      	str	r3, [r7, #12]

  /* Configure DMA Stream data length */
  hdma_tx.Instance->NDTR = tmp_size;
 8009178:	4b1f      	ldr	r3, [pc, #124]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Stream destination address */
  hdma_tx.Instance->PAR = tmp_ds;
 8009180:	4b1d      	ldr	r3, [pc, #116]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	609a      	str	r2, [r3, #8]

  /* Configure DMA Stream source address */
  hdma_tx.Instance->M0AR = tmp_sr;
 8009188:	4b1b      	ldr	r3, [pc, #108]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	60da      	str	r2, [r3, #12]

  /* Enable the transfer complete interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_tx, DMA_IT_TC);
 8009190:	4b19      	ldr	r3, [pc, #100]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0210 	orr.w	r2, r2, #16
 800919e:	601a      	str	r2, [r3, #0]

  /* Enable the transfer Error interrupt */
  __HAL_DMA_ENABLE_IT(&hdma_tx, DMA_IT_TE);
 80091a0:	4b15      	ldr	r3, [pc, #84]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0204 	orr.w	r2, r2, #4
 80091ae:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA_ENABLE(&hdma_tx);
 80091b0:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	4b10      	ldr	r3, [pc, #64]	; (80091f8 <UART_Emul_TransmitFrame+0xcc>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(&TimHandle, TIM_DMA_CC1);
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <UART_Emul_TransmitFrame+0xd0>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <UART_Emul_TransmitFrame+0xd0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(&TimHandle);
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <UART_Emul_TransmitFrame+0xd0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4b09      	ldr	r3, [pc, #36]	; (80091fc <UART_Emul_TransmitFrame+0xd0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	601a      	str	r2, [r3, #0]

}
 80091e0:	bf00      	nop
 80091e2:	371c      	adds	r7, #28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	20000764 	.word	0x20000764
 80091f0:	200007c8 	.word	0x200007c8
 80091f4:	200007f8 	.word	0x200007f8
 80091f8:	20000664 	.word	0x20000664
 80091fc:	20000724 	.word	0x20000724

08009200 <UART_Emul_DMATransmitCplt>:
  * @brief  This function is executed in case of Transfer Complete of a Frame.
  * @param  None
  * @retval None
  */
static void UART_Emul_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  uint32_t tmpbuffer = 0;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]

  /* Incremente Counter of frame */
  huart_emul->TxXferCount++;
 800920c:	4b3b      	ldr	r3, [pc, #236]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	8b5a      	ldrh	r2, [r3, #26]
 8009212:	3201      	adds	r2, #1
 8009214:	b292      	uxth	r2, r2
 8009216:	835a      	strh	r2, [r3, #26]

  if (huart_emul->TxXferCount <= huart_emul->TxXferSize)
 8009218:	4b38      	ldr	r3, [pc, #224]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	8b5a      	ldrh	r2, [r3, #26]
 800921e:	4b37      	ldr	r3, [pc, #220]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	8b1b      	ldrh	r3, [r3, #24]
 8009224:	429a      	cmp	r2, r3
 8009226:	d820      	bhi.n	800926a <UART_Emul_DMATransmitCplt+0x6a>
  { 

    /* Call UART Emulation Transmit frame for next Frame */
    UART_Emul_TransmitFrame(huart_emul);
 8009228:	4b34      	ldr	r3, [pc, #208]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff ff7d 	bl	800912c <UART_Emul_TransmitFrame>

    if ((huart_emul->TxXferCount % 2 ) != 0)
 8009232:	4b32      	ldr	r3, [pc, #200]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	8b5b      	ldrh	r3, [r3, #26]
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d002      	beq.n	8009248 <UART_Emul_DMATransmitCplt+0x48>
    {
      tmpbuffer = (uint32_t)pSecondBuffer_Tx;
 8009242:	4b2f      	ldr	r3, [pc, #188]	; (8009300 <UART_Emul_DMATransmitCplt+0x100>)
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e001      	b.n	800924c <UART_Emul_DMATransmitCplt+0x4c>
    }
    else
    {
      tmpbuffer = (uint32_t)pFirstBuffer_Tx;
 8009248:	4b2e      	ldr	r3, [pc, #184]	; (8009304 <UART_Emul_DMATransmitCplt+0x104>)
 800924a:	60fb      	str	r3, [r7, #12]
    }
    /* Format second Data to be sent */
    UART_Emul_TransmitFormatFrame(huart_emul, *(huart_emul->pTxBuffPtr + huart_emul->TxXferCount), (uint32_t*)tmpbuffer);
 800924c:	4b2b      	ldr	r3, [pc, #172]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	4b2a      	ldr	r3, [pc, #168]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	4a29      	ldr	r2, [pc, #164]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 8009258:	6812      	ldr	r2, [r2, #0]
 800925a:	8b52      	ldrh	r2, [r2, #26]
 800925c:	4413      	add	r3, r2
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4619      	mov	r1, r3
 8009264:	f7ff feaa 	bl	8008fbc <UART_Emul_TransmitFormatFrame>
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
    }
    /* Handle for UART Emulation Transfer Complete */
    HAL_UART_Emul_TxCpltCallback(huart_emul);
  }
}
 8009268:	e043      	b.n	80092f2 <UART_Emul_DMATransmitCplt+0xf2>
    __HAL_DMA_DISABLE_IT(TimHandle.hdma[TIM_DMA_ID_CC1], DMA_IT_TC);
 800926a:	4b27      	ldr	r3, [pc, #156]	; (8009308 <UART_Emul_DMATransmitCplt+0x108>)
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4b25      	ldr	r3, [pc, #148]	; (8009308 <UART_Emul_DMATransmitCplt+0x108>)
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f022 0210 	bic.w	r2, r2, #16
 800927c:	601a      	str	r2, [r3, #0]
    __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_TC);
 800927e:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f042 0202 	orr.w	r2, r2, #2
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]
    __HAL_DMA_DISABLE(&hdma_tx);
 8009292:	4b1e      	ldr	r3, [pc, #120]	; (800930c <UART_Emul_DMATransmitCplt+0x10c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4b1c      	ldr	r3, [pc, #112]	; (800930c <UART_Emul_DMATransmitCplt+0x10c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0201 	bic.w	r2, r2, #1
 80092a0:	601a      	str	r2, [r3, #0]
    __HAL_TIM_DISABLE_DMA(&TimHandle, TIM_DMA_CC1);
 80092a2:	4b19      	ldr	r3, [pc, #100]	; (8009308 <UART_Emul_DMATransmitCplt+0x108>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	4b17      	ldr	r3, [pc, #92]	; (8009308 <UART_Emul_DMATransmitCplt+0x108>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80092b0:	60da      	str	r2, [r3, #12]
    huart_emul->TxXferCount = 0;
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2200      	movs	r2, #0
 80092b8:	835a      	strh	r2, [r3, #26]
    huart_emul->ErrorCode = HAL_UART_EMUL_ERROR_NONE;
 80092ba:	4b10      	ldr	r3, [pc, #64]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (huart_emul->State == HAL_UART_EMUL_STATE_BUSY_TX_RX)
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d105      	bne.n	80092de <UART_Emul_DMATransmitCplt+0xde>
      huart_emul->State = HAL_UART_EMUL_STATE_BUSY_RX;
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2208      	movs	r2, #8
 80092d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80092dc:	e004      	b.n	80092e8 <UART_Emul_DMATransmitCplt+0xe8>
      huart_emul->State = HAL_UART_EMUL_STATE_READY;
 80092de:	4b07      	ldr	r3, [pc, #28]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    HAL_UART_Emul_TxCpltCallback(huart_emul);
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <UART_Emul_DMATransmitCplt+0xfc>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f835 	bl	800935c <HAL_UART_Emul_TxCpltCallback>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000764 	.word	0x20000764
 8009300:	200007f8 	.word	0x200007f8
 8009304:	200007c8 	.word	0x200007c8
 8009308:	20000724 	.word	0x20000724
 800930c:	20000664 	.word	0x20000664

08009310 <UART_Emul_DMAError>:
  * @brief  This function is executed in case of error of Transfer occurrence.
  * @param  hdma : DMA Handle
  * @retval None
  */
static void UART_Emul_DMAError(DMA_HandleTypeDef *hdma)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* UART Emulation frame error occurred */
  __HAL_UART_EMUL_SET_FLAG(huart_emul, UART_EMUL_FLAG_FE);
 8009318:	4b0f      	ldr	r3, [pc, #60]	; (8009358 <UART_Emul_DMAError+0x48>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b2da      	uxtb	r2, r3
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <UART_Emul_DMAError+0x48>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0204 	orr.w	r2, r2, #4
 8009328:	b2d2      	uxtb	r2, r2
 800932a:	701a      	strb	r2, [r3, #0]

  huart_emul->ErrorCode |= HAL_UART_EMUL_ERROR_FE;
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <UART_Emul_DMAError+0x48>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009334:	b2da      	uxtb	r2, r3
 8009336:	4b08      	ldr	r3, [pc, #32]	; (8009358 <UART_Emul_DMAError+0x48>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0201 	orr.w	r2, r2, #1
 800933e:	b2d2      	uxtb	r2, r2
 8009340:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  HAL_UART_Emul_ErrorCallback(huart_emul);
 8009344:	4b04      	ldr	r3, [pc, #16]	; (8009358 <UART_Emul_DMAError+0x48>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe f817 	bl	800737c <HAL_UART_Emul_ErrorCallback>
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000764 	.word	0x20000764

0800935c <HAL_UART_Emul_TxCpltCallback>:
  * @brief  Initializes the UART Emulation Transfer Complete.
  * @param  huart: UART Emulation Handle
  * @retval None
  */
__weak void HAL_UART_Emul_TxCpltCallback(UART_Emul_HandleTypeDef *huart)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_UART_Emul_TransferComplete could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <Quectel_Init>:
static void L76_Date_Parse(char* sRmcDate, L76* pL76Handle);
extern void Error_Handler(void);


uint8_t Quectel_Init(void)
{
 8009370:	b5b0      	push	{r4, r5, r7, lr}
 8009372:	b0b2      	sub	sp, #200	; 0xc8
 8009374:	af00      	add	r7, sp, #0

	char cGpsOnly[100] = "$PMTK353,1,0,0,0,0*2B\r\n";
 8009376:	4b21      	ldr	r3, [pc, #132]	; (80093fc <Quectel_Init+0x8c>)
 8009378:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800937c:	461d      	mov	r5, r3
 800937e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009382:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009386:	e884 0003 	stmia.w	r4, {r0, r1}
 800938a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800938e:	224c      	movs	r2, #76	; 0x4c
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fe48 	bl	800a028 <memset>

	char cGps10HzFix[100] = "$PMTK220,100*1F\r\n";
 8009398:	4b19      	ldr	r3, [pc, #100]	; (8009400 <Quectel_Init+0x90>)
 800939a:	463c      	mov	r4, r7
 800939c:	461d      	mov	r5, r3
 800939e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093a2:	682b      	ldr	r3, [r5, #0]
 80093a4:	8023      	strh	r3, [r4, #0]
 80093a6:	f107 0312 	add.w	r3, r7, #18
 80093aa:	2252      	movs	r2, #82	; 0x52
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fe3a 	bl	800a028 <memset>

	HAL_UART_Transmit(&huart2, (uint8_t*)cGps10HzFix, strlen(cGps10HzFix), HAL_MAX_DELAY);
 80093b4:	463b      	mov	r3, r7
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7f6 ff12 	bl	80001e0 <strlen>
 80093bc:	4603      	mov	r3, r0
 80093be:	b29a      	uxth	r2, r3
 80093c0:	4639      	mov	r1, r7
 80093c2:	f04f 33ff 	mov.w	r3, #4294967295
 80093c6:	480f      	ldr	r0, [pc, #60]	; (8009404 <Quectel_Init+0x94>)
 80093c8:	f7fc f975 	bl	80056b6 <HAL_UART_Transmit>

	if(HAL_UART_Transmit(&huart2, (uint8_t*)cGpsOnly, strlen(cGpsOnly), HAL_MAX_DELAY) != HAL_OK)
 80093cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7f6 ff05 	bl	80001e0 <strlen>
 80093d6:	4603      	mov	r3, r0
 80093d8:	b29a      	uxth	r2, r3
 80093da:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80093de:	f04f 33ff 	mov.w	r3, #4294967295
 80093e2:	4808      	ldr	r0, [pc, #32]	; (8009404 <Quectel_Init+0x94>)
 80093e4:	f7fc f967 	bl	80056b6 <HAL_UART_Transmit>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <Quectel_Init+0x82>
	{
		return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <Quectel_Init+0x84>
	}
	else
	{
		return HAL_OK;
 80093f2:	2300      	movs	r3, #0
	}
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	37c8      	adds	r7, #200	; 0xc8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bdb0      	pop	{r4, r5, r7, pc}
 80093fc:	0800ed88 	.word	0x0800ed88
 8009400:	0800edec 	.word	0x0800edec
 8009404:	20000d98 	.word	0x20000d98

08009408 <gps_read>:

void gps_read(char*	sRxBuffer,
			  L76* pL76,
			  char *seGNGGA,
			  char* seGNRMC)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b0b2      	sub	sp, #200	; 0xc8
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
	/* Check for NULL */
	if ((sRxBuffer == NULL) || (pL76 == NULL) || (seGNGGA == NULL) || (seGNRMC == NULL))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d008      	beq.n	800942e <gps_read+0x26>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <gps_read+0x26>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <gps_read+0x26>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <gps_read+0x2a>
	{
		Error_Handler();
 800942e:	f7f8 fbed 	bl	8001c0c <Error_Handler>
	}

	uint8_t u8IsFix = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	uint8_t u8IndexOfComma[20] = {0};
 8009438:	2300      	movs	r3, #0
 800943a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800943e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	609a      	str	r2, [r3, #8]
 800944a:	60da      	str	r2, [r3, #12]
	uint8_t u8IndexOfComma2[20] = {0};
 800944c:	2300      	movs	r3, #0
 800944e:	673b      	str	r3, [r7, #112]	; 0x70
 8009450:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009454:	2200      	movs	r2, #0
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	605a      	str	r2, [r3, #4]
 800945a:	609a      	str	r2, [r3, #8]
 800945c:	60da      	str	r2, [r3, #12]
	char sUtcTime[15] = {0};
 800945e:	2300      	movs	r3, #0
 8009460:	663b      	str	r3, [r7, #96]	; 0x60
 8009462:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	605a      	str	r2, [r3, #4]
 800946c:	f8c3 2007 	str.w	r2, [r3, #7]
	char sDate[10]	  = {0};
 8009470:	2300      	movs	r3, #0
 8009472:	657b      	str	r3, [r7, #84]	; 0x54
 8009474:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	809a      	strh	r2, [r3, #4]

	memset(pL76, 0, sizeof(L76));
 800947e:	2218      	movs	r2, #24
 8009480:	2100      	movs	r1, #0
 8009482:	68b8      	ldr	r0, [r7, #8]
 8009484:	f000 fdd0 	bl	800a028 <memset>

	/* 2 strings to split the GNGAA and GNRMC from the NMEA sent from the Quectel L76 LB */
	char *sSubGPS  = strstr(sRxBuffer, "$GNGGA");
 8009488:	49c8      	ldr	r1, [pc, #800]	; (80097ac <gps_read+0x3a4>)
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f001 faec 	bl	800aa68 <strstr>
 8009490:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	char* sSubGPS2 = strstr(sRxBuffer, "$GNRMC");
 8009494:	49c6      	ldr	r1, [pc, #792]	; (80097b0 <gps_read+0x3a8>)
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f001 fae6 	bl	800aa68 <strstr>
 800949c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	/* Split the GNRMC from the string above */
	for (int i = 0; i < strlen(sSubGPS2); i++)
 80094a0:	2300      	movs	r3, #0
 80094a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094a6:	e02d      	b.n	8009504 <gps_read+0xfc>
	{
		if (sSubGPS2[i] == '\r')
 80094a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80094b0:	4413      	add	r3, r2
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b0d      	cmp	r3, #13
 80094b6:	d120      	bne.n	80094fa <gps_read+0xf2>
		{
			for (int j = 0; j < i; j++)
 80094b8:	2300      	movs	r3, #0
 80094ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094be:	e00f      	b.n	80094e0 <gps_read+0xd8>
			{
				seGNRMC[j] = sSubGPS2[j];
 80094c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80094c8:	441a      	add	r2, r3
 80094ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094ce:	6839      	ldr	r1, [r7, #0]
 80094d0:	440b      	add	r3, r1
 80094d2:	7812      	ldrb	r2, [r2, #0]
 80094d4:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < i; j++)
 80094d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094da:	3301      	adds	r3, #1
 80094dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80094e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094e8:	429a      	cmp	r2, r3
 80094ea:	dbe9      	blt.n	80094c0 <gps_read+0xb8>
			}
			seGNRMC[i] = '\0';
 80094ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	4413      	add	r3, r2
 80094f4:	2200      	movs	r2, #0
 80094f6:	701a      	strb	r2, [r3, #0]
			break;
 80094f8:	e00d      	b.n	8009516 <gps_read+0x10e>
	for (int i = 0; i < strlen(sSubGPS2); i++)
 80094fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80094fe:	3301      	adds	r3, #1
 8009500:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009504:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8009508:	f7f6 fe6a 	bl	80001e0 <strlen>
 800950c:	4602      	mov	r2, r0
 800950e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009512:	429a      	cmp	r2, r3
 8009514:	d8c8      	bhi.n	80094a8 <gps_read+0xa0>
		}
	}

	/* Test */
	printf("the string of the subGNRMC: %s\r\n", seGNRMC);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	48a6      	ldr	r0, [pc, #664]	; (80097b4 <gps_read+0x3ac>)
 800951a:	f001 f9f7 	bl	800a90c <iprintf>

	/* Split the GNGGA from the string above */
	for (int i = 0; i < strlen(sSubGPS); i++)
 800951e:	2300      	movs	r3, #0
 8009520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009524:	e02d      	b.n	8009582 <gps_read+0x17a>
	{
		if (sSubGPS[i] == '\r')
 8009526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800952a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800952e:	4413      	add	r3, r2
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	2b0d      	cmp	r3, #13
 8009534:	d120      	bne.n	8009578 <gps_read+0x170>
		{
			for (int j = 0; j < i; j++)
 8009536:	2300      	movs	r3, #0
 8009538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800953c:	e00f      	b.n	800955e <gps_read+0x156>
			{
				seGNGGA[j] = sSubGPS[j];
 800953e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009542:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009546:	441a      	add	r2, r3
 8009548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	440b      	add	r3, r1
 8009550:	7812      	ldrb	r2, [r2, #0]
 8009552:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < i; j++)
 8009554:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009558:	3301      	adds	r3, #1
 800955a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800955e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009566:	429a      	cmp	r2, r3
 8009568:	dbe9      	blt.n	800953e <gps_read+0x136>
			}
			seGNGGA[i] = '\0';
 800956a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4413      	add	r3, r2
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
			break;
 8009576:	e00d      	b.n	8009594 <gps_read+0x18c>
	for (int i = 0; i < strlen(sSubGPS); i++)
 8009578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800957c:	3301      	adds	r3, #1
 800957e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009582:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009586:	f7f6 fe2b 	bl	80001e0 <strlen>
 800958a:	4602      	mov	r2, r0
 800958c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009590:	429a      	cmp	r2, r3
 8009592:	d8c8      	bhi.n	8009526 <gps_read+0x11e>
		}
	}

	/* Test */
	printf("the string of the subGNGGA: %s\r\n", seGNGGA);
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	4888      	ldr	r0, [pc, #544]	; (80097b8 <gps_read+0x3b0>)
 8009598:	f001 f9b8 	bl	800a90c <iprintf>

	int j = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNGGA string */
	for (int i = 0; i < strlen(seGNGGA); i++)
 80095a2:	2300      	movs	r3, #0
 80095a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095a8:	e018      	b.n	80095dc <gps_read+0x1d4>
	{
		if (seGNGGA[i] == ',')
 80095aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4413      	add	r3, r2
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b2c      	cmp	r3, #44	; 0x2c
 80095b6:	d10c      	bne.n	80095d2 <gps_read+0x1ca>
		{
			u8IndexOfComma[j++] = i;
 80095b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80095c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80095c6:	b2d2      	uxtb	r2, r2
 80095c8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80095cc:	440b      	add	r3, r1
 80095ce:	f803 2c44 	strb.w	r2, [r3, #-68]
	for (int i = 0; i < strlen(seGNGGA); i++)
 80095d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095d6:	3301      	adds	r3, #1
 80095d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7f6 fdff 	bl	80001e0 <strlen>
 80095e2:	4602      	mov	r2, r0
 80095e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d8de      	bhi.n	80095aa <gps_read+0x1a2>
		}
	}

	j = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNRMC string */
	for (int i = 0; i < strlen(seGNRMC); i++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095f8:	e018      	b.n	800962c <gps_read+0x224>
	{
		if (seGNRMC[i] == ',')
 80095fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4413      	add	r3, r2
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b2c      	cmp	r3, #44	; 0x2c
 8009606:	d10c      	bne.n	8009622 <gps_read+0x21a>
		{
			u8IndexOfComma2[j++] = i;
 8009608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8009612:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800961c:	440b      	add	r3, r1
 800961e:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (int i = 0; i < strlen(seGNRMC); i++)
 8009622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009626:	3301      	adds	r3, #1
 8009628:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800962c:	6838      	ldr	r0, [r7, #0]
 800962e:	f7f6 fdd7 	bl	80001e0 <strlen>
 8009632:	4602      	mov	r2, r0
 8009634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009638:	429a      	cmp	r2, r3
 800963a:	d8de      	bhi.n	80095fa <gps_read+0x1f2>
		}
	}

	/* Check whether the GPS is fix or not on GNGGA */
	if (seGNGGA[u8IndexOfComma[5] + 1] == '0' || strlen(seGNGGA) == 0 || seGNGGA[u8IndexOfComma[5]+1] != '1')
 800963c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8009640:	3301      	adds	r3, #1
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b30      	cmp	r3, #48	; 0x30
 800964a:	d00b      	beq.n	8009664 <gps_read+0x25c>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <gps_read+0x25c>
 8009654:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8009658:	3301      	adds	r3, #1
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b31      	cmp	r3, #49	; 0x31
 8009662:	d00e      	beq.n	8009682 <gps_read+0x27a>
	{
		if (seGNGGA[u8IndexOfComma[5] + 1] == '0')
 8009664:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8009668:	3301      	adds	r3, #1
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b30      	cmp	r3, #48	; 0x30
 8009672:	d102      	bne.n	800967a <gps_read+0x272>
		{
			printf("GPS NOT FIX!!!\r\n");
 8009674:	4851      	ldr	r0, [pc, #324]	; (80097bc <gps_read+0x3b4>)
 8009676:	f001 f9cf 	bl	800aa18 <puts>
		}
		u8IsFix = GPS_NOT_FIX;
 800967a:	2300      	movs	r3, #0
 800967c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8009680:	e002      	b.n	8009688 <gps_read+0x280>
	}else
	{
		u8IsFix = GPS_FIX;
 8009682:	2301      	movs	r3, #1
 8009684:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	/* If GPS is fix, Get the DATA */
	if (u8IsFix == GPS_NOT_FIX)
 8009688:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800968c:	2b00      	cmp	r3, #0
 800968e:	d108      	bne.n	80096a2 <gps_read+0x29a>
	{
		/* Information of NMEA */
		memset(pL76, 0, sizeof(*pL76));
 8009690:	2218      	movs	r2, #24
 8009692:	2100      	movs	r1, #0
 8009694:	68b8      	ldr	r0, [r7, #8]
 8009696:	f000 fcc7 	bl	800a028 <memset>
		printf("GPS NOT AVAILABLE\r\n");
 800969a:	4849      	ldr	r0, [pc, #292]	; (80097c0 <gps_read+0x3b8>)
 800969c:	f001 f9bc 	bl	800aa18 <puts>
		}

		L76_Long_Parse(sLong, pL76, u8E_W);

	}
}
 80096a0:	e194      	b.n	80099cc <gps_read+0x5c4>
		char sLat[20] = {0};
 80096a2:	2300      	movs	r3, #0
 80096a4:	643b      	str	r3, [r7, #64]	; 0x40
 80096a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	605a      	str	r2, [r3, #4]
 80096b0:	609a      	str	r2, [r3, #8]
 80096b2:	60da      	str	r2, [r3, #12]
		char sN_S[3] = {0};
 80096b4:	4b43      	ldr	r3, [pc, #268]	; (80097c4 <gps_read+0x3bc>)
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80096ba:	2300      	movs	r3, #0
 80096bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		j = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 80096c6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80096ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80096ce:	e016      	b.n	80096fe <gps_read+0x2f6>
			sUtcTime[j] = seGNGGA[i+1];
 80096d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80096d4:	3301      	adds	r3, #1
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	4413      	add	r3, r2
 80096da:	7819      	ldrb	r1, [r3, #0]
 80096dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80096e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80096e4:	4413      	add	r3, r2
 80096e6:	460a      	mov	r2, r1
 80096e8:	701a      	strb	r2, [r3, #0]
			j++;
 80096ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80096ee:	3301      	adds	r3, #1
 80096f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 80096f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80096f8:	3301      	adds	r3, #1
 80096fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80096fe:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8009702:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8009706:	429a      	cmp	r2, r3
 8009708:	d3e2      	bcc.n	80096d0 <gps_read+0x2c8>
		sUtcTime[j-1] = '\0';
 800970a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800970e:	3b01      	subs	r3, #1
 8009710:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009714:	4413      	add	r3, r2
 8009716:	2200      	movs	r2, #0
 8009718:	f803 2c68 	strb.w	r2, [r3, #-104]
		L76_Time_Parse(sUtcTime, pL76);
 800971c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009720:	68b9      	ldr	r1, [r7, #8]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 facc 	bl	8009cc0 <L76_Time_Parse>
		j = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma2[9]; i++)
 800972e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8009732:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8009736:	e016      	b.n	8009766 <gps_read+0x35e>
			sDate[j] = seGNRMC[i+1];
 8009738:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800973c:	3301      	adds	r3, #1
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	4413      	add	r3, r2
 8009742:	7819      	ldrb	r1, [r3, #0]
 8009744:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009748:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800974c:	4413      	add	r3, r2
 800974e:	460a      	mov	r2, r1
 8009750:	701a      	strb	r2, [r3, #0]
			j++;
 8009752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009756:	3301      	adds	r3, #1
 8009758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma2[9]; i++)
 800975c:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8009760:	3301      	adds	r3, #1
 8009762:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 8009766:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800976a:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 800976e:	429a      	cmp	r2, r3
 8009770:	d3e2      	bcc.n	8009738 <gps_read+0x330>
		sDate[j-1] = '\0';
 8009772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009776:	3b01      	subs	r3, #1
 8009778:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800977c:	4413      	add	r3, r2
 800977e:	2200      	movs	r2, #0
 8009780:	f803 2c74 	strb.w	r2, [r3, #-116]
		printf("DATE string: %s\r\n",sDate);
 8009784:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009788:	4619      	mov	r1, r3
 800978a:	480f      	ldr	r0, [pc, #60]	; (80097c8 <gps_read+0x3c0>)
 800978c:	f001 f8be 	bl	800a90c <iprintf>
		L76_Date_Parse(sDate, pL76);
 8009790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fae4 	bl	8009d64 <L76_Date_Parse>
		j = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 80097a2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80097a6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80097aa:	e026      	b.n	80097fa <gps_read+0x3f2>
 80097ac:	0800ee50 	.word	0x0800ee50
 80097b0:	0800ee58 	.word	0x0800ee58
 80097b4:	0800ee60 	.word	0x0800ee60
 80097b8:	0800ee84 	.word	0x0800ee84
 80097bc:	0800eea8 	.word	0x0800eea8
 80097c0:	0800eeb8 	.word	0x0800eeb8
 80097c4:	0800eef0 	.word	0x0800eef0
 80097c8:	0800eecc 	.word	0x0800eecc
			sLat[j] = seGNGGA[i+1];
 80097cc:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80097d0:	3301      	adds	r3, #1
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	7819      	ldrb	r1, [r3, #0]
 80097d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80097dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097e0:	4413      	add	r3, r2
 80097e2:	460a      	mov	r2, r1
 80097e4:	701a      	strb	r2, [r3, #0]
			j++;
 80097e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097ea:	3301      	adds	r3, #1
 80097ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 80097f0:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80097f4:	3301      	adds	r3, #1
 80097f6:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80097fa:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80097fe:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8009802:	429a      	cmp	r2, r3
 8009804:	d3e2      	bcc.n	80097cc <gps_read+0x3c4>
		sLat[j-1] = '\0';
 8009806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800980a:	3b01      	subs	r3, #1
 800980c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	f803 2c88 	strb.w	r2, [r3, #-136]
		printf("%s\n\r", sLat);
 8009818:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800981c:	4619      	mov	r1, r3
 800981e:	486d      	ldr	r0, [pc, #436]	; (80099d4 <gps_read+0x5cc>)
 8009820:	f001 f874 	bl	800a90c <iprintf>
		j = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 800982a:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800982e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8009832:	e016      	b.n	8009862 <gps_read+0x45a>
			sN_S[j] = seGNGGA[i+1];
 8009834:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8009838:	3301      	adds	r3, #1
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	7819      	ldrb	r1, [r3, #0]
 8009840:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009848:	4413      	add	r3, r2
 800984a:	460a      	mov	r2, r1
 800984c:	701a      	strb	r2, [r3, #0]
			j++;
 800984e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009852:	3301      	adds	r3, #1
 8009854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8009858:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800985c:	3301      	adds	r3, #1
 800985e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8009862:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009866:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 800986a:	429a      	cmp	r2, r3
 800986c:	d3e2      	bcc.n	8009834 <gps_read+0x42c>
		sN_S[j-1] = '\0';
 800986e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009872:	3b01      	subs	r3, #1
 8009874:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009878:	4413      	add	r3, r2
 800987a:	2200      	movs	r2, #0
 800987c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		uint8_t u8N_S = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if (sN_S[0] == 'N')
 8009886:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800988a:	2b4e      	cmp	r3, #78	; 0x4e
 800988c:	d103      	bne.n	8009896 <gps_read+0x48e>
			u8N_S = GPS_NORTH;
 800988e:	2301      	movs	r3, #1
 8009890:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8009894:	e006      	b.n	80098a4 <gps_read+0x49c>
		}else if (sN_S[0] == 'S')
 8009896:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800989a:	2b53      	cmp	r3, #83	; 0x53
 800989c:	d102      	bne.n	80098a4 <gps_read+0x49c>
			u8N_S = GPS_SOUTH;
 800989e:	2300      	movs	r3, #0
 80098a0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		L76_Lat_Parse(sLat, pL76, u8N_S);
 80098a4:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 80098a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f894 	bl	80099dc <L76_Lat_Parse>
		j = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sLong[20] = {0};
 80098ba:	2300      	movs	r3, #0
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80098be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	605a      	str	r2, [r3, #4]
 80098c8:	609a      	str	r2, [r3, #8]
 80098ca:	60da      	str	r2, [r3, #12]
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 80098cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80098d0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 80098d4:	e016      	b.n	8009904 <gps_read+0x4fc>
			sLong[j] = seGNGGA[i+1];
 80098d6:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80098da:	3301      	adds	r3, #1
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	4413      	add	r3, r2
 80098e0:	7819      	ldrb	r1, [r3, #0]
 80098e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80098e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098ea:	4413      	add	r3, r2
 80098ec:	460a      	mov	r2, r1
 80098ee:	701a      	strb	r2, [r3, #0]
			j++;
 80098f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098f4:	3301      	adds	r3, #1
 80098f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 80098fa:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 80098fe:	3301      	adds	r3, #1
 8009900:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8009904:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8009908:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 800990c:	429a      	cmp	r2, r3
 800990e:	d3e2      	bcc.n	80098d6 <gps_read+0x4ce>
		sLong[j-1] = '\0';
 8009910:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009914:	3b01      	subs	r3, #1
 8009916:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800991a:	4413      	add	r3, r2
 800991c:	2200      	movs	r2, #0
 800991e:	f803 2ca0 	strb.w	r2, [r3, #-160]
		printf("%s\r\n",sLong);
 8009922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009926:	4619      	mov	r1, r3
 8009928:	482b      	ldr	r0, [pc, #172]	; (80099d8 <gps_read+0x5d0>)
 800992a:	f000 ffef 	bl	800a90c <iprintf>
		j = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sE_W[20] = {0};
 8009934:	2300      	movs	r3, #0
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	f107 0318 	add.w	r3, r7, #24
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	609a      	str	r2, [r3, #8]
 8009944:	60da      	str	r2, [r3, #12]
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8009946:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800994a:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800994e:	e016      	b.n	800997e <gps_read+0x576>
			sE_W[j] = seGNGGA[i+1];
 8009950:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8009954:	3301      	adds	r3, #1
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	4413      	add	r3, r2
 800995a:	7819      	ldrb	r1, [r3, #0]
 800995c:	f107 0214 	add.w	r2, r7, #20
 8009960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009964:	4413      	add	r3, r2
 8009966:	460a      	mov	r2, r1
 8009968:	701a      	strb	r2, [r3, #0]
			j++;
 800996a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800996e:	3301      	adds	r3, #1
 8009970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8009974:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8009978:	3301      	adds	r3, #1
 800997a:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 800997e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8009982:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8009986:	429a      	cmp	r2, r3
 8009988:	d3e2      	bcc.n	8009950 <gps_read+0x548>
		sE_W[j-1] = '\0';
 800998a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800998e:	3b01      	subs	r3, #1
 8009990:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8009994:	4413      	add	r3, r2
 8009996:	2200      	movs	r2, #0
 8009998:	f803 2cb4 	strb.w	r2, [r3, #-180]
		uint8_t u8E_W = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		if (sE_W[0] == 'E')
 80099a2:	7d3b      	ldrb	r3, [r7, #20]
 80099a4:	2b45      	cmp	r3, #69	; 0x45
 80099a6:	d103      	bne.n	80099b0 <gps_read+0x5a8>
			u8E_W = GPS_EAST;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 80099ae:	e005      	b.n	80099bc <gps_read+0x5b4>
		else if (sE_W[0] == 'W')
 80099b0:	7d3b      	ldrb	r3, [r7, #20]
 80099b2:	2b57      	cmp	r3, #87	; 0x57
 80099b4:	d102      	bne.n	80099bc <gps_read+0x5b4>
			u8E_W = GPS_WEST;
 80099b6:	2300      	movs	r3, #0
 80099b8:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		L76_Long_Parse(sLong, pL76, u8E_W);
 80099bc:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 80099c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f8c4 	bl	8009b54 <L76_Long_Parse>
}
 80099cc:	bf00      	nop
 80099ce:	37c8      	adds	r7, #200	; 0xc8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	0800eee0 	.word	0x0800eee0
 80099d8:	0800eee8 	.word	0x0800eee8

080099dc <L76_Lat_Parse>:

static void L76_Lat_Parse(char* sLat,
						  L76* pL76,
						  uint8_t u8NorS)
{
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	b08f      	sub	sp, #60	; 0x3c
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	4613      	mov	r3, r2
 80099e8:	71fb      	strb	r3, [r7, #7]
	char degree[3];
	char minute[10];

	/* Check for NULL pointer */
	if ((sLat == NULL) || (pL76 == NULL))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <L76_Lat_Parse+0x1a>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <L76_Lat_Parse+0x1e>
	{
		Error_Handler();
 80099f6:	f7f8 f909 	bl	8001c0c <Error_Handler>
	/* Check the postition of the dot to divide the degrees and minutes
	 * The Latitude NMEA form ddmm.mmmm
	 */

	/* 1. Parse the Degree */
	for (uint8_t i = 0; i < 2; i++)
 80099fa:	2300      	movs	r3, #0
 80099fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009a00:	e010      	b.n	8009a24 <L76_Lat_Parse+0x48>
	{
		degree[i] = sLat[i];
 8009a02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	441a      	add	r2, r3
 8009a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a0e:	7812      	ldrb	r2, [r2, #0]
 8009a10:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a14:	440b      	add	r3, r1
 8009a16:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 2; i++)
 8009a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a1e:	3301      	adds	r3, #1
 8009a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d9ea      	bls.n	8009a02 <L76_Lat_Parse+0x26>
	}
	degree[2] = '\0';
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	77bb      	strb	r3, [r7, #30]

	/* Test */
	printf("Lat Degree: %s\r\n", degree);
 8009a30:	f107 031c 	add.w	r3, r7, #28
 8009a34:	4619      	mov	r1, r3
 8009a36:	4842      	ldr	r0, [pc, #264]	; (8009b40 <L76_Lat_Parse+0x164>)
 8009a38:	f000 ff68 	bl	800a90c <iprintf>

	double dTempDeg = atof(degree);
 8009a3c:	f107 031c 	add.w	r3, r7, #28
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fac3 	bl	8009fcc <atof>
 8009a46:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minute */
	uint8_t j = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	printf("%s\r\n", sLat);
 8009a50:	68f9      	ldr	r1, [r7, #12]
 8009a52:	483c      	ldr	r0, [pc, #240]	; (8009b44 <L76_Lat_Parse+0x168>)
 8009a54:	f000 ff5a 	bl	800a90c <iprintf>

	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8009a58:	2302      	movs	r3, #2
 8009a5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009a5e:	e015      	b.n	8009a8c <L76_Lat_Parse+0xb0>
	{
		minute[j] = sLat[i];
 8009a60:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	441a      	add	r2, r3
 8009a68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a6c:	7812      	ldrb	r2, [r2, #0]
 8009a6e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009a72:	440b      	add	r3, r1
 8009a74:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 8009a78:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8009a82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009a86:	3301      	adds	r3, #1
 8009a88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009a8c:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f7f6 fba5 	bl	80001e0 <strlen>
 8009a96:	4603      	mov	r3, r0
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	429e      	cmp	r6, r3
 8009a9c:	d3e0      	bcc.n	8009a60 <L76_Lat_Parse+0x84>
	}
	minute[j] = '\0';
 8009a9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009aa2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009aa6:	4413      	add	r3, r2
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f803 2c28 	strb.w	r2, [r3, #-40]

	printf("Lat Minute: %s\r\n", minute);
 8009aae:	f107 0310 	add.w	r3, r7, #16
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	4824      	ldr	r0, [pc, #144]	; (8009b48 <L76_Lat_Parse+0x16c>)
 8009ab6:	f000 ff29 	bl	800a90c <iprintf>

	double dTempMin = atof(minute);
 8009aba:	f107 0310 	add.w	r3, r7, #16
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fa84 	bl	8009fcc <atof>
 8009ac4:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form dd.xxxxx */
	if (u8NorS == GPS_NORTH)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d114      	bne.n	8009af8 <L76_Lat_Parse+0x11c>
	{
		pL76->dLattitude = dTempDeg + (dTempMin / 60);
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	4b1e      	ldr	r3, [pc, #120]	; (8009b4c <L76_Lat_Parse+0x170>)
 8009ad4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009ad8:	f7f6 fec0 	bl	800085c <__aeabi_ddiv>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ae8:	f7f6 fbd8 	bl	800029c <__adddf3>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009af6:	e019      	b.n	8009b2c <L76_Lat_Parse+0x150>
	}
	else if (u8NorS == GPS_SOUTH)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d116      	bne.n	8009b2c <L76_Lat_Parse+0x150>
	{
		pL76->dLattitude = -(dTempDeg + (dTempMin / 60));
 8009afe:	f04f 0200 	mov.w	r2, #0
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <L76_Lat_Parse+0x170>)
 8009b04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009b08:	f7f6 fea8 	bl	800085c <__aeabi_ddiv>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4610      	mov	r0, r2
 8009b12:	4619      	mov	r1, r3
 8009b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009b18:	f7f6 fbc0 	bl	800029c <__adddf3>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4614      	mov	r4, r2
 8009b22:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	e9c3 4502 	strd	r4, r5, [r3, #8]
	else
	{
		/* Unavailable */
		;
	}
	printf("NMEA latitude: %lf\r\n", pL76->dLattitude);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009b32:	4807      	ldr	r0, [pc, #28]	; (8009b50 <L76_Lat_Parse+0x174>)
 8009b34:	f000 feea 	bl	800a90c <iprintf>

}
 8009b38:	bf00      	nop
 8009b3a:	373c      	adds	r7, #60	; 0x3c
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b40:	0800eef4 	.word	0x0800eef4
 8009b44:	0800eee8 	.word	0x0800eee8
 8009b48:	0800ef08 	.word	0x0800ef08
 8009b4c:	404e0000 	.word	0x404e0000
 8009b50:	0800ef1c 	.word	0x0800ef1c

08009b54 <L76_Long_Parse>:

static void L76_Long_Parse(char* sLong,
						   L76* pL76,
						   uint8_t u8EorW)
{
 8009b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b56:	b08f      	sub	sp, #60	; 0x3c
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	71fb      	strb	r3, [r7, #7]
	char degree[4];
	char minute[10];

	/* Check for NULL pointer */
	if ((sLong == NULL) || (pL76 == NULL))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <L76_Long_Parse+0x1a>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <L76_Long_Parse+0x1e>
	{
		Error_Handler();
 8009b6e:	f7f8 f84d 	bl	8001c0c <Error_Handler>
	/* Check the position of the dot to divide degrees and minutes
	 * The Longtitude NMEA form dddmm.mmmm
	 */

	/* 1. Parse the degrees */
	for (uint8_t i = 0; i < 3; i++)
 8009b72:	2300      	movs	r3, #0
 8009b74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009b78:	e010      	b.n	8009b9c <L76_Long_Parse+0x48>
	{
		degree[i] = sLong[i];
 8009b7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	441a      	add	r2, r3
 8009b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b86:	7812      	ldrb	r2, [r2, #0]
 8009b88:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009b8c:	440b      	add	r3, r1
 8009b8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 3; i++)
 8009b92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b96:	3301      	adds	r3, #1
 8009b98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d9ea      	bls.n	8009b7a <L76_Long_Parse+0x26>
	}
	degree[3] = '\0';
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	77fb      	strb	r3, [r7, #31]

	/* Test */
	printf("Long Degree: %s\r\n", degree);
 8009ba8:	f107 031c 	add.w	r3, r7, #28
 8009bac:	4619      	mov	r1, r3
 8009bae:	4840      	ldr	r0, [pc, #256]	; (8009cb0 <L76_Long_Parse+0x15c>)
 8009bb0:	f000 feac 	bl	800a90c <iprintf>

	double dTempDeg = atof(degree);
 8009bb4:	f107 031c 	add.w	r3, r7, #28
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fa07 	bl	8009fcc <atof>
 8009bbe:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minutes */
	uint8_t j = 0;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 8009bc8:	2303      	movs	r3, #3
 8009bca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009bce:	e015      	b.n	8009bfc <L76_Long_Parse+0xa8>
	{
		minute[j] = sLong[i];
 8009bd0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	441a      	add	r2, r3
 8009bd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009bdc:	7812      	ldrb	r2, [r2, #0]
 8009bde:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009be2:	440b      	add	r3, r1
 8009be4:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 8009be8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009bec:	3301      	adds	r3, #1
 8009bee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 8009bf2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8009bfc:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7f6 faed 	bl	80001e0 <strlen>
 8009c06:	4603      	mov	r3, r0
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	429e      	cmp	r6, r3
 8009c0c:	d3e0      	bcc.n	8009bd0 <L76_Long_Parse+0x7c>
	}
	minute[j] = '\0';
 8009c0e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8009c12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c16:	4413      	add	r3, r2
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f803 2c28 	strb.w	r2, [r3, #-40]

	/* Test */
	printf("Long minute: %s\r\n", minute);
 8009c1e:	f107 0310 	add.w	r3, r7, #16
 8009c22:	4619      	mov	r1, r3
 8009c24:	4823      	ldr	r0, [pc, #140]	; (8009cb4 <L76_Long_Parse+0x160>)
 8009c26:	f000 fe71 	bl	800a90c <iprintf>

	double dTempMin = atof(minute);
 8009c2a:	f107 0310 	add.w	r3, r7, #16
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f9cc 	bl	8009fcc <atof>
 8009c34:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form of ddd.xxxxx */
	if (u8EorW == GPS_EAST)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d114      	bne.n	8009c68 <L76_Long_Parse+0x114>
	{
		pL76->dLongtitude = dTempDeg + (dTempMin / 60);
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <L76_Long_Parse+0x164>)
 8009c44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c48:	f7f6 fe08 	bl	800085c <__aeabi_ddiv>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4610      	mov	r0, r2
 8009c52:	4619      	mov	r1, r3
 8009c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c58:	f7f6 fb20 	bl	800029c <__adddf3>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	e9c1 2300 	strd	r2, r3, [r1]
 8009c66:	e019      	b.n	8009c9c <L76_Long_Parse+0x148>
	}
	else if (u8EorW == GPS_WEST)
 8009c68:	79fb      	ldrb	r3, [r7, #7]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d116      	bne.n	8009c9c <L76_Long_Parse+0x148>
	{
		pL76->dLongtitude = -(dTempDeg + (dTempMin / 60));
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <L76_Long_Parse+0x164>)
 8009c74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c78:	f7f6 fdf0 	bl	800085c <__aeabi_ddiv>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4610      	mov	r0, r2
 8009c82:	4619      	mov	r1, r3
 8009c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c88:	f7f6 fb08 	bl	800029c <__adddf3>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	e9c3 4500 	strd	r4, r5, [r3]
		/* Unavailable */
		;
	}

	/* Test */
	printf("NMEA longtitude: %lf\r\n", pL76->dLongtitude);
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	4806      	ldr	r0, [pc, #24]	; (8009cbc <L76_Long_Parse+0x168>)
 8009ca4:	f000 fe32 	bl	800a90c <iprintf>

}
 8009ca8:	bf00      	nop
 8009caa:	373c      	adds	r7, #60	; 0x3c
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb0:	0800ef34 	.word	0x0800ef34
 8009cb4:	0800ef48 	.word	0x0800ef48
 8009cb8:	404e0000 	.word	0x404e0000
 8009cbc:	0800ef5c 	.word	0x0800ef5c

08009cc0 <L76_Time_Parse>:

static void L76_Time_Parse(char* sUtcTime,
						   L76* pL76)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
	/* Check for NULL pointer */
	if ((sUtcTime == NULL) || (pL76 == NULL))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <L76_Time_Parse+0x16>
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <L76_Time_Parse+0x1a>
	{
		Error_Handler();
 8009cd6:	f7f7 ff99 	bl	8001c0c <Error_Handler>
	}

	uint32_t dTime = (uint32_t)atof(sUtcTime);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f976 	bl	8009fcc <atof>
 8009ce0:	ec53 2b10 	vmov	r2, r3, d0
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	f7f6 ff66 	bl	8000bb8 <__aeabi_d2uiz>
 8009cec:	4603      	mov	r3, r0
 8009cee:	60fb      	str	r3, [r7, #12]

	/* 1. Get the seconds */
	pL76->u8Second = (uint8_t) (dTime % 100);
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4b19      	ldr	r3, [pc, #100]	; (8009d58 <L76_Time_Parse+0x98>)
 8009cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8009cf8:	095b      	lsrs	r3, r3, #5
 8009cfa:	2164      	movs	r1, #100	; 0x64
 8009cfc:	fb01 f303 	mul.w	r3, r1, r3
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	759a      	strb	r2, [r3, #22]

	/* 2. Get the minutes */
	pL76->u8Minute = (uint8_t) ((dTime / 100) % 100);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a13      	ldr	r2, [pc, #76]	; (8009d58 <L76_Time_Parse+0x98>)
 8009d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d10:	095a      	lsrs	r2, r3, #5
 8009d12:	4b11      	ldr	r3, [pc, #68]	; (8009d58 <L76_Time_Parse+0x98>)
 8009d14:	fba3 1302 	umull	r1, r3, r3, r2
 8009d18:	095b      	lsrs	r3, r3, #5
 8009d1a:	2164      	movs	r1, #100	; 0x64
 8009d1c:	fb01 f303 	mul.w	r3, r1, r3
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	755a      	strb	r2, [r3, #21]

	/* 3. Get the hour */
	pL76->u8Hour = (uint8_t) (dTime / 10000);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <L76_Time_Parse+0x9c>)
 8009d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d30:	0b5b      	lsrs	r3, r3, #13
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	751a      	strb	r2, [r3, #20]

	/* Test */
	printf("UTC TIME: %d:%d:%d\r\n", pL76->u8Hour, pL76->u8Minute, pL76->u8Second);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	7d1b      	ldrb	r3, [r3, #20]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	7d5b      	ldrb	r3, [r3, #21]
 8009d42:	461a      	mov	r2, r3
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	7d9b      	ldrb	r3, [r3, #22]
 8009d48:	4805      	ldr	r0, [pc, #20]	; (8009d60 <L76_Time_Parse+0xa0>)
 8009d4a:	f000 fddf 	bl	800a90c <iprintf>
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	51eb851f 	.word	0x51eb851f
 8009d5c:	d1b71759 	.word	0xd1b71759
 8009d60:	0800ef74 	.word	0x0800ef74

08009d64 <L76_Date_Parse>:

static void L76_Date_Parse(char* sRmcDate,
						   L76* pL76Handle)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	/* Check for NULL pointers */
	if ((sRmcDate == NULL) || (pL76Handle == NULL))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <L76_Date_Parse+0x16>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <L76_Date_Parse+0x1a>
	{
		Error_Handler();
 8009d7a:	f7f7 ff47 	bl	8001c0c <Error_Handler>
	}

	uint32_t dDate = (uint32_t)atof(sRmcDate);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f924 	bl	8009fcc <atof>
 8009d84:	ec53 2b10 	vmov	r2, r3, d0
 8009d88:	4610      	mov	r0, r2
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	f7f6 ff14 	bl	8000bb8 <__aeabi_d2uiz>
 8009d90:	4603      	mov	r3, r0
 8009d92:	60fb      	str	r3, [r7, #12]

	/* 1. Get the day */
	pL76Handle->u8Day = (uint8_t) (dDate / 10000);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	4a1a      	ldr	r2, [pc, #104]	; (8009e00 <L76_Date_Parse+0x9c>)
 8009d98:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9c:	0b5b      	lsrs	r3, r3, #13
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	741a      	strb	r2, [r3, #16]

	/* 2. Get the month */
	pL76Handle->u8Month = (uint8_t) ((dDate / 100) % 100);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a17      	ldr	r2, [pc, #92]	; (8009e04 <L76_Date_Parse+0xa0>)
 8009da8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dac:	095a      	lsrs	r2, r3, #5
 8009dae:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <L76_Date_Parse+0xa0>)
 8009db0:	fba3 1302 	umull	r1, r3, r3, r2
 8009db4:	095b      	lsrs	r3, r3, #5
 8009db6:	2164      	movs	r1, #100	; 0x64
 8009db8:	fb01 f303 	mul.w	r3, r1, r3
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	745a      	strb	r2, [r3, #17]

	/* 3. Get the year */
	pL76Handle->u16Year = (uint16_t) (2000 + (dDate % 100));
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <L76_Date_Parse+0xa0>)
 8009dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009dcc:	095b      	lsrs	r3, r3, #5
 8009dce:	2164      	movs	r1, #100	; 0x64
 8009dd0:	fb01 f303 	mul.w	r3, r1, r3
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	825a      	strh	r2, [r3, #18]

	/* Test */
	printf("Date: %d/%d/%d \r\n", pL76Handle->u8Day, pL76Handle->u8Month, pL76Handle->u16Year);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	7c1b      	ldrb	r3, [r3, #16]
 8009de6:	4619      	mov	r1, r3
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	7c5b      	ldrb	r3, [r3, #17]
 8009dec:	461a      	mov	r2, r3
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	8a5b      	ldrh	r3, [r3, #18]
 8009df2:	4805      	ldr	r0, [pc, #20]	; (8009e08 <L76_Date_Parse+0xa4>)
 8009df4:	f000 fd8a 	bl	800a90c <iprintf>

}
 8009df8:	bf00      	nop
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	d1b71759 	.word	0xd1b71759
 8009e04:	51eb851f 	.word	0x51eb851f
 8009e08:	0800ef8c 	.word	0x0800ef8c

08009e0c <gps_power_EnOrDi>:

void gps_power_EnOrDi(uint8_t u8EnOrDi)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	71fb      	strb	r3, [r7, #7]

	if (u8EnOrDi == ENABLE)
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d105      	bne.n	8009e28 <gps_power_EnOrDi+0x1c>
	{
		/* Enable the power of the GPS module */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	2110      	movs	r1, #16
 8009e20:	4806      	ldr	r0, [pc, #24]	; (8009e3c <gps_power_EnOrDi+0x30>)
 8009e22:	f7f8 ffd5 	bl	8002dd0 <HAL_GPIO_WritePin>
	else
	{
		/* Disable the power of the GPS module */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8009e26:	e004      	b.n	8009e32 <gps_power_EnOrDi+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2110      	movs	r1, #16
 8009e2c:	4803      	ldr	r0, [pc, #12]	; (8009e3c <gps_power_EnOrDi+0x30>)
 8009e2e:	f7f8 ffcf 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	40020000 	.word	0x40020000

08009e40 <SC7A20_Init>:
extern void Error_Handler(void);

extern I2C_HandleTypeDef hi2c1;

uint8_t SC7A20_Init()
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
	/* 1. Turn on the sensor with ODR = 400Hz normal mode*/
	SC7A20_write(SC7A20_CR1_NORMAL_400HZ_EN, SC7A20_ADDR_CTRL_REG1);
 8009e44:	2120      	movs	r1, #32
 8009e46:	2073      	movs	r0, #115	; 0x73
 8009e48:	f000 f866 	bl	8009f18 <SC7A20_write>

	/* 2. Enable AOI1 Interrupt SIGNAL in INT1*/
	SC7A20_write(SC7A20_CR3_ENABLE_AOI_INT1, SC7A20_ADDR_CTRL_REG3);
 8009e4c:	2122      	movs	r1, #34	; 0x22
 8009e4e:	2040      	movs	r0, #64	; 0x40
 8009e50:	f000 f862 	bl	8009f18 <SC7A20_write>

	/* 3. Enable Reset after Interrupt event and filter used*/
	SC7A20_write(SC7A20_CR2_INT_RST_FILTER, SC7A20_ADDR_CTRL_REG2);
 8009e54:	2121      	movs	r1, #33	; 0x21
 8009e56:	2000      	movs	r0, #0
 8009e58:	f000 f85e 	bl	8009f18 <SC7A20_write>

	/* 4. Detection */
	SC7A20_write(SC7A20_CR5_4D_DISABLE, SC7A20_ADDR_CTRL_REG5);
 8009e5c:	2124      	movs	r1, #36	; 0x24
 8009e5e:	2000      	movs	r0, #0
 8009e60:	f000 f85a 	bl	8009f18 <SC7A20_write>

	/* 5. Enable 16G range of the SC7A20*/
	SC7A20_write(SC7A20_CR4_2G, SC7A20_ADDR_CTRL_REG4);
 8009e64:	2123      	movs	r1, #35	; 0x23
 8009e66:	2038      	movs	r0, #56	; 0x38
 8009e68:	f000 f856 	bl	8009f18 <SC7A20_write>

	/* 6. Enable Interrupt 1 for Motion detection*/
	SC7A20_write(SC7A20_INT1_MOTION_DETECT, SC7A20_ADDR_INT1_CFG);
 8009e6c:	2130      	movs	r1, #48	; 0x30
 8009e6e:	200a      	movs	r0, #10
 8009e70:	f000 f852 	bl	8009f18 <SC7A20_write>

	/* 7. Set motion detection Threshold */
	SC7A20_setMotionTHS(SC7A20_INT_THRESHOLD);
 8009e74:	2010      	movs	r0, #16
 8009e76:	f000 f88d 	bl	8009f94 <SC7A20_setMotionTHS>

	/* 8. Set duration of INT1 to 10*/
	SC7A20_setInt1Duration(SC7A20_DURATION);
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	f000 f898 	bl	8009fb0 <SC7A20_setInt1Duration>

	/* 9. Read back the data from CTRL1, if the data is successfully writen, the initialization is successful*/
	if (SC7A20_read(SC7A20_ADDR_CTRL_REG1) == SC7A20_CR1_NORMAL_400HZ_EN)
 8009e80:	2020      	movs	r0, #32
 8009e82:	f000 f865 	bl	8009f50 <SC7A20_read>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b73      	cmp	r3, #115	; 0x73
 8009e8a:	d104      	bne.n	8009e96 <SC7A20_Init+0x56>
	{
		return SC7A20_read(SC7A20_ADDR_CTRL_REG1);
 8009e8c:	2020      	movs	r0, #32
 8009e8e:	f000 f85f 	bl	8009f50 <SC7A20_read>
 8009e92:	4603      	mov	r3, r0
 8009e94:	e000      	b.n	8009e98 <SC7A20_Init+0x58>
	}else
	{
		return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
	}

}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <SC7A20_coordinate_read>:

void SC7A20_coordinate_read(Coordinate_t* pCoordinate)
{
 8009e9c:	b590      	push	{r4, r7, lr}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
	/* Check for NULL */
	if (!pCoordinate)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <SC7A20_coordinate_read+0x12>
	{
		Error_Handler();
 8009eaa:	f7f7 feaf 	bl	8001c0c <Error_Handler>
	}

	/* 1. Read the OUT_X_L register */
	pCoordinate->u16XCoor = ((SC7A20_read(SC7A20_ADDR_OUT_X_H) << 8) | SC7A20_read(SC7A20_ADDR_OUT_X_L));
 8009eae:	2029      	movs	r0, #41	; 0x29
 8009eb0:	f000 f84e 	bl	8009f50 <SC7A20_read>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	b21c      	sxth	r4, r3
 8009eba:	2028      	movs	r0, #40	; 0x28
 8009ebc:	f000 f848 	bl	8009f50 <SC7A20_read>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	b21b      	sxth	r3, r3
 8009ec4:	4323      	orrs	r3, r4
 8009ec6:	b21b      	sxth	r3, r3
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	801a      	strh	r2, [r3, #0]

	/* 2. Read the OUT_Y_L register */
	pCoordinate->u16YCoor = ((SC7A20_read(SC7A20_ADDR_OUT_Y_H) << 8) | SC7A20_read(SC7A20_ADDR_OUT_Y_L));
 8009ece:	202b      	movs	r0, #43	; 0x2b
 8009ed0:	f000 f83e 	bl	8009f50 <SC7A20_read>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	b21c      	sxth	r4, r3
 8009eda:	202a      	movs	r0, #42	; 0x2a
 8009edc:	f000 f838 	bl	8009f50 <SC7A20_read>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	b21b      	sxth	r3, r3
 8009ee4:	4323      	orrs	r3, r4
 8009ee6:	b21b      	sxth	r3, r3
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	805a      	strh	r2, [r3, #2]

	/* 3. Read the OUT_Z_L register */
	pCoordinate->u16ZCoor = ((SC7A20_read(SC7A20_ADDR_OUT_Z_H) << 8) | SC7A20_read(SC7A20_ADDR_OUT_Z_L));
 8009eee:	202d      	movs	r0, #45	; 0x2d
 8009ef0:	f000 f82e 	bl	8009f50 <SC7A20_read>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	b21c      	sxth	r4, r3
 8009efa:	202c      	movs	r0, #44	; 0x2c
 8009efc:	f000 f828 	bl	8009f50 <SC7A20_read>
 8009f00:	4603      	mov	r3, r0
 8009f02:	b21b      	sxth	r3, r3
 8009f04:	4323      	orrs	r3, r4
 8009f06:	b21b      	sxth	r3, r3
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	809a      	strh	r2, [r3, #4]

}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd90      	pop	{r4, r7, pc}
	...

08009f18 <SC7A20_write>:

static void SC7A20_write(uint8_t u8Value,
						 uint8_t u8RegAddress)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af02      	add	r7, sp, #8
 8009f1e:	4603      	mov	r3, r0
 8009f20:	460a      	mov	r2, r1
 8009f22:	71fb      	strb	r3, [r7, #7]
 8009f24:	4613      	mov	r3, r2
 8009f26:	71bb      	strb	r3, [r7, #6]
	/* Write the address of the register and then write the data */
	uint8_t u8Tx[2];
	u8Tx[0] = u8RegAddress;
 8009f28:	79bb      	ldrb	r3, [r7, #6]
 8009f2a:	733b      	strb	r3, [r7, #12]
	u8Tx[1] = u8Value;
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, u8Tx, 2, HAL_MAX_DELAY);
 8009f30:	f107 020c 	add.w	r2, r7, #12
 8009f34:	f04f 33ff 	mov.w	r3, #4294967295
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	2130      	movs	r1, #48	; 0x30
 8009f3e:	4803      	ldr	r0, [pc, #12]	; (8009f4c <SC7A20_write+0x34>)
 8009f40:	f7f9 f8bc 	bl	80030bc <HAL_I2C_Master_Transmit>
}
 8009f44:	bf00      	nop
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000c78 	.word	0x20000c78

08009f50 <SC7A20_read>:

uint8_t SC7A20_read(uint8_t u8RegAddress)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af02      	add	r7, sp, #8
 8009f56:	4603      	mov	r3, r0
 8009f58:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Data = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]

	/* 1. First send the address of the register we want to read*/
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8RegAddress, 1, HAL_MAX_DELAY);
 8009f5e:	1dfa      	adds	r2, r7, #7
 8009f60:	f04f 33ff 	mov.w	r3, #4294967295
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	2301      	movs	r3, #1
 8009f68:	2130      	movs	r1, #48	; 0x30
 8009f6a:	4809      	ldr	r0, [pc, #36]	; (8009f90 <SC7A20_read+0x40>)
 8009f6c:	f7f9 f8a6 	bl	80030bc <HAL_I2C_Master_Transmit>

	/* 2. Receive the data of the register we want to read*/
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8Data, 1, HAL_MAX_DELAY);
 8009f70:	f107 020f 	add.w	r2, r7, #15
 8009f74:	f04f 33ff 	mov.w	r3, #4294967295
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	2130      	movs	r1, #48	; 0x30
 8009f7e:	4804      	ldr	r0, [pc, #16]	; (8009f90 <SC7A20_read+0x40>)
 8009f80:	f7f9 f99a 	bl	80032b8 <HAL_I2C_Master_Receive>

	return u8Data;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000c78 	.word	0x20000c78

08009f94 <SC7A20_setMotionTHS>:

static void SC7A20_setMotionTHS(uint8_t u8Threshold)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Threshold, SC7A20_ADDR_INT1_THS);
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	2132      	movs	r1, #50	; 0x32
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff ffb8 	bl	8009f18 <SC7A20_write>
}
 8009fa8:	bf00      	nop
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <SC7A20_setInt1Duration>:

static void SC7A20_setInt1Duration(uint8_t u8Time)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Time, SC7A20_ADDR_INT1_DURATION);
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2133      	movs	r1, #51	; 0x33
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff ffaa 	bl	8009f18 <SC7A20_write>
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <atof>:
 8009fcc:	2100      	movs	r1, #0
 8009fce:	f001 bb89 	b.w	800b6e4 <strtod>
	...

08009fd4 <__errno>:
 8009fd4:	4b01      	ldr	r3, [pc, #4]	; (8009fdc <__errno+0x8>)
 8009fd6:	6818      	ldr	r0, [r3, #0]
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	20000014 	.word	0x20000014

08009fe0 <__libc_init_array>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	4d0d      	ldr	r5, [pc, #52]	; (800a018 <__libc_init_array+0x38>)
 8009fe4:	4c0d      	ldr	r4, [pc, #52]	; (800a01c <__libc_init_array+0x3c>)
 8009fe6:	1b64      	subs	r4, r4, r5
 8009fe8:	10a4      	asrs	r4, r4, #2
 8009fea:	2600      	movs	r6, #0
 8009fec:	42a6      	cmp	r6, r4
 8009fee:	d109      	bne.n	800a004 <__libc_init_array+0x24>
 8009ff0:	4d0b      	ldr	r5, [pc, #44]	; (800a020 <__libc_init_array+0x40>)
 8009ff2:	4c0c      	ldr	r4, [pc, #48]	; (800a024 <__libc_init_array+0x44>)
 8009ff4:	f004 fa52 	bl	800e49c <_init>
 8009ff8:	1b64      	subs	r4, r4, r5
 8009ffa:	10a4      	asrs	r4, r4, #2
 8009ffc:	2600      	movs	r6, #0
 8009ffe:	42a6      	cmp	r6, r4
 800a000:	d105      	bne.n	800a00e <__libc_init_array+0x2e>
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	f855 3b04 	ldr.w	r3, [r5], #4
 800a008:	4798      	blx	r3
 800a00a:	3601      	adds	r6, #1
 800a00c:	e7ee      	b.n	8009fec <__libc_init_array+0xc>
 800a00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a012:	4798      	blx	r3
 800a014:	3601      	adds	r6, #1
 800a016:	e7f2      	b.n	8009ffe <__libc_init_array+0x1e>
 800a018:	0800f474 	.word	0x0800f474
 800a01c:	0800f474 	.word	0x0800f474
 800a020:	0800f474 	.word	0x0800f474
 800a024:	0800f478 	.word	0x0800f478

0800a028 <memset>:
 800a028:	4402      	add	r2, r0
 800a02a:	4603      	mov	r3, r0
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d100      	bne.n	800a032 <memset+0xa>
 800a030:	4770      	bx	lr
 800a032:	f803 1b01 	strb.w	r1, [r3], #1
 800a036:	e7f9      	b.n	800a02c <memset+0x4>

0800a038 <__cvt>:
 800a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	ec55 4b10 	vmov	r4, r5, d0
 800a040:	2d00      	cmp	r5, #0
 800a042:	460e      	mov	r6, r1
 800a044:	4619      	mov	r1, r3
 800a046:	462b      	mov	r3, r5
 800a048:	bfbb      	ittet	lt
 800a04a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a04e:	461d      	movlt	r5, r3
 800a050:	2300      	movge	r3, #0
 800a052:	232d      	movlt	r3, #45	; 0x2d
 800a054:	700b      	strb	r3, [r1, #0]
 800a056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a058:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a05c:	4691      	mov	r9, r2
 800a05e:	f023 0820 	bic.w	r8, r3, #32
 800a062:	bfbc      	itt	lt
 800a064:	4622      	movlt	r2, r4
 800a066:	4614      	movlt	r4, r2
 800a068:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a06c:	d005      	beq.n	800a07a <__cvt+0x42>
 800a06e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a072:	d100      	bne.n	800a076 <__cvt+0x3e>
 800a074:	3601      	adds	r6, #1
 800a076:	2102      	movs	r1, #2
 800a078:	e000      	b.n	800a07c <__cvt+0x44>
 800a07a:	2103      	movs	r1, #3
 800a07c:	ab03      	add	r3, sp, #12
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	ab02      	add	r3, sp, #8
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	ec45 4b10 	vmov	d0, r4, r5
 800a088:	4653      	mov	r3, sl
 800a08a:	4632      	mov	r2, r6
 800a08c:	f001 fc84 	bl	800b998 <_dtoa_r>
 800a090:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a094:	4607      	mov	r7, r0
 800a096:	d102      	bne.n	800a09e <__cvt+0x66>
 800a098:	f019 0f01 	tst.w	r9, #1
 800a09c:	d022      	beq.n	800a0e4 <__cvt+0xac>
 800a09e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0a2:	eb07 0906 	add.w	r9, r7, r6
 800a0a6:	d110      	bne.n	800a0ca <__cvt+0x92>
 800a0a8:	783b      	ldrb	r3, [r7, #0]
 800a0aa:	2b30      	cmp	r3, #48	; 0x30
 800a0ac:	d10a      	bne.n	800a0c4 <__cvt+0x8c>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0ba:	b918      	cbnz	r0, 800a0c4 <__cvt+0x8c>
 800a0bc:	f1c6 0601 	rsb	r6, r6, #1
 800a0c0:	f8ca 6000 	str.w	r6, [sl]
 800a0c4:	f8da 3000 	ldr.w	r3, [sl]
 800a0c8:	4499      	add	r9, r3
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0d6:	b108      	cbz	r0, 800a0dc <__cvt+0xa4>
 800a0d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0dc:	2230      	movs	r2, #48	; 0x30
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	454b      	cmp	r3, r9
 800a0e2:	d307      	bcc.n	800a0f4 <__cvt+0xbc>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e8:	1bdb      	subs	r3, r3, r7
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	b004      	add	sp, #16
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	1c59      	adds	r1, r3, #1
 800a0f6:	9103      	str	r1, [sp, #12]
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	e7f0      	b.n	800a0de <__cvt+0xa6>

0800a0fc <__exponent>:
 800a0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0fe:	4603      	mov	r3, r0
 800a100:	2900      	cmp	r1, #0
 800a102:	bfb8      	it	lt
 800a104:	4249      	neglt	r1, r1
 800a106:	f803 2b02 	strb.w	r2, [r3], #2
 800a10a:	bfb4      	ite	lt
 800a10c:	222d      	movlt	r2, #45	; 0x2d
 800a10e:	222b      	movge	r2, #43	; 0x2b
 800a110:	2909      	cmp	r1, #9
 800a112:	7042      	strb	r2, [r0, #1]
 800a114:	dd2a      	ble.n	800a16c <__exponent+0x70>
 800a116:	f10d 0407 	add.w	r4, sp, #7
 800a11a:	46a4      	mov	ip, r4
 800a11c:	270a      	movs	r7, #10
 800a11e:	46a6      	mov	lr, r4
 800a120:	460a      	mov	r2, r1
 800a122:	fb91 f6f7 	sdiv	r6, r1, r7
 800a126:	fb07 1516 	mls	r5, r7, r6, r1
 800a12a:	3530      	adds	r5, #48	; 0x30
 800a12c:	2a63      	cmp	r2, #99	; 0x63
 800a12e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a132:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a136:	4631      	mov	r1, r6
 800a138:	dcf1      	bgt.n	800a11e <__exponent+0x22>
 800a13a:	3130      	adds	r1, #48	; 0x30
 800a13c:	f1ae 0502 	sub.w	r5, lr, #2
 800a140:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a144:	1c44      	adds	r4, r0, #1
 800a146:	4629      	mov	r1, r5
 800a148:	4561      	cmp	r1, ip
 800a14a:	d30a      	bcc.n	800a162 <__exponent+0x66>
 800a14c:	f10d 0209 	add.w	r2, sp, #9
 800a150:	eba2 020e 	sub.w	r2, r2, lr
 800a154:	4565      	cmp	r5, ip
 800a156:	bf88      	it	hi
 800a158:	2200      	movhi	r2, #0
 800a15a:	4413      	add	r3, r2
 800a15c:	1a18      	subs	r0, r3, r0
 800a15e:	b003      	add	sp, #12
 800a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a162:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a166:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a16a:	e7ed      	b.n	800a148 <__exponent+0x4c>
 800a16c:	2330      	movs	r3, #48	; 0x30
 800a16e:	3130      	adds	r1, #48	; 0x30
 800a170:	7083      	strb	r3, [r0, #2]
 800a172:	70c1      	strb	r1, [r0, #3]
 800a174:	1d03      	adds	r3, r0, #4
 800a176:	e7f1      	b.n	800a15c <__exponent+0x60>

0800a178 <_printf_float>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	ed2d 8b02 	vpush	{d8}
 800a180:	b08d      	sub	sp, #52	; 0x34
 800a182:	460c      	mov	r4, r1
 800a184:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a188:	4616      	mov	r6, r2
 800a18a:	461f      	mov	r7, r3
 800a18c:	4605      	mov	r5, r0
 800a18e:	f002 ff15 	bl	800cfbc <_localeconv_r>
 800a192:	f8d0 a000 	ldr.w	sl, [r0]
 800a196:	4650      	mov	r0, sl
 800a198:	f7f6 f822 	bl	80001e0 <strlen>
 800a19c:	2300      	movs	r3, #0
 800a19e:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1ac:	3307      	adds	r3, #7
 800a1ae:	f023 0307 	bic.w	r3, r3, #7
 800a1b2:	f103 0208 	add.w	r2, r3, #8
 800a1b6:	f8c8 2000 	str.w	r2, [r8]
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a1c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1d0:	ee08 0a10 	vmov	s16, r0
 800a1d4:	4b9f      	ldr	r3, [pc, #636]	; (800a454 <_printf_float+0x2dc>)
 800a1d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	f7f6 fcad 	bl	8000b3c <__aeabi_dcmpun>
 800a1e2:	bb88      	cbnz	r0, 800a248 <_printf_float+0xd0>
 800a1e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1e8:	4b9a      	ldr	r3, [pc, #616]	; (800a454 <_printf_float+0x2dc>)
 800a1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ee:	f7f6 fc87 	bl	8000b00 <__aeabi_dcmple>
 800a1f2:	bb48      	cbnz	r0, 800a248 <_printf_float+0xd0>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	f7f6 fc76 	bl	8000aec <__aeabi_dcmplt>
 800a200:	b110      	cbz	r0, 800a208 <_printf_float+0x90>
 800a202:	232d      	movs	r3, #45	; 0x2d
 800a204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a208:	4b93      	ldr	r3, [pc, #588]	; (800a458 <_printf_float+0x2e0>)
 800a20a:	4894      	ldr	r0, [pc, #592]	; (800a45c <_printf_float+0x2e4>)
 800a20c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a210:	bf94      	ite	ls
 800a212:	4698      	movls	r8, r3
 800a214:	4680      	movhi	r8, r0
 800a216:	2303      	movs	r3, #3
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	f023 0204 	bic.w	r2, r3, #4
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	f04f 0900 	mov.w	r9, #0
 800a226:	9700      	str	r7, [sp, #0]
 800a228:	4633      	mov	r3, r6
 800a22a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a22c:	4621      	mov	r1, r4
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f9d8 	bl	800a5e4 <_printf_common>
 800a234:	3001      	adds	r0, #1
 800a236:	f040 8090 	bne.w	800a35a <_printf_float+0x1e2>
 800a23a:	f04f 30ff 	mov.w	r0, #4294967295
 800a23e:	b00d      	add	sp, #52	; 0x34
 800a240:	ecbd 8b02 	vpop	{d8}
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	4642      	mov	r2, r8
 800a24a:	464b      	mov	r3, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	f7f6 fc74 	bl	8000b3c <__aeabi_dcmpun>
 800a254:	b140      	cbz	r0, 800a268 <_printf_float+0xf0>
 800a256:	464b      	mov	r3, r9
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfbc      	itt	lt
 800a25c:	232d      	movlt	r3, #45	; 0x2d
 800a25e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a262:	487f      	ldr	r0, [pc, #508]	; (800a460 <_printf_float+0x2e8>)
 800a264:	4b7f      	ldr	r3, [pc, #508]	; (800a464 <_printf_float+0x2ec>)
 800a266:	e7d1      	b.n	800a20c <_printf_float+0x94>
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a26e:	9206      	str	r2, [sp, #24]
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	d13f      	bne.n	800a2f4 <_printf_float+0x17c>
 800a274:	2306      	movs	r3, #6
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	6861      	ldr	r1, [r4, #4]
 800a27c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a280:	2300      	movs	r3, #0
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	ab0a      	add	r3, sp, #40	; 0x28
 800a286:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a28a:	ab09      	add	r3, sp, #36	; 0x24
 800a28c:	ec49 8b10 	vmov	d0, r8, r9
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a298:	4628      	mov	r0, r5
 800a29a:	f7ff fecd 	bl	800a038 <__cvt>
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2a2:	2b47      	cmp	r3, #71	; 0x47
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	d108      	bne.n	800a2ba <_printf_float+0x142>
 800a2a8:	1cc8      	adds	r0, r1, #3
 800a2aa:	db02      	blt.n	800a2b2 <_printf_float+0x13a>
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	dd41      	ble.n	800a336 <_printf_float+0x1be>
 800a2b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a2b6:	fa5f fb8b 	uxtb.w	fp, fp
 800a2ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2be:	d820      	bhi.n	800a302 <_printf_float+0x18a>
 800a2c0:	3901      	subs	r1, #1
 800a2c2:	465a      	mov	r2, fp
 800a2c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2ca:	f7ff ff17 	bl	800a0fc <__exponent>
 800a2ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d0:	1813      	adds	r3, r2, r0
 800a2d2:	2a01      	cmp	r2, #1
 800a2d4:	4681      	mov	r9, r0
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	dc02      	bgt.n	800a2e0 <_printf_float+0x168>
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	07d2      	lsls	r2, r2, #31
 800a2de:	d501      	bpl.n	800a2e4 <_printf_float+0x16c>
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d09c      	beq.n	800a226 <_printf_float+0xae>
 800a2ec:	232d      	movs	r3, #45	; 0x2d
 800a2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f2:	e798      	b.n	800a226 <_printf_float+0xae>
 800a2f4:	9a06      	ldr	r2, [sp, #24]
 800a2f6:	2a47      	cmp	r2, #71	; 0x47
 800a2f8:	d1be      	bne.n	800a278 <_printf_float+0x100>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1bc      	bne.n	800a278 <_printf_float+0x100>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e7b9      	b.n	800a276 <_printf_float+0xfe>
 800a302:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a306:	d118      	bne.n	800a33a <_printf_float+0x1c2>
 800a308:	2900      	cmp	r1, #0
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	dd0b      	ble.n	800a326 <_printf_float+0x1ae>
 800a30e:	6121      	str	r1, [r4, #16]
 800a310:	b913      	cbnz	r3, 800a318 <_printf_float+0x1a0>
 800a312:	6822      	ldr	r2, [r4, #0]
 800a314:	07d0      	lsls	r0, r2, #31
 800a316:	d502      	bpl.n	800a31e <_printf_float+0x1a6>
 800a318:	3301      	adds	r3, #1
 800a31a:	440b      	add	r3, r1
 800a31c:	6123      	str	r3, [r4, #16]
 800a31e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a320:	f04f 0900 	mov.w	r9, #0
 800a324:	e7de      	b.n	800a2e4 <_printf_float+0x16c>
 800a326:	b913      	cbnz	r3, 800a32e <_printf_float+0x1b6>
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	07d2      	lsls	r2, r2, #31
 800a32c:	d501      	bpl.n	800a332 <_printf_float+0x1ba>
 800a32e:	3302      	adds	r3, #2
 800a330:	e7f4      	b.n	800a31c <_printf_float+0x1a4>
 800a332:	2301      	movs	r3, #1
 800a334:	e7f2      	b.n	800a31c <_printf_float+0x1a4>
 800a336:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a33c:	4299      	cmp	r1, r3
 800a33e:	db05      	blt.n	800a34c <_printf_float+0x1d4>
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	6121      	str	r1, [r4, #16]
 800a344:	07d8      	lsls	r0, r3, #31
 800a346:	d5ea      	bpl.n	800a31e <_printf_float+0x1a6>
 800a348:	1c4b      	adds	r3, r1, #1
 800a34a:	e7e7      	b.n	800a31c <_printf_float+0x1a4>
 800a34c:	2900      	cmp	r1, #0
 800a34e:	bfd4      	ite	le
 800a350:	f1c1 0202 	rsble	r2, r1, #2
 800a354:	2201      	movgt	r2, #1
 800a356:	4413      	add	r3, r2
 800a358:	e7e0      	b.n	800a31c <_printf_float+0x1a4>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	055a      	lsls	r2, r3, #21
 800a35e:	d407      	bmi.n	800a370 <_printf_float+0x1f8>
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	4642      	mov	r2, r8
 800a364:	4631      	mov	r1, r6
 800a366:	4628      	mov	r0, r5
 800a368:	47b8      	blx	r7
 800a36a:	3001      	adds	r0, #1
 800a36c:	d12c      	bne.n	800a3c8 <_printf_float+0x250>
 800a36e:	e764      	b.n	800a23a <_printf_float+0xc2>
 800a370:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a374:	f240 80e0 	bls.w	800a538 <_printf_float+0x3c0>
 800a378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a37c:	2200      	movs	r2, #0
 800a37e:	2300      	movs	r3, #0
 800a380:	f7f6 fbaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800a384:	2800      	cmp	r0, #0
 800a386:	d034      	beq.n	800a3f2 <_printf_float+0x27a>
 800a388:	4a37      	ldr	r2, [pc, #220]	; (800a468 <_printf_float+0x2f0>)
 800a38a:	2301      	movs	r3, #1
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	47b8      	blx	r7
 800a392:	3001      	adds	r0, #1
 800a394:	f43f af51 	beq.w	800a23a <_printf_float+0xc2>
 800a398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a39c:	429a      	cmp	r2, r3
 800a39e:	db02      	blt.n	800a3a6 <_printf_float+0x22e>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	07d8      	lsls	r0, r3, #31
 800a3a4:	d510      	bpl.n	800a3c8 <_printf_float+0x250>
 800a3a6:	ee18 3a10 	vmov	r3, s16
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f af41 	beq.w	800a23a <_printf_float+0xc2>
 800a3b8:	f04f 0800 	mov.w	r8, #0
 800a3bc:	f104 091a 	add.w	r9, r4, #26
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	4543      	cmp	r3, r8
 800a3c6:	dc09      	bgt.n	800a3dc <_printf_float+0x264>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	079b      	lsls	r3, r3, #30
 800a3cc:	f100 8105 	bmi.w	800a5da <_printf_float+0x462>
 800a3d0:	68e0      	ldr	r0, [r4, #12]
 800a3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d4:	4298      	cmp	r0, r3
 800a3d6:	bfb8      	it	lt
 800a3d8:	4618      	movlt	r0, r3
 800a3da:	e730      	b.n	800a23e <_printf_float+0xc6>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	464a      	mov	r2, r9
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f43f af27 	beq.w	800a23a <_printf_float+0xc2>
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	e7e6      	b.n	800a3c0 <_printf_float+0x248>
 800a3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dc39      	bgt.n	800a46c <_printf_float+0x2f4>
 800a3f8:	4a1b      	ldr	r2, [pc, #108]	; (800a468 <_printf_float+0x2f0>)
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f af19 	beq.w	800a23a <_printf_float+0xc2>
 800a408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40c:	4313      	orrs	r3, r2
 800a40e:	d102      	bne.n	800a416 <_printf_float+0x29e>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	07d9      	lsls	r1, r3, #31
 800a414:	d5d8      	bpl.n	800a3c8 <_printf_float+0x250>
 800a416:	ee18 3a10 	vmov	r3, s16
 800a41a:	4652      	mov	r2, sl
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af09 	beq.w	800a23a <_printf_float+0xc2>
 800a428:	f04f 0900 	mov.w	r9, #0
 800a42c:	f104 0a1a 	add.w	sl, r4, #26
 800a430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a432:	425b      	negs	r3, r3
 800a434:	454b      	cmp	r3, r9
 800a436:	dc01      	bgt.n	800a43c <_printf_float+0x2c4>
 800a438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43a:	e792      	b.n	800a362 <_printf_float+0x1ea>
 800a43c:	2301      	movs	r3, #1
 800a43e:	4652      	mov	r2, sl
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	f43f aef7 	beq.w	800a23a <_printf_float+0xc2>
 800a44c:	f109 0901 	add.w	r9, r9, #1
 800a450:	e7ee      	b.n	800a430 <_printf_float+0x2b8>
 800a452:	bf00      	nop
 800a454:	7fefffff 	.word	0x7fefffff
 800a458:	0800efc4 	.word	0x0800efc4
 800a45c:	0800efc8 	.word	0x0800efc8
 800a460:	0800efd0 	.word	0x0800efd0
 800a464:	0800efcc 	.word	0x0800efcc
 800a468:	0800efd4 	.word	0x0800efd4
 800a46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a46e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a470:	429a      	cmp	r2, r3
 800a472:	bfa8      	it	ge
 800a474:	461a      	movge	r2, r3
 800a476:	2a00      	cmp	r2, #0
 800a478:	4691      	mov	r9, r2
 800a47a:	dc37      	bgt.n	800a4ec <_printf_float+0x374>
 800a47c:	f04f 0b00 	mov.w	fp, #0
 800a480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a484:	f104 021a 	add.w	r2, r4, #26
 800a488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	eba3 0309 	sub.w	r3, r3, r9
 800a490:	455b      	cmp	r3, fp
 800a492:	dc33      	bgt.n	800a4fc <_printf_float+0x384>
 800a494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a498:	429a      	cmp	r2, r3
 800a49a:	db3b      	blt.n	800a514 <_printf_float+0x39c>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	07da      	lsls	r2, r3, #31
 800a4a0:	d438      	bmi.n	800a514 <_printf_float+0x39c>
 800a4a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	eba2 0901 	sub.w	r9, r2, r1
 800a4ae:	4599      	cmp	r9, r3
 800a4b0:	bfa8      	it	ge
 800a4b2:	4699      	movge	r9, r3
 800a4b4:	f1b9 0f00 	cmp.w	r9, #0
 800a4b8:	dc35      	bgt.n	800a526 <_printf_float+0x3ae>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4c2:	f104 0a1a 	add.w	sl, r4, #26
 800a4c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ca:	1a9b      	subs	r3, r3, r2
 800a4cc:	eba3 0309 	sub.w	r3, r3, r9
 800a4d0:	4543      	cmp	r3, r8
 800a4d2:	f77f af79 	ble.w	800a3c8 <_printf_float+0x250>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4652      	mov	r2, sl
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	f43f aeaa 	beq.w	800a23a <_printf_float+0xc2>
 800a4e6:	f108 0801 	add.w	r8, r8, #1
 800a4ea:	e7ec      	b.n	800a4c6 <_printf_float+0x34e>
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	4631      	mov	r1, r6
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d1c0      	bne.n	800a47c <_printf_float+0x304>
 800a4fa:	e69e      	b.n	800a23a <_printf_float+0xc2>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	9205      	str	r2, [sp, #20]
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f ae97 	beq.w	800a23a <_printf_float+0xc2>
 800a50c:	9a05      	ldr	r2, [sp, #20]
 800a50e:	f10b 0b01 	add.w	fp, fp, #1
 800a512:	e7b9      	b.n	800a488 <_printf_float+0x310>
 800a514:	ee18 3a10 	vmov	r3, s16
 800a518:	4652      	mov	r2, sl
 800a51a:	4631      	mov	r1, r6
 800a51c:	4628      	mov	r0, r5
 800a51e:	47b8      	blx	r7
 800a520:	3001      	adds	r0, #1
 800a522:	d1be      	bne.n	800a4a2 <_printf_float+0x32a>
 800a524:	e689      	b.n	800a23a <_printf_float+0xc2>
 800a526:	9a05      	ldr	r2, [sp, #20]
 800a528:	464b      	mov	r3, r9
 800a52a:	4442      	add	r2, r8
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	d1c1      	bne.n	800a4ba <_printf_float+0x342>
 800a536:	e680      	b.n	800a23a <_printf_float+0xc2>
 800a538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a53a:	2a01      	cmp	r2, #1
 800a53c:	dc01      	bgt.n	800a542 <_printf_float+0x3ca>
 800a53e:	07db      	lsls	r3, r3, #31
 800a540:	d538      	bpl.n	800a5b4 <_printf_float+0x43c>
 800a542:	2301      	movs	r3, #1
 800a544:	4642      	mov	r2, r8
 800a546:	4631      	mov	r1, r6
 800a548:	4628      	mov	r0, r5
 800a54a:	47b8      	blx	r7
 800a54c:	3001      	adds	r0, #1
 800a54e:	f43f ae74 	beq.w	800a23a <_printf_float+0xc2>
 800a552:	ee18 3a10 	vmov	r3, s16
 800a556:	4652      	mov	r2, sl
 800a558:	4631      	mov	r1, r6
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b8      	blx	r7
 800a55e:	3001      	adds	r0, #1
 800a560:	f43f ae6b 	beq.w	800a23a <_printf_float+0xc2>
 800a564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a568:	2200      	movs	r2, #0
 800a56a:	2300      	movs	r3, #0
 800a56c:	f7f6 fab4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a570:	b9d8      	cbnz	r0, 800a5aa <_printf_float+0x432>
 800a572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a574:	f108 0201 	add.w	r2, r8, #1
 800a578:	3b01      	subs	r3, #1
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	d10e      	bne.n	800a5a2 <_printf_float+0x42a>
 800a584:	e659      	b.n	800a23a <_printf_float+0xc2>
 800a586:	2301      	movs	r3, #1
 800a588:	4652      	mov	r2, sl
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	f43f ae52 	beq.w	800a23a <_printf_float+0xc2>
 800a596:	f108 0801 	add.w	r8, r8, #1
 800a59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59c:	3b01      	subs	r3, #1
 800a59e:	4543      	cmp	r3, r8
 800a5a0:	dcf1      	bgt.n	800a586 <_printf_float+0x40e>
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5a8:	e6dc      	b.n	800a364 <_printf_float+0x1ec>
 800a5aa:	f04f 0800 	mov.w	r8, #0
 800a5ae:	f104 0a1a 	add.w	sl, r4, #26
 800a5b2:	e7f2      	b.n	800a59a <_printf_float+0x422>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	e7df      	b.n	800a57a <_printf_float+0x402>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	464a      	mov	r2, r9
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b8      	blx	r7
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	f43f ae38 	beq.w	800a23a <_printf_float+0xc2>
 800a5ca:	f108 0801 	add.w	r8, r8, #1
 800a5ce:	68e3      	ldr	r3, [r4, #12]
 800a5d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5d2:	1a5b      	subs	r3, r3, r1
 800a5d4:	4543      	cmp	r3, r8
 800a5d6:	dcf0      	bgt.n	800a5ba <_printf_float+0x442>
 800a5d8:	e6fa      	b.n	800a3d0 <_printf_float+0x258>
 800a5da:	f04f 0800 	mov.w	r8, #0
 800a5de:	f104 0919 	add.w	r9, r4, #25
 800a5e2:	e7f4      	b.n	800a5ce <_printf_float+0x456>

0800a5e4 <_printf_common>:
 800a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	4616      	mov	r6, r2
 800a5ea:	4699      	mov	r9, r3
 800a5ec:	688a      	ldr	r2, [r1, #8]
 800a5ee:	690b      	ldr	r3, [r1, #16]
 800a5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	bfb8      	it	lt
 800a5f8:	4613      	movlt	r3, r2
 800a5fa:	6033      	str	r3, [r6, #0]
 800a5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a600:	4607      	mov	r7, r0
 800a602:	460c      	mov	r4, r1
 800a604:	b10a      	cbz	r2, 800a60a <_printf_common+0x26>
 800a606:	3301      	adds	r3, #1
 800a608:	6033      	str	r3, [r6, #0]
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	0699      	lsls	r1, r3, #26
 800a60e:	bf42      	ittt	mi
 800a610:	6833      	ldrmi	r3, [r6, #0]
 800a612:	3302      	addmi	r3, #2
 800a614:	6033      	strmi	r3, [r6, #0]
 800a616:	6825      	ldr	r5, [r4, #0]
 800a618:	f015 0506 	ands.w	r5, r5, #6
 800a61c:	d106      	bne.n	800a62c <_printf_common+0x48>
 800a61e:	f104 0a19 	add.w	sl, r4, #25
 800a622:	68e3      	ldr	r3, [r4, #12]
 800a624:	6832      	ldr	r2, [r6, #0]
 800a626:	1a9b      	subs	r3, r3, r2
 800a628:	42ab      	cmp	r3, r5
 800a62a:	dc26      	bgt.n	800a67a <_printf_common+0x96>
 800a62c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a630:	1e13      	subs	r3, r2, #0
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	bf18      	it	ne
 800a636:	2301      	movne	r3, #1
 800a638:	0692      	lsls	r2, r2, #26
 800a63a:	d42b      	bmi.n	800a694 <_printf_common+0xb0>
 800a63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a640:	4649      	mov	r1, r9
 800a642:	4638      	mov	r0, r7
 800a644:	47c0      	blx	r8
 800a646:	3001      	adds	r0, #1
 800a648:	d01e      	beq.n	800a688 <_printf_common+0xa4>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	68e5      	ldr	r5, [r4, #12]
 800a64e:	6832      	ldr	r2, [r6, #0]
 800a650:	f003 0306 	and.w	r3, r3, #6
 800a654:	2b04      	cmp	r3, #4
 800a656:	bf08      	it	eq
 800a658:	1aad      	subeq	r5, r5, r2
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	6922      	ldr	r2, [r4, #16]
 800a65e:	bf0c      	ite	eq
 800a660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a664:	2500      	movne	r5, #0
 800a666:	4293      	cmp	r3, r2
 800a668:	bfc4      	itt	gt
 800a66a:	1a9b      	subgt	r3, r3, r2
 800a66c:	18ed      	addgt	r5, r5, r3
 800a66e:	2600      	movs	r6, #0
 800a670:	341a      	adds	r4, #26
 800a672:	42b5      	cmp	r5, r6
 800a674:	d11a      	bne.n	800a6ac <_printf_common+0xc8>
 800a676:	2000      	movs	r0, #0
 800a678:	e008      	b.n	800a68c <_printf_common+0xa8>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4652      	mov	r2, sl
 800a67e:	4649      	mov	r1, r9
 800a680:	4638      	mov	r0, r7
 800a682:	47c0      	blx	r8
 800a684:	3001      	adds	r0, #1
 800a686:	d103      	bne.n	800a690 <_printf_common+0xac>
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a690:	3501      	adds	r5, #1
 800a692:	e7c6      	b.n	800a622 <_printf_common+0x3e>
 800a694:	18e1      	adds	r1, r4, r3
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	2030      	movs	r0, #48	; 0x30
 800a69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a69e:	4422      	add	r2, r4
 800a6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6a8:	3302      	adds	r3, #2
 800a6aa:	e7c7      	b.n	800a63c <_printf_common+0x58>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d0e6      	beq.n	800a688 <_printf_common+0xa4>
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	e7d9      	b.n	800a672 <_printf_common+0x8e>
	...

0800a6c0 <_printf_i>:
 800a6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	4691      	mov	r9, r2
 800a6c8:	7e27      	ldrb	r7, [r4, #24]
 800a6ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6cc:	2f78      	cmp	r7, #120	; 0x78
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	469a      	mov	sl, r3
 800a6d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6d6:	d807      	bhi.n	800a6e8 <_printf_i+0x28>
 800a6d8:	2f62      	cmp	r7, #98	; 0x62
 800a6da:	d80a      	bhi.n	800a6f2 <_printf_i+0x32>
 800a6dc:	2f00      	cmp	r7, #0
 800a6de:	f000 80d8 	beq.w	800a892 <_printf_i+0x1d2>
 800a6e2:	2f58      	cmp	r7, #88	; 0x58
 800a6e4:	f000 80a3 	beq.w	800a82e <_printf_i+0x16e>
 800a6e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6f0:	e03a      	b.n	800a768 <_printf_i+0xa8>
 800a6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6f6:	2b15      	cmp	r3, #21
 800a6f8:	d8f6      	bhi.n	800a6e8 <_printf_i+0x28>
 800a6fa:	a001      	add	r0, pc, #4	; (adr r0, 800a700 <_printf_i+0x40>)
 800a6fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a700:	0800a759 	.word	0x0800a759
 800a704:	0800a76d 	.word	0x0800a76d
 800a708:	0800a6e9 	.word	0x0800a6e9
 800a70c:	0800a6e9 	.word	0x0800a6e9
 800a710:	0800a6e9 	.word	0x0800a6e9
 800a714:	0800a6e9 	.word	0x0800a6e9
 800a718:	0800a76d 	.word	0x0800a76d
 800a71c:	0800a6e9 	.word	0x0800a6e9
 800a720:	0800a6e9 	.word	0x0800a6e9
 800a724:	0800a6e9 	.word	0x0800a6e9
 800a728:	0800a6e9 	.word	0x0800a6e9
 800a72c:	0800a879 	.word	0x0800a879
 800a730:	0800a79d 	.word	0x0800a79d
 800a734:	0800a85b 	.word	0x0800a85b
 800a738:	0800a6e9 	.word	0x0800a6e9
 800a73c:	0800a6e9 	.word	0x0800a6e9
 800a740:	0800a89b 	.word	0x0800a89b
 800a744:	0800a6e9 	.word	0x0800a6e9
 800a748:	0800a79d 	.word	0x0800a79d
 800a74c:	0800a6e9 	.word	0x0800a6e9
 800a750:	0800a6e9 	.word	0x0800a6e9
 800a754:	0800a863 	.word	0x0800a863
 800a758:	680b      	ldr	r3, [r1, #0]
 800a75a:	1d1a      	adds	r2, r3, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	600a      	str	r2, [r1, #0]
 800a760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a768:	2301      	movs	r3, #1
 800a76a:	e0a3      	b.n	800a8b4 <_printf_i+0x1f4>
 800a76c:	6825      	ldr	r5, [r4, #0]
 800a76e:	6808      	ldr	r0, [r1, #0]
 800a770:	062e      	lsls	r6, r5, #24
 800a772:	f100 0304 	add.w	r3, r0, #4
 800a776:	d50a      	bpl.n	800a78e <_printf_i+0xce>
 800a778:	6805      	ldr	r5, [r0, #0]
 800a77a:	600b      	str	r3, [r1, #0]
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	da03      	bge.n	800a788 <_printf_i+0xc8>
 800a780:	232d      	movs	r3, #45	; 0x2d
 800a782:	426d      	negs	r5, r5
 800a784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a788:	485e      	ldr	r0, [pc, #376]	; (800a904 <_printf_i+0x244>)
 800a78a:	230a      	movs	r3, #10
 800a78c:	e019      	b.n	800a7c2 <_printf_i+0x102>
 800a78e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a792:	6805      	ldr	r5, [r0, #0]
 800a794:	600b      	str	r3, [r1, #0]
 800a796:	bf18      	it	ne
 800a798:	b22d      	sxthne	r5, r5
 800a79a:	e7ef      	b.n	800a77c <_printf_i+0xbc>
 800a79c:	680b      	ldr	r3, [r1, #0]
 800a79e:	6825      	ldr	r5, [r4, #0]
 800a7a0:	1d18      	adds	r0, r3, #4
 800a7a2:	6008      	str	r0, [r1, #0]
 800a7a4:	0628      	lsls	r0, r5, #24
 800a7a6:	d501      	bpl.n	800a7ac <_printf_i+0xec>
 800a7a8:	681d      	ldr	r5, [r3, #0]
 800a7aa:	e002      	b.n	800a7b2 <_printf_i+0xf2>
 800a7ac:	0669      	lsls	r1, r5, #25
 800a7ae:	d5fb      	bpl.n	800a7a8 <_printf_i+0xe8>
 800a7b0:	881d      	ldrh	r5, [r3, #0]
 800a7b2:	4854      	ldr	r0, [pc, #336]	; (800a904 <_printf_i+0x244>)
 800a7b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7b6:	bf0c      	ite	eq
 800a7b8:	2308      	moveq	r3, #8
 800a7ba:	230a      	movne	r3, #10
 800a7bc:	2100      	movs	r1, #0
 800a7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7c2:	6866      	ldr	r6, [r4, #4]
 800a7c4:	60a6      	str	r6, [r4, #8]
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	bfa2      	ittt	ge
 800a7ca:	6821      	ldrge	r1, [r4, #0]
 800a7cc:	f021 0104 	bicge.w	r1, r1, #4
 800a7d0:	6021      	strge	r1, [r4, #0]
 800a7d2:	b90d      	cbnz	r5, 800a7d8 <_printf_i+0x118>
 800a7d4:	2e00      	cmp	r6, #0
 800a7d6:	d04d      	beq.n	800a874 <_printf_i+0x1b4>
 800a7d8:	4616      	mov	r6, r2
 800a7da:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7de:	fb03 5711 	mls	r7, r3, r1, r5
 800a7e2:	5dc7      	ldrb	r7, [r0, r7]
 800a7e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7e8:	462f      	mov	r7, r5
 800a7ea:	42bb      	cmp	r3, r7
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	d9f4      	bls.n	800a7da <_printf_i+0x11a>
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d10b      	bne.n	800a80c <_printf_i+0x14c>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	07df      	lsls	r7, r3, #31
 800a7f8:	d508      	bpl.n	800a80c <_printf_i+0x14c>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	6861      	ldr	r1, [r4, #4]
 800a7fe:	4299      	cmp	r1, r3
 800a800:	bfde      	ittt	le
 800a802:	2330      	movle	r3, #48	; 0x30
 800a804:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a808:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a80c:	1b92      	subs	r2, r2, r6
 800a80e:	6122      	str	r2, [r4, #16]
 800a810:	f8cd a000 	str.w	sl, [sp]
 800a814:	464b      	mov	r3, r9
 800a816:	aa03      	add	r2, sp, #12
 800a818:	4621      	mov	r1, r4
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7ff fee2 	bl	800a5e4 <_printf_common>
 800a820:	3001      	adds	r0, #1
 800a822:	d14c      	bne.n	800a8be <_printf_i+0x1fe>
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	b004      	add	sp, #16
 800a82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82e:	4835      	ldr	r0, [pc, #212]	; (800a904 <_printf_i+0x244>)
 800a830:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	680e      	ldr	r6, [r1, #0]
 800a838:	061f      	lsls	r7, r3, #24
 800a83a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a83e:	600e      	str	r6, [r1, #0]
 800a840:	d514      	bpl.n	800a86c <_printf_i+0x1ac>
 800a842:	07d9      	lsls	r1, r3, #31
 800a844:	bf44      	itt	mi
 800a846:	f043 0320 	orrmi.w	r3, r3, #32
 800a84a:	6023      	strmi	r3, [r4, #0]
 800a84c:	b91d      	cbnz	r5, 800a856 <_printf_i+0x196>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	f023 0320 	bic.w	r3, r3, #32
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	2310      	movs	r3, #16
 800a858:	e7b0      	b.n	800a7bc <_printf_i+0xfc>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	f043 0320 	orr.w	r3, r3, #32
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	2378      	movs	r3, #120	; 0x78
 800a864:	4828      	ldr	r0, [pc, #160]	; (800a908 <_printf_i+0x248>)
 800a866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a86a:	e7e3      	b.n	800a834 <_printf_i+0x174>
 800a86c:	065e      	lsls	r6, r3, #25
 800a86e:	bf48      	it	mi
 800a870:	b2ad      	uxthmi	r5, r5
 800a872:	e7e6      	b.n	800a842 <_printf_i+0x182>
 800a874:	4616      	mov	r6, r2
 800a876:	e7bb      	b.n	800a7f0 <_printf_i+0x130>
 800a878:	680b      	ldr	r3, [r1, #0]
 800a87a:	6826      	ldr	r6, [r4, #0]
 800a87c:	6960      	ldr	r0, [r4, #20]
 800a87e:	1d1d      	adds	r5, r3, #4
 800a880:	600d      	str	r5, [r1, #0]
 800a882:	0635      	lsls	r5, r6, #24
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	d501      	bpl.n	800a88c <_printf_i+0x1cc>
 800a888:	6018      	str	r0, [r3, #0]
 800a88a:	e002      	b.n	800a892 <_printf_i+0x1d2>
 800a88c:	0671      	lsls	r1, r6, #25
 800a88e:	d5fb      	bpl.n	800a888 <_printf_i+0x1c8>
 800a890:	8018      	strh	r0, [r3, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	4616      	mov	r6, r2
 800a898:	e7ba      	b.n	800a810 <_printf_i+0x150>
 800a89a:	680b      	ldr	r3, [r1, #0]
 800a89c:	1d1a      	adds	r2, r3, #4
 800a89e:	600a      	str	r2, [r1, #0]
 800a8a0:	681e      	ldr	r6, [r3, #0]
 800a8a2:	6862      	ldr	r2, [r4, #4]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f7f5 fca2 	bl	80001f0 <memchr>
 800a8ac:	b108      	cbz	r0, 800a8b2 <_printf_i+0x1f2>
 800a8ae:	1b80      	subs	r0, r0, r6
 800a8b0:	6060      	str	r0, [r4, #4]
 800a8b2:	6863      	ldr	r3, [r4, #4]
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8bc:	e7a8      	b.n	800a810 <_printf_i+0x150>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	47d0      	blx	sl
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d0ab      	beq.n	800a824 <_printf_i+0x164>
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	079b      	lsls	r3, r3, #30
 800a8d0:	d413      	bmi.n	800a8fa <_printf_i+0x23a>
 800a8d2:	68e0      	ldr	r0, [r4, #12]
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	4298      	cmp	r0, r3
 800a8d8:	bfb8      	it	lt
 800a8da:	4618      	movlt	r0, r3
 800a8dc:	e7a4      	b.n	800a828 <_printf_i+0x168>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	47d0      	blx	sl
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d09b      	beq.n	800a824 <_printf_i+0x164>
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	9903      	ldr	r1, [sp, #12]
 800a8f2:	1a5b      	subs	r3, r3, r1
 800a8f4:	42ab      	cmp	r3, r5
 800a8f6:	dcf2      	bgt.n	800a8de <_printf_i+0x21e>
 800a8f8:	e7eb      	b.n	800a8d2 <_printf_i+0x212>
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	f104 0619 	add.w	r6, r4, #25
 800a900:	e7f5      	b.n	800a8ee <_printf_i+0x22e>
 800a902:	bf00      	nop
 800a904:	0800efd6 	.word	0x0800efd6
 800a908:	0800efe7 	.word	0x0800efe7

0800a90c <iprintf>:
 800a90c:	b40f      	push	{r0, r1, r2, r3}
 800a90e:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <iprintf+0x2c>)
 800a910:	b513      	push	{r0, r1, r4, lr}
 800a912:	681c      	ldr	r4, [r3, #0]
 800a914:	b124      	cbz	r4, 800a920 <iprintf+0x14>
 800a916:	69a3      	ldr	r3, [r4, #24]
 800a918:	b913      	cbnz	r3, 800a920 <iprintf+0x14>
 800a91a:	4620      	mov	r0, r4
 800a91c:	f001 ff42 	bl	800c7a4 <__sinit>
 800a920:	ab05      	add	r3, sp, #20
 800a922:	9a04      	ldr	r2, [sp, #16]
 800a924:	68a1      	ldr	r1, [r4, #8]
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	4620      	mov	r0, r4
 800a92a:	f003 fad5 	bl	800ded8 <_vfiprintf_r>
 800a92e:	b002      	add	sp, #8
 800a930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a934:	b004      	add	sp, #16
 800a936:	4770      	bx	lr
 800a938:	20000014 	.word	0x20000014

0800a93c <_puts_r>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	460e      	mov	r6, r1
 800a940:	4605      	mov	r5, r0
 800a942:	b118      	cbz	r0, 800a94c <_puts_r+0x10>
 800a944:	6983      	ldr	r3, [r0, #24]
 800a946:	b90b      	cbnz	r3, 800a94c <_puts_r+0x10>
 800a948:	f001 ff2c 	bl	800c7a4 <__sinit>
 800a94c:	69ab      	ldr	r3, [r5, #24]
 800a94e:	68ac      	ldr	r4, [r5, #8]
 800a950:	b913      	cbnz	r3, 800a958 <_puts_r+0x1c>
 800a952:	4628      	mov	r0, r5
 800a954:	f001 ff26 	bl	800c7a4 <__sinit>
 800a958:	4b2c      	ldr	r3, [pc, #176]	; (800aa0c <_puts_r+0xd0>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d120      	bne.n	800a9a0 <_puts_r+0x64>
 800a95e:	686c      	ldr	r4, [r5, #4]
 800a960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a962:	07db      	lsls	r3, r3, #31
 800a964:	d405      	bmi.n	800a972 <_puts_r+0x36>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	0598      	lsls	r0, r3, #22
 800a96a:	d402      	bmi.n	800a972 <_puts_r+0x36>
 800a96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a96e:	f002 fb2a 	bl	800cfc6 <__retarget_lock_acquire_recursive>
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	0719      	lsls	r1, r3, #28
 800a976:	d51d      	bpl.n	800a9b4 <_puts_r+0x78>
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	b1db      	cbz	r3, 800a9b4 <_puts_r+0x78>
 800a97c:	3e01      	subs	r6, #1
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a984:	3b01      	subs	r3, #1
 800a986:	60a3      	str	r3, [r4, #8]
 800a988:	bb39      	cbnz	r1, 800a9da <_puts_r+0x9e>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	da38      	bge.n	800aa00 <_puts_r+0xc4>
 800a98e:	4622      	mov	r2, r4
 800a990:	210a      	movs	r1, #10
 800a992:	4628      	mov	r0, r5
 800a994:	f000 feb2 	bl	800b6fc <__swbuf_r>
 800a998:	3001      	adds	r0, #1
 800a99a:	d011      	beq.n	800a9c0 <_puts_r+0x84>
 800a99c:	250a      	movs	r5, #10
 800a99e:	e011      	b.n	800a9c4 <_puts_r+0x88>
 800a9a0:	4b1b      	ldr	r3, [pc, #108]	; (800aa10 <_puts_r+0xd4>)
 800a9a2:	429c      	cmp	r4, r3
 800a9a4:	d101      	bne.n	800a9aa <_puts_r+0x6e>
 800a9a6:	68ac      	ldr	r4, [r5, #8]
 800a9a8:	e7da      	b.n	800a960 <_puts_r+0x24>
 800a9aa:	4b1a      	ldr	r3, [pc, #104]	; (800aa14 <_puts_r+0xd8>)
 800a9ac:	429c      	cmp	r4, r3
 800a9ae:	bf08      	it	eq
 800a9b0:	68ec      	ldreq	r4, [r5, #12]
 800a9b2:	e7d5      	b.n	800a960 <_puts_r+0x24>
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fef2 	bl	800b7a0 <__swsetup_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d0dd      	beq.n	800a97c <_puts_r+0x40>
 800a9c0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9c6:	07da      	lsls	r2, r3, #31
 800a9c8:	d405      	bmi.n	800a9d6 <_puts_r+0x9a>
 800a9ca:	89a3      	ldrh	r3, [r4, #12]
 800a9cc:	059b      	lsls	r3, r3, #22
 800a9ce:	d402      	bmi.n	800a9d6 <_puts_r+0x9a>
 800a9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d2:	f002 faf9 	bl	800cfc8 <__retarget_lock_release_recursive>
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	da04      	bge.n	800a9e8 <_puts_r+0xac>
 800a9de:	69a2      	ldr	r2, [r4, #24]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	dc06      	bgt.n	800a9f2 <_puts_r+0xb6>
 800a9e4:	290a      	cmp	r1, #10
 800a9e6:	d004      	beq.n	800a9f2 <_puts_r+0xb6>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	6022      	str	r2, [r4, #0]
 800a9ee:	7019      	strb	r1, [r3, #0]
 800a9f0:	e7c5      	b.n	800a97e <_puts_r+0x42>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f000 fe81 	bl	800b6fc <__swbuf_r>
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d1bf      	bne.n	800a97e <_puts_r+0x42>
 800a9fe:	e7df      	b.n	800a9c0 <_puts_r+0x84>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	250a      	movs	r5, #10
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	6022      	str	r2, [r4, #0]
 800aa08:	701d      	strb	r5, [r3, #0]
 800aa0a:	e7db      	b.n	800a9c4 <_puts_r+0x88>
 800aa0c:	0800f0fc 	.word	0x0800f0fc
 800aa10:	0800f11c 	.word	0x0800f11c
 800aa14:	0800f0dc 	.word	0x0800f0dc

0800aa18 <puts>:
 800aa18:	4b02      	ldr	r3, [pc, #8]	; (800aa24 <puts+0xc>)
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	f7ff bf8d 	b.w	800a93c <_puts_r>
 800aa22:	bf00      	nop
 800aa24:	20000014 	.word	0x20000014

0800aa28 <siprintf>:
 800aa28:	b40e      	push	{r1, r2, r3}
 800aa2a:	b500      	push	{lr}
 800aa2c:	b09c      	sub	sp, #112	; 0x70
 800aa2e:	ab1d      	add	r3, sp, #116	; 0x74
 800aa30:	9002      	str	r0, [sp, #8]
 800aa32:	9006      	str	r0, [sp, #24]
 800aa34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa38:	4809      	ldr	r0, [pc, #36]	; (800aa60 <siprintf+0x38>)
 800aa3a:	9107      	str	r1, [sp, #28]
 800aa3c:	9104      	str	r1, [sp, #16]
 800aa3e:	4909      	ldr	r1, [pc, #36]	; (800aa64 <siprintf+0x3c>)
 800aa40:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa44:	9105      	str	r1, [sp, #20]
 800aa46:	6800      	ldr	r0, [r0, #0]
 800aa48:	9301      	str	r3, [sp, #4]
 800aa4a:	a902      	add	r1, sp, #8
 800aa4c:	f003 f91a 	bl	800dc84 <_svfiprintf_r>
 800aa50:	9b02      	ldr	r3, [sp, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	b01c      	add	sp, #112	; 0x70
 800aa58:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa5c:	b003      	add	sp, #12
 800aa5e:	4770      	bx	lr
 800aa60:	20000014 	.word	0x20000014
 800aa64:	ffff0208 	.word	0xffff0208

0800aa68 <strstr>:
 800aa68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6a:	780c      	ldrb	r4, [r1, #0]
 800aa6c:	b164      	cbz	r4, 800aa88 <strstr+0x20>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	4618      	mov	r0, r3
 800aa74:	1c5e      	adds	r6, r3, #1
 800aa76:	b90a      	cbnz	r2, 800aa7c <strstr+0x14>
 800aa78:	4610      	mov	r0, r2
 800aa7a:	e005      	b.n	800aa88 <strstr+0x20>
 800aa7c:	4294      	cmp	r4, r2
 800aa7e:	d108      	bne.n	800aa92 <strstr+0x2a>
 800aa80:	460d      	mov	r5, r1
 800aa82:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800aa86:	b902      	cbnz	r2, 800aa8a <strstr+0x22>
 800aa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa8a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800aa8e:	4297      	cmp	r7, r2
 800aa90:	d0f7      	beq.n	800aa82 <strstr+0x1a>
 800aa92:	4633      	mov	r3, r6
 800aa94:	e7ec      	b.n	800aa70 <strstr+0x8>

0800aa96 <sulp>:
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	4604      	mov	r4, r0
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	ec45 4b10 	vmov	d0, r4, r5
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	f002 fe8b 	bl	800d7bc <__ulp>
 800aaa6:	ec51 0b10 	vmov	r0, r1, d0
 800aaaa:	b17e      	cbz	r6, 800aacc <sulp+0x36>
 800aaac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aab0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dd09      	ble.n	800aacc <sulp+0x36>
 800aab8:	051b      	lsls	r3, r3, #20
 800aaba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aabe:	2400      	movs	r4, #0
 800aac0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aac4:	4622      	mov	r2, r4
 800aac6:	462b      	mov	r3, r5
 800aac8:	f7f5 fd9e 	bl	8000608 <__aeabi_dmul>
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aad0 <_strtod_l>:
 800aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	b0a3      	sub	sp, #140	; 0x8c
 800aad6:	461f      	mov	r7, r3
 800aad8:	2300      	movs	r3, #0
 800aada:	931e      	str	r3, [sp, #120]	; 0x78
 800aadc:	4ba4      	ldr	r3, [pc, #656]	; (800ad70 <_strtod_l+0x2a0>)
 800aade:	9219      	str	r2, [sp, #100]	; 0x64
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	9307      	str	r3, [sp, #28]
 800aae4:	4604      	mov	r4, r0
 800aae6:	4618      	mov	r0, r3
 800aae8:	4688      	mov	r8, r1
 800aaea:	f7f5 fb79 	bl	80001e0 <strlen>
 800aaee:	f04f 0a00 	mov.w	sl, #0
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	f04f 0b00 	mov.w	fp, #0
 800aaf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800aafc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	2a2b      	cmp	r2, #43	; 0x2b
 800ab02:	d04c      	beq.n	800ab9e <_strtod_l+0xce>
 800ab04:	d839      	bhi.n	800ab7a <_strtod_l+0xaa>
 800ab06:	2a0d      	cmp	r2, #13
 800ab08:	d832      	bhi.n	800ab70 <_strtod_l+0xa0>
 800ab0a:	2a08      	cmp	r2, #8
 800ab0c:	d832      	bhi.n	800ab74 <_strtod_l+0xa4>
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	d03c      	beq.n	800ab8c <_strtod_l+0xbc>
 800ab12:	2300      	movs	r3, #0
 800ab14:	930e      	str	r3, [sp, #56]	; 0x38
 800ab16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ab18:	7833      	ldrb	r3, [r6, #0]
 800ab1a:	2b30      	cmp	r3, #48	; 0x30
 800ab1c:	f040 80b4 	bne.w	800ac88 <_strtod_l+0x1b8>
 800ab20:	7873      	ldrb	r3, [r6, #1]
 800ab22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab26:	2b58      	cmp	r3, #88	; 0x58
 800ab28:	d16c      	bne.n	800ac04 <_strtod_l+0x134>
 800ab2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	ab1e      	add	r3, sp, #120	; 0x78
 800ab30:	9702      	str	r7, [sp, #8]
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	4a8f      	ldr	r2, [pc, #572]	; (800ad74 <_strtod_l+0x2a4>)
 800ab36:	ab1f      	add	r3, sp, #124	; 0x7c
 800ab38:	a91d      	add	r1, sp, #116	; 0x74
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f001 ff36 	bl	800c9ac <__gethex>
 800ab40:	f010 0707 	ands.w	r7, r0, #7
 800ab44:	4605      	mov	r5, r0
 800ab46:	d005      	beq.n	800ab54 <_strtod_l+0x84>
 800ab48:	2f06      	cmp	r7, #6
 800ab4a:	d12a      	bne.n	800aba2 <_strtod_l+0xd2>
 800ab4c:	3601      	adds	r6, #1
 800ab4e:	2300      	movs	r3, #0
 800ab50:	961d      	str	r6, [sp, #116]	; 0x74
 800ab52:	930e      	str	r3, [sp, #56]	; 0x38
 800ab54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f040 8596 	bne.w	800b688 <_strtod_l+0xbb8>
 800ab5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab5e:	b1db      	cbz	r3, 800ab98 <_strtod_l+0xc8>
 800ab60:	4652      	mov	r2, sl
 800ab62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab66:	ec43 2b10 	vmov	d0, r2, r3
 800ab6a:	b023      	add	sp, #140	; 0x8c
 800ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab70:	2a20      	cmp	r2, #32
 800ab72:	d1ce      	bne.n	800ab12 <_strtod_l+0x42>
 800ab74:	3301      	adds	r3, #1
 800ab76:	931d      	str	r3, [sp, #116]	; 0x74
 800ab78:	e7c0      	b.n	800aafc <_strtod_l+0x2c>
 800ab7a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab7c:	d1c9      	bne.n	800ab12 <_strtod_l+0x42>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	920e      	str	r2, [sp, #56]	; 0x38
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	921d      	str	r2, [sp, #116]	; 0x74
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1c4      	bne.n	800ab16 <_strtod_l+0x46>
 800ab8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 8576 	bne.w	800b684 <_strtod_l+0xbb4>
 800ab98:	4652      	mov	r2, sl
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	e7e3      	b.n	800ab66 <_strtod_l+0x96>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	e7ee      	b.n	800ab80 <_strtod_l+0xb0>
 800aba2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aba4:	b13a      	cbz	r2, 800abb6 <_strtod_l+0xe6>
 800aba6:	2135      	movs	r1, #53	; 0x35
 800aba8:	a820      	add	r0, sp, #128	; 0x80
 800abaa:	f002 ff12 	bl	800d9d2 <__copybits>
 800abae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800abb0:	4620      	mov	r0, r4
 800abb2:	f002 fad7 	bl	800d164 <_Bfree>
 800abb6:	3f01      	subs	r7, #1
 800abb8:	2f05      	cmp	r7, #5
 800abba:	d807      	bhi.n	800abcc <_strtod_l+0xfc>
 800abbc:	e8df f007 	tbb	[pc, r7]
 800abc0:	1d180b0e 	.word	0x1d180b0e
 800abc4:	030e      	.short	0x030e
 800abc6:	f04f 0b00 	mov.w	fp, #0
 800abca:	46da      	mov	sl, fp
 800abcc:	0728      	lsls	r0, r5, #28
 800abce:	d5c1      	bpl.n	800ab54 <_strtod_l+0x84>
 800abd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800abd4:	e7be      	b.n	800ab54 <_strtod_l+0x84>
 800abd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800abda:	e7f7      	b.n	800abcc <_strtod_l+0xfc>
 800abdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800abe0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800abe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abe6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800abee:	e7ed      	b.n	800abcc <_strtod_l+0xfc>
 800abf0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ad78 <_strtod_l+0x2a8>
 800abf4:	f04f 0a00 	mov.w	sl, #0
 800abf8:	e7e8      	b.n	800abcc <_strtod_l+0xfc>
 800abfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800abfe:	f04f 3aff 	mov.w	sl, #4294967295
 800ac02:	e7e3      	b.n	800abcc <_strtod_l+0xfc>
 800ac04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac06:	1c5a      	adds	r2, r3, #1
 800ac08:	921d      	str	r2, [sp, #116]	; 0x74
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	2b30      	cmp	r3, #48	; 0x30
 800ac0e:	d0f9      	beq.n	800ac04 <_strtod_l+0x134>
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d09f      	beq.n	800ab54 <_strtod_l+0x84>
 800ac14:	2301      	movs	r3, #1
 800ac16:	f04f 0900 	mov.w	r9, #0
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ac24:	464f      	mov	r7, r9
 800ac26:	220a      	movs	r2, #10
 800ac28:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ac2a:	7806      	ldrb	r6, [r0, #0]
 800ac2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac30:	b2d9      	uxtb	r1, r3
 800ac32:	2909      	cmp	r1, #9
 800ac34:	d92a      	bls.n	800ac8c <_strtod_l+0x1bc>
 800ac36:	9907      	ldr	r1, [sp, #28]
 800ac38:	462a      	mov	r2, r5
 800ac3a:	f003 fad8 	bl	800e1ee <strncmp>
 800ac3e:	b398      	cbz	r0, 800aca8 <_strtod_l+0x1d8>
 800ac40:	2000      	movs	r0, #0
 800ac42:	4633      	mov	r3, r6
 800ac44:	463d      	mov	r5, r7
 800ac46:	9007      	str	r0, [sp, #28]
 800ac48:	4602      	mov	r2, r0
 800ac4a:	2b65      	cmp	r3, #101	; 0x65
 800ac4c:	d001      	beq.n	800ac52 <_strtod_l+0x182>
 800ac4e:	2b45      	cmp	r3, #69	; 0x45
 800ac50:	d118      	bne.n	800ac84 <_strtod_l+0x1b4>
 800ac52:	b91d      	cbnz	r5, 800ac5c <_strtod_l+0x18c>
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	4303      	orrs	r3, r0
 800ac58:	d098      	beq.n	800ab8c <_strtod_l+0xbc>
 800ac5a:	2500      	movs	r5, #0
 800ac5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ac60:	f108 0301 	add.w	r3, r8, #1
 800ac64:	931d      	str	r3, [sp, #116]	; 0x74
 800ac66:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac6a:	2b2b      	cmp	r3, #43	; 0x2b
 800ac6c:	d075      	beq.n	800ad5a <_strtod_l+0x28a>
 800ac6e:	2b2d      	cmp	r3, #45	; 0x2d
 800ac70:	d07b      	beq.n	800ad6a <_strtod_l+0x29a>
 800ac72:	f04f 0c00 	mov.w	ip, #0
 800ac76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ac7a:	2909      	cmp	r1, #9
 800ac7c:	f240 8082 	bls.w	800ad84 <_strtod_l+0x2b4>
 800ac80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ac84:	2600      	movs	r6, #0
 800ac86:	e09d      	b.n	800adc4 <_strtod_l+0x2f4>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e7c4      	b.n	800ac16 <_strtod_l+0x146>
 800ac8c:	2f08      	cmp	r7, #8
 800ac8e:	bfd8      	it	le
 800ac90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ac92:	f100 0001 	add.w	r0, r0, #1
 800ac96:	bfda      	itte	le
 800ac98:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac9c:	9309      	strle	r3, [sp, #36]	; 0x24
 800ac9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aca2:	3701      	adds	r7, #1
 800aca4:	901d      	str	r0, [sp, #116]	; 0x74
 800aca6:	e7bf      	b.n	800ac28 <_strtod_l+0x158>
 800aca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800acaa:	195a      	adds	r2, r3, r5
 800acac:	921d      	str	r2, [sp, #116]	; 0x74
 800acae:	5d5b      	ldrb	r3, [r3, r5]
 800acb0:	2f00      	cmp	r7, #0
 800acb2:	d037      	beq.n	800ad24 <_strtod_l+0x254>
 800acb4:	9007      	str	r0, [sp, #28]
 800acb6:	463d      	mov	r5, r7
 800acb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800acbc:	2a09      	cmp	r2, #9
 800acbe:	d912      	bls.n	800ace6 <_strtod_l+0x216>
 800acc0:	2201      	movs	r2, #1
 800acc2:	e7c2      	b.n	800ac4a <_strtod_l+0x17a>
 800acc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	921d      	str	r2, [sp, #116]	; 0x74
 800acca:	785b      	ldrb	r3, [r3, #1]
 800accc:	3001      	adds	r0, #1
 800acce:	2b30      	cmp	r3, #48	; 0x30
 800acd0:	d0f8      	beq.n	800acc4 <_strtod_l+0x1f4>
 800acd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800acd6:	2a08      	cmp	r2, #8
 800acd8:	f200 84db 	bhi.w	800b692 <_strtod_l+0xbc2>
 800acdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800acde:	9007      	str	r0, [sp, #28]
 800ace0:	2000      	movs	r0, #0
 800ace2:	920a      	str	r2, [sp, #40]	; 0x28
 800ace4:	4605      	mov	r5, r0
 800ace6:	3b30      	subs	r3, #48	; 0x30
 800ace8:	f100 0201 	add.w	r2, r0, #1
 800acec:	d014      	beq.n	800ad18 <_strtod_l+0x248>
 800acee:	9907      	ldr	r1, [sp, #28]
 800acf0:	4411      	add	r1, r2
 800acf2:	9107      	str	r1, [sp, #28]
 800acf4:	462a      	mov	r2, r5
 800acf6:	eb00 0e05 	add.w	lr, r0, r5
 800acfa:	210a      	movs	r1, #10
 800acfc:	4572      	cmp	r2, lr
 800acfe:	d113      	bne.n	800ad28 <_strtod_l+0x258>
 800ad00:	182a      	adds	r2, r5, r0
 800ad02:	2a08      	cmp	r2, #8
 800ad04:	f105 0501 	add.w	r5, r5, #1
 800ad08:	4405      	add	r5, r0
 800ad0a:	dc1c      	bgt.n	800ad46 <_strtod_l+0x276>
 800ad0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad0e:	220a      	movs	r2, #10
 800ad10:	fb02 3301 	mla	r3, r2, r1, r3
 800ad14:	9309      	str	r3, [sp, #36]	; 0x24
 800ad16:	2200      	movs	r2, #0
 800ad18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	911d      	str	r1, [sp, #116]	; 0x74
 800ad1e:	785b      	ldrb	r3, [r3, #1]
 800ad20:	4610      	mov	r0, r2
 800ad22:	e7c9      	b.n	800acb8 <_strtod_l+0x1e8>
 800ad24:	4638      	mov	r0, r7
 800ad26:	e7d2      	b.n	800acce <_strtod_l+0x1fe>
 800ad28:	2a08      	cmp	r2, #8
 800ad2a:	dc04      	bgt.n	800ad36 <_strtod_l+0x266>
 800ad2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ad2e:	434e      	muls	r6, r1
 800ad30:	9609      	str	r6, [sp, #36]	; 0x24
 800ad32:	3201      	adds	r2, #1
 800ad34:	e7e2      	b.n	800acfc <_strtod_l+0x22c>
 800ad36:	f102 0c01 	add.w	ip, r2, #1
 800ad3a:	f1bc 0f10 	cmp.w	ip, #16
 800ad3e:	bfd8      	it	le
 800ad40:	fb01 f909 	mulle.w	r9, r1, r9
 800ad44:	e7f5      	b.n	800ad32 <_strtod_l+0x262>
 800ad46:	2d10      	cmp	r5, #16
 800ad48:	bfdc      	itt	le
 800ad4a:	220a      	movle	r2, #10
 800ad4c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ad50:	e7e1      	b.n	800ad16 <_strtod_l+0x246>
 800ad52:	2300      	movs	r3, #0
 800ad54:	9307      	str	r3, [sp, #28]
 800ad56:	2201      	movs	r2, #1
 800ad58:	e77c      	b.n	800ac54 <_strtod_l+0x184>
 800ad5a:	f04f 0c00 	mov.w	ip, #0
 800ad5e:	f108 0302 	add.w	r3, r8, #2
 800ad62:	931d      	str	r3, [sp, #116]	; 0x74
 800ad64:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ad68:	e785      	b.n	800ac76 <_strtod_l+0x1a6>
 800ad6a:	f04f 0c01 	mov.w	ip, #1
 800ad6e:	e7f6      	b.n	800ad5e <_strtod_l+0x28e>
 800ad70:	0800f1a8 	.word	0x0800f1a8
 800ad74:	0800eff8 	.word	0x0800eff8
 800ad78:	7ff00000 	.word	0x7ff00000
 800ad7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad7e:	1c59      	adds	r1, r3, #1
 800ad80:	911d      	str	r1, [sp, #116]	; 0x74
 800ad82:	785b      	ldrb	r3, [r3, #1]
 800ad84:	2b30      	cmp	r3, #48	; 0x30
 800ad86:	d0f9      	beq.n	800ad7c <_strtod_l+0x2ac>
 800ad88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ad8c:	2908      	cmp	r1, #8
 800ad8e:	f63f af79 	bhi.w	800ac84 <_strtod_l+0x1b4>
 800ad92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ad96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad98:	9308      	str	r3, [sp, #32]
 800ad9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad9c:	1c59      	adds	r1, r3, #1
 800ad9e:	911d      	str	r1, [sp, #116]	; 0x74
 800ada0:	785b      	ldrb	r3, [r3, #1]
 800ada2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ada6:	2e09      	cmp	r6, #9
 800ada8:	d937      	bls.n	800ae1a <_strtod_l+0x34a>
 800adaa:	9e08      	ldr	r6, [sp, #32]
 800adac:	1b89      	subs	r1, r1, r6
 800adae:	2908      	cmp	r1, #8
 800adb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800adb4:	dc02      	bgt.n	800adbc <_strtod_l+0x2ec>
 800adb6:	4576      	cmp	r6, lr
 800adb8:	bfa8      	it	ge
 800adba:	4676      	movge	r6, lr
 800adbc:	f1bc 0f00 	cmp.w	ip, #0
 800adc0:	d000      	beq.n	800adc4 <_strtod_l+0x2f4>
 800adc2:	4276      	negs	r6, r6
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	d14f      	bne.n	800ae68 <_strtod_l+0x398>
 800adc8:	9904      	ldr	r1, [sp, #16]
 800adca:	4301      	orrs	r1, r0
 800adcc:	f47f aec2 	bne.w	800ab54 <_strtod_l+0x84>
 800add0:	2a00      	cmp	r2, #0
 800add2:	f47f aedb 	bne.w	800ab8c <_strtod_l+0xbc>
 800add6:	2b69      	cmp	r3, #105	; 0x69
 800add8:	d027      	beq.n	800ae2a <_strtod_l+0x35a>
 800adda:	dc24      	bgt.n	800ae26 <_strtod_l+0x356>
 800addc:	2b49      	cmp	r3, #73	; 0x49
 800adde:	d024      	beq.n	800ae2a <_strtod_l+0x35a>
 800ade0:	2b4e      	cmp	r3, #78	; 0x4e
 800ade2:	f47f aed3 	bne.w	800ab8c <_strtod_l+0xbc>
 800ade6:	499e      	ldr	r1, [pc, #632]	; (800b060 <_strtod_l+0x590>)
 800ade8:	a81d      	add	r0, sp, #116	; 0x74
 800adea:	f002 f837 	bl	800ce5c <__match>
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f aecc 	beq.w	800ab8c <_strtod_l+0xbc>
 800adf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b28      	cmp	r3, #40	; 0x28
 800adfa:	d12d      	bne.n	800ae58 <_strtod_l+0x388>
 800adfc:	4999      	ldr	r1, [pc, #612]	; (800b064 <_strtod_l+0x594>)
 800adfe:	aa20      	add	r2, sp, #128	; 0x80
 800ae00:	a81d      	add	r0, sp, #116	; 0x74
 800ae02:	f002 f83f 	bl	800ce84 <__hexnan>
 800ae06:	2805      	cmp	r0, #5
 800ae08:	d126      	bne.n	800ae58 <_strtod_l+0x388>
 800ae0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae0c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ae10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ae14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ae18:	e69c      	b.n	800ab54 <_strtod_l+0x84>
 800ae1a:	210a      	movs	r1, #10
 800ae1c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ae20:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae24:	e7b9      	b.n	800ad9a <_strtod_l+0x2ca>
 800ae26:	2b6e      	cmp	r3, #110	; 0x6e
 800ae28:	e7db      	b.n	800ade2 <_strtod_l+0x312>
 800ae2a:	498f      	ldr	r1, [pc, #572]	; (800b068 <_strtod_l+0x598>)
 800ae2c:	a81d      	add	r0, sp, #116	; 0x74
 800ae2e:	f002 f815 	bl	800ce5c <__match>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f43f aeaa 	beq.w	800ab8c <_strtod_l+0xbc>
 800ae38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae3a:	498c      	ldr	r1, [pc, #560]	; (800b06c <_strtod_l+0x59c>)
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	a81d      	add	r0, sp, #116	; 0x74
 800ae40:	931d      	str	r3, [sp, #116]	; 0x74
 800ae42:	f002 f80b 	bl	800ce5c <__match>
 800ae46:	b910      	cbnz	r0, 800ae4e <_strtod_l+0x37e>
 800ae48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	931d      	str	r3, [sp, #116]	; 0x74
 800ae4e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b07c <_strtod_l+0x5ac>
 800ae52:	f04f 0a00 	mov.w	sl, #0
 800ae56:	e67d      	b.n	800ab54 <_strtod_l+0x84>
 800ae58:	4885      	ldr	r0, [pc, #532]	; (800b070 <_strtod_l+0x5a0>)
 800ae5a:	f003 f96d 	bl	800e138 <nan>
 800ae5e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ae62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ae66:	e675      	b.n	800ab54 <_strtod_l+0x84>
 800ae68:	9b07      	ldr	r3, [sp, #28]
 800ae6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae6c:	1af3      	subs	r3, r6, r3
 800ae6e:	2f00      	cmp	r7, #0
 800ae70:	bf08      	it	eq
 800ae72:	462f      	moveq	r7, r5
 800ae74:	2d10      	cmp	r5, #16
 800ae76:	9308      	str	r3, [sp, #32]
 800ae78:	46a8      	mov	r8, r5
 800ae7a:	bfa8      	it	ge
 800ae7c:	f04f 0810 	movge.w	r8, #16
 800ae80:	f7f5 fb48 	bl	8000514 <__aeabi_ui2d>
 800ae84:	2d09      	cmp	r5, #9
 800ae86:	4682      	mov	sl, r0
 800ae88:	468b      	mov	fp, r1
 800ae8a:	dd13      	ble.n	800aeb4 <_strtod_l+0x3e4>
 800ae8c:	4b79      	ldr	r3, [pc, #484]	; (800b074 <_strtod_l+0x5a4>)
 800ae8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae96:	f7f5 fbb7 	bl	8000608 <__aeabi_dmul>
 800ae9a:	4682      	mov	sl, r0
 800ae9c:	4648      	mov	r0, r9
 800ae9e:	468b      	mov	fp, r1
 800aea0:	f7f5 fb38 	bl	8000514 <__aeabi_ui2d>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4650      	mov	r0, sl
 800aeaa:	4659      	mov	r1, fp
 800aeac:	f7f5 f9f6 	bl	800029c <__adddf3>
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	468b      	mov	fp, r1
 800aeb4:	2d0f      	cmp	r5, #15
 800aeb6:	dc38      	bgt.n	800af2a <_strtod_l+0x45a>
 800aeb8:	9b08      	ldr	r3, [sp, #32]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f43f ae4a 	beq.w	800ab54 <_strtod_l+0x84>
 800aec0:	dd24      	ble.n	800af0c <_strtod_l+0x43c>
 800aec2:	2b16      	cmp	r3, #22
 800aec4:	dc0b      	bgt.n	800aede <_strtod_l+0x40e>
 800aec6:	4d6b      	ldr	r5, [pc, #428]	; (800b074 <_strtod_l+0x5a4>)
 800aec8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800aecc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800aed0:	4652      	mov	r2, sl
 800aed2:	465b      	mov	r3, fp
 800aed4:	f7f5 fb98 	bl	8000608 <__aeabi_dmul>
 800aed8:	4682      	mov	sl, r0
 800aeda:	468b      	mov	fp, r1
 800aedc:	e63a      	b.n	800ab54 <_strtod_l+0x84>
 800aede:	9a08      	ldr	r2, [sp, #32]
 800aee0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aee4:	4293      	cmp	r3, r2
 800aee6:	db20      	blt.n	800af2a <_strtod_l+0x45a>
 800aee8:	4c62      	ldr	r4, [pc, #392]	; (800b074 <_strtod_l+0x5a4>)
 800aeea:	f1c5 050f 	rsb	r5, r5, #15
 800aeee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aef2:	4652      	mov	r2, sl
 800aef4:	465b      	mov	r3, fp
 800aef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aefa:	f7f5 fb85 	bl	8000608 <__aeabi_dmul>
 800aefe:	9b08      	ldr	r3, [sp, #32]
 800af00:	1b5d      	subs	r5, r3, r5
 800af02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af0a:	e7e3      	b.n	800aed4 <_strtod_l+0x404>
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	3316      	adds	r3, #22
 800af10:	db0b      	blt.n	800af2a <_strtod_l+0x45a>
 800af12:	9b07      	ldr	r3, [sp, #28]
 800af14:	4a57      	ldr	r2, [pc, #348]	; (800b074 <_strtod_l+0x5a4>)
 800af16:	1b9e      	subs	r6, r3, r6
 800af18:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800af1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af20:	4650      	mov	r0, sl
 800af22:	4659      	mov	r1, fp
 800af24:	f7f5 fc9a 	bl	800085c <__aeabi_ddiv>
 800af28:	e7d6      	b.n	800aed8 <_strtod_l+0x408>
 800af2a:	9b08      	ldr	r3, [sp, #32]
 800af2c:	eba5 0808 	sub.w	r8, r5, r8
 800af30:	4498      	add	r8, r3
 800af32:	f1b8 0f00 	cmp.w	r8, #0
 800af36:	dd71      	ble.n	800b01c <_strtod_l+0x54c>
 800af38:	f018 030f 	ands.w	r3, r8, #15
 800af3c:	d00a      	beq.n	800af54 <_strtod_l+0x484>
 800af3e:	494d      	ldr	r1, [pc, #308]	; (800b074 <_strtod_l+0x5a4>)
 800af40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af44:	4652      	mov	r2, sl
 800af46:	465b      	mov	r3, fp
 800af48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4c:	f7f5 fb5c 	bl	8000608 <__aeabi_dmul>
 800af50:	4682      	mov	sl, r0
 800af52:	468b      	mov	fp, r1
 800af54:	f038 080f 	bics.w	r8, r8, #15
 800af58:	d04d      	beq.n	800aff6 <_strtod_l+0x526>
 800af5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af5e:	dd22      	ble.n	800afa6 <_strtod_l+0x4d6>
 800af60:	2500      	movs	r5, #0
 800af62:	462e      	mov	r6, r5
 800af64:	9509      	str	r5, [sp, #36]	; 0x24
 800af66:	9507      	str	r5, [sp, #28]
 800af68:	2322      	movs	r3, #34	; 0x22
 800af6a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b07c <_strtod_l+0x5ac>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	f04f 0a00 	mov.w	sl, #0
 800af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af76:	2b00      	cmp	r3, #0
 800af78:	f43f adec 	beq.w	800ab54 <_strtod_l+0x84>
 800af7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af7e:	4620      	mov	r0, r4
 800af80:	f002 f8f0 	bl	800d164 <_Bfree>
 800af84:	9907      	ldr	r1, [sp, #28]
 800af86:	4620      	mov	r0, r4
 800af88:	f002 f8ec 	bl	800d164 <_Bfree>
 800af8c:	4631      	mov	r1, r6
 800af8e:	4620      	mov	r0, r4
 800af90:	f002 f8e8 	bl	800d164 <_Bfree>
 800af94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af96:	4620      	mov	r0, r4
 800af98:	f002 f8e4 	bl	800d164 <_Bfree>
 800af9c:	4629      	mov	r1, r5
 800af9e:	4620      	mov	r0, r4
 800afa0:	f002 f8e0 	bl	800d164 <_Bfree>
 800afa4:	e5d6      	b.n	800ab54 <_strtod_l+0x84>
 800afa6:	2300      	movs	r3, #0
 800afa8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800afac:	4650      	mov	r0, sl
 800afae:	4659      	mov	r1, fp
 800afb0:	4699      	mov	r9, r3
 800afb2:	f1b8 0f01 	cmp.w	r8, #1
 800afb6:	dc21      	bgt.n	800affc <_strtod_l+0x52c>
 800afb8:	b10b      	cbz	r3, 800afbe <_strtod_l+0x4ee>
 800afba:	4682      	mov	sl, r0
 800afbc:	468b      	mov	fp, r1
 800afbe:	4b2e      	ldr	r3, [pc, #184]	; (800b078 <_strtod_l+0x5a8>)
 800afc0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800afc4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800afc8:	4652      	mov	r2, sl
 800afca:	465b      	mov	r3, fp
 800afcc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800afd0:	f7f5 fb1a 	bl	8000608 <__aeabi_dmul>
 800afd4:	4b29      	ldr	r3, [pc, #164]	; (800b07c <_strtod_l+0x5ac>)
 800afd6:	460a      	mov	r2, r1
 800afd8:	400b      	ands	r3, r1
 800afda:	4929      	ldr	r1, [pc, #164]	; (800b080 <_strtod_l+0x5b0>)
 800afdc:	428b      	cmp	r3, r1
 800afde:	4682      	mov	sl, r0
 800afe0:	d8be      	bhi.n	800af60 <_strtod_l+0x490>
 800afe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afe6:	428b      	cmp	r3, r1
 800afe8:	bf86      	itte	hi
 800afea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b084 <_strtod_l+0x5b4>
 800afee:	f04f 3aff 	movhi.w	sl, #4294967295
 800aff2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aff6:	2300      	movs	r3, #0
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	e081      	b.n	800b100 <_strtod_l+0x630>
 800affc:	f018 0f01 	tst.w	r8, #1
 800b000:	d007      	beq.n	800b012 <_strtod_l+0x542>
 800b002:	4b1d      	ldr	r3, [pc, #116]	; (800b078 <_strtod_l+0x5a8>)
 800b004:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	f7f5 fafc 	bl	8000608 <__aeabi_dmul>
 800b010:	2301      	movs	r3, #1
 800b012:	f109 0901 	add.w	r9, r9, #1
 800b016:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b01a:	e7ca      	b.n	800afb2 <_strtod_l+0x4e2>
 800b01c:	d0eb      	beq.n	800aff6 <_strtod_l+0x526>
 800b01e:	f1c8 0800 	rsb	r8, r8, #0
 800b022:	f018 020f 	ands.w	r2, r8, #15
 800b026:	d00a      	beq.n	800b03e <_strtod_l+0x56e>
 800b028:	4b12      	ldr	r3, [pc, #72]	; (800b074 <_strtod_l+0x5a4>)
 800b02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b02e:	4650      	mov	r0, sl
 800b030:	4659      	mov	r1, fp
 800b032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b036:	f7f5 fc11 	bl	800085c <__aeabi_ddiv>
 800b03a:	4682      	mov	sl, r0
 800b03c:	468b      	mov	fp, r1
 800b03e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b042:	d0d8      	beq.n	800aff6 <_strtod_l+0x526>
 800b044:	f1b8 0f1f 	cmp.w	r8, #31
 800b048:	dd1e      	ble.n	800b088 <_strtod_l+0x5b8>
 800b04a:	2500      	movs	r5, #0
 800b04c:	462e      	mov	r6, r5
 800b04e:	9509      	str	r5, [sp, #36]	; 0x24
 800b050:	9507      	str	r5, [sp, #28]
 800b052:	2322      	movs	r3, #34	; 0x22
 800b054:	f04f 0a00 	mov.w	sl, #0
 800b058:	f04f 0b00 	mov.w	fp, #0
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	e789      	b.n	800af74 <_strtod_l+0x4a4>
 800b060:	0800efd1 	.word	0x0800efd1
 800b064:	0800f00c 	.word	0x0800f00c
 800b068:	0800efc9 	.word	0x0800efc9
 800b06c:	0800f04b 	.word	0x0800f04b
 800b070:	0800f368 	.word	0x0800f368
 800b074:	0800f248 	.word	0x0800f248
 800b078:	0800f220 	.word	0x0800f220
 800b07c:	7ff00000 	.word	0x7ff00000
 800b080:	7ca00000 	.word	0x7ca00000
 800b084:	7fefffff 	.word	0x7fefffff
 800b088:	f018 0310 	ands.w	r3, r8, #16
 800b08c:	bf18      	it	ne
 800b08e:	236a      	movne	r3, #106	; 0x6a
 800b090:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b448 <_strtod_l+0x978>
 800b094:	9304      	str	r3, [sp, #16]
 800b096:	4650      	mov	r0, sl
 800b098:	4659      	mov	r1, fp
 800b09a:	2300      	movs	r3, #0
 800b09c:	f018 0f01 	tst.w	r8, #1
 800b0a0:	d004      	beq.n	800b0ac <_strtod_l+0x5dc>
 800b0a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b0a6:	f7f5 faaf 	bl	8000608 <__aeabi_dmul>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b0b0:	f109 0908 	add.w	r9, r9, #8
 800b0b4:	d1f2      	bne.n	800b09c <_strtod_l+0x5cc>
 800b0b6:	b10b      	cbz	r3, 800b0bc <_strtod_l+0x5ec>
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	468b      	mov	fp, r1
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	b1bb      	cbz	r3, 800b0f0 <_strtod_l+0x620>
 800b0c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b0c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	4659      	mov	r1, fp
 800b0cc:	dd10      	ble.n	800b0f0 <_strtod_l+0x620>
 800b0ce:	2b1f      	cmp	r3, #31
 800b0d0:	f340 8128 	ble.w	800b324 <_strtod_l+0x854>
 800b0d4:	2b34      	cmp	r3, #52	; 0x34
 800b0d6:	bfde      	ittt	le
 800b0d8:	3b20      	suble	r3, #32
 800b0da:	f04f 32ff 	movle.w	r2, #4294967295
 800b0de:	fa02 f303 	lslle.w	r3, r2, r3
 800b0e2:	f04f 0a00 	mov.w	sl, #0
 800b0e6:	bfcc      	ite	gt
 800b0e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b0ec:	ea03 0b01 	andle.w	fp, r3, r1
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	4659      	mov	r1, fp
 800b0f8:	f7f5 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d1a4      	bne.n	800b04a <_strtod_l+0x57a>
 800b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b106:	462b      	mov	r3, r5
 800b108:	463a      	mov	r2, r7
 800b10a:	4620      	mov	r0, r4
 800b10c:	f002 f896 	bl	800d23c <__s2b>
 800b110:	9009      	str	r0, [sp, #36]	; 0x24
 800b112:	2800      	cmp	r0, #0
 800b114:	f43f af24 	beq.w	800af60 <_strtod_l+0x490>
 800b118:	9b07      	ldr	r3, [sp, #28]
 800b11a:	1b9e      	subs	r6, r3, r6
 800b11c:	9b08      	ldr	r3, [sp, #32]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bfb4      	ite	lt
 800b122:	4633      	movlt	r3, r6
 800b124:	2300      	movge	r3, #0
 800b126:	9310      	str	r3, [sp, #64]	; 0x40
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	2500      	movs	r5, #0
 800b12c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b130:	9318      	str	r3, [sp, #96]	; 0x60
 800b132:	462e      	mov	r6, r5
 800b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b136:	4620      	mov	r0, r4
 800b138:	6859      	ldr	r1, [r3, #4]
 800b13a:	f001 ffd3 	bl	800d0e4 <_Balloc>
 800b13e:	9007      	str	r0, [sp, #28]
 800b140:	2800      	cmp	r0, #0
 800b142:	f43f af11 	beq.w	800af68 <_strtod_l+0x498>
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	691a      	ldr	r2, [r3, #16]
 800b14a:	3202      	adds	r2, #2
 800b14c:	f103 010c 	add.w	r1, r3, #12
 800b150:	0092      	lsls	r2, r2, #2
 800b152:	300c      	adds	r0, #12
 800b154:	f001 ffb8 	bl	800d0c8 <memcpy>
 800b158:	ec4b ab10 	vmov	d0, sl, fp
 800b15c:	aa20      	add	r2, sp, #128	; 0x80
 800b15e:	a91f      	add	r1, sp, #124	; 0x7c
 800b160:	4620      	mov	r0, r4
 800b162:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b166:	f002 fba5 	bl	800d8b4 <__d2b>
 800b16a:	901e      	str	r0, [sp, #120]	; 0x78
 800b16c:	2800      	cmp	r0, #0
 800b16e:	f43f aefb 	beq.w	800af68 <_strtod_l+0x498>
 800b172:	2101      	movs	r1, #1
 800b174:	4620      	mov	r0, r4
 800b176:	f002 f8fb 	bl	800d370 <__i2b>
 800b17a:	4606      	mov	r6, r0
 800b17c:	2800      	cmp	r0, #0
 800b17e:	f43f aef3 	beq.w	800af68 <_strtod_l+0x498>
 800b182:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b184:	9904      	ldr	r1, [sp, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfab      	itete	ge
 800b18a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b18c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b18e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b190:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b194:	bfac      	ite	ge
 800b196:	eb03 0902 	addge.w	r9, r3, r2
 800b19a:	1ad7      	sublt	r7, r2, r3
 800b19c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b19e:	eba3 0801 	sub.w	r8, r3, r1
 800b1a2:	4490      	add	r8, r2
 800b1a4:	4ba3      	ldr	r3, [pc, #652]	; (800b434 <_strtod_l+0x964>)
 800b1a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1aa:	4598      	cmp	r8, r3
 800b1ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b1b0:	f280 80cc 	bge.w	800b34c <_strtod_l+0x87c>
 800b1b4:	eba3 0308 	sub.w	r3, r3, r8
 800b1b8:	2b1f      	cmp	r3, #31
 800b1ba:	eba2 0203 	sub.w	r2, r2, r3
 800b1be:	f04f 0101 	mov.w	r1, #1
 800b1c2:	f300 80b6 	bgt.w	800b332 <_strtod_l+0x862>
 800b1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ca:	9311      	str	r3, [sp, #68]	; 0x44
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d0:	eb09 0802 	add.w	r8, r9, r2
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	45c1      	cmp	r9, r8
 800b1d8:	4417      	add	r7, r2
 800b1da:	441f      	add	r7, r3
 800b1dc:	464b      	mov	r3, r9
 800b1de:	bfa8      	it	ge
 800b1e0:	4643      	movge	r3, r8
 800b1e2:	42bb      	cmp	r3, r7
 800b1e4:	bfa8      	it	ge
 800b1e6:	463b      	movge	r3, r7
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	bfc2      	ittt	gt
 800b1ec:	eba8 0803 	subgt.w	r8, r8, r3
 800b1f0:	1aff      	subgt	r7, r7, r3
 800b1f2:	eba9 0903 	subgt.w	r9, r9, r3
 800b1f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	dd17      	ble.n	800b22c <_strtod_l+0x75c>
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	461a      	mov	r2, r3
 800b200:	4620      	mov	r0, r4
 800b202:	f002 f971 	bl	800d4e8 <__pow5mult>
 800b206:	4606      	mov	r6, r0
 800b208:	2800      	cmp	r0, #0
 800b20a:	f43f aead 	beq.w	800af68 <_strtod_l+0x498>
 800b20e:	4601      	mov	r1, r0
 800b210:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b212:	4620      	mov	r0, r4
 800b214:	f002 f8c2 	bl	800d39c <__multiply>
 800b218:	900f      	str	r0, [sp, #60]	; 0x3c
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f43f aea4 	beq.w	800af68 <_strtod_l+0x498>
 800b220:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b222:	4620      	mov	r0, r4
 800b224:	f001 ff9e 	bl	800d164 <_Bfree>
 800b228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b22a:	931e      	str	r3, [sp, #120]	; 0x78
 800b22c:	f1b8 0f00 	cmp.w	r8, #0
 800b230:	f300 8091 	bgt.w	800b356 <_strtod_l+0x886>
 800b234:	9b08      	ldr	r3, [sp, #32]
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd08      	ble.n	800b24c <_strtod_l+0x77c>
 800b23a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b23c:	9907      	ldr	r1, [sp, #28]
 800b23e:	4620      	mov	r0, r4
 800b240:	f002 f952 	bl	800d4e8 <__pow5mult>
 800b244:	9007      	str	r0, [sp, #28]
 800b246:	2800      	cmp	r0, #0
 800b248:	f43f ae8e 	beq.w	800af68 <_strtod_l+0x498>
 800b24c:	2f00      	cmp	r7, #0
 800b24e:	dd08      	ble.n	800b262 <_strtod_l+0x792>
 800b250:	9907      	ldr	r1, [sp, #28]
 800b252:	463a      	mov	r2, r7
 800b254:	4620      	mov	r0, r4
 800b256:	f002 f9a1 	bl	800d59c <__lshift>
 800b25a:	9007      	str	r0, [sp, #28]
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f43f ae83 	beq.w	800af68 <_strtod_l+0x498>
 800b262:	f1b9 0f00 	cmp.w	r9, #0
 800b266:	dd08      	ble.n	800b27a <_strtod_l+0x7aa>
 800b268:	4631      	mov	r1, r6
 800b26a:	464a      	mov	r2, r9
 800b26c:	4620      	mov	r0, r4
 800b26e:	f002 f995 	bl	800d59c <__lshift>
 800b272:	4606      	mov	r6, r0
 800b274:	2800      	cmp	r0, #0
 800b276:	f43f ae77 	beq.w	800af68 <_strtod_l+0x498>
 800b27a:	9a07      	ldr	r2, [sp, #28]
 800b27c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b27e:	4620      	mov	r0, r4
 800b280:	f002 fa14 	bl	800d6ac <__mdiff>
 800b284:	4605      	mov	r5, r0
 800b286:	2800      	cmp	r0, #0
 800b288:	f43f ae6e 	beq.w	800af68 <_strtod_l+0x498>
 800b28c:	68c3      	ldr	r3, [r0, #12]
 800b28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b290:	2300      	movs	r3, #0
 800b292:	60c3      	str	r3, [r0, #12]
 800b294:	4631      	mov	r1, r6
 800b296:	f002 f9ed 	bl	800d674 <__mcmp>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	da65      	bge.n	800b36a <_strtod_l+0x89a>
 800b29e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b2a4:	f040 8087 	bne.w	800b3b6 <_strtod_l+0x8e6>
 800b2a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f040 8082 	bne.w	800b3b6 <_strtod_l+0x8e6>
 800b2b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2b6:	0d1b      	lsrs	r3, r3, #20
 800b2b8:	051b      	lsls	r3, r3, #20
 800b2ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2be:	d97a      	bls.n	800b3b6 <_strtod_l+0x8e6>
 800b2c0:	696b      	ldr	r3, [r5, #20]
 800b2c2:	b913      	cbnz	r3, 800b2ca <_strtod_l+0x7fa>
 800b2c4:	692b      	ldr	r3, [r5, #16]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	dd75      	ble.n	800b3b6 <_strtod_l+0x8e6>
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f002 f964 	bl	800d59c <__lshift>
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	f002 f9cc 	bl	800d674 <__mcmp>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	dd6a      	ble.n	800b3b6 <_strtod_l+0x8e6>
 800b2e0:	9904      	ldr	r1, [sp, #16]
 800b2e2:	4a55      	ldr	r2, [pc, #340]	; (800b438 <_strtod_l+0x968>)
 800b2e4:	465b      	mov	r3, fp
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	f000 8085 	beq.w	800b3f6 <_strtod_l+0x926>
 800b2ec:	ea02 010b 	and.w	r1, r2, fp
 800b2f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2f4:	dc7f      	bgt.n	800b3f6 <_strtod_l+0x926>
 800b2f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2fa:	f77f aeaa 	ble.w	800b052 <_strtod_l+0x582>
 800b2fe:	4a4f      	ldr	r2, [pc, #316]	; (800b43c <_strtod_l+0x96c>)
 800b300:	2300      	movs	r3, #0
 800b302:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b306:	4650      	mov	r0, sl
 800b308:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b30c:	4659      	mov	r1, fp
 800b30e:	f7f5 f97b 	bl	8000608 <__aeabi_dmul>
 800b312:	460b      	mov	r3, r1
 800b314:	4303      	orrs	r3, r0
 800b316:	bf08      	it	eq
 800b318:	2322      	moveq	r3, #34	; 0x22
 800b31a:	4682      	mov	sl, r0
 800b31c:	468b      	mov	fp, r1
 800b31e:	bf08      	it	eq
 800b320:	6023      	streq	r3, [r4, #0]
 800b322:	e62b      	b.n	800af7c <_strtod_l+0x4ac>
 800b324:	f04f 32ff 	mov.w	r2, #4294967295
 800b328:	fa02 f303 	lsl.w	r3, r2, r3
 800b32c:	ea03 0a0a 	and.w	sl, r3, sl
 800b330:	e6de      	b.n	800b0f0 <_strtod_l+0x620>
 800b332:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b336:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b33a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b33e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b342:	fa01 f308 	lsl.w	r3, r1, r8
 800b346:	930c      	str	r3, [sp, #48]	; 0x30
 800b348:	9111      	str	r1, [sp, #68]	; 0x44
 800b34a:	e741      	b.n	800b1d0 <_strtod_l+0x700>
 800b34c:	2300      	movs	r3, #0
 800b34e:	930c      	str	r3, [sp, #48]	; 0x30
 800b350:	2301      	movs	r3, #1
 800b352:	9311      	str	r3, [sp, #68]	; 0x44
 800b354:	e73c      	b.n	800b1d0 <_strtod_l+0x700>
 800b356:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b358:	4642      	mov	r2, r8
 800b35a:	4620      	mov	r0, r4
 800b35c:	f002 f91e 	bl	800d59c <__lshift>
 800b360:	901e      	str	r0, [sp, #120]	; 0x78
 800b362:	2800      	cmp	r0, #0
 800b364:	f47f af66 	bne.w	800b234 <_strtod_l+0x764>
 800b368:	e5fe      	b.n	800af68 <_strtod_l+0x498>
 800b36a:	465f      	mov	r7, fp
 800b36c:	d16e      	bne.n	800b44c <_strtod_l+0x97c>
 800b36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b370:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b374:	b342      	cbz	r2, 800b3c8 <_strtod_l+0x8f8>
 800b376:	4a32      	ldr	r2, [pc, #200]	; (800b440 <_strtod_l+0x970>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d128      	bne.n	800b3ce <_strtod_l+0x8fe>
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	4650      	mov	r0, sl
 800b380:	b1eb      	cbz	r3, 800b3be <_strtod_l+0x8ee>
 800b382:	4a2d      	ldr	r2, [pc, #180]	; (800b438 <_strtod_l+0x968>)
 800b384:	403a      	ands	r2, r7
 800b386:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b38a:	f04f 31ff 	mov.w	r1, #4294967295
 800b38e:	d819      	bhi.n	800b3c4 <_strtod_l+0x8f4>
 800b390:	0d12      	lsrs	r2, r2, #20
 800b392:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b396:	fa01 f303 	lsl.w	r3, r1, r3
 800b39a:	4298      	cmp	r0, r3
 800b39c:	d117      	bne.n	800b3ce <_strtod_l+0x8fe>
 800b39e:	4b29      	ldr	r3, [pc, #164]	; (800b444 <_strtod_l+0x974>)
 800b3a0:	429f      	cmp	r7, r3
 800b3a2:	d102      	bne.n	800b3aa <_strtod_l+0x8da>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f43f addf 	beq.w	800af68 <_strtod_l+0x498>
 800b3aa:	4b23      	ldr	r3, [pc, #140]	; (800b438 <_strtod_l+0x968>)
 800b3ac:	403b      	ands	r3, r7
 800b3ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b3b2:	f04f 0a00 	mov.w	sl, #0
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1a0      	bne.n	800b2fe <_strtod_l+0x82e>
 800b3bc:	e5de      	b.n	800af7c <_strtod_l+0x4ac>
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c2:	e7ea      	b.n	800b39a <_strtod_l+0x8ca>
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	e7e8      	b.n	800b39a <_strtod_l+0x8ca>
 800b3c8:	ea53 030a 	orrs.w	r3, r3, sl
 800b3cc:	d088      	beq.n	800b2e0 <_strtod_l+0x810>
 800b3ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3d0:	b1db      	cbz	r3, 800b40a <_strtod_l+0x93a>
 800b3d2:	423b      	tst	r3, r7
 800b3d4:	d0ef      	beq.n	800b3b6 <_strtod_l+0x8e6>
 800b3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d8:	9a04      	ldr	r2, [sp, #16]
 800b3da:	4650      	mov	r0, sl
 800b3dc:	4659      	mov	r1, fp
 800b3de:	b1c3      	cbz	r3, 800b412 <_strtod_l+0x942>
 800b3e0:	f7ff fb59 	bl	800aa96 <sulp>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3ec:	f7f4 ff56 	bl	800029c <__adddf3>
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	468b      	mov	fp, r1
 800b3f4:	e7df      	b.n	800b3b6 <_strtod_l+0x8e6>
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b400:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b404:	f04f 3aff 	mov.w	sl, #4294967295
 800b408:	e7d5      	b.n	800b3b6 <_strtod_l+0x8e6>
 800b40a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b40c:	ea13 0f0a 	tst.w	r3, sl
 800b410:	e7e0      	b.n	800b3d4 <_strtod_l+0x904>
 800b412:	f7ff fb40 	bl	800aa96 <sulp>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b41e:	f7f4 ff3b 	bl	8000298 <__aeabi_dsub>
 800b422:	2200      	movs	r2, #0
 800b424:	2300      	movs	r3, #0
 800b426:	4682      	mov	sl, r0
 800b428:	468b      	mov	fp, r1
 800b42a:	f7f5 fb55 	bl	8000ad8 <__aeabi_dcmpeq>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0c1      	beq.n	800b3b6 <_strtod_l+0x8e6>
 800b432:	e60e      	b.n	800b052 <_strtod_l+0x582>
 800b434:	fffffc02 	.word	0xfffffc02
 800b438:	7ff00000 	.word	0x7ff00000
 800b43c:	39500000 	.word	0x39500000
 800b440:	000fffff 	.word	0x000fffff
 800b444:	7fefffff 	.word	0x7fefffff
 800b448:	0800f020 	.word	0x0800f020
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	f002 fa8c 	bl	800d96c <__ratio>
 800b454:	ec59 8b10 	vmov	r8, r9, d0
 800b458:	ee10 0a10 	vmov	r0, s0
 800b45c:	2200      	movs	r2, #0
 800b45e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b462:	4649      	mov	r1, r9
 800b464:	f7f5 fb4c 	bl	8000b00 <__aeabi_dcmple>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d07c      	beq.n	800b566 <_strtod_l+0xa96>
 800b46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d04c      	beq.n	800b50c <_strtod_l+0xa3c>
 800b472:	4b95      	ldr	r3, [pc, #596]	; (800b6c8 <_strtod_l+0xbf8>)
 800b474:	2200      	movs	r2, #0
 800b476:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b47a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b6c8 <_strtod_l+0xbf8>
 800b47e:	f04f 0800 	mov.w	r8, #0
 800b482:	4b92      	ldr	r3, [pc, #584]	; (800b6cc <_strtod_l+0xbfc>)
 800b484:	403b      	ands	r3, r7
 800b486:	9311      	str	r3, [sp, #68]	; 0x44
 800b488:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b48a:	4b91      	ldr	r3, [pc, #580]	; (800b6d0 <_strtod_l+0xc00>)
 800b48c:	429a      	cmp	r2, r3
 800b48e:	f040 80b2 	bne.w	800b5f6 <_strtod_l+0xb26>
 800b492:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b49a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b49e:	ec4b ab10 	vmov	d0, sl, fp
 800b4a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b4a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b4aa:	f002 f987 	bl	800d7bc <__ulp>
 800b4ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4b2:	ec53 2b10 	vmov	r2, r3, d0
 800b4b6:	f7f5 f8a7 	bl	8000608 <__aeabi_dmul>
 800b4ba:	4652      	mov	r2, sl
 800b4bc:	465b      	mov	r3, fp
 800b4be:	f7f4 feed 	bl	800029c <__adddf3>
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4981      	ldr	r1, [pc, #516]	; (800b6cc <_strtod_l+0xbfc>)
 800b4c6:	4a83      	ldr	r2, [pc, #524]	; (800b6d4 <_strtod_l+0xc04>)
 800b4c8:	4019      	ands	r1, r3
 800b4ca:	4291      	cmp	r1, r2
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	d95e      	bls.n	800b58e <_strtod_l+0xabe>
 800b4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d103      	bne.n	800b4e2 <_strtod_l+0xa12>
 800b4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4dc:	3301      	adds	r3, #1
 800b4de:	f43f ad43 	beq.w	800af68 <_strtod_l+0x498>
 800b4e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b6e0 <_strtod_l+0xc10>
 800b4e6:	f04f 3aff 	mov.w	sl, #4294967295
 800b4ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f001 fe39 	bl	800d164 <_Bfree>
 800b4f2:	9907      	ldr	r1, [sp, #28]
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f001 fe35 	bl	800d164 <_Bfree>
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f001 fe31 	bl	800d164 <_Bfree>
 800b502:	4629      	mov	r1, r5
 800b504:	4620      	mov	r0, r4
 800b506:	f001 fe2d 	bl	800d164 <_Bfree>
 800b50a:	e613      	b.n	800b134 <_strtod_l+0x664>
 800b50c:	f1ba 0f00 	cmp.w	sl, #0
 800b510:	d11b      	bne.n	800b54a <_strtod_l+0xa7a>
 800b512:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b516:	b9f3      	cbnz	r3, 800b556 <_strtod_l+0xa86>
 800b518:	4b6b      	ldr	r3, [pc, #428]	; (800b6c8 <_strtod_l+0xbf8>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	4640      	mov	r0, r8
 800b51e:	4649      	mov	r1, r9
 800b520:	f7f5 fae4 	bl	8000aec <__aeabi_dcmplt>
 800b524:	b9d0      	cbnz	r0, 800b55c <_strtod_l+0xa8c>
 800b526:	4640      	mov	r0, r8
 800b528:	4649      	mov	r1, r9
 800b52a:	4b6b      	ldr	r3, [pc, #428]	; (800b6d8 <_strtod_l+0xc08>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	f7f5 f86b 	bl	8000608 <__aeabi_dmul>
 800b532:	4680      	mov	r8, r0
 800b534:	4689      	mov	r9, r1
 800b536:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b53a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b53e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b540:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b544:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b548:	e79b      	b.n	800b482 <_strtod_l+0x9b2>
 800b54a:	f1ba 0f01 	cmp.w	sl, #1
 800b54e:	d102      	bne.n	800b556 <_strtod_l+0xa86>
 800b550:	2f00      	cmp	r7, #0
 800b552:	f43f ad7e 	beq.w	800b052 <_strtod_l+0x582>
 800b556:	4b61      	ldr	r3, [pc, #388]	; (800b6dc <_strtod_l+0xc0c>)
 800b558:	2200      	movs	r2, #0
 800b55a:	e78c      	b.n	800b476 <_strtod_l+0x9a6>
 800b55c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b6d8 <_strtod_l+0xc08>
 800b560:	f04f 0800 	mov.w	r8, #0
 800b564:	e7e7      	b.n	800b536 <_strtod_l+0xa66>
 800b566:	4b5c      	ldr	r3, [pc, #368]	; (800b6d8 <_strtod_l+0xc08>)
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	2200      	movs	r2, #0
 800b56e:	f7f5 f84b 	bl	8000608 <__aeabi_dmul>
 800b572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b574:	4680      	mov	r8, r0
 800b576:	4689      	mov	r9, r1
 800b578:	b933      	cbnz	r3, 800b588 <_strtod_l+0xab8>
 800b57a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b57e:	9012      	str	r0, [sp, #72]	; 0x48
 800b580:	9313      	str	r3, [sp, #76]	; 0x4c
 800b582:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b586:	e7dd      	b.n	800b544 <_strtod_l+0xa74>
 800b588:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b58c:	e7f9      	b.n	800b582 <_strtod_l+0xab2>
 800b58e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1a8      	bne.n	800b4ea <_strtod_l+0xa1a>
 800b598:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b59c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b59e:	0d1b      	lsrs	r3, r3, #20
 800b5a0:	051b      	lsls	r3, r3, #20
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d1a1      	bne.n	800b4ea <_strtod_l+0xa1a>
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	f7f5 fb3d 	bl	8000c28 <__aeabi_d2lz>
 800b5ae:	f7f4 fffd 	bl	80005ac <__aeabi_l2d>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	f7f4 fe6d 	bl	8000298 <__aeabi_dsub>
 800b5be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5c4:	ea43 030a 	orr.w	r3, r3, sl
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	4680      	mov	r8, r0
 800b5cc:	4689      	mov	r9, r1
 800b5ce:	d053      	beq.n	800b678 <_strtod_l+0xba8>
 800b5d0:	a335      	add	r3, pc, #212	; (adr r3, 800b6a8 <_strtod_l+0xbd8>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f5 fa89 	bl	8000aec <__aeabi_dcmplt>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f47f acce 	bne.w	800af7c <_strtod_l+0x4ac>
 800b5e0:	a333      	add	r3, pc, #204	; (adr r3, 800b6b0 <_strtod_l+0xbe0>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	f7f5 fa9d 	bl	8000b28 <__aeabi_dcmpgt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	f43f af7b 	beq.w	800b4ea <_strtod_l+0xa1a>
 800b5f4:	e4c2      	b.n	800af7c <_strtod_l+0x4ac>
 800b5f6:	9b04      	ldr	r3, [sp, #16]
 800b5f8:	b333      	cbz	r3, 800b648 <_strtod_l+0xb78>
 800b5fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b600:	d822      	bhi.n	800b648 <_strtod_l+0xb78>
 800b602:	a32d      	add	r3, pc, #180	; (adr r3, 800b6b8 <_strtod_l+0xbe8>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	4640      	mov	r0, r8
 800b60a:	4649      	mov	r1, r9
 800b60c:	f7f5 fa78 	bl	8000b00 <__aeabi_dcmple>
 800b610:	b1a0      	cbz	r0, 800b63c <_strtod_l+0xb6c>
 800b612:	4649      	mov	r1, r9
 800b614:	4640      	mov	r0, r8
 800b616:	f7f5 facf 	bl	8000bb8 <__aeabi_d2uiz>
 800b61a:	2801      	cmp	r0, #1
 800b61c:	bf38      	it	cc
 800b61e:	2001      	movcc	r0, #1
 800b620:	f7f4 ff78 	bl	8000514 <__aeabi_ui2d>
 800b624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b626:	4680      	mov	r8, r0
 800b628:	4689      	mov	r9, r1
 800b62a:	bb13      	cbnz	r3, 800b672 <_strtod_l+0xba2>
 800b62c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b630:	9014      	str	r0, [sp, #80]	; 0x50
 800b632:	9315      	str	r3, [sp, #84]	; 0x54
 800b634:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b638:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b63e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b640:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	930d      	str	r3, [sp, #52]	; 0x34
 800b648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b64c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b650:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b654:	f002 f8b2 	bl	800d7bc <__ulp>
 800b658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b65c:	ec53 2b10 	vmov	r2, r3, d0
 800b660:	f7f4 ffd2 	bl	8000608 <__aeabi_dmul>
 800b664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b668:	f7f4 fe18 	bl	800029c <__adddf3>
 800b66c:	4682      	mov	sl, r0
 800b66e:	468b      	mov	fp, r1
 800b670:	e78f      	b.n	800b592 <_strtod_l+0xac2>
 800b672:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b676:	e7dd      	b.n	800b634 <_strtod_l+0xb64>
 800b678:	a311      	add	r3, pc, #68	; (adr r3, 800b6c0 <_strtod_l+0xbf0>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	f7f5 fa35 	bl	8000aec <__aeabi_dcmplt>
 800b682:	e7b4      	b.n	800b5ee <_strtod_l+0xb1e>
 800b684:	2300      	movs	r3, #0
 800b686:	930e      	str	r3, [sp, #56]	; 0x38
 800b688:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b68a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	f7ff ba65 	b.w	800ab5c <_strtod_l+0x8c>
 800b692:	2b65      	cmp	r3, #101	; 0x65
 800b694:	f43f ab5d 	beq.w	800ad52 <_strtod_l+0x282>
 800b698:	2b45      	cmp	r3, #69	; 0x45
 800b69a:	f43f ab5a 	beq.w	800ad52 <_strtod_l+0x282>
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f7ff bb92 	b.w	800adc8 <_strtod_l+0x2f8>
 800b6a4:	f3af 8000 	nop.w
 800b6a8:	94a03595 	.word	0x94a03595
 800b6ac:	3fdfffff 	.word	0x3fdfffff
 800b6b0:	35afe535 	.word	0x35afe535
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	ffc00000 	.word	0xffc00000
 800b6bc:	41dfffff 	.word	0x41dfffff
 800b6c0:	94a03595 	.word	0x94a03595
 800b6c4:	3fcfffff 	.word	0x3fcfffff
 800b6c8:	3ff00000 	.word	0x3ff00000
 800b6cc:	7ff00000 	.word	0x7ff00000
 800b6d0:	7fe00000 	.word	0x7fe00000
 800b6d4:	7c9fffff 	.word	0x7c9fffff
 800b6d8:	3fe00000 	.word	0x3fe00000
 800b6dc:	bff00000 	.word	0xbff00000
 800b6e0:	7fefffff 	.word	0x7fefffff

0800b6e4 <strtod>:
 800b6e4:	460a      	mov	r2, r1
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	4802      	ldr	r0, [pc, #8]	; (800b6f4 <strtod+0x10>)
 800b6ea:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <strtod+0x14>)
 800b6ec:	6800      	ldr	r0, [r0, #0]
 800b6ee:	f7ff b9ef 	b.w	800aad0 <_strtod_l>
 800b6f2:	bf00      	nop
 800b6f4:	20000014 	.word	0x20000014
 800b6f8:	2000007c 	.word	0x2000007c

0800b6fc <__swbuf_r>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	460e      	mov	r6, r1
 800b700:	4614      	mov	r4, r2
 800b702:	4605      	mov	r5, r0
 800b704:	b118      	cbz	r0, 800b70e <__swbuf_r+0x12>
 800b706:	6983      	ldr	r3, [r0, #24]
 800b708:	b90b      	cbnz	r3, 800b70e <__swbuf_r+0x12>
 800b70a:	f001 f84b 	bl	800c7a4 <__sinit>
 800b70e:	4b21      	ldr	r3, [pc, #132]	; (800b794 <__swbuf_r+0x98>)
 800b710:	429c      	cmp	r4, r3
 800b712:	d12b      	bne.n	800b76c <__swbuf_r+0x70>
 800b714:	686c      	ldr	r4, [r5, #4]
 800b716:	69a3      	ldr	r3, [r4, #24]
 800b718:	60a3      	str	r3, [r4, #8]
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	071a      	lsls	r2, r3, #28
 800b71e:	d52f      	bpl.n	800b780 <__swbuf_r+0x84>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	b36b      	cbz	r3, 800b780 <__swbuf_r+0x84>
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	6820      	ldr	r0, [r4, #0]
 800b728:	1ac0      	subs	r0, r0, r3
 800b72a:	6963      	ldr	r3, [r4, #20]
 800b72c:	b2f6      	uxtb	r6, r6
 800b72e:	4283      	cmp	r3, r0
 800b730:	4637      	mov	r7, r6
 800b732:	dc04      	bgt.n	800b73e <__swbuf_r+0x42>
 800b734:	4621      	mov	r1, r4
 800b736:	4628      	mov	r0, r5
 800b738:	f000 ffa0 	bl	800c67c <_fflush_r>
 800b73c:	bb30      	cbnz	r0, 800b78c <__swbuf_r+0x90>
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	3b01      	subs	r3, #1
 800b742:	60a3      	str	r3, [r4, #8]
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	6022      	str	r2, [r4, #0]
 800b74a:	701e      	strb	r6, [r3, #0]
 800b74c:	6963      	ldr	r3, [r4, #20]
 800b74e:	3001      	adds	r0, #1
 800b750:	4283      	cmp	r3, r0
 800b752:	d004      	beq.n	800b75e <__swbuf_r+0x62>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	07db      	lsls	r3, r3, #31
 800b758:	d506      	bpl.n	800b768 <__swbuf_r+0x6c>
 800b75a:	2e0a      	cmp	r6, #10
 800b75c:	d104      	bne.n	800b768 <__swbuf_r+0x6c>
 800b75e:	4621      	mov	r1, r4
 800b760:	4628      	mov	r0, r5
 800b762:	f000 ff8b 	bl	800c67c <_fflush_r>
 800b766:	b988      	cbnz	r0, 800b78c <__swbuf_r+0x90>
 800b768:	4638      	mov	r0, r7
 800b76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76c:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <__swbuf_r+0x9c>)
 800b76e:	429c      	cmp	r4, r3
 800b770:	d101      	bne.n	800b776 <__swbuf_r+0x7a>
 800b772:	68ac      	ldr	r4, [r5, #8]
 800b774:	e7cf      	b.n	800b716 <__swbuf_r+0x1a>
 800b776:	4b09      	ldr	r3, [pc, #36]	; (800b79c <__swbuf_r+0xa0>)
 800b778:	429c      	cmp	r4, r3
 800b77a:	bf08      	it	eq
 800b77c:	68ec      	ldreq	r4, [r5, #12]
 800b77e:	e7ca      	b.n	800b716 <__swbuf_r+0x1a>
 800b780:	4621      	mov	r1, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f000 f80c 	bl	800b7a0 <__swsetup_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d0cb      	beq.n	800b724 <__swbuf_r+0x28>
 800b78c:	f04f 37ff 	mov.w	r7, #4294967295
 800b790:	e7ea      	b.n	800b768 <__swbuf_r+0x6c>
 800b792:	bf00      	nop
 800b794:	0800f0fc 	.word	0x0800f0fc
 800b798:	0800f11c 	.word	0x0800f11c
 800b79c:	0800f0dc 	.word	0x0800f0dc

0800b7a0 <__swsetup_r>:
 800b7a0:	4b32      	ldr	r3, [pc, #200]	; (800b86c <__swsetup_r+0xcc>)
 800b7a2:	b570      	push	{r4, r5, r6, lr}
 800b7a4:	681d      	ldr	r5, [r3, #0]
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	b125      	cbz	r5, 800b7b6 <__swsetup_r+0x16>
 800b7ac:	69ab      	ldr	r3, [r5, #24]
 800b7ae:	b913      	cbnz	r3, 800b7b6 <__swsetup_r+0x16>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f000 fff7 	bl	800c7a4 <__sinit>
 800b7b6:	4b2e      	ldr	r3, [pc, #184]	; (800b870 <__swsetup_r+0xd0>)
 800b7b8:	429c      	cmp	r4, r3
 800b7ba:	d10f      	bne.n	800b7dc <__swsetup_r+0x3c>
 800b7bc:	686c      	ldr	r4, [r5, #4]
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7c4:	0719      	lsls	r1, r3, #28
 800b7c6:	d42c      	bmi.n	800b822 <__swsetup_r+0x82>
 800b7c8:	06dd      	lsls	r5, r3, #27
 800b7ca:	d411      	bmi.n	800b7f0 <__swsetup_r+0x50>
 800b7cc:	2309      	movs	r3, #9
 800b7ce:	6033      	str	r3, [r6, #0]
 800b7d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7da:	e03e      	b.n	800b85a <__swsetup_r+0xba>
 800b7dc:	4b25      	ldr	r3, [pc, #148]	; (800b874 <__swsetup_r+0xd4>)
 800b7de:	429c      	cmp	r4, r3
 800b7e0:	d101      	bne.n	800b7e6 <__swsetup_r+0x46>
 800b7e2:	68ac      	ldr	r4, [r5, #8]
 800b7e4:	e7eb      	b.n	800b7be <__swsetup_r+0x1e>
 800b7e6:	4b24      	ldr	r3, [pc, #144]	; (800b878 <__swsetup_r+0xd8>)
 800b7e8:	429c      	cmp	r4, r3
 800b7ea:	bf08      	it	eq
 800b7ec:	68ec      	ldreq	r4, [r5, #12]
 800b7ee:	e7e6      	b.n	800b7be <__swsetup_r+0x1e>
 800b7f0:	0758      	lsls	r0, r3, #29
 800b7f2:	d512      	bpl.n	800b81a <__swsetup_r+0x7a>
 800b7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f6:	b141      	cbz	r1, 800b80a <__swsetup_r+0x6a>
 800b7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	d002      	beq.n	800b806 <__swsetup_r+0x66>
 800b800:	4630      	mov	r0, r6
 800b802:	f002 f939 	bl	800da78 <_free_r>
 800b806:	2300      	movs	r3, #0
 800b808:	6363      	str	r3, [r4, #52]	; 0x34
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	2300      	movs	r3, #0
 800b814:	6063      	str	r3, [r4, #4]
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	f043 0308 	orr.w	r3, r3, #8
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	b94b      	cbnz	r3, 800b83a <__swsetup_r+0x9a>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b830:	d003      	beq.n	800b83a <__swsetup_r+0x9a>
 800b832:	4621      	mov	r1, r4
 800b834:	4630      	mov	r0, r6
 800b836:	f001 fbed 	bl	800d014 <__smakebuf_r>
 800b83a:	89a0      	ldrh	r0, [r4, #12]
 800b83c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b840:	f010 0301 	ands.w	r3, r0, #1
 800b844:	d00a      	beq.n	800b85c <__swsetup_r+0xbc>
 800b846:	2300      	movs	r3, #0
 800b848:	60a3      	str	r3, [r4, #8]
 800b84a:	6963      	ldr	r3, [r4, #20]
 800b84c:	425b      	negs	r3, r3
 800b84e:	61a3      	str	r3, [r4, #24]
 800b850:	6923      	ldr	r3, [r4, #16]
 800b852:	b943      	cbnz	r3, 800b866 <__swsetup_r+0xc6>
 800b854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b858:	d1ba      	bne.n	800b7d0 <__swsetup_r+0x30>
 800b85a:	bd70      	pop	{r4, r5, r6, pc}
 800b85c:	0781      	lsls	r1, r0, #30
 800b85e:	bf58      	it	pl
 800b860:	6963      	ldrpl	r3, [r4, #20]
 800b862:	60a3      	str	r3, [r4, #8]
 800b864:	e7f4      	b.n	800b850 <__swsetup_r+0xb0>
 800b866:	2000      	movs	r0, #0
 800b868:	e7f7      	b.n	800b85a <__swsetup_r+0xba>
 800b86a:	bf00      	nop
 800b86c:	20000014 	.word	0x20000014
 800b870:	0800f0fc 	.word	0x0800f0fc
 800b874:	0800f11c 	.word	0x0800f11c
 800b878:	0800f0dc 	.word	0x0800f0dc

0800b87c <quorem>:
 800b87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	6903      	ldr	r3, [r0, #16]
 800b882:	690c      	ldr	r4, [r1, #16]
 800b884:	42a3      	cmp	r3, r4
 800b886:	4607      	mov	r7, r0
 800b888:	f2c0 8081 	blt.w	800b98e <quorem+0x112>
 800b88c:	3c01      	subs	r4, #1
 800b88e:	f101 0814 	add.w	r8, r1, #20
 800b892:	f100 0514 	add.w	r5, r0, #20
 800b896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b8ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8b4:	d331      	bcc.n	800b91a <quorem+0x9e>
 800b8b6:	f04f 0e00 	mov.w	lr, #0
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	46ac      	mov	ip, r5
 800b8be:	46f2      	mov	sl, lr
 800b8c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8c4:	b293      	uxth	r3, r2
 800b8c6:	fb06 e303 	mla	r3, r6, r3, lr
 800b8ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	ebaa 0303 	sub.w	r3, sl, r3
 800b8d4:	0c12      	lsrs	r2, r2, #16
 800b8d6:	f8dc a000 	ldr.w	sl, [ip]
 800b8da:	fb06 e202 	mla	r2, r6, r2, lr
 800b8de:	fa13 f38a 	uxtah	r3, r3, sl
 800b8e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b8e6:	fa1f fa82 	uxth.w	sl, r2
 800b8ea:	f8dc 2000 	ldr.w	r2, [ip]
 800b8ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b8f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8fc:	4581      	cmp	r9, r0
 800b8fe:	f84c 3b04 	str.w	r3, [ip], #4
 800b902:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b906:	d2db      	bcs.n	800b8c0 <quorem+0x44>
 800b908:	f855 300b 	ldr.w	r3, [r5, fp]
 800b90c:	b92b      	cbnz	r3, 800b91a <quorem+0x9e>
 800b90e:	9b01      	ldr	r3, [sp, #4]
 800b910:	3b04      	subs	r3, #4
 800b912:	429d      	cmp	r5, r3
 800b914:	461a      	mov	r2, r3
 800b916:	d32e      	bcc.n	800b976 <quorem+0xfa>
 800b918:	613c      	str	r4, [r7, #16]
 800b91a:	4638      	mov	r0, r7
 800b91c:	f001 feaa 	bl	800d674 <__mcmp>
 800b920:	2800      	cmp	r0, #0
 800b922:	db24      	blt.n	800b96e <quorem+0xf2>
 800b924:	3601      	adds	r6, #1
 800b926:	4628      	mov	r0, r5
 800b928:	f04f 0c00 	mov.w	ip, #0
 800b92c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b930:	f8d0 e000 	ldr.w	lr, [r0]
 800b934:	b293      	uxth	r3, r2
 800b936:	ebac 0303 	sub.w	r3, ip, r3
 800b93a:	0c12      	lsrs	r2, r2, #16
 800b93c:	fa13 f38e 	uxtah	r3, r3, lr
 800b940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b948:	b29b      	uxth	r3, r3
 800b94a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b94e:	45c1      	cmp	r9, r8
 800b950:	f840 3b04 	str.w	r3, [r0], #4
 800b954:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b958:	d2e8      	bcs.n	800b92c <quorem+0xb0>
 800b95a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b95e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b962:	b922      	cbnz	r2, 800b96e <quorem+0xf2>
 800b964:	3b04      	subs	r3, #4
 800b966:	429d      	cmp	r5, r3
 800b968:	461a      	mov	r2, r3
 800b96a:	d30a      	bcc.n	800b982 <quorem+0x106>
 800b96c:	613c      	str	r4, [r7, #16]
 800b96e:	4630      	mov	r0, r6
 800b970:	b003      	add	sp, #12
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	6812      	ldr	r2, [r2, #0]
 800b978:	3b04      	subs	r3, #4
 800b97a:	2a00      	cmp	r2, #0
 800b97c:	d1cc      	bne.n	800b918 <quorem+0x9c>
 800b97e:	3c01      	subs	r4, #1
 800b980:	e7c7      	b.n	800b912 <quorem+0x96>
 800b982:	6812      	ldr	r2, [r2, #0]
 800b984:	3b04      	subs	r3, #4
 800b986:	2a00      	cmp	r2, #0
 800b988:	d1f0      	bne.n	800b96c <quorem+0xf0>
 800b98a:	3c01      	subs	r4, #1
 800b98c:	e7eb      	b.n	800b966 <quorem+0xea>
 800b98e:	2000      	movs	r0, #0
 800b990:	e7ee      	b.n	800b970 <quorem+0xf4>
 800b992:	0000      	movs	r0, r0
 800b994:	0000      	movs	r0, r0
	...

0800b998 <_dtoa_r>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	ed2d 8b02 	vpush	{d8}
 800b9a0:	ec57 6b10 	vmov	r6, r7, d0
 800b9a4:	b095      	sub	sp, #84	; 0x54
 800b9a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b9a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b9ac:	9105      	str	r1, [sp, #20]
 800b9ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9b8:	b975      	cbnz	r5, 800b9d8 <_dtoa_r+0x40>
 800b9ba:	2010      	movs	r0, #16
 800b9bc:	f001 fb6a 	bl	800d094 <malloc>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	6260      	str	r0, [r4, #36]	; 0x24
 800b9c4:	b920      	cbnz	r0, 800b9d0 <_dtoa_r+0x38>
 800b9c6:	4bb2      	ldr	r3, [pc, #712]	; (800bc90 <_dtoa_r+0x2f8>)
 800b9c8:	21ea      	movs	r1, #234	; 0xea
 800b9ca:	48b2      	ldr	r0, [pc, #712]	; (800bc94 <_dtoa_r+0x2fc>)
 800b9cc:	f002 fc40 	bl	800e250 <__assert_func>
 800b9d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9d4:	6005      	str	r5, [r0, #0]
 800b9d6:	60c5      	str	r5, [r0, #12]
 800b9d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9da:	6819      	ldr	r1, [r3, #0]
 800b9dc:	b151      	cbz	r1, 800b9f4 <_dtoa_r+0x5c>
 800b9de:	685a      	ldr	r2, [r3, #4]
 800b9e0:	604a      	str	r2, [r1, #4]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4093      	lsls	r3, r2
 800b9e6:	608b      	str	r3, [r1, #8]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f001 fbbb 	bl	800d164 <_Bfree>
 800b9ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	1e3b      	subs	r3, r7, #0
 800b9f6:	bfb9      	ittee	lt
 800b9f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b9fc:	9303      	strlt	r3, [sp, #12]
 800b9fe:	2300      	movge	r3, #0
 800ba00:	f8c8 3000 	strge.w	r3, [r8]
 800ba04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ba08:	4ba3      	ldr	r3, [pc, #652]	; (800bc98 <_dtoa_r+0x300>)
 800ba0a:	bfbc      	itt	lt
 800ba0c:	2201      	movlt	r2, #1
 800ba0e:	f8c8 2000 	strlt.w	r2, [r8]
 800ba12:	ea33 0309 	bics.w	r3, r3, r9
 800ba16:	d11b      	bne.n	800ba50 <_dtoa_r+0xb8>
 800ba18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba24:	4333      	orrs	r3, r6
 800ba26:	f000 857a 	beq.w	800c51e <_dtoa_r+0xb86>
 800ba2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba2c:	b963      	cbnz	r3, 800ba48 <_dtoa_r+0xb0>
 800ba2e:	4b9b      	ldr	r3, [pc, #620]	; (800bc9c <_dtoa_r+0x304>)
 800ba30:	e024      	b.n	800ba7c <_dtoa_r+0xe4>
 800ba32:	4b9b      	ldr	r3, [pc, #620]	; (800bca0 <_dtoa_r+0x308>)
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	9800      	ldr	r0, [sp, #0]
 800ba3e:	b015      	add	sp, #84	; 0x54
 800ba40:	ecbd 8b02 	vpop	{d8}
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	4b94      	ldr	r3, [pc, #592]	; (800bc9c <_dtoa_r+0x304>)
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	3303      	adds	r3, #3
 800ba4e:	e7f3      	b.n	800ba38 <_dtoa_r+0xa0>
 800ba50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba54:	2200      	movs	r2, #0
 800ba56:	ec51 0b17 	vmov	r0, r1, d7
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ba60:	f7f5 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba64:	4680      	mov	r8, r0
 800ba66:	b158      	cbz	r0, 800ba80 <_dtoa_r+0xe8>
 800ba68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 8551 	beq.w	800c518 <_dtoa_r+0xb80>
 800ba76:	488b      	ldr	r0, [pc, #556]	; (800bca4 <_dtoa_r+0x30c>)
 800ba78:	6018      	str	r0, [r3, #0]
 800ba7a:	1e43      	subs	r3, r0, #1
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	e7dd      	b.n	800ba3c <_dtoa_r+0xa4>
 800ba80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ba84:	aa12      	add	r2, sp, #72	; 0x48
 800ba86:	a913      	add	r1, sp, #76	; 0x4c
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f001 ff13 	bl	800d8b4 <__d2b>
 800ba8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba92:	4683      	mov	fp, r0
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	d07c      	beq.n	800bb92 <_dtoa_r+0x1fa>
 800ba98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ba9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800baa2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800baa6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800baaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800baae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bab2:	4b7d      	ldr	r3, [pc, #500]	; (800bca8 <_dtoa_r+0x310>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	4630      	mov	r0, r6
 800bab8:	4639      	mov	r1, r7
 800baba:	f7f4 fbed 	bl	8000298 <__aeabi_dsub>
 800babe:	a36e      	add	r3, pc, #440	; (adr r3, 800bc78 <_dtoa_r+0x2e0>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f7f4 fda0 	bl	8000608 <__aeabi_dmul>
 800bac8:	a36d      	add	r3, pc, #436	; (adr r3, 800bc80 <_dtoa_r+0x2e8>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	f7f4 fbe5 	bl	800029c <__adddf3>
 800bad2:	4606      	mov	r6, r0
 800bad4:	4628      	mov	r0, r5
 800bad6:	460f      	mov	r7, r1
 800bad8:	f7f4 fd2c 	bl	8000534 <__aeabi_i2d>
 800badc:	a36a      	add	r3, pc, #424	; (adr r3, 800bc88 <_dtoa_r+0x2f0>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f7f4 fd91 	bl	8000608 <__aeabi_dmul>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4630      	mov	r0, r6
 800baec:	4639      	mov	r1, r7
 800baee:	f7f4 fbd5 	bl	800029c <__adddf3>
 800baf2:	4606      	mov	r6, r0
 800baf4:	460f      	mov	r7, r1
 800baf6:	f7f5 f837 	bl	8000b68 <__aeabi_d2iz>
 800bafa:	2200      	movs	r2, #0
 800bafc:	4682      	mov	sl, r0
 800bafe:	2300      	movs	r3, #0
 800bb00:	4630      	mov	r0, r6
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f4 fff2 	bl	8000aec <__aeabi_dcmplt>
 800bb08:	b148      	cbz	r0, 800bb1e <_dtoa_r+0x186>
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	f7f4 fd12 	bl	8000534 <__aeabi_i2d>
 800bb10:	4632      	mov	r2, r6
 800bb12:	463b      	mov	r3, r7
 800bb14:	f7f4 ffe0 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb18:	b908      	cbnz	r0, 800bb1e <_dtoa_r+0x186>
 800bb1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb1e:	f1ba 0f16 	cmp.w	sl, #22
 800bb22:	d854      	bhi.n	800bbce <_dtoa_r+0x236>
 800bb24:	4b61      	ldr	r3, [pc, #388]	; (800bcac <_dtoa_r+0x314>)
 800bb26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bb32:	f7f4 ffdb 	bl	8000aec <__aeabi_dcmplt>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	d04b      	beq.n	800bbd2 <_dtoa_r+0x23a>
 800bb3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb3e:	2300      	movs	r3, #0
 800bb40:	930e      	str	r3, [sp, #56]	; 0x38
 800bb42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb44:	1b5d      	subs	r5, r3, r5
 800bb46:	1e6b      	subs	r3, r5, #1
 800bb48:	9304      	str	r3, [sp, #16]
 800bb4a:	bf43      	ittte	mi
 800bb4c:	2300      	movmi	r3, #0
 800bb4e:	f1c5 0801 	rsbmi	r8, r5, #1
 800bb52:	9304      	strmi	r3, [sp, #16]
 800bb54:	f04f 0800 	movpl.w	r8, #0
 800bb58:	f1ba 0f00 	cmp.w	sl, #0
 800bb5c:	db3b      	blt.n	800bbd6 <_dtoa_r+0x23e>
 800bb5e:	9b04      	ldr	r3, [sp, #16]
 800bb60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bb64:	4453      	add	r3, sl
 800bb66:	9304      	str	r3, [sp, #16]
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9306      	str	r3, [sp, #24]
 800bb6c:	9b05      	ldr	r3, [sp, #20]
 800bb6e:	2b09      	cmp	r3, #9
 800bb70:	d869      	bhi.n	800bc46 <_dtoa_r+0x2ae>
 800bb72:	2b05      	cmp	r3, #5
 800bb74:	bfc4      	itt	gt
 800bb76:	3b04      	subgt	r3, #4
 800bb78:	9305      	strgt	r3, [sp, #20]
 800bb7a:	9b05      	ldr	r3, [sp, #20]
 800bb7c:	f1a3 0302 	sub.w	r3, r3, #2
 800bb80:	bfcc      	ite	gt
 800bb82:	2500      	movgt	r5, #0
 800bb84:	2501      	movle	r5, #1
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d869      	bhi.n	800bc5e <_dtoa_r+0x2c6>
 800bb8a:	e8df f003 	tbb	[pc, r3]
 800bb8e:	4e2c      	.short	0x4e2c
 800bb90:	5a4c      	.short	0x5a4c
 800bb92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bb96:	441d      	add	r5, r3
 800bb98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb9c:	2b20      	cmp	r3, #32
 800bb9e:	bfc1      	itttt	gt
 800bba0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bba4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bba8:	fa09 f303 	lslgt.w	r3, r9, r3
 800bbac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bbb0:	bfda      	itte	le
 800bbb2:	f1c3 0320 	rsble	r3, r3, #32
 800bbb6:	fa06 f003 	lslle.w	r0, r6, r3
 800bbba:	4318      	orrgt	r0, r3
 800bbbc:	f7f4 fcaa 	bl	8000514 <__aeabi_ui2d>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bbc8:	3d01      	subs	r5, #1
 800bbca:	9310      	str	r3, [sp, #64]	; 0x40
 800bbcc:	e771      	b.n	800bab2 <_dtoa_r+0x11a>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e7b6      	b.n	800bb40 <_dtoa_r+0x1a8>
 800bbd2:	900e      	str	r0, [sp, #56]	; 0x38
 800bbd4:	e7b5      	b.n	800bb42 <_dtoa_r+0x1aa>
 800bbd6:	f1ca 0300 	rsb	r3, sl, #0
 800bbda:	9306      	str	r3, [sp, #24]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	eba8 080a 	sub.w	r8, r8, sl
 800bbe2:	930d      	str	r3, [sp, #52]	; 0x34
 800bbe4:	e7c2      	b.n	800bb6c <_dtoa_r+0x1d4>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9308      	str	r3, [sp, #32]
 800bbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dc39      	bgt.n	800bc64 <_dtoa_r+0x2cc>
 800bbf0:	f04f 0901 	mov.w	r9, #1
 800bbf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bbf8:	464b      	mov	r3, r9
 800bbfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bbfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc00:	2200      	movs	r2, #0
 800bc02:	6042      	str	r2, [r0, #4]
 800bc04:	2204      	movs	r2, #4
 800bc06:	f102 0614 	add.w	r6, r2, #20
 800bc0a:	429e      	cmp	r6, r3
 800bc0c:	6841      	ldr	r1, [r0, #4]
 800bc0e:	d92f      	bls.n	800bc70 <_dtoa_r+0x2d8>
 800bc10:	4620      	mov	r0, r4
 800bc12:	f001 fa67 	bl	800d0e4 <_Balloc>
 800bc16:	9000      	str	r0, [sp, #0]
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d14b      	bne.n	800bcb4 <_dtoa_r+0x31c>
 800bc1c:	4b24      	ldr	r3, [pc, #144]	; (800bcb0 <_dtoa_r+0x318>)
 800bc1e:	4602      	mov	r2, r0
 800bc20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc24:	e6d1      	b.n	800b9ca <_dtoa_r+0x32>
 800bc26:	2301      	movs	r3, #1
 800bc28:	e7de      	b.n	800bbe8 <_dtoa_r+0x250>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc30:	eb0a 0903 	add.w	r9, sl, r3
 800bc34:	f109 0301 	add.w	r3, r9, #1
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	9301      	str	r3, [sp, #4]
 800bc3c:	bfb8      	it	lt
 800bc3e:	2301      	movlt	r3, #1
 800bc40:	e7dd      	b.n	800bbfe <_dtoa_r+0x266>
 800bc42:	2301      	movs	r3, #1
 800bc44:	e7f2      	b.n	800bc2c <_dtoa_r+0x294>
 800bc46:	2501      	movs	r5, #1
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	9508      	str	r5, [sp, #32]
 800bc4e:	f04f 39ff 	mov.w	r9, #4294967295
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc58:	2312      	movs	r3, #18
 800bc5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc5c:	e7cf      	b.n	800bbfe <_dtoa_r+0x266>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	9308      	str	r3, [sp, #32]
 800bc62:	e7f4      	b.n	800bc4e <_dtoa_r+0x2b6>
 800bc64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bc68:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc6c:	464b      	mov	r3, r9
 800bc6e:	e7c6      	b.n	800bbfe <_dtoa_r+0x266>
 800bc70:	3101      	adds	r1, #1
 800bc72:	6041      	str	r1, [r0, #4]
 800bc74:	0052      	lsls	r2, r2, #1
 800bc76:	e7c6      	b.n	800bc06 <_dtoa_r+0x26e>
 800bc78:	636f4361 	.word	0x636f4361
 800bc7c:	3fd287a7 	.word	0x3fd287a7
 800bc80:	8b60c8b3 	.word	0x8b60c8b3
 800bc84:	3fc68a28 	.word	0x3fc68a28
 800bc88:	509f79fb 	.word	0x509f79fb
 800bc8c:	3fd34413 	.word	0x3fd34413
 800bc90:	0800f055 	.word	0x0800f055
 800bc94:	0800f06c 	.word	0x0800f06c
 800bc98:	7ff00000 	.word	0x7ff00000
 800bc9c:	0800f051 	.word	0x0800f051
 800bca0:	0800f048 	.word	0x0800f048
 800bca4:	0800efd5 	.word	0x0800efd5
 800bca8:	3ff80000 	.word	0x3ff80000
 800bcac:	0800f248 	.word	0x0800f248
 800bcb0:	0800f0cb 	.word	0x0800f0cb
 800bcb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcb6:	9a00      	ldr	r2, [sp, #0]
 800bcb8:	601a      	str	r2, [r3, #0]
 800bcba:	9b01      	ldr	r3, [sp, #4]
 800bcbc:	2b0e      	cmp	r3, #14
 800bcbe:	f200 80ad 	bhi.w	800be1c <_dtoa_r+0x484>
 800bcc2:	2d00      	cmp	r5, #0
 800bcc4:	f000 80aa 	beq.w	800be1c <_dtoa_r+0x484>
 800bcc8:	f1ba 0f00 	cmp.w	sl, #0
 800bccc:	dd36      	ble.n	800bd3c <_dtoa_r+0x3a4>
 800bcce:	4ac3      	ldr	r2, [pc, #780]	; (800bfdc <_dtoa_r+0x644>)
 800bcd0:	f00a 030f 	and.w	r3, sl, #15
 800bcd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bcd8:	ed93 7b00 	vldr	d7, [r3]
 800bcdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bce0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bce4:	eeb0 8a47 	vmov.f32	s16, s14
 800bce8:	eef0 8a67 	vmov.f32	s17, s15
 800bcec:	d016      	beq.n	800bd1c <_dtoa_r+0x384>
 800bcee:	4bbc      	ldr	r3, [pc, #752]	; (800bfe0 <_dtoa_r+0x648>)
 800bcf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bcf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcf8:	f7f4 fdb0 	bl	800085c <__aeabi_ddiv>
 800bcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd00:	f007 070f 	and.w	r7, r7, #15
 800bd04:	2503      	movs	r5, #3
 800bd06:	4eb6      	ldr	r6, [pc, #728]	; (800bfe0 <_dtoa_r+0x648>)
 800bd08:	b957      	cbnz	r7, 800bd20 <_dtoa_r+0x388>
 800bd0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0e:	ec53 2b18 	vmov	r2, r3, d8
 800bd12:	f7f4 fda3 	bl	800085c <__aeabi_ddiv>
 800bd16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1a:	e029      	b.n	800bd70 <_dtoa_r+0x3d8>
 800bd1c:	2502      	movs	r5, #2
 800bd1e:	e7f2      	b.n	800bd06 <_dtoa_r+0x36e>
 800bd20:	07f9      	lsls	r1, r7, #31
 800bd22:	d508      	bpl.n	800bd36 <_dtoa_r+0x39e>
 800bd24:	ec51 0b18 	vmov	r0, r1, d8
 800bd28:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd2c:	f7f4 fc6c 	bl	8000608 <__aeabi_dmul>
 800bd30:	ec41 0b18 	vmov	d8, r0, r1
 800bd34:	3501      	adds	r5, #1
 800bd36:	107f      	asrs	r7, r7, #1
 800bd38:	3608      	adds	r6, #8
 800bd3a:	e7e5      	b.n	800bd08 <_dtoa_r+0x370>
 800bd3c:	f000 80a6 	beq.w	800be8c <_dtoa_r+0x4f4>
 800bd40:	f1ca 0600 	rsb	r6, sl, #0
 800bd44:	4ba5      	ldr	r3, [pc, #660]	; (800bfdc <_dtoa_r+0x644>)
 800bd46:	4fa6      	ldr	r7, [pc, #664]	; (800bfe0 <_dtoa_r+0x648>)
 800bd48:	f006 020f 	and.w	r2, r6, #15
 800bd4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd58:	f7f4 fc56 	bl	8000608 <__aeabi_dmul>
 800bd5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd60:	1136      	asrs	r6, r6, #4
 800bd62:	2300      	movs	r3, #0
 800bd64:	2502      	movs	r5, #2
 800bd66:	2e00      	cmp	r6, #0
 800bd68:	f040 8085 	bne.w	800be76 <_dtoa_r+0x4de>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d1d2      	bne.n	800bd16 <_dtoa_r+0x37e>
 800bd70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f000 808c 	beq.w	800be90 <_dtoa_r+0x4f8>
 800bd78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd7c:	4b99      	ldr	r3, [pc, #612]	; (800bfe4 <_dtoa_r+0x64c>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4630      	mov	r0, r6
 800bd82:	4639      	mov	r1, r7
 800bd84:	f7f4 feb2 	bl	8000aec <__aeabi_dcmplt>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	f000 8081 	beq.w	800be90 <_dtoa_r+0x4f8>
 800bd8e:	9b01      	ldr	r3, [sp, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d07d      	beq.n	800be90 <_dtoa_r+0x4f8>
 800bd94:	f1b9 0f00 	cmp.w	r9, #0
 800bd98:	dd3c      	ble.n	800be14 <_dtoa_r+0x47c>
 800bd9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	2200      	movs	r2, #0
 800bda2:	4b91      	ldr	r3, [pc, #580]	; (800bfe8 <_dtoa_r+0x650>)
 800bda4:	4630      	mov	r0, r6
 800bda6:	4639      	mov	r1, r7
 800bda8:	f7f4 fc2e 	bl	8000608 <__aeabi_dmul>
 800bdac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bdb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bdba:	4628      	mov	r0, r5
 800bdbc:	f7f4 fbba 	bl	8000534 <__aeabi_i2d>
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	f7f4 fc20 	bl	8000608 <__aeabi_dmul>
 800bdc8:	4b88      	ldr	r3, [pc, #544]	; (800bfec <_dtoa_r+0x654>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f7f4 fa66 	bl	800029c <__adddf3>
 800bdd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bdd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdd8:	9303      	str	r3, [sp, #12]
 800bdda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d15c      	bne.n	800be9a <_dtoa_r+0x502>
 800bde0:	4b83      	ldr	r3, [pc, #524]	; (800bff0 <_dtoa_r+0x658>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	4630      	mov	r0, r6
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 fa56 	bl	8000298 <__aeabi_dsub>
 800bdec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	460f      	mov	r7, r1
 800bdf4:	f7f4 fe98 	bl	8000b28 <__aeabi_dcmpgt>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	f040 8296 	bne.w	800c32a <_dtoa_r+0x992>
 800bdfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800be02:	4630      	mov	r0, r6
 800be04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be08:	4639      	mov	r1, r7
 800be0a:	f7f4 fe6f 	bl	8000aec <__aeabi_dcmplt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f040 8288 	bne.w	800c324 <_dtoa_r+0x98c>
 800be14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f2c0 8158 	blt.w	800c0d4 <_dtoa_r+0x73c>
 800be24:	f1ba 0f0e 	cmp.w	sl, #14
 800be28:	f300 8154 	bgt.w	800c0d4 <_dtoa_r+0x73c>
 800be2c:	4b6b      	ldr	r3, [pc, #428]	; (800bfdc <_dtoa_r+0x644>)
 800be2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be32:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f280 80e3 	bge.w	800c004 <_dtoa_r+0x66c>
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f300 80df 	bgt.w	800c004 <_dtoa_r+0x66c>
 800be46:	f040 826d 	bne.w	800c324 <_dtoa_r+0x98c>
 800be4a:	4b69      	ldr	r3, [pc, #420]	; (800bff0 <_dtoa_r+0x658>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	4640      	mov	r0, r8
 800be50:	4649      	mov	r1, r9
 800be52:	f7f4 fbd9 	bl	8000608 <__aeabi_dmul>
 800be56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be5a:	f7f4 fe5b 	bl	8000b14 <__aeabi_dcmpge>
 800be5e:	9e01      	ldr	r6, [sp, #4]
 800be60:	4637      	mov	r7, r6
 800be62:	2800      	cmp	r0, #0
 800be64:	f040 8243 	bne.w	800c2ee <_dtoa_r+0x956>
 800be68:	9d00      	ldr	r5, [sp, #0]
 800be6a:	2331      	movs	r3, #49	; 0x31
 800be6c:	f805 3b01 	strb.w	r3, [r5], #1
 800be70:	f10a 0a01 	add.w	sl, sl, #1
 800be74:	e23f      	b.n	800c2f6 <_dtoa_r+0x95e>
 800be76:	07f2      	lsls	r2, r6, #31
 800be78:	d505      	bpl.n	800be86 <_dtoa_r+0x4ee>
 800be7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be7e:	f7f4 fbc3 	bl	8000608 <__aeabi_dmul>
 800be82:	3501      	adds	r5, #1
 800be84:	2301      	movs	r3, #1
 800be86:	1076      	asrs	r6, r6, #1
 800be88:	3708      	adds	r7, #8
 800be8a:	e76c      	b.n	800bd66 <_dtoa_r+0x3ce>
 800be8c:	2502      	movs	r5, #2
 800be8e:	e76f      	b.n	800bd70 <_dtoa_r+0x3d8>
 800be90:	9b01      	ldr	r3, [sp, #4]
 800be92:	f8cd a01c 	str.w	sl, [sp, #28]
 800be96:	930c      	str	r3, [sp, #48]	; 0x30
 800be98:	e78d      	b.n	800bdb6 <_dtoa_r+0x41e>
 800be9a:	9900      	ldr	r1, [sp, #0]
 800be9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800be9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bea0:	4b4e      	ldr	r3, [pc, #312]	; (800bfdc <_dtoa_r+0x644>)
 800bea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bea6:	4401      	add	r1, r0
 800bea8:	9102      	str	r1, [sp, #8]
 800beaa:	9908      	ldr	r1, [sp, #32]
 800beac:	eeb0 8a47 	vmov.f32	s16, s14
 800beb0:	eef0 8a67 	vmov.f32	s17, s15
 800beb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bebc:	2900      	cmp	r1, #0
 800bebe:	d045      	beq.n	800bf4c <_dtoa_r+0x5b4>
 800bec0:	494c      	ldr	r1, [pc, #304]	; (800bff4 <_dtoa_r+0x65c>)
 800bec2:	2000      	movs	r0, #0
 800bec4:	f7f4 fcca 	bl	800085c <__aeabi_ddiv>
 800bec8:	ec53 2b18 	vmov	r2, r3, d8
 800becc:	f7f4 f9e4 	bl	8000298 <__aeabi_dsub>
 800bed0:	9d00      	ldr	r5, [sp, #0]
 800bed2:	ec41 0b18 	vmov	d8, r0, r1
 800bed6:	4639      	mov	r1, r7
 800bed8:	4630      	mov	r0, r6
 800beda:	f7f4 fe45 	bl	8000b68 <__aeabi_d2iz>
 800bede:	900c      	str	r0, [sp, #48]	; 0x30
 800bee0:	f7f4 fb28 	bl	8000534 <__aeabi_i2d>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 f9d4 	bl	8000298 <__aeabi_dsub>
 800bef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bef2:	3330      	adds	r3, #48	; 0x30
 800bef4:	f805 3b01 	strb.w	r3, [r5], #1
 800bef8:	ec53 2b18 	vmov	r2, r3, d8
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	f7f4 fdf4 	bl	8000aec <__aeabi_dcmplt>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d165      	bne.n	800bfd4 <_dtoa_r+0x63c>
 800bf08:	4632      	mov	r2, r6
 800bf0a:	463b      	mov	r3, r7
 800bf0c:	4935      	ldr	r1, [pc, #212]	; (800bfe4 <_dtoa_r+0x64c>)
 800bf0e:	2000      	movs	r0, #0
 800bf10:	f7f4 f9c2 	bl	8000298 <__aeabi_dsub>
 800bf14:	ec53 2b18 	vmov	r2, r3, d8
 800bf18:	f7f4 fde8 	bl	8000aec <__aeabi_dcmplt>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f040 80b9 	bne.w	800c094 <_dtoa_r+0x6fc>
 800bf22:	9b02      	ldr	r3, [sp, #8]
 800bf24:	429d      	cmp	r5, r3
 800bf26:	f43f af75 	beq.w	800be14 <_dtoa_r+0x47c>
 800bf2a:	4b2f      	ldr	r3, [pc, #188]	; (800bfe8 <_dtoa_r+0x650>)
 800bf2c:	ec51 0b18 	vmov	r0, r1, d8
 800bf30:	2200      	movs	r2, #0
 800bf32:	f7f4 fb69 	bl	8000608 <__aeabi_dmul>
 800bf36:	4b2c      	ldr	r3, [pc, #176]	; (800bfe8 <_dtoa_r+0x650>)
 800bf38:	ec41 0b18 	vmov	d8, r0, r1
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	4630      	mov	r0, r6
 800bf40:	4639      	mov	r1, r7
 800bf42:	f7f4 fb61 	bl	8000608 <__aeabi_dmul>
 800bf46:	4606      	mov	r6, r0
 800bf48:	460f      	mov	r7, r1
 800bf4a:	e7c4      	b.n	800bed6 <_dtoa_r+0x53e>
 800bf4c:	ec51 0b17 	vmov	r0, r1, d7
 800bf50:	f7f4 fb5a 	bl	8000608 <__aeabi_dmul>
 800bf54:	9b02      	ldr	r3, [sp, #8]
 800bf56:	9d00      	ldr	r5, [sp, #0]
 800bf58:	930c      	str	r3, [sp, #48]	; 0x30
 800bf5a:	ec41 0b18 	vmov	d8, r0, r1
 800bf5e:	4639      	mov	r1, r7
 800bf60:	4630      	mov	r0, r6
 800bf62:	f7f4 fe01 	bl	8000b68 <__aeabi_d2iz>
 800bf66:	9011      	str	r0, [sp, #68]	; 0x44
 800bf68:	f7f4 fae4 	bl	8000534 <__aeabi_i2d>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 f990 	bl	8000298 <__aeabi_dsub>
 800bf78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf7a:	3330      	adds	r3, #48	; 0x30
 800bf7c:	f805 3b01 	strb.w	r3, [r5], #1
 800bf80:	9b02      	ldr	r3, [sp, #8]
 800bf82:	429d      	cmp	r5, r3
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	f04f 0200 	mov.w	r2, #0
 800bf8c:	d134      	bne.n	800bff8 <_dtoa_r+0x660>
 800bf8e:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <_dtoa_r+0x65c>)
 800bf90:	ec51 0b18 	vmov	r0, r1, d8
 800bf94:	f7f4 f982 	bl	800029c <__adddf3>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	f7f4 fdc2 	bl	8000b28 <__aeabi_dcmpgt>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d175      	bne.n	800c094 <_dtoa_r+0x6fc>
 800bfa8:	ec53 2b18 	vmov	r2, r3, d8
 800bfac:	4911      	ldr	r1, [pc, #68]	; (800bff4 <_dtoa_r+0x65c>)
 800bfae:	2000      	movs	r0, #0
 800bfb0:	f7f4 f972 	bl	8000298 <__aeabi_dsub>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	460b      	mov	r3, r1
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fd96 	bl	8000aec <__aeabi_dcmplt>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	f43f af27 	beq.w	800be14 <_dtoa_r+0x47c>
 800bfc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfc8:	1e6b      	subs	r3, r5, #1
 800bfca:	930c      	str	r3, [sp, #48]	; 0x30
 800bfcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfd0:	2b30      	cmp	r3, #48	; 0x30
 800bfd2:	d0f8      	beq.n	800bfc6 <_dtoa_r+0x62e>
 800bfd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bfd8:	e04a      	b.n	800c070 <_dtoa_r+0x6d8>
 800bfda:	bf00      	nop
 800bfdc:	0800f248 	.word	0x0800f248
 800bfe0:	0800f220 	.word	0x0800f220
 800bfe4:	3ff00000 	.word	0x3ff00000
 800bfe8:	40240000 	.word	0x40240000
 800bfec:	401c0000 	.word	0x401c0000
 800bff0:	40140000 	.word	0x40140000
 800bff4:	3fe00000 	.word	0x3fe00000
 800bff8:	4baf      	ldr	r3, [pc, #700]	; (800c2b8 <_dtoa_r+0x920>)
 800bffa:	f7f4 fb05 	bl	8000608 <__aeabi_dmul>
 800bffe:	4606      	mov	r6, r0
 800c000:	460f      	mov	r7, r1
 800c002:	e7ac      	b.n	800bf5e <_dtoa_r+0x5c6>
 800c004:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c008:	9d00      	ldr	r5, [sp, #0]
 800c00a:	4642      	mov	r2, r8
 800c00c:	464b      	mov	r3, r9
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	f7f4 fc23 	bl	800085c <__aeabi_ddiv>
 800c016:	f7f4 fda7 	bl	8000b68 <__aeabi_d2iz>
 800c01a:	9002      	str	r0, [sp, #8]
 800c01c:	f7f4 fa8a 	bl	8000534 <__aeabi_i2d>
 800c020:	4642      	mov	r2, r8
 800c022:	464b      	mov	r3, r9
 800c024:	f7f4 faf0 	bl	8000608 <__aeabi_dmul>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	4630      	mov	r0, r6
 800c02e:	4639      	mov	r1, r7
 800c030:	f7f4 f932 	bl	8000298 <__aeabi_dsub>
 800c034:	9e02      	ldr	r6, [sp, #8]
 800c036:	9f01      	ldr	r7, [sp, #4]
 800c038:	3630      	adds	r6, #48	; 0x30
 800c03a:	f805 6b01 	strb.w	r6, [r5], #1
 800c03e:	9e00      	ldr	r6, [sp, #0]
 800c040:	1bae      	subs	r6, r5, r6
 800c042:	42b7      	cmp	r7, r6
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	d137      	bne.n	800c0ba <_dtoa_r+0x722>
 800c04a:	f7f4 f927 	bl	800029c <__adddf3>
 800c04e:	4642      	mov	r2, r8
 800c050:	464b      	mov	r3, r9
 800c052:	4606      	mov	r6, r0
 800c054:	460f      	mov	r7, r1
 800c056:	f7f4 fd67 	bl	8000b28 <__aeabi_dcmpgt>
 800c05a:	b9c8      	cbnz	r0, 800c090 <_dtoa_r+0x6f8>
 800c05c:	4642      	mov	r2, r8
 800c05e:	464b      	mov	r3, r9
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 800c068:	b110      	cbz	r0, 800c070 <_dtoa_r+0x6d8>
 800c06a:	9b02      	ldr	r3, [sp, #8]
 800c06c:	07d9      	lsls	r1, r3, #31
 800c06e:	d40f      	bmi.n	800c090 <_dtoa_r+0x6f8>
 800c070:	4620      	mov	r0, r4
 800c072:	4659      	mov	r1, fp
 800c074:	f001 f876 	bl	800d164 <_Bfree>
 800c078:	2300      	movs	r3, #0
 800c07a:	702b      	strb	r3, [r5, #0]
 800c07c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c07e:	f10a 0001 	add.w	r0, sl, #1
 800c082:	6018      	str	r0, [r3, #0]
 800c084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c086:	2b00      	cmp	r3, #0
 800c088:	f43f acd8 	beq.w	800ba3c <_dtoa_r+0xa4>
 800c08c:	601d      	str	r5, [r3, #0]
 800c08e:	e4d5      	b.n	800ba3c <_dtoa_r+0xa4>
 800c090:	f8cd a01c 	str.w	sl, [sp, #28]
 800c094:	462b      	mov	r3, r5
 800c096:	461d      	mov	r5, r3
 800c098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c09c:	2a39      	cmp	r2, #57	; 0x39
 800c09e:	d108      	bne.n	800c0b2 <_dtoa_r+0x71a>
 800c0a0:	9a00      	ldr	r2, [sp, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d1f7      	bne.n	800c096 <_dtoa_r+0x6fe>
 800c0a6:	9a07      	ldr	r2, [sp, #28]
 800c0a8:	9900      	ldr	r1, [sp, #0]
 800c0aa:	3201      	adds	r2, #1
 800c0ac:	9207      	str	r2, [sp, #28]
 800c0ae:	2230      	movs	r2, #48	; 0x30
 800c0b0:	700a      	strb	r2, [r1, #0]
 800c0b2:	781a      	ldrb	r2, [r3, #0]
 800c0b4:	3201      	adds	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
 800c0b8:	e78c      	b.n	800bfd4 <_dtoa_r+0x63c>
 800c0ba:	4b7f      	ldr	r3, [pc, #508]	; (800c2b8 <_dtoa_r+0x920>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f7f4 faa3 	bl	8000608 <__aeabi_dmul>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	f7f4 fd05 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d09b      	beq.n	800c00a <_dtoa_r+0x672>
 800c0d2:	e7cd      	b.n	800c070 <_dtoa_r+0x6d8>
 800c0d4:	9a08      	ldr	r2, [sp, #32]
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	f000 80c4 	beq.w	800c264 <_dtoa_r+0x8cc>
 800c0dc:	9a05      	ldr	r2, [sp, #20]
 800c0de:	2a01      	cmp	r2, #1
 800c0e0:	f300 80a8 	bgt.w	800c234 <_dtoa_r+0x89c>
 800c0e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	f000 80a0 	beq.w	800c22c <_dtoa_r+0x894>
 800c0ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0f0:	9e06      	ldr	r6, [sp, #24]
 800c0f2:	4645      	mov	r5, r8
 800c0f4:	9a04      	ldr	r2, [sp, #16]
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	441a      	add	r2, r3
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4498      	add	r8, r3
 800c0fe:	9204      	str	r2, [sp, #16]
 800c100:	f001 f936 	bl	800d370 <__i2b>
 800c104:	4607      	mov	r7, r0
 800c106:	2d00      	cmp	r5, #0
 800c108:	dd0b      	ble.n	800c122 <_dtoa_r+0x78a>
 800c10a:	9b04      	ldr	r3, [sp, #16]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	dd08      	ble.n	800c122 <_dtoa_r+0x78a>
 800c110:	42ab      	cmp	r3, r5
 800c112:	9a04      	ldr	r2, [sp, #16]
 800c114:	bfa8      	it	ge
 800c116:	462b      	movge	r3, r5
 800c118:	eba8 0803 	sub.w	r8, r8, r3
 800c11c:	1aed      	subs	r5, r5, r3
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	9b06      	ldr	r3, [sp, #24]
 800c124:	b1fb      	cbz	r3, 800c166 <_dtoa_r+0x7ce>
 800c126:	9b08      	ldr	r3, [sp, #32]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 809f 	beq.w	800c26c <_dtoa_r+0x8d4>
 800c12e:	2e00      	cmp	r6, #0
 800c130:	dd11      	ble.n	800c156 <_dtoa_r+0x7be>
 800c132:	4639      	mov	r1, r7
 800c134:	4632      	mov	r2, r6
 800c136:	4620      	mov	r0, r4
 800c138:	f001 f9d6 	bl	800d4e8 <__pow5mult>
 800c13c:	465a      	mov	r2, fp
 800c13e:	4601      	mov	r1, r0
 800c140:	4607      	mov	r7, r0
 800c142:	4620      	mov	r0, r4
 800c144:	f001 f92a 	bl	800d39c <__multiply>
 800c148:	4659      	mov	r1, fp
 800c14a:	9007      	str	r0, [sp, #28]
 800c14c:	4620      	mov	r0, r4
 800c14e:	f001 f809 	bl	800d164 <_Bfree>
 800c152:	9b07      	ldr	r3, [sp, #28]
 800c154:	469b      	mov	fp, r3
 800c156:	9b06      	ldr	r3, [sp, #24]
 800c158:	1b9a      	subs	r2, r3, r6
 800c15a:	d004      	beq.n	800c166 <_dtoa_r+0x7ce>
 800c15c:	4659      	mov	r1, fp
 800c15e:	4620      	mov	r0, r4
 800c160:	f001 f9c2 	bl	800d4e8 <__pow5mult>
 800c164:	4683      	mov	fp, r0
 800c166:	2101      	movs	r1, #1
 800c168:	4620      	mov	r0, r4
 800c16a:	f001 f901 	bl	800d370 <__i2b>
 800c16e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c170:	2b00      	cmp	r3, #0
 800c172:	4606      	mov	r6, r0
 800c174:	dd7c      	ble.n	800c270 <_dtoa_r+0x8d8>
 800c176:	461a      	mov	r2, r3
 800c178:	4601      	mov	r1, r0
 800c17a:	4620      	mov	r0, r4
 800c17c:	f001 f9b4 	bl	800d4e8 <__pow5mult>
 800c180:	9b05      	ldr	r3, [sp, #20]
 800c182:	2b01      	cmp	r3, #1
 800c184:	4606      	mov	r6, r0
 800c186:	dd76      	ble.n	800c276 <_dtoa_r+0x8de>
 800c188:	2300      	movs	r3, #0
 800c18a:	9306      	str	r3, [sp, #24]
 800c18c:	6933      	ldr	r3, [r6, #16]
 800c18e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c192:	6918      	ldr	r0, [r3, #16]
 800c194:	f001 f89c 	bl	800d2d0 <__hi0bits>
 800c198:	f1c0 0020 	rsb	r0, r0, #32
 800c19c:	9b04      	ldr	r3, [sp, #16]
 800c19e:	4418      	add	r0, r3
 800c1a0:	f010 001f 	ands.w	r0, r0, #31
 800c1a4:	f000 8086 	beq.w	800c2b4 <_dtoa_r+0x91c>
 800c1a8:	f1c0 0320 	rsb	r3, r0, #32
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	dd7f      	ble.n	800c2b0 <_dtoa_r+0x918>
 800c1b0:	f1c0 001c 	rsb	r0, r0, #28
 800c1b4:	9b04      	ldr	r3, [sp, #16]
 800c1b6:	4403      	add	r3, r0
 800c1b8:	4480      	add	r8, r0
 800c1ba:	4405      	add	r5, r0
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	f1b8 0f00 	cmp.w	r8, #0
 800c1c2:	dd05      	ble.n	800c1d0 <_dtoa_r+0x838>
 800c1c4:	4659      	mov	r1, fp
 800c1c6:	4642      	mov	r2, r8
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f001 f9e7 	bl	800d59c <__lshift>
 800c1ce:	4683      	mov	fp, r0
 800c1d0:	9b04      	ldr	r3, [sp, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd05      	ble.n	800c1e2 <_dtoa_r+0x84a>
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f001 f9de 	bl	800d59c <__lshift>
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d069      	beq.n	800c2bc <_dtoa_r+0x924>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4658      	mov	r0, fp
 800c1ec:	f001 fa42 	bl	800d674 <__mcmp>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	da63      	bge.n	800c2bc <_dtoa_r+0x924>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4659      	mov	r1, fp
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 ffd4 	bl	800d1a8 <__multadd>
 800c200:	9b08      	ldr	r3, [sp, #32]
 800c202:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c206:	4683      	mov	fp, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 818f 	beq.w	800c52c <_dtoa_r+0xb94>
 800c20e:	4639      	mov	r1, r7
 800c210:	2300      	movs	r3, #0
 800c212:	220a      	movs	r2, #10
 800c214:	4620      	mov	r0, r4
 800c216:	f000 ffc7 	bl	800d1a8 <__multadd>
 800c21a:	f1b9 0f00 	cmp.w	r9, #0
 800c21e:	4607      	mov	r7, r0
 800c220:	f300 808e 	bgt.w	800c340 <_dtoa_r+0x9a8>
 800c224:	9b05      	ldr	r3, [sp, #20]
 800c226:	2b02      	cmp	r3, #2
 800c228:	dc50      	bgt.n	800c2cc <_dtoa_r+0x934>
 800c22a:	e089      	b.n	800c340 <_dtoa_r+0x9a8>
 800c22c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c22e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c232:	e75d      	b.n	800c0f0 <_dtoa_r+0x758>
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	1e5e      	subs	r6, r3, #1
 800c238:	9b06      	ldr	r3, [sp, #24]
 800c23a:	42b3      	cmp	r3, r6
 800c23c:	bfbf      	itttt	lt
 800c23e:	9b06      	ldrlt	r3, [sp, #24]
 800c240:	9606      	strlt	r6, [sp, #24]
 800c242:	1af2      	sublt	r2, r6, r3
 800c244:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c246:	bfb6      	itet	lt
 800c248:	189b      	addlt	r3, r3, r2
 800c24a:	1b9e      	subge	r6, r3, r6
 800c24c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	bfb8      	it	lt
 800c252:	2600      	movlt	r6, #0
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfb5      	itete	lt
 800c258:	eba8 0503 	sublt.w	r5, r8, r3
 800c25c:	9b01      	ldrge	r3, [sp, #4]
 800c25e:	2300      	movlt	r3, #0
 800c260:	4645      	movge	r5, r8
 800c262:	e747      	b.n	800c0f4 <_dtoa_r+0x75c>
 800c264:	9e06      	ldr	r6, [sp, #24]
 800c266:	9f08      	ldr	r7, [sp, #32]
 800c268:	4645      	mov	r5, r8
 800c26a:	e74c      	b.n	800c106 <_dtoa_r+0x76e>
 800c26c:	9a06      	ldr	r2, [sp, #24]
 800c26e:	e775      	b.n	800c15c <_dtoa_r+0x7c4>
 800c270:	9b05      	ldr	r3, [sp, #20]
 800c272:	2b01      	cmp	r3, #1
 800c274:	dc18      	bgt.n	800c2a8 <_dtoa_r+0x910>
 800c276:	9b02      	ldr	r3, [sp, #8]
 800c278:	b9b3      	cbnz	r3, 800c2a8 <_dtoa_r+0x910>
 800c27a:	9b03      	ldr	r3, [sp, #12]
 800c27c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c280:	b9a3      	cbnz	r3, 800c2ac <_dtoa_r+0x914>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c288:	0d1b      	lsrs	r3, r3, #20
 800c28a:	051b      	lsls	r3, r3, #20
 800c28c:	b12b      	cbz	r3, 800c29a <_dtoa_r+0x902>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	3301      	adds	r3, #1
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	f108 0801 	add.w	r8, r8, #1
 800c298:	2301      	movs	r3, #1
 800c29a:	9306      	str	r3, [sp, #24]
 800c29c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	f47f af74 	bne.w	800c18c <_dtoa_r+0x7f4>
 800c2a4:	2001      	movs	r0, #1
 800c2a6:	e779      	b.n	800c19c <_dtoa_r+0x804>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e7f6      	b.n	800c29a <_dtoa_r+0x902>
 800c2ac:	9b02      	ldr	r3, [sp, #8]
 800c2ae:	e7f4      	b.n	800c29a <_dtoa_r+0x902>
 800c2b0:	d085      	beq.n	800c1be <_dtoa_r+0x826>
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	301c      	adds	r0, #28
 800c2b6:	e77d      	b.n	800c1b4 <_dtoa_r+0x81c>
 800c2b8:	40240000 	.word	0x40240000
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dc38      	bgt.n	800c334 <_dtoa_r+0x99c>
 800c2c2:	9b05      	ldr	r3, [sp, #20]
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	dd35      	ble.n	800c334 <_dtoa_r+0x99c>
 800c2c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c2cc:	f1b9 0f00 	cmp.w	r9, #0
 800c2d0:	d10d      	bne.n	800c2ee <_dtoa_r+0x956>
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	464b      	mov	r3, r9
 800c2d6:	2205      	movs	r2, #5
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 ff65 	bl	800d1a8 <__multadd>
 800c2de:	4601      	mov	r1, r0
 800c2e0:	4606      	mov	r6, r0
 800c2e2:	4658      	mov	r0, fp
 800c2e4:	f001 f9c6 	bl	800d674 <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f73f adbd 	bgt.w	800be68 <_dtoa_r+0x4d0>
 800c2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f0:	9d00      	ldr	r5, [sp, #0]
 800c2f2:	ea6f 0a03 	mvn.w	sl, r3
 800c2f6:	f04f 0800 	mov.w	r8, #0
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 ff31 	bl	800d164 <_Bfree>
 800c302:	2f00      	cmp	r7, #0
 800c304:	f43f aeb4 	beq.w	800c070 <_dtoa_r+0x6d8>
 800c308:	f1b8 0f00 	cmp.w	r8, #0
 800c30c:	d005      	beq.n	800c31a <_dtoa_r+0x982>
 800c30e:	45b8      	cmp	r8, r7
 800c310:	d003      	beq.n	800c31a <_dtoa_r+0x982>
 800c312:	4641      	mov	r1, r8
 800c314:	4620      	mov	r0, r4
 800c316:	f000 ff25 	bl	800d164 <_Bfree>
 800c31a:	4639      	mov	r1, r7
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 ff21 	bl	800d164 <_Bfree>
 800c322:	e6a5      	b.n	800c070 <_dtoa_r+0x6d8>
 800c324:	2600      	movs	r6, #0
 800c326:	4637      	mov	r7, r6
 800c328:	e7e1      	b.n	800c2ee <_dtoa_r+0x956>
 800c32a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c32c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c330:	4637      	mov	r7, r6
 800c332:	e599      	b.n	800be68 <_dtoa_r+0x4d0>
 800c334:	9b08      	ldr	r3, [sp, #32]
 800c336:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 80fd 	beq.w	800c53a <_dtoa_r+0xba2>
 800c340:	2d00      	cmp	r5, #0
 800c342:	dd05      	ble.n	800c350 <_dtoa_r+0x9b8>
 800c344:	4639      	mov	r1, r7
 800c346:	462a      	mov	r2, r5
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 f927 	bl	800d59c <__lshift>
 800c34e:	4607      	mov	r7, r0
 800c350:	9b06      	ldr	r3, [sp, #24]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d05c      	beq.n	800c410 <_dtoa_r+0xa78>
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fec3 	bl	800d0e4 <_Balloc>
 800c35e:	4605      	mov	r5, r0
 800c360:	b928      	cbnz	r0, 800c36e <_dtoa_r+0x9d6>
 800c362:	4b80      	ldr	r3, [pc, #512]	; (800c564 <_dtoa_r+0xbcc>)
 800c364:	4602      	mov	r2, r0
 800c366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c36a:	f7ff bb2e 	b.w	800b9ca <_dtoa_r+0x32>
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	3202      	adds	r2, #2
 800c372:	0092      	lsls	r2, r2, #2
 800c374:	f107 010c 	add.w	r1, r7, #12
 800c378:	300c      	adds	r0, #12
 800c37a:	f000 fea5 	bl	800d0c8 <memcpy>
 800c37e:	2201      	movs	r2, #1
 800c380:	4629      	mov	r1, r5
 800c382:	4620      	mov	r0, r4
 800c384:	f001 f90a 	bl	800d59c <__lshift>
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	9b00      	ldr	r3, [sp, #0]
 800c390:	444b      	add	r3, r9
 800c392:	9307      	str	r3, [sp, #28]
 800c394:	9b02      	ldr	r3, [sp, #8]
 800c396:	f003 0301 	and.w	r3, r3, #1
 800c39a:	46b8      	mov	r8, r7
 800c39c:	9306      	str	r3, [sp, #24]
 800c39e:	4607      	mov	r7, r0
 800c3a0:	9b01      	ldr	r3, [sp, #4]
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	4658      	mov	r0, fp
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	f7ff fa67 	bl	800b87c <quorem>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	3330      	adds	r3, #48	; 0x30
 800c3b2:	9004      	str	r0, [sp, #16]
 800c3b4:	4641      	mov	r1, r8
 800c3b6:	4658      	mov	r0, fp
 800c3b8:	9308      	str	r3, [sp, #32]
 800c3ba:	f001 f95b 	bl	800d674 <__mcmp>
 800c3be:	463a      	mov	r2, r7
 800c3c0:	4681      	mov	r9, r0
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f001 f971 	bl	800d6ac <__mdiff>
 800c3ca:	68c2      	ldr	r2, [r0, #12]
 800c3cc:	9b08      	ldr	r3, [sp, #32]
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	bb02      	cbnz	r2, 800c414 <_dtoa_r+0xa7c>
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4658      	mov	r0, fp
 800c3d6:	f001 f94d 	bl	800d674 <__mcmp>
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	4602      	mov	r2, r0
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c3e6:	f000 febd 	bl	800d164 <_Bfree>
 800c3ea:	9b05      	ldr	r3, [sp, #20]
 800c3ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3ee:	9d01      	ldr	r5, [sp, #4]
 800c3f0:	ea43 0102 	orr.w	r1, r3, r2
 800c3f4:	9b06      	ldr	r3, [sp, #24]
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	9b08      	ldr	r3, [sp, #32]
 800c3fa:	d10d      	bne.n	800c418 <_dtoa_r+0xa80>
 800c3fc:	2b39      	cmp	r3, #57	; 0x39
 800c3fe:	d029      	beq.n	800c454 <_dtoa_r+0xabc>
 800c400:	f1b9 0f00 	cmp.w	r9, #0
 800c404:	dd01      	ble.n	800c40a <_dtoa_r+0xa72>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	3331      	adds	r3, #49	; 0x31
 800c40a:	9a02      	ldr	r2, [sp, #8]
 800c40c:	7013      	strb	r3, [r2, #0]
 800c40e:	e774      	b.n	800c2fa <_dtoa_r+0x962>
 800c410:	4638      	mov	r0, r7
 800c412:	e7b9      	b.n	800c388 <_dtoa_r+0x9f0>
 800c414:	2201      	movs	r2, #1
 800c416:	e7e2      	b.n	800c3de <_dtoa_r+0xa46>
 800c418:	f1b9 0f00 	cmp.w	r9, #0
 800c41c:	db06      	blt.n	800c42c <_dtoa_r+0xa94>
 800c41e:	9905      	ldr	r1, [sp, #20]
 800c420:	ea41 0909 	orr.w	r9, r1, r9
 800c424:	9906      	ldr	r1, [sp, #24]
 800c426:	ea59 0101 	orrs.w	r1, r9, r1
 800c42a:	d120      	bne.n	800c46e <_dtoa_r+0xad6>
 800c42c:	2a00      	cmp	r2, #0
 800c42e:	ddec      	ble.n	800c40a <_dtoa_r+0xa72>
 800c430:	4659      	mov	r1, fp
 800c432:	2201      	movs	r2, #1
 800c434:	4620      	mov	r0, r4
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	f001 f8b0 	bl	800d59c <__lshift>
 800c43c:	4631      	mov	r1, r6
 800c43e:	4683      	mov	fp, r0
 800c440:	f001 f918 	bl	800d674 <__mcmp>
 800c444:	2800      	cmp	r0, #0
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	dc02      	bgt.n	800c450 <_dtoa_r+0xab8>
 800c44a:	d1de      	bne.n	800c40a <_dtoa_r+0xa72>
 800c44c:	07da      	lsls	r2, r3, #31
 800c44e:	d5dc      	bpl.n	800c40a <_dtoa_r+0xa72>
 800c450:	2b39      	cmp	r3, #57	; 0x39
 800c452:	d1d8      	bne.n	800c406 <_dtoa_r+0xa6e>
 800c454:	9a02      	ldr	r2, [sp, #8]
 800c456:	2339      	movs	r3, #57	; 0x39
 800c458:	7013      	strb	r3, [r2, #0]
 800c45a:	462b      	mov	r3, r5
 800c45c:	461d      	mov	r5, r3
 800c45e:	3b01      	subs	r3, #1
 800c460:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c464:	2a39      	cmp	r2, #57	; 0x39
 800c466:	d050      	beq.n	800c50a <_dtoa_r+0xb72>
 800c468:	3201      	adds	r2, #1
 800c46a:	701a      	strb	r2, [r3, #0]
 800c46c:	e745      	b.n	800c2fa <_dtoa_r+0x962>
 800c46e:	2a00      	cmp	r2, #0
 800c470:	dd03      	ble.n	800c47a <_dtoa_r+0xae2>
 800c472:	2b39      	cmp	r3, #57	; 0x39
 800c474:	d0ee      	beq.n	800c454 <_dtoa_r+0xabc>
 800c476:	3301      	adds	r3, #1
 800c478:	e7c7      	b.n	800c40a <_dtoa_r+0xa72>
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	9907      	ldr	r1, [sp, #28]
 800c47e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c482:	428a      	cmp	r2, r1
 800c484:	d02a      	beq.n	800c4dc <_dtoa_r+0xb44>
 800c486:	4659      	mov	r1, fp
 800c488:	2300      	movs	r3, #0
 800c48a:	220a      	movs	r2, #10
 800c48c:	4620      	mov	r0, r4
 800c48e:	f000 fe8b 	bl	800d1a8 <__multadd>
 800c492:	45b8      	cmp	r8, r7
 800c494:	4683      	mov	fp, r0
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	f04f 020a 	mov.w	r2, #10
 800c49e:	4641      	mov	r1, r8
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	d107      	bne.n	800c4b4 <_dtoa_r+0xb1c>
 800c4a4:	f000 fe80 	bl	800d1a8 <__multadd>
 800c4a8:	4680      	mov	r8, r0
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	9b01      	ldr	r3, [sp, #4]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	e775      	b.n	800c3a0 <_dtoa_r+0xa08>
 800c4b4:	f000 fe78 	bl	800d1a8 <__multadd>
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	4680      	mov	r8, r0
 800c4bc:	2300      	movs	r3, #0
 800c4be:	220a      	movs	r2, #10
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 fe71 	bl	800d1a8 <__multadd>
 800c4c6:	4607      	mov	r7, r0
 800c4c8:	e7f0      	b.n	800c4ac <_dtoa_r+0xb14>
 800c4ca:	f1b9 0f00 	cmp.w	r9, #0
 800c4ce:	9a00      	ldr	r2, [sp, #0]
 800c4d0:	bfcc      	ite	gt
 800c4d2:	464d      	movgt	r5, r9
 800c4d4:	2501      	movle	r5, #1
 800c4d6:	4415      	add	r5, r2
 800c4d8:	f04f 0800 	mov.w	r8, #0
 800c4dc:	4659      	mov	r1, fp
 800c4de:	2201      	movs	r2, #1
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	f001 f85a 	bl	800d59c <__lshift>
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	4683      	mov	fp, r0
 800c4ec:	f001 f8c2 	bl	800d674 <__mcmp>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	dcb2      	bgt.n	800c45a <_dtoa_r+0xac2>
 800c4f4:	d102      	bne.n	800c4fc <_dtoa_r+0xb64>
 800c4f6:	9b01      	ldr	r3, [sp, #4]
 800c4f8:	07db      	lsls	r3, r3, #31
 800c4fa:	d4ae      	bmi.n	800c45a <_dtoa_r+0xac2>
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	461d      	mov	r5, r3
 800c500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c504:	2a30      	cmp	r2, #48	; 0x30
 800c506:	d0fa      	beq.n	800c4fe <_dtoa_r+0xb66>
 800c508:	e6f7      	b.n	800c2fa <_dtoa_r+0x962>
 800c50a:	9a00      	ldr	r2, [sp, #0]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d1a5      	bne.n	800c45c <_dtoa_r+0xac4>
 800c510:	f10a 0a01 	add.w	sl, sl, #1
 800c514:	2331      	movs	r3, #49	; 0x31
 800c516:	e779      	b.n	800c40c <_dtoa_r+0xa74>
 800c518:	4b13      	ldr	r3, [pc, #76]	; (800c568 <_dtoa_r+0xbd0>)
 800c51a:	f7ff baaf 	b.w	800ba7c <_dtoa_r+0xe4>
 800c51e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c520:	2b00      	cmp	r3, #0
 800c522:	f47f aa86 	bne.w	800ba32 <_dtoa_r+0x9a>
 800c526:	4b11      	ldr	r3, [pc, #68]	; (800c56c <_dtoa_r+0xbd4>)
 800c528:	f7ff baa8 	b.w	800ba7c <_dtoa_r+0xe4>
 800c52c:	f1b9 0f00 	cmp.w	r9, #0
 800c530:	dc03      	bgt.n	800c53a <_dtoa_r+0xba2>
 800c532:	9b05      	ldr	r3, [sp, #20]
 800c534:	2b02      	cmp	r3, #2
 800c536:	f73f aec9 	bgt.w	800c2cc <_dtoa_r+0x934>
 800c53a:	9d00      	ldr	r5, [sp, #0]
 800c53c:	4631      	mov	r1, r6
 800c53e:	4658      	mov	r0, fp
 800c540:	f7ff f99c 	bl	800b87c <quorem>
 800c544:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c548:	f805 3b01 	strb.w	r3, [r5], #1
 800c54c:	9a00      	ldr	r2, [sp, #0]
 800c54e:	1aaa      	subs	r2, r5, r2
 800c550:	4591      	cmp	r9, r2
 800c552:	ddba      	ble.n	800c4ca <_dtoa_r+0xb32>
 800c554:	4659      	mov	r1, fp
 800c556:	2300      	movs	r3, #0
 800c558:	220a      	movs	r2, #10
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 fe24 	bl	800d1a8 <__multadd>
 800c560:	4683      	mov	fp, r0
 800c562:	e7eb      	b.n	800c53c <_dtoa_r+0xba4>
 800c564:	0800f0cb 	.word	0x0800f0cb
 800c568:	0800efd4 	.word	0x0800efd4
 800c56c:	0800f048 	.word	0x0800f048

0800c570 <__sflush_r>:
 800c570:	898a      	ldrh	r2, [r1, #12]
 800c572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c576:	4605      	mov	r5, r0
 800c578:	0710      	lsls	r0, r2, #28
 800c57a:	460c      	mov	r4, r1
 800c57c:	d458      	bmi.n	800c630 <__sflush_r+0xc0>
 800c57e:	684b      	ldr	r3, [r1, #4]
 800c580:	2b00      	cmp	r3, #0
 800c582:	dc05      	bgt.n	800c590 <__sflush_r+0x20>
 800c584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c586:	2b00      	cmp	r3, #0
 800c588:	dc02      	bgt.n	800c590 <__sflush_r+0x20>
 800c58a:	2000      	movs	r0, #0
 800c58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c592:	2e00      	cmp	r6, #0
 800c594:	d0f9      	beq.n	800c58a <__sflush_r+0x1a>
 800c596:	2300      	movs	r3, #0
 800c598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c59c:	682f      	ldr	r7, [r5, #0]
 800c59e:	602b      	str	r3, [r5, #0]
 800c5a0:	d032      	beq.n	800c608 <__sflush_r+0x98>
 800c5a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	075a      	lsls	r2, r3, #29
 800c5a8:	d505      	bpl.n	800c5b6 <__sflush_r+0x46>
 800c5aa:	6863      	ldr	r3, [r4, #4]
 800c5ac:	1ac0      	subs	r0, r0, r3
 800c5ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5b0:	b10b      	cbz	r3, 800c5b6 <__sflush_r+0x46>
 800c5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5b4:	1ac0      	subs	r0, r0, r3
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5bc:	6a21      	ldr	r1, [r4, #32]
 800c5be:	4628      	mov	r0, r5
 800c5c0:	47b0      	blx	r6
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	d106      	bne.n	800c5d6 <__sflush_r+0x66>
 800c5c8:	6829      	ldr	r1, [r5, #0]
 800c5ca:	291d      	cmp	r1, #29
 800c5cc:	d82c      	bhi.n	800c628 <__sflush_r+0xb8>
 800c5ce:	4a2a      	ldr	r2, [pc, #168]	; (800c678 <__sflush_r+0x108>)
 800c5d0:	40ca      	lsrs	r2, r1
 800c5d2:	07d6      	lsls	r6, r2, #31
 800c5d4:	d528      	bpl.n	800c628 <__sflush_r+0xb8>
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	6062      	str	r2, [r4, #4]
 800c5da:	04d9      	lsls	r1, r3, #19
 800c5dc:	6922      	ldr	r2, [r4, #16]
 800c5de:	6022      	str	r2, [r4, #0]
 800c5e0:	d504      	bpl.n	800c5ec <__sflush_r+0x7c>
 800c5e2:	1c42      	adds	r2, r0, #1
 800c5e4:	d101      	bne.n	800c5ea <__sflush_r+0x7a>
 800c5e6:	682b      	ldr	r3, [r5, #0]
 800c5e8:	b903      	cbnz	r3, 800c5ec <__sflush_r+0x7c>
 800c5ea:	6560      	str	r0, [r4, #84]	; 0x54
 800c5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ee:	602f      	str	r7, [r5, #0]
 800c5f0:	2900      	cmp	r1, #0
 800c5f2:	d0ca      	beq.n	800c58a <__sflush_r+0x1a>
 800c5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5f8:	4299      	cmp	r1, r3
 800c5fa:	d002      	beq.n	800c602 <__sflush_r+0x92>
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f001 fa3b 	bl	800da78 <_free_r>
 800c602:	2000      	movs	r0, #0
 800c604:	6360      	str	r0, [r4, #52]	; 0x34
 800c606:	e7c1      	b.n	800c58c <__sflush_r+0x1c>
 800c608:	6a21      	ldr	r1, [r4, #32]
 800c60a:	2301      	movs	r3, #1
 800c60c:	4628      	mov	r0, r5
 800c60e:	47b0      	blx	r6
 800c610:	1c41      	adds	r1, r0, #1
 800c612:	d1c7      	bne.n	800c5a4 <__sflush_r+0x34>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d0c4      	beq.n	800c5a4 <__sflush_r+0x34>
 800c61a:	2b1d      	cmp	r3, #29
 800c61c:	d001      	beq.n	800c622 <__sflush_r+0xb2>
 800c61e:	2b16      	cmp	r3, #22
 800c620:	d101      	bne.n	800c626 <__sflush_r+0xb6>
 800c622:	602f      	str	r7, [r5, #0]
 800c624:	e7b1      	b.n	800c58a <__sflush_r+0x1a>
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62c:	81a3      	strh	r3, [r4, #12]
 800c62e:	e7ad      	b.n	800c58c <__sflush_r+0x1c>
 800c630:	690f      	ldr	r7, [r1, #16]
 800c632:	2f00      	cmp	r7, #0
 800c634:	d0a9      	beq.n	800c58a <__sflush_r+0x1a>
 800c636:	0793      	lsls	r3, r2, #30
 800c638:	680e      	ldr	r6, [r1, #0]
 800c63a:	bf08      	it	eq
 800c63c:	694b      	ldreq	r3, [r1, #20]
 800c63e:	600f      	str	r7, [r1, #0]
 800c640:	bf18      	it	ne
 800c642:	2300      	movne	r3, #0
 800c644:	eba6 0807 	sub.w	r8, r6, r7
 800c648:	608b      	str	r3, [r1, #8]
 800c64a:	f1b8 0f00 	cmp.w	r8, #0
 800c64e:	dd9c      	ble.n	800c58a <__sflush_r+0x1a>
 800c650:	6a21      	ldr	r1, [r4, #32]
 800c652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c654:	4643      	mov	r3, r8
 800c656:	463a      	mov	r2, r7
 800c658:	4628      	mov	r0, r5
 800c65a:	47b0      	blx	r6
 800c65c:	2800      	cmp	r0, #0
 800c65e:	dc06      	bgt.n	800c66e <__sflush_r+0xfe>
 800c660:	89a3      	ldrh	r3, [r4, #12]
 800c662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295
 800c66c:	e78e      	b.n	800c58c <__sflush_r+0x1c>
 800c66e:	4407      	add	r7, r0
 800c670:	eba8 0800 	sub.w	r8, r8, r0
 800c674:	e7e9      	b.n	800c64a <__sflush_r+0xda>
 800c676:	bf00      	nop
 800c678:	20400001 	.word	0x20400001

0800c67c <_fflush_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	690b      	ldr	r3, [r1, #16]
 800c680:	4605      	mov	r5, r0
 800c682:	460c      	mov	r4, r1
 800c684:	b913      	cbnz	r3, 800c68c <_fflush_r+0x10>
 800c686:	2500      	movs	r5, #0
 800c688:	4628      	mov	r0, r5
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	b118      	cbz	r0, 800c696 <_fflush_r+0x1a>
 800c68e:	6983      	ldr	r3, [r0, #24]
 800c690:	b90b      	cbnz	r3, 800c696 <_fflush_r+0x1a>
 800c692:	f000 f887 	bl	800c7a4 <__sinit>
 800c696:	4b14      	ldr	r3, [pc, #80]	; (800c6e8 <_fflush_r+0x6c>)
 800c698:	429c      	cmp	r4, r3
 800c69a:	d11b      	bne.n	800c6d4 <_fflush_r+0x58>
 800c69c:	686c      	ldr	r4, [r5, #4]
 800c69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d0ef      	beq.n	800c686 <_fflush_r+0xa>
 800c6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6a8:	07d0      	lsls	r0, r2, #31
 800c6aa:	d404      	bmi.n	800c6b6 <_fflush_r+0x3a>
 800c6ac:	0599      	lsls	r1, r3, #22
 800c6ae:	d402      	bmi.n	800c6b6 <_fflush_r+0x3a>
 800c6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6b2:	f000 fc88 	bl	800cfc6 <__retarget_lock_acquire_recursive>
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	4621      	mov	r1, r4
 800c6ba:	f7ff ff59 	bl	800c570 <__sflush_r>
 800c6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6c0:	07da      	lsls	r2, r3, #31
 800c6c2:	4605      	mov	r5, r0
 800c6c4:	d4e0      	bmi.n	800c688 <_fflush_r+0xc>
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	059b      	lsls	r3, r3, #22
 800c6ca:	d4dd      	bmi.n	800c688 <_fflush_r+0xc>
 800c6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ce:	f000 fc7b 	bl	800cfc8 <__retarget_lock_release_recursive>
 800c6d2:	e7d9      	b.n	800c688 <_fflush_r+0xc>
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <_fflush_r+0x70>)
 800c6d6:	429c      	cmp	r4, r3
 800c6d8:	d101      	bne.n	800c6de <_fflush_r+0x62>
 800c6da:	68ac      	ldr	r4, [r5, #8]
 800c6dc:	e7df      	b.n	800c69e <_fflush_r+0x22>
 800c6de:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <_fflush_r+0x74>)
 800c6e0:	429c      	cmp	r4, r3
 800c6e2:	bf08      	it	eq
 800c6e4:	68ec      	ldreq	r4, [r5, #12]
 800c6e6:	e7da      	b.n	800c69e <_fflush_r+0x22>
 800c6e8:	0800f0fc 	.word	0x0800f0fc
 800c6ec:	0800f11c 	.word	0x0800f11c
 800c6f0:	0800f0dc 	.word	0x0800f0dc

0800c6f4 <std>:
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	b510      	push	{r4, lr}
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800c6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c702:	6083      	str	r3, [r0, #8]
 800c704:	8181      	strh	r1, [r0, #12]
 800c706:	6643      	str	r3, [r0, #100]	; 0x64
 800c708:	81c2      	strh	r2, [r0, #14]
 800c70a:	6183      	str	r3, [r0, #24]
 800c70c:	4619      	mov	r1, r3
 800c70e:	2208      	movs	r2, #8
 800c710:	305c      	adds	r0, #92	; 0x5c
 800c712:	f7fd fc89 	bl	800a028 <memset>
 800c716:	4b05      	ldr	r3, [pc, #20]	; (800c72c <std+0x38>)
 800c718:	6263      	str	r3, [r4, #36]	; 0x24
 800c71a:	4b05      	ldr	r3, [pc, #20]	; (800c730 <std+0x3c>)
 800c71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c71e:	4b05      	ldr	r3, [pc, #20]	; (800c734 <std+0x40>)
 800c720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c722:	4b05      	ldr	r3, [pc, #20]	; (800c738 <std+0x44>)
 800c724:	6224      	str	r4, [r4, #32]
 800c726:	6323      	str	r3, [r4, #48]	; 0x30
 800c728:	bd10      	pop	{r4, pc}
 800c72a:	bf00      	nop
 800c72c:	0800e169 	.word	0x0800e169
 800c730:	0800e18b 	.word	0x0800e18b
 800c734:	0800e1c3 	.word	0x0800e1c3
 800c738:	0800e1e7 	.word	0x0800e1e7

0800c73c <_cleanup_r>:
 800c73c:	4901      	ldr	r1, [pc, #4]	; (800c744 <_cleanup_r+0x8>)
 800c73e:	f000 b8af 	b.w	800c8a0 <_fwalk_reent>
 800c742:	bf00      	nop
 800c744:	0800c67d 	.word	0x0800c67d

0800c748 <__sfmoreglue>:
 800c748:	b570      	push	{r4, r5, r6, lr}
 800c74a:	1e4a      	subs	r2, r1, #1
 800c74c:	2568      	movs	r5, #104	; 0x68
 800c74e:	4355      	muls	r5, r2
 800c750:	460e      	mov	r6, r1
 800c752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c756:	f001 f9df 	bl	800db18 <_malloc_r>
 800c75a:	4604      	mov	r4, r0
 800c75c:	b140      	cbz	r0, 800c770 <__sfmoreglue+0x28>
 800c75e:	2100      	movs	r1, #0
 800c760:	e9c0 1600 	strd	r1, r6, [r0]
 800c764:	300c      	adds	r0, #12
 800c766:	60a0      	str	r0, [r4, #8]
 800c768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c76c:	f7fd fc5c 	bl	800a028 <memset>
 800c770:	4620      	mov	r0, r4
 800c772:	bd70      	pop	{r4, r5, r6, pc}

0800c774 <__sfp_lock_acquire>:
 800c774:	4801      	ldr	r0, [pc, #4]	; (800c77c <__sfp_lock_acquire+0x8>)
 800c776:	f000 bc26 	b.w	800cfc6 <__retarget_lock_acquire_recursive>
 800c77a:	bf00      	nop
 800c77c:	20000e00 	.word	0x20000e00

0800c780 <__sfp_lock_release>:
 800c780:	4801      	ldr	r0, [pc, #4]	; (800c788 <__sfp_lock_release+0x8>)
 800c782:	f000 bc21 	b.w	800cfc8 <__retarget_lock_release_recursive>
 800c786:	bf00      	nop
 800c788:	20000e00 	.word	0x20000e00

0800c78c <__sinit_lock_acquire>:
 800c78c:	4801      	ldr	r0, [pc, #4]	; (800c794 <__sinit_lock_acquire+0x8>)
 800c78e:	f000 bc1a 	b.w	800cfc6 <__retarget_lock_acquire_recursive>
 800c792:	bf00      	nop
 800c794:	20000dfb 	.word	0x20000dfb

0800c798 <__sinit_lock_release>:
 800c798:	4801      	ldr	r0, [pc, #4]	; (800c7a0 <__sinit_lock_release+0x8>)
 800c79a:	f000 bc15 	b.w	800cfc8 <__retarget_lock_release_recursive>
 800c79e:	bf00      	nop
 800c7a0:	20000dfb 	.word	0x20000dfb

0800c7a4 <__sinit>:
 800c7a4:	b510      	push	{r4, lr}
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	f7ff fff0 	bl	800c78c <__sinit_lock_acquire>
 800c7ac:	69a3      	ldr	r3, [r4, #24]
 800c7ae:	b11b      	cbz	r3, 800c7b8 <__sinit+0x14>
 800c7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7b4:	f7ff bff0 	b.w	800c798 <__sinit_lock_release>
 800c7b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c7bc:	6523      	str	r3, [r4, #80]	; 0x50
 800c7be:	4b13      	ldr	r3, [pc, #76]	; (800c80c <__sinit+0x68>)
 800c7c0:	4a13      	ldr	r2, [pc, #76]	; (800c810 <__sinit+0x6c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	bf04      	itt	eq
 800c7ca:	2301      	moveq	r3, #1
 800c7cc:	61a3      	streq	r3, [r4, #24]
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 f820 	bl	800c814 <__sfp>
 800c7d4:	6060      	str	r0, [r4, #4]
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f000 f81c 	bl	800c814 <__sfp>
 800c7dc:	60a0      	str	r0, [r4, #8]
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f000 f818 	bl	800c814 <__sfp>
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	60e0      	str	r0, [r4, #12]
 800c7e8:	2104      	movs	r1, #4
 800c7ea:	6860      	ldr	r0, [r4, #4]
 800c7ec:	f7ff ff82 	bl	800c6f4 <std>
 800c7f0:	68a0      	ldr	r0, [r4, #8]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	2109      	movs	r1, #9
 800c7f6:	f7ff ff7d 	bl	800c6f4 <std>
 800c7fa:	68e0      	ldr	r0, [r4, #12]
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	2112      	movs	r1, #18
 800c800:	f7ff ff78 	bl	800c6f4 <std>
 800c804:	2301      	movs	r3, #1
 800c806:	61a3      	str	r3, [r4, #24]
 800c808:	e7d2      	b.n	800c7b0 <__sinit+0xc>
 800c80a:	bf00      	nop
 800c80c:	0800efc0 	.word	0x0800efc0
 800c810:	0800c73d 	.word	0x0800c73d

0800c814 <__sfp>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	4607      	mov	r7, r0
 800c818:	f7ff ffac 	bl	800c774 <__sfp_lock_acquire>
 800c81c:	4b1e      	ldr	r3, [pc, #120]	; (800c898 <__sfp+0x84>)
 800c81e:	681e      	ldr	r6, [r3, #0]
 800c820:	69b3      	ldr	r3, [r6, #24]
 800c822:	b913      	cbnz	r3, 800c82a <__sfp+0x16>
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff ffbd 	bl	800c7a4 <__sinit>
 800c82a:	3648      	adds	r6, #72	; 0x48
 800c82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c830:	3b01      	subs	r3, #1
 800c832:	d503      	bpl.n	800c83c <__sfp+0x28>
 800c834:	6833      	ldr	r3, [r6, #0]
 800c836:	b30b      	cbz	r3, 800c87c <__sfp+0x68>
 800c838:	6836      	ldr	r6, [r6, #0]
 800c83a:	e7f7      	b.n	800c82c <__sfp+0x18>
 800c83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c840:	b9d5      	cbnz	r5, 800c878 <__sfp+0x64>
 800c842:	4b16      	ldr	r3, [pc, #88]	; (800c89c <__sfp+0x88>)
 800c844:	60e3      	str	r3, [r4, #12]
 800c846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c84a:	6665      	str	r5, [r4, #100]	; 0x64
 800c84c:	f000 fbba 	bl	800cfc4 <__retarget_lock_init_recursive>
 800c850:	f7ff ff96 	bl	800c780 <__sfp_lock_release>
 800c854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c85c:	6025      	str	r5, [r4, #0]
 800c85e:	61a5      	str	r5, [r4, #24]
 800c860:	2208      	movs	r2, #8
 800c862:	4629      	mov	r1, r5
 800c864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c868:	f7fd fbde 	bl	800a028 <memset>
 800c86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c874:	4620      	mov	r0, r4
 800c876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c878:	3468      	adds	r4, #104	; 0x68
 800c87a:	e7d9      	b.n	800c830 <__sfp+0x1c>
 800c87c:	2104      	movs	r1, #4
 800c87e:	4638      	mov	r0, r7
 800c880:	f7ff ff62 	bl	800c748 <__sfmoreglue>
 800c884:	4604      	mov	r4, r0
 800c886:	6030      	str	r0, [r6, #0]
 800c888:	2800      	cmp	r0, #0
 800c88a:	d1d5      	bne.n	800c838 <__sfp+0x24>
 800c88c:	f7ff ff78 	bl	800c780 <__sfp_lock_release>
 800c890:	230c      	movs	r3, #12
 800c892:	603b      	str	r3, [r7, #0]
 800c894:	e7ee      	b.n	800c874 <__sfp+0x60>
 800c896:	bf00      	nop
 800c898:	0800efc0 	.word	0x0800efc0
 800c89c:	ffff0001 	.word	0xffff0001

0800c8a0 <_fwalk_reent>:
 800c8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	4688      	mov	r8, r1
 800c8a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c8ac:	2700      	movs	r7, #0
 800c8ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8b2:	f1b9 0901 	subs.w	r9, r9, #1
 800c8b6:	d505      	bpl.n	800c8c4 <_fwalk_reent+0x24>
 800c8b8:	6824      	ldr	r4, [r4, #0]
 800c8ba:	2c00      	cmp	r4, #0
 800c8bc:	d1f7      	bne.n	800c8ae <_fwalk_reent+0xe>
 800c8be:	4638      	mov	r0, r7
 800c8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8c4:	89ab      	ldrh	r3, [r5, #12]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d907      	bls.n	800c8da <_fwalk_reent+0x3a>
 800c8ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	d003      	beq.n	800c8da <_fwalk_reent+0x3a>
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	47c0      	blx	r8
 800c8d8:	4307      	orrs	r7, r0
 800c8da:	3568      	adds	r5, #104	; 0x68
 800c8dc:	e7e9      	b.n	800c8b2 <_fwalk_reent+0x12>

0800c8de <rshift>:
 800c8de:	6903      	ldr	r3, [r0, #16]
 800c8e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8e8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8ec:	f100 0414 	add.w	r4, r0, #20
 800c8f0:	dd45      	ble.n	800c97e <rshift+0xa0>
 800c8f2:	f011 011f 	ands.w	r1, r1, #31
 800c8f6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8fa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8fe:	d10c      	bne.n	800c91a <rshift+0x3c>
 800c900:	f100 0710 	add.w	r7, r0, #16
 800c904:	4629      	mov	r1, r5
 800c906:	42b1      	cmp	r1, r6
 800c908:	d334      	bcc.n	800c974 <rshift+0x96>
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	1eea      	subs	r2, r5, #3
 800c910:	4296      	cmp	r6, r2
 800c912:	bf38      	it	cc
 800c914:	2300      	movcc	r3, #0
 800c916:	4423      	add	r3, r4
 800c918:	e015      	b.n	800c946 <rshift+0x68>
 800c91a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c91e:	f1c1 0820 	rsb	r8, r1, #32
 800c922:	40cf      	lsrs	r7, r1
 800c924:	f105 0e04 	add.w	lr, r5, #4
 800c928:	46a1      	mov	r9, r4
 800c92a:	4576      	cmp	r6, lr
 800c92c:	46f4      	mov	ip, lr
 800c92e:	d815      	bhi.n	800c95c <rshift+0x7e>
 800c930:	1a9b      	subs	r3, r3, r2
 800c932:	009a      	lsls	r2, r3, #2
 800c934:	3a04      	subs	r2, #4
 800c936:	3501      	adds	r5, #1
 800c938:	42ae      	cmp	r6, r5
 800c93a:	bf38      	it	cc
 800c93c:	2200      	movcc	r2, #0
 800c93e:	18a3      	adds	r3, r4, r2
 800c940:	50a7      	str	r7, [r4, r2]
 800c942:	b107      	cbz	r7, 800c946 <rshift+0x68>
 800c944:	3304      	adds	r3, #4
 800c946:	1b1a      	subs	r2, r3, r4
 800c948:	42a3      	cmp	r3, r4
 800c94a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c94e:	bf08      	it	eq
 800c950:	2300      	moveq	r3, #0
 800c952:	6102      	str	r2, [r0, #16]
 800c954:	bf08      	it	eq
 800c956:	6143      	streq	r3, [r0, #20]
 800c958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c95c:	f8dc c000 	ldr.w	ip, [ip]
 800c960:	fa0c fc08 	lsl.w	ip, ip, r8
 800c964:	ea4c 0707 	orr.w	r7, ip, r7
 800c968:	f849 7b04 	str.w	r7, [r9], #4
 800c96c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c970:	40cf      	lsrs	r7, r1
 800c972:	e7da      	b.n	800c92a <rshift+0x4c>
 800c974:	f851 cb04 	ldr.w	ip, [r1], #4
 800c978:	f847 cf04 	str.w	ip, [r7, #4]!
 800c97c:	e7c3      	b.n	800c906 <rshift+0x28>
 800c97e:	4623      	mov	r3, r4
 800c980:	e7e1      	b.n	800c946 <rshift+0x68>

0800c982 <__hexdig_fun>:
 800c982:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c986:	2b09      	cmp	r3, #9
 800c988:	d802      	bhi.n	800c990 <__hexdig_fun+0xe>
 800c98a:	3820      	subs	r0, #32
 800c98c:	b2c0      	uxtb	r0, r0
 800c98e:	4770      	bx	lr
 800c990:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c994:	2b05      	cmp	r3, #5
 800c996:	d801      	bhi.n	800c99c <__hexdig_fun+0x1a>
 800c998:	3847      	subs	r0, #71	; 0x47
 800c99a:	e7f7      	b.n	800c98c <__hexdig_fun+0xa>
 800c99c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9a0:	2b05      	cmp	r3, #5
 800c9a2:	d801      	bhi.n	800c9a8 <__hexdig_fun+0x26>
 800c9a4:	3827      	subs	r0, #39	; 0x27
 800c9a6:	e7f1      	b.n	800c98c <__hexdig_fun+0xa>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	4770      	bx	lr

0800c9ac <__gethex>:
 800c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	ed2d 8b02 	vpush	{d8}
 800c9b4:	b089      	sub	sp, #36	; 0x24
 800c9b6:	ee08 0a10 	vmov	s16, r0
 800c9ba:	9304      	str	r3, [sp, #16]
 800c9bc:	4bbc      	ldr	r3, [pc, #752]	; (800ccb0 <__gethex+0x304>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	9301      	str	r3, [sp, #4]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	468b      	mov	fp, r1
 800c9c6:	4690      	mov	r8, r2
 800c9c8:	f7f3 fc0a 	bl	80001e0 <strlen>
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	f8db 2000 	ldr.w	r2, [fp]
 800c9d2:	4403      	add	r3, r0
 800c9d4:	4682      	mov	sl, r0
 800c9d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c9da:	9305      	str	r3, [sp, #20]
 800c9dc:	1c93      	adds	r3, r2, #2
 800c9de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c9e6:	32fe      	adds	r2, #254	; 0xfe
 800c9e8:	18d1      	adds	r1, r2, r3
 800c9ea:	461f      	mov	r7, r3
 800c9ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9f0:	9100      	str	r1, [sp, #0]
 800c9f2:	2830      	cmp	r0, #48	; 0x30
 800c9f4:	d0f8      	beq.n	800c9e8 <__gethex+0x3c>
 800c9f6:	f7ff ffc4 	bl	800c982 <__hexdig_fun>
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d13a      	bne.n	800ca76 <__gethex+0xca>
 800ca00:	9901      	ldr	r1, [sp, #4]
 800ca02:	4652      	mov	r2, sl
 800ca04:	4638      	mov	r0, r7
 800ca06:	f001 fbf2 	bl	800e1ee <strncmp>
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d168      	bne.n	800cae2 <__gethex+0x136>
 800ca10:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ca14:	eb07 060a 	add.w	r6, r7, sl
 800ca18:	f7ff ffb3 	bl	800c982 <__hexdig_fun>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d062      	beq.n	800cae6 <__gethex+0x13a>
 800ca20:	4633      	mov	r3, r6
 800ca22:	7818      	ldrb	r0, [r3, #0]
 800ca24:	2830      	cmp	r0, #48	; 0x30
 800ca26:	461f      	mov	r7, r3
 800ca28:	f103 0301 	add.w	r3, r3, #1
 800ca2c:	d0f9      	beq.n	800ca22 <__gethex+0x76>
 800ca2e:	f7ff ffa8 	bl	800c982 <__hexdig_fun>
 800ca32:	2301      	movs	r3, #1
 800ca34:	fab0 f480 	clz	r4, r0
 800ca38:	0964      	lsrs	r4, r4, #5
 800ca3a:	4635      	mov	r5, r6
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	463a      	mov	r2, r7
 800ca40:	4616      	mov	r6, r2
 800ca42:	3201      	adds	r2, #1
 800ca44:	7830      	ldrb	r0, [r6, #0]
 800ca46:	f7ff ff9c 	bl	800c982 <__hexdig_fun>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d1f8      	bne.n	800ca40 <__gethex+0x94>
 800ca4e:	9901      	ldr	r1, [sp, #4]
 800ca50:	4652      	mov	r2, sl
 800ca52:	4630      	mov	r0, r6
 800ca54:	f001 fbcb 	bl	800e1ee <strncmp>
 800ca58:	b980      	cbnz	r0, 800ca7c <__gethex+0xd0>
 800ca5a:	b94d      	cbnz	r5, 800ca70 <__gethex+0xc4>
 800ca5c:	eb06 050a 	add.w	r5, r6, sl
 800ca60:	462a      	mov	r2, r5
 800ca62:	4616      	mov	r6, r2
 800ca64:	3201      	adds	r2, #1
 800ca66:	7830      	ldrb	r0, [r6, #0]
 800ca68:	f7ff ff8b 	bl	800c982 <__hexdig_fun>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d1f8      	bne.n	800ca62 <__gethex+0xb6>
 800ca70:	1bad      	subs	r5, r5, r6
 800ca72:	00ad      	lsls	r5, r5, #2
 800ca74:	e004      	b.n	800ca80 <__gethex+0xd4>
 800ca76:	2400      	movs	r4, #0
 800ca78:	4625      	mov	r5, r4
 800ca7a:	e7e0      	b.n	800ca3e <__gethex+0x92>
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	d1f7      	bne.n	800ca70 <__gethex+0xc4>
 800ca80:	7833      	ldrb	r3, [r6, #0]
 800ca82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca86:	2b50      	cmp	r3, #80	; 0x50
 800ca88:	d13b      	bne.n	800cb02 <__gethex+0x156>
 800ca8a:	7873      	ldrb	r3, [r6, #1]
 800ca8c:	2b2b      	cmp	r3, #43	; 0x2b
 800ca8e:	d02c      	beq.n	800caea <__gethex+0x13e>
 800ca90:	2b2d      	cmp	r3, #45	; 0x2d
 800ca92:	d02e      	beq.n	800caf2 <__gethex+0x146>
 800ca94:	1c71      	adds	r1, r6, #1
 800ca96:	f04f 0900 	mov.w	r9, #0
 800ca9a:	7808      	ldrb	r0, [r1, #0]
 800ca9c:	f7ff ff71 	bl	800c982 <__hexdig_fun>
 800caa0:	1e43      	subs	r3, r0, #1
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	2b18      	cmp	r3, #24
 800caa6:	d82c      	bhi.n	800cb02 <__gethex+0x156>
 800caa8:	f1a0 0210 	sub.w	r2, r0, #16
 800caac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cab0:	f7ff ff67 	bl	800c982 <__hexdig_fun>
 800cab4:	1e43      	subs	r3, r0, #1
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	2b18      	cmp	r3, #24
 800caba:	d91d      	bls.n	800caf8 <__gethex+0x14c>
 800cabc:	f1b9 0f00 	cmp.w	r9, #0
 800cac0:	d000      	beq.n	800cac4 <__gethex+0x118>
 800cac2:	4252      	negs	r2, r2
 800cac4:	4415      	add	r5, r2
 800cac6:	f8cb 1000 	str.w	r1, [fp]
 800caca:	b1e4      	cbz	r4, 800cb06 <__gethex+0x15a>
 800cacc:	9b00      	ldr	r3, [sp, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bf14      	ite	ne
 800cad2:	2700      	movne	r7, #0
 800cad4:	2706      	moveq	r7, #6
 800cad6:	4638      	mov	r0, r7
 800cad8:	b009      	add	sp, #36	; 0x24
 800cada:	ecbd 8b02 	vpop	{d8}
 800cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae2:	463e      	mov	r6, r7
 800cae4:	4625      	mov	r5, r4
 800cae6:	2401      	movs	r4, #1
 800cae8:	e7ca      	b.n	800ca80 <__gethex+0xd4>
 800caea:	f04f 0900 	mov.w	r9, #0
 800caee:	1cb1      	adds	r1, r6, #2
 800caf0:	e7d3      	b.n	800ca9a <__gethex+0xee>
 800caf2:	f04f 0901 	mov.w	r9, #1
 800caf6:	e7fa      	b.n	800caee <__gethex+0x142>
 800caf8:	230a      	movs	r3, #10
 800cafa:	fb03 0202 	mla	r2, r3, r2, r0
 800cafe:	3a10      	subs	r2, #16
 800cb00:	e7d4      	b.n	800caac <__gethex+0x100>
 800cb02:	4631      	mov	r1, r6
 800cb04:	e7df      	b.n	800cac6 <__gethex+0x11a>
 800cb06:	1bf3      	subs	r3, r6, r7
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	2b07      	cmp	r3, #7
 800cb0e:	dc0b      	bgt.n	800cb28 <__gethex+0x17c>
 800cb10:	ee18 0a10 	vmov	r0, s16
 800cb14:	f000 fae6 	bl	800d0e4 <_Balloc>
 800cb18:	4604      	mov	r4, r0
 800cb1a:	b940      	cbnz	r0, 800cb2e <__gethex+0x182>
 800cb1c:	4b65      	ldr	r3, [pc, #404]	; (800ccb4 <__gethex+0x308>)
 800cb1e:	4602      	mov	r2, r0
 800cb20:	21de      	movs	r1, #222	; 0xde
 800cb22:	4865      	ldr	r0, [pc, #404]	; (800ccb8 <__gethex+0x30c>)
 800cb24:	f001 fb94 	bl	800e250 <__assert_func>
 800cb28:	3101      	adds	r1, #1
 800cb2a:	105b      	asrs	r3, r3, #1
 800cb2c:	e7ee      	b.n	800cb0c <__gethex+0x160>
 800cb2e:	f100 0914 	add.w	r9, r0, #20
 800cb32:	f04f 0b00 	mov.w	fp, #0
 800cb36:	f1ca 0301 	rsb	r3, sl, #1
 800cb3a:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb3e:	f8cd b000 	str.w	fp, [sp]
 800cb42:	9306      	str	r3, [sp, #24]
 800cb44:	42b7      	cmp	r7, r6
 800cb46:	d340      	bcc.n	800cbca <__gethex+0x21e>
 800cb48:	9802      	ldr	r0, [sp, #8]
 800cb4a:	9b00      	ldr	r3, [sp, #0]
 800cb4c:	f840 3b04 	str.w	r3, [r0], #4
 800cb50:	eba0 0009 	sub.w	r0, r0, r9
 800cb54:	1080      	asrs	r0, r0, #2
 800cb56:	0146      	lsls	r6, r0, #5
 800cb58:	6120      	str	r0, [r4, #16]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 fbb8 	bl	800d2d0 <__hi0bits>
 800cb60:	1a30      	subs	r0, r6, r0
 800cb62:	f8d8 6000 	ldr.w	r6, [r8]
 800cb66:	42b0      	cmp	r0, r6
 800cb68:	dd63      	ble.n	800cc32 <__gethex+0x286>
 800cb6a:	1b87      	subs	r7, r0, r6
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f000 ff52 	bl	800da18 <__any_on>
 800cb74:	4682      	mov	sl, r0
 800cb76:	b1a8      	cbz	r0, 800cba4 <__gethex+0x1f8>
 800cb78:	1e7b      	subs	r3, r7, #1
 800cb7a:	1159      	asrs	r1, r3, #5
 800cb7c:	f003 021f 	and.w	r2, r3, #31
 800cb80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb84:	f04f 0a01 	mov.w	sl, #1
 800cb88:	fa0a f202 	lsl.w	r2, sl, r2
 800cb8c:	420a      	tst	r2, r1
 800cb8e:	d009      	beq.n	800cba4 <__gethex+0x1f8>
 800cb90:	4553      	cmp	r3, sl
 800cb92:	dd05      	ble.n	800cba0 <__gethex+0x1f4>
 800cb94:	1eb9      	subs	r1, r7, #2
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 ff3e 	bl	800da18 <__any_on>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d145      	bne.n	800cc2c <__gethex+0x280>
 800cba0:	f04f 0a02 	mov.w	sl, #2
 800cba4:	4639      	mov	r1, r7
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff fe99 	bl	800c8de <rshift>
 800cbac:	443d      	add	r5, r7
 800cbae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cbb2:	42ab      	cmp	r3, r5
 800cbb4:	da4c      	bge.n	800cc50 <__gethex+0x2a4>
 800cbb6:	ee18 0a10 	vmov	r0, s16
 800cbba:	4621      	mov	r1, r4
 800cbbc:	f000 fad2 	bl	800d164 <_Bfree>
 800cbc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	27a3      	movs	r7, #163	; 0xa3
 800cbc8:	e785      	b.n	800cad6 <__gethex+0x12a>
 800cbca:	1e73      	subs	r3, r6, #1
 800cbcc:	9a05      	ldr	r2, [sp, #20]
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d019      	beq.n	800cc0c <__gethex+0x260>
 800cbd8:	f1bb 0f20 	cmp.w	fp, #32
 800cbdc:	d107      	bne.n	800cbee <__gethex+0x242>
 800cbde:	9b02      	ldr	r3, [sp, #8]
 800cbe0:	9a00      	ldr	r2, [sp, #0]
 800cbe2:	f843 2b04 	str.w	r2, [r3], #4
 800cbe6:	9302      	str	r3, [sp, #8]
 800cbe8:	2300      	movs	r3, #0
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	469b      	mov	fp, r3
 800cbee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cbf2:	f7ff fec6 	bl	800c982 <__hexdig_fun>
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	f000 000f 	and.w	r0, r0, #15
 800cbfc:	fa00 f00b 	lsl.w	r0, r0, fp
 800cc00:	4303      	orrs	r3, r0
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	f10b 0b04 	add.w	fp, fp, #4
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	e00d      	b.n	800cc28 <__gethex+0x27c>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	9a06      	ldr	r2, [sp, #24]
 800cc10:	4413      	add	r3, r2
 800cc12:	42bb      	cmp	r3, r7
 800cc14:	d3e0      	bcc.n	800cbd8 <__gethex+0x22c>
 800cc16:	4618      	mov	r0, r3
 800cc18:	9901      	ldr	r1, [sp, #4]
 800cc1a:	9307      	str	r3, [sp, #28]
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	f001 fae6 	bl	800e1ee <strncmp>
 800cc22:	9b07      	ldr	r3, [sp, #28]
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d1d7      	bne.n	800cbd8 <__gethex+0x22c>
 800cc28:	461e      	mov	r6, r3
 800cc2a:	e78b      	b.n	800cb44 <__gethex+0x198>
 800cc2c:	f04f 0a03 	mov.w	sl, #3
 800cc30:	e7b8      	b.n	800cba4 <__gethex+0x1f8>
 800cc32:	da0a      	bge.n	800cc4a <__gethex+0x29e>
 800cc34:	1a37      	subs	r7, r6, r0
 800cc36:	4621      	mov	r1, r4
 800cc38:	ee18 0a10 	vmov	r0, s16
 800cc3c:	463a      	mov	r2, r7
 800cc3e:	f000 fcad 	bl	800d59c <__lshift>
 800cc42:	1bed      	subs	r5, r5, r7
 800cc44:	4604      	mov	r4, r0
 800cc46:	f100 0914 	add.w	r9, r0, #20
 800cc4a:	f04f 0a00 	mov.w	sl, #0
 800cc4e:	e7ae      	b.n	800cbae <__gethex+0x202>
 800cc50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cc54:	42a8      	cmp	r0, r5
 800cc56:	dd72      	ble.n	800cd3e <__gethex+0x392>
 800cc58:	1b45      	subs	r5, r0, r5
 800cc5a:	42ae      	cmp	r6, r5
 800cc5c:	dc36      	bgt.n	800cccc <__gethex+0x320>
 800cc5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d02a      	beq.n	800ccbc <__gethex+0x310>
 800cc66:	2b03      	cmp	r3, #3
 800cc68:	d02c      	beq.n	800ccc4 <__gethex+0x318>
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d115      	bne.n	800cc9a <__gethex+0x2ee>
 800cc6e:	42ae      	cmp	r6, r5
 800cc70:	d113      	bne.n	800cc9a <__gethex+0x2ee>
 800cc72:	2e01      	cmp	r6, #1
 800cc74:	d10b      	bne.n	800cc8e <__gethex+0x2e2>
 800cc76:	9a04      	ldr	r2, [sp, #16]
 800cc78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	2301      	movs	r3, #1
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	f8c9 3000 	str.w	r3, [r9]
 800cc86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc88:	2762      	movs	r7, #98	; 0x62
 800cc8a:	601c      	str	r4, [r3, #0]
 800cc8c:	e723      	b.n	800cad6 <__gethex+0x12a>
 800cc8e:	1e71      	subs	r1, r6, #1
 800cc90:	4620      	mov	r0, r4
 800cc92:	f000 fec1 	bl	800da18 <__any_on>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d1ed      	bne.n	800cc76 <__gethex+0x2ca>
 800cc9a:	ee18 0a10 	vmov	r0, s16
 800cc9e:	4621      	mov	r1, r4
 800cca0:	f000 fa60 	bl	800d164 <_Bfree>
 800cca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cca6:	2300      	movs	r3, #0
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	2750      	movs	r7, #80	; 0x50
 800ccac:	e713      	b.n	800cad6 <__gethex+0x12a>
 800ccae:	bf00      	nop
 800ccb0:	0800f1a8 	.word	0x0800f1a8
 800ccb4:	0800f0cb 	.word	0x0800f0cb
 800ccb8:	0800f13c 	.word	0x0800f13c
 800ccbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1eb      	bne.n	800cc9a <__gethex+0x2ee>
 800ccc2:	e7d8      	b.n	800cc76 <__gethex+0x2ca>
 800ccc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1d5      	bne.n	800cc76 <__gethex+0x2ca>
 800ccca:	e7e6      	b.n	800cc9a <__gethex+0x2ee>
 800cccc:	1e6f      	subs	r7, r5, #1
 800ccce:	f1ba 0f00 	cmp.w	sl, #0
 800ccd2:	d131      	bne.n	800cd38 <__gethex+0x38c>
 800ccd4:	b127      	cbz	r7, 800cce0 <__gethex+0x334>
 800ccd6:	4639      	mov	r1, r7
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f000 fe9d 	bl	800da18 <__any_on>
 800ccde:	4682      	mov	sl, r0
 800cce0:	117b      	asrs	r3, r7, #5
 800cce2:	2101      	movs	r1, #1
 800cce4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cce8:	f007 071f 	and.w	r7, r7, #31
 800ccec:	fa01 f707 	lsl.w	r7, r1, r7
 800ccf0:	421f      	tst	r7, r3
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	bf18      	it	ne
 800ccf8:	f04a 0a02 	orrne.w	sl, sl, #2
 800ccfc:	1b76      	subs	r6, r6, r5
 800ccfe:	f7ff fdee 	bl	800c8de <rshift>
 800cd02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cd06:	2702      	movs	r7, #2
 800cd08:	f1ba 0f00 	cmp.w	sl, #0
 800cd0c:	d048      	beq.n	800cda0 <__gethex+0x3f4>
 800cd0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d015      	beq.n	800cd42 <__gethex+0x396>
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d017      	beq.n	800cd4a <__gethex+0x39e>
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d109      	bne.n	800cd32 <__gethex+0x386>
 800cd1e:	f01a 0f02 	tst.w	sl, #2
 800cd22:	d006      	beq.n	800cd32 <__gethex+0x386>
 800cd24:	f8d9 0000 	ldr.w	r0, [r9]
 800cd28:	ea4a 0a00 	orr.w	sl, sl, r0
 800cd2c:	f01a 0f01 	tst.w	sl, #1
 800cd30:	d10e      	bne.n	800cd50 <__gethex+0x3a4>
 800cd32:	f047 0710 	orr.w	r7, r7, #16
 800cd36:	e033      	b.n	800cda0 <__gethex+0x3f4>
 800cd38:	f04f 0a01 	mov.w	sl, #1
 800cd3c:	e7d0      	b.n	800cce0 <__gethex+0x334>
 800cd3e:	2701      	movs	r7, #1
 800cd40:	e7e2      	b.n	800cd08 <__gethex+0x35c>
 800cd42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd44:	f1c3 0301 	rsb	r3, r3, #1
 800cd48:	9315      	str	r3, [sp, #84]	; 0x54
 800cd4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d0f0      	beq.n	800cd32 <__gethex+0x386>
 800cd50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd54:	f104 0314 	add.w	r3, r4, #20
 800cd58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cd5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cd60:	f04f 0c00 	mov.w	ip, #0
 800cd64:	4618      	mov	r0, r3
 800cd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd6e:	d01c      	beq.n	800cdaa <__gethex+0x3fe>
 800cd70:	3201      	adds	r2, #1
 800cd72:	6002      	str	r2, [r0, #0]
 800cd74:	2f02      	cmp	r7, #2
 800cd76:	f104 0314 	add.w	r3, r4, #20
 800cd7a:	d13f      	bne.n	800cdfc <__gethex+0x450>
 800cd7c:	f8d8 2000 	ldr.w	r2, [r8]
 800cd80:	3a01      	subs	r2, #1
 800cd82:	42b2      	cmp	r2, r6
 800cd84:	d10a      	bne.n	800cd9c <__gethex+0x3f0>
 800cd86:	1171      	asrs	r1, r6, #5
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd8e:	f006 061f 	and.w	r6, r6, #31
 800cd92:	fa02 f606 	lsl.w	r6, r2, r6
 800cd96:	421e      	tst	r6, r3
 800cd98:	bf18      	it	ne
 800cd9a:	4617      	movne	r7, r2
 800cd9c:	f047 0720 	orr.w	r7, r7, #32
 800cda0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cda2:	601c      	str	r4, [r3, #0]
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	601d      	str	r5, [r3, #0]
 800cda8:	e695      	b.n	800cad6 <__gethex+0x12a>
 800cdaa:	4299      	cmp	r1, r3
 800cdac:	f843 cc04 	str.w	ip, [r3, #-4]
 800cdb0:	d8d8      	bhi.n	800cd64 <__gethex+0x3b8>
 800cdb2:	68a3      	ldr	r3, [r4, #8]
 800cdb4:	459b      	cmp	fp, r3
 800cdb6:	db19      	blt.n	800cdec <__gethex+0x440>
 800cdb8:	6861      	ldr	r1, [r4, #4]
 800cdba:	ee18 0a10 	vmov	r0, s16
 800cdbe:	3101      	adds	r1, #1
 800cdc0:	f000 f990 	bl	800d0e4 <_Balloc>
 800cdc4:	4681      	mov	r9, r0
 800cdc6:	b918      	cbnz	r0, 800cdd0 <__gethex+0x424>
 800cdc8:	4b1a      	ldr	r3, [pc, #104]	; (800ce34 <__gethex+0x488>)
 800cdca:	4602      	mov	r2, r0
 800cdcc:	2184      	movs	r1, #132	; 0x84
 800cdce:	e6a8      	b.n	800cb22 <__gethex+0x176>
 800cdd0:	6922      	ldr	r2, [r4, #16]
 800cdd2:	3202      	adds	r2, #2
 800cdd4:	f104 010c 	add.w	r1, r4, #12
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	300c      	adds	r0, #12
 800cddc:	f000 f974 	bl	800d0c8 <memcpy>
 800cde0:	4621      	mov	r1, r4
 800cde2:	ee18 0a10 	vmov	r0, s16
 800cde6:	f000 f9bd 	bl	800d164 <_Bfree>
 800cdea:	464c      	mov	r4, r9
 800cdec:	6923      	ldr	r3, [r4, #16]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdf4:	6122      	str	r2, [r4, #16]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	615a      	str	r2, [r3, #20]
 800cdfa:	e7bb      	b.n	800cd74 <__gethex+0x3c8>
 800cdfc:	6922      	ldr	r2, [r4, #16]
 800cdfe:	455a      	cmp	r2, fp
 800ce00:	dd0b      	ble.n	800ce1a <__gethex+0x46e>
 800ce02:	2101      	movs	r1, #1
 800ce04:	4620      	mov	r0, r4
 800ce06:	f7ff fd6a 	bl	800c8de <rshift>
 800ce0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce0e:	3501      	adds	r5, #1
 800ce10:	42ab      	cmp	r3, r5
 800ce12:	f6ff aed0 	blt.w	800cbb6 <__gethex+0x20a>
 800ce16:	2701      	movs	r7, #1
 800ce18:	e7c0      	b.n	800cd9c <__gethex+0x3f0>
 800ce1a:	f016 061f 	ands.w	r6, r6, #31
 800ce1e:	d0fa      	beq.n	800ce16 <__gethex+0x46a>
 800ce20:	449a      	add	sl, r3
 800ce22:	f1c6 0620 	rsb	r6, r6, #32
 800ce26:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ce2a:	f000 fa51 	bl	800d2d0 <__hi0bits>
 800ce2e:	42b0      	cmp	r0, r6
 800ce30:	dbe7      	blt.n	800ce02 <__gethex+0x456>
 800ce32:	e7f0      	b.n	800ce16 <__gethex+0x46a>
 800ce34:	0800f0cb 	.word	0x0800f0cb

0800ce38 <L_shift>:
 800ce38:	f1c2 0208 	rsb	r2, r2, #8
 800ce3c:	0092      	lsls	r2, r2, #2
 800ce3e:	b570      	push	{r4, r5, r6, lr}
 800ce40:	f1c2 0620 	rsb	r6, r2, #32
 800ce44:	6843      	ldr	r3, [r0, #4]
 800ce46:	6804      	ldr	r4, [r0, #0]
 800ce48:	fa03 f506 	lsl.w	r5, r3, r6
 800ce4c:	432c      	orrs	r4, r5
 800ce4e:	40d3      	lsrs	r3, r2
 800ce50:	6004      	str	r4, [r0, #0]
 800ce52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce56:	4288      	cmp	r0, r1
 800ce58:	d3f4      	bcc.n	800ce44 <L_shift+0xc>
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}

0800ce5c <__match>:
 800ce5c:	b530      	push	{r4, r5, lr}
 800ce5e:	6803      	ldr	r3, [r0, #0]
 800ce60:	3301      	adds	r3, #1
 800ce62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce66:	b914      	cbnz	r4, 800ce6e <__match+0x12>
 800ce68:	6003      	str	r3, [r0, #0]
 800ce6a:	2001      	movs	r0, #1
 800ce6c:	bd30      	pop	{r4, r5, pc}
 800ce6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce76:	2d19      	cmp	r5, #25
 800ce78:	bf98      	it	ls
 800ce7a:	3220      	addls	r2, #32
 800ce7c:	42a2      	cmp	r2, r4
 800ce7e:	d0f0      	beq.n	800ce62 <__match+0x6>
 800ce80:	2000      	movs	r0, #0
 800ce82:	e7f3      	b.n	800ce6c <__match+0x10>

0800ce84 <__hexnan>:
 800ce84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce88:	680b      	ldr	r3, [r1, #0]
 800ce8a:	6801      	ldr	r1, [r0, #0]
 800ce8c:	115e      	asrs	r6, r3, #5
 800ce8e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce92:	f013 031f 	ands.w	r3, r3, #31
 800ce96:	b087      	sub	sp, #28
 800ce98:	bf18      	it	ne
 800ce9a:	3604      	addne	r6, #4
 800ce9c:	2500      	movs	r5, #0
 800ce9e:	1f37      	subs	r7, r6, #4
 800cea0:	4682      	mov	sl, r0
 800cea2:	4690      	mov	r8, r2
 800cea4:	9301      	str	r3, [sp, #4]
 800cea6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ceaa:	46b9      	mov	r9, r7
 800ceac:	463c      	mov	r4, r7
 800ceae:	9502      	str	r5, [sp, #8]
 800ceb0:	46ab      	mov	fp, r5
 800ceb2:	784a      	ldrb	r2, [r1, #1]
 800ceb4:	1c4b      	adds	r3, r1, #1
 800ceb6:	9303      	str	r3, [sp, #12]
 800ceb8:	b342      	cbz	r2, 800cf0c <__hexnan+0x88>
 800ceba:	4610      	mov	r0, r2
 800cebc:	9105      	str	r1, [sp, #20]
 800cebe:	9204      	str	r2, [sp, #16]
 800cec0:	f7ff fd5f 	bl	800c982 <__hexdig_fun>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d14f      	bne.n	800cf68 <__hexnan+0xe4>
 800cec8:	9a04      	ldr	r2, [sp, #16]
 800ceca:	9905      	ldr	r1, [sp, #20]
 800cecc:	2a20      	cmp	r2, #32
 800cece:	d818      	bhi.n	800cf02 <__hexnan+0x7e>
 800ced0:	9b02      	ldr	r3, [sp, #8]
 800ced2:	459b      	cmp	fp, r3
 800ced4:	dd13      	ble.n	800cefe <__hexnan+0x7a>
 800ced6:	454c      	cmp	r4, r9
 800ced8:	d206      	bcs.n	800cee8 <__hexnan+0x64>
 800ceda:	2d07      	cmp	r5, #7
 800cedc:	dc04      	bgt.n	800cee8 <__hexnan+0x64>
 800cede:	462a      	mov	r2, r5
 800cee0:	4649      	mov	r1, r9
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff ffa8 	bl	800ce38 <L_shift>
 800cee8:	4544      	cmp	r4, r8
 800ceea:	d950      	bls.n	800cf8e <__hexnan+0x10a>
 800ceec:	2300      	movs	r3, #0
 800ceee:	f1a4 0904 	sub.w	r9, r4, #4
 800cef2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cef6:	f8cd b008 	str.w	fp, [sp, #8]
 800cefa:	464c      	mov	r4, r9
 800cefc:	461d      	mov	r5, r3
 800cefe:	9903      	ldr	r1, [sp, #12]
 800cf00:	e7d7      	b.n	800ceb2 <__hexnan+0x2e>
 800cf02:	2a29      	cmp	r2, #41	; 0x29
 800cf04:	d156      	bne.n	800cfb4 <__hexnan+0x130>
 800cf06:	3102      	adds	r1, #2
 800cf08:	f8ca 1000 	str.w	r1, [sl]
 800cf0c:	f1bb 0f00 	cmp.w	fp, #0
 800cf10:	d050      	beq.n	800cfb4 <__hexnan+0x130>
 800cf12:	454c      	cmp	r4, r9
 800cf14:	d206      	bcs.n	800cf24 <__hexnan+0xa0>
 800cf16:	2d07      	cmp	r5, #7
 800cf18:	dc04      	bgt.n	800cf24 <__hexnan+0xa0>
 800cf1a:	462a      	mov	r2, r5
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f7ff ff8a 	bl	800ce38 <L_shift>
 800cf24:	4544      	cmp	r4, r8
 800cf26:	d934      	bls.n	800cf92 <__hexnan+0x10e>
 800cf28:	f1a8 0204 	sub.w	r2, r8, #4
 800cf2c:	4623      	mov	r3, r4
 800cf2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf32:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf36:	429f      	cmp	r7, r3
 800cf38:	d2f9      	bcs.n	800cf2e <__hexnan+0xaa>
 800cf3a:	1b3b      	subs	r3, r7, r4
 800cf3c:	f023 0303 	bic.w	r3, r3, #3
 800cf40:	3304      	adds	r3, #4
 800cf42:	3401      	adds	r4, #1
 800cf44:	3e03      	subs	r6, #3
 800cf46:	42b4      	cmp	r4, r6
 800cf48:	bf88      	it	hi
 800cf4a:	2304      	movhi	r3, #4
 800cf4c:	4443      	add	r3, r8
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f843 2b04 	str.w	r2, [r3], #4
 800cf54:	429f      	cmp	r7, r3
 800cf56:	d2fb      	bcs.n	800cf50 <__hexnan+0xcc>
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	b91b      	cbnz	r3, 800cf64 <__hexnan+0xe0>
 800cf5c:	4547      	cmp	r7, r8
 800cf5e:	d127      	bne.n	800cfb0 <__hexnan+0x12c>
 800cf60:	2301      	movs	r3, #1
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	2005      	movs	r0, #5
 800cf66:	e026      	b.n	800cfb6 <__hexnan+0x132>
 800cf68:	3501      	adds	r5, #1
 800cf6a:	2d08      	cmp	r5, #8
 800cf6c:	f10b 0b01 	add.w	fp, fp, #1
 800cf70:	dd06      	ble.n	800cf80 <__hexnan+0xfc>
 800cf72:	4544      	cmp	r4, r8
 800cf74:	d9c3      	bls.n	800cefe <__hexnan+0x7a>
 800cf76:	2300      	movs	r3, #0
 800cf78:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf7c:	2501      	movs	r5, #1
 800cf7e:	3c04      	subs	r4, #4
 800cf80:	6822      	ldr	r2, [r4, #0]
 800cf82:	f000 000f 	and.w	r0, r0, #15
 800cf86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cf8a:	6022      	str	r2, [r4, #0]
 800cf8c:	e7b7      	b.n	800cefe <__hexnan+0x7a>
 800cf8e:	2508      	movs	r5, #8
 800cf90:	e7b5      	b.n	800cefe <__hexnan+0x7a>
 800cf92:	9b01      	ldr	r3, [sp, #4]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d0df      	beq.n	800cf58 <__hexnan+0xd4>
 800cf98:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9c:	f1c3 0320 	rsb	r3, r3, #32
 800cfa0:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cfa8:	401a      	ands	r2, r3
 800cfaa:	f846 2c04 	str.w	r2, [r6, #-4]
 800cfae:	e7d3      	b.n	800cf58 <__hexnan+0xd4>
 800cfb0:	3f04      	subs	r7, #4
 800cfb2:	e7d1      	b.n	800cf58 <__hexnan+0xd4>
 800cfb4:	2004      	movs	r0, #4
 800cfb6:	b007      	add	sp, #28
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfbc <_localeconv_r>:
 800cfbc:	4800      	ldr	r0, [pc, #0]	; (800cfc0 <_localeconv_r+0x4>)
 800cfbe:	4770      	bx	lr
 800cfc0:	2000016c 	.word	0x2000016c

0800cfc4 <__retarget_lock_init_recursive>:
 800cfc4:	4770      	bx	lr

0800cfc6 <__retarget_lock_acquire_recursive>:
 800cfc6:	4770      	bx	lr

0800cfc8 <__retarget_lock_release_recursive>:
 800cfc8:	4770      	bx	lr

0800cfca <__swhatbuf_r>:
 800cfca:	b570      	push	{r4, r5, r6, lr}
 800cfcc:	460e      	mov	r6, r1
 800cfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd2:	2900      	cmp	r1, #0
 800cfd4:	b096      	sub	sp, #88	; 0x58
 800cfd6:	4614      	mov	r4, r2
 800cfd8:	461d      	mov	r5, r3
 800cfda:	da07      	bge.n	800cfec <__swhatbuf_r+0x22>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	89b3      	ldrh	r3, [r6, #12]
 800cfe2:	061a      	lsls	r2, r3, #24
 800cfe4:	d410      	bmi.n	800d008 <__swhatbuf_r+0x3e>
 800cfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfea:	e00e      	b.n	800d00a <__swhatbuf_r+0x40>
 800cfec:	466a      	mov	r2, sp
 800cfee:	f001 f96f 	bl	800e2d0 <_fstat_r>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	dbf2      	blt.n	800cfdc <__swhatbuf_r+0x12>
 800cff6:	9a01      	ldr	r2, [sp, #4]
 800cff8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cffc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d000:	425a      	negs	r2, r3
 800d002:	415a      	adcs	r2, r3
 800d004:	602a      	str	r2, [r5, #0]
 800d006:	e7ee      	b.n	800cfe6 <__swhatbuf_r+0x1c>
 800d008:	2340      	movs	r3, #64	; 0x40
 800d00a:	2000      	movs	r0, #0
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	b016      	add	sp, #88	; 0x58
 800d010:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d014 <__smakebuf_r>:
 800d014:	898b      	ldrh	r3, [r1, #12]
 800d016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d018:	079d      	lsls	r5, r3, #30
 800d01a:	4606      	mov	r6, r0
 800d01c:	460c      	mov	r4, r1
 800d01e:	d507      	bpl.n	800d030 <__smakebuf_r+0x1c>
 800d020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	6123      	str	r3, [r4, #16]
 800d028:	2301      	movs	r3, #1
 800d02a:	6163      	str	r3, [r4, #20]
 800d02c:	b002      	add	sp, #8
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	ab01      	add	r3, sp, #4
 800d032:	466a      	mov	r2, sp
 800d034:	f7ff ffc9 	bl	800cfca <__swhatbuf_r>
 800d038:	9900      	ldr	r1, [sp, #0]
 800d03a:	4605      	mov	r5, r0
 800d03c:	4630      	mov	r0, r6
 800d03e:	f000 fd6b 	bl	800db18 <_malloc_r>
 800d042:	b948      	cbnz	r0, 800d058 <__smakebuf_r+0x44>
 800d044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d048:	059a      	lsls	r2, r3, #22
 800d04a:	d4ef      	bmi.n	800d02c <__smakebuf_r+0x18>
 800d04c:	f023 0303 	bic.w	r3, r3, #3
 800d050:	f043 0302 	orr.w	r3, r3, #2
 800d054:	81a3      	strh	r3, [r4, #12]
 800d056:	e7e3      	b.n	800d020 <__smakebuf_r+0xc>
 800d058:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <__smakebuf_r+0x7c>)
 800d05a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	6020      	str	r0, [r4, #0]
 800d060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	6163      	str	r3, [r4, #20]
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	6120      	str	r0, [r4, #16]
 800d06e:	b15b      	cbz	r3, 800d088 <__smakebuf_r+0x74>
 800d070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d074:	4630      	mov	r0, r6
 800d076:	f001 f93d 	bl	800e2f4 <_isatty_r>
 800d07a:	b128      	cbz	r0, 800d088 <__smakebuf_r+0x74>
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	f023 0303 	bic.w	r3, r3, #3
 800d082:	f043 0301 	orr.w	r3, r3, #1
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	89a0      	ldrh	r0, [r4, #12]
 800d08a:	4305      	orrs	r5, r0
 800d08c:	81a5      	strh	r5, [r4, #12]
 800d08e:	e7cd      	b.n	800d02c <__smakebuf_r+0x18>
 800d090:	0800c73d 	.word	0x0800c73d

0800d094 <malloc>:
 800d094:	4b02      	ldr	r3, [pc, #8]	; (800d0a0 <malloc+0xc>)
 800d096:	4601      	mov	r1, r0
 800d098:	6818      	ldr	r0, [r3, #0]
 800d09a:	f000 bd3d 	b.w	800db18 <_malloc_r>
 800d09e:	bf00      	nop
 800d0a0:	20000014 	.word	0x20000014

0800d0a4 <__ascii_mbtowc>:
 800d0a4:	b082      	sub	sp, #8
 800d0a6:	b901      	cbnz	r1, 800d0aa <__ascii_mbtowc+0x6>
 800d0a8:	a901      	add	r1, sp, #4
 800d0aa:	b142      	cbz	r2, 800d0be <__ascii_mbtowc+0x1a>
 800d0ac:	b14b      	cbz	r3, 800d0c2 <__ascii_mbtowc+0x1e>
 800d0ae:	7813      	ldrb	r3, [r2, #0]
 800d0b0:	600b      	str	r3, [r1, #0]
 800d0b2:	7812      	ldrb	r2, [r2, #0]
 800d0b4:	1e10      	subs	r0, r2, #0
 800d0b6:	bf18      	it	ne
 800d0b8:	2001      	movne	r0, #1
 800d0ba:	b002      	add	sp, #8
 800d0bc:	4770      	bx	lr
 800d0be:	4610      	mov	r0, r2
 800d0c0:	e7fb      	b.n	800d0ba <__ascii_mbtowc+0x16>
 800d0c2:	f06f 0001 	mvn.w	r0, #1
 800d0c6:	e7f8      	b.n	800d0ba <__ascii_mbtowc+0x16>

0800d0c8 <memcpy>:
 800d0c8:	440a      	add	r2, r1
 800d0ca:	4291      	cmp	r1, r2
 800d0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0d0:	d100      	bne.n	800d0d4 <memcpy+0xc>
 800d0d2:	4770      	bx	lr
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0de:	4291      	cmp	r1, r2
 800d0e0:	d1f9      	bne.n	800d0d6 <memcpy+0xe>
 800d0e2:	bd10      	pop	{r4, pc}

0800d0e4 <_Balloc>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	460d      	mov	r5, r1
 800d0ec:	b976      	cbnz	r6, 800d10c <_Balloc+0x28>
 800d0ee:	2010      	movs	r0, #16
 800d0f0:	f7ff ffd0 	bl	800d094 <malloc>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	6260      	str	r0, [r4, #36]	; 0x24
 800d0f8:	b920      	cbnz	r0, 800d104 <_Balloc+0x20>
 800d0fa:	4b18      	ldr	r3, [pc, #96]	; (800d15c <_Balloc+0x78>)
 800d0fc:	4818      	ldr	r0, [pc, #96]	; (800d160 <_Balloc+0x7c>)
 800d0fe:	2166      	movs	r1, #102	; 0x66
 800d100:	f001 f8a6 	bl	800e250 <__assert_func>
 800d104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d108:	6006      	str	r6, [r0, #0]
 800d10a:	60c6      	str	r6, [r0, #12]
 800d10c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d10e:	68f3      	ldr	r3, [r6, #12]
 800d110:	b183      	cbz	r3, 800d134 <_Balloc+0x50>
 800d112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d11a:	b9b8      	cbnz	r0, 800d14c <_Balloc+0x68>
 800d11c:	2101      	movs	r1, #1
 800d11e:	fa01 f605 	lsl.w	r6, r1, r5
 800d122:	1d72      	adds	r2, r6, #5
 800d124:	0092      	lsls	r2, r2, #2
 800d126:	4620      	mov	r0, r4
 800d128:	f000 fc97 	bl	800da5a <_calloc_r>
 800d12c:	b160      	cbz	r0, 800d148 <_Balloc+0x64>
 800d12e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d132:	e00e      	b.n	800d152 <_Balloc+0x6e>
 800d134:	2221      	movs	r2, #33	; 0x21
 800d136:	2104      	movs	r1, #4
 800d138:	4620      	mov	r0, r4
 800d13a:	f000 fc8e 	bl	800da5a <_calloc_r>
 800d13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d140:	60f0      	str	r0, [r6, #12]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1e4      	bne.n	800d112 <_Balloc+0x2e>
 800d148:	2000      	movs	r0, #0
 800d14a:	bd70      	pop	{r4, r5, r6, pc}
 800d14c:	6802      	ldr	r2, [r0, #0]
 800d14e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d152:	2300      	movs	r3, #0
 800d154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d158:	e7f7      	b.n	800d14a <_Balloc+0x66>
 800d15a:	bf00      	nop
 800d15c:	0800f055 	.word	0x0800f055
 800d160:	0800f1bc 	.word	0x0800f1bc

0800d164 <_Bfree>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d168:	4605      	mov	r5, r0
 800d16a:	460c      	mov	r4, r1
 800d16c:	b976      	cbnz	r6, 800d18c <_Bfree+0x28>
 800d16e:	2010      	movs	r0, #16
 800d170:	f7ff ff90 	bl	800d094 <malloc>
 800d174:	4602      	mov	r2, r0
 800d176:	6268      	str	r0, [r5, #36]	; 0x24
 800d178:	b920      	cbnz	r0, 800d184 <_Bfree+0x20>
 800d17a:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <_Bfree+0x3c>)
 800d17c:	4809      	ldr	r0, [pc, #36]	; (800d1a4 <_Bfree+0x40>)
 800d17e:	218a      	movs	r1, #138	; 0x8a
 800d180:	f001 f866 	bl	800e250 <__assert_func>
 800d184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d188:	6006      	str	r6, [r0, #0]
 800d18a:	60c6      	str	r6, [r0, #12]
 800d18c:	b13c      	cbz	r4, 800d19e <_Bfree+0x3a>
 800d18e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d190:	6862      	ldr	r2, [r4, #4]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d198:	6021      	str	r1, [r4, #0]
 800d19a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d19e:	bd70      	pop	{r4, r5, r6, pc}
 800d1a0:	0800f055 	.word	0x0800f055
 800d1a4:	0800f1bc 	.word	0x0800f1bc

0800d1a8 <__multadd>:
 800d1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ac:	690e      	ldr	r6, [r1, #16]
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	4698      	mov	r8, r3
 800d1b2:	460c      	mov	r4, r1
 800d1b4:	f101 0014 	add.w	r0, r1, #20
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	6805      	ldr	r5, [r0, #0]
 800d1bc:	b2a9      	uxth	r1, r5
 800d1be:	fb02 8101 	mla	r1, r2, r1, r8
 800d1c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d1c6:	0c2d      	lsrs	r5, r5, #16
 800d1c8:	fb02 c505 	mla	r5, r2, r5, ip
 800d1cc:	b289      	uxth	r1, r1
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d1d4:	429e      	cmp	r6, r3
 800d1d6:	f840 1b04 	str.w	r1, [r0], #4
 800d1da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d1de:	dcec      	bgt.n	800d1ba <__multadd+0x12>
 800d1e0:	f1b8 0f00 	cmp.w	r8, #0
 800d1e4:	d022      	beq.n	800d22c <__multadd+0x84>
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	42b3      	cmp	r3, r6
 800d1ea:	dc19      	bgt.n	800d220 <__multadd+0x78>
 800d1ec:	6861      	ldr	r1, [r4, #4]
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	3101      	adds	r1, #1
 800d1f2:	f7ff ff77 	bl	800d0e4 <_Balloc>
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	b928      	cbnz	r0, 800d206 <__multadd+0x5e>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	4b0d      	ldr	r3, [pc, #52]	; (800d234 <__multadd+0x8c>)
 800d1fe:	480e      	ldr	r0, [pc, #56]	; (800d238 <__multadd+0x90>)
 800d200:	21b5      	movs	r1, #181	; 0xb5
 800d202:	f001 f825 	bl	800e250 <__assert_func>
 800d206:	6922      	ldr	r2, [r4, #16]
 800d208:	3202      	adds	r2, #2
 800d20a:	f104 010c 	add.w	r1, r4, #12
 800d20e:	0092      	lsls	r2, r2, #2
 800d210:	300c      	adds	r0, #12
 800d212:	f7ff ff59 	bl	800d0c8 <memcpy>
 800d216:	4621      	mov	r1, r4
 800d218:	4638      	mov	r0, r7
 800d21a:	f7ff ffa3 	bl	800d164 <_Bfree>
 800d21e:	462c      	mov	r4, r5
 800d220:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d224:	3601      	adds	r6, #1
 800d226:	f8c3 8014 	str.w	r8, [r3, #20]
 800d22a:	6126      	str	r6, [r4, #16]
 800d22c:	4620      	mov	r0, r4
 800d22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d232:	bf00      	nop
 800d234:	0800f0cb 	.word	0x0800f0cb
 800d238:	0800f1bc 	.word	0x0800f1bc

0800d23c <__s2b>:
 800d23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d240:	460c      	mov	r4, r1
 800d242:	4615      	mov	r5, r2
 800d244:	461f      	mov	r7, r3
 800d246:	2209      	movs	r2, #9
 800d248:	3308      	adds	r3, #8
 800d24a:	4606      	mov	r6, r0
 800d24c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d250:	2100      	movs	r1, #0
 800d252:	2201      	movs	r2, #1
 800d254:	429a      	cmp	r2, r3
 800d256:	db09      	blt.n	800d26c <__s2b+0x30>
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff ff43 	bl	800d0e4 <_Balloc>
 800d25e:	b940      	cbnz	r0, 800d272 <__s2b+0x36>
 800d260:	4602      	mov	r2, r0
 800d262:	4b19      	ldr	r3, [pc, #100]	; (800d2c8 <__s2b+0x8c>)
 800d264:	4819      	ldr	r0, [pc, #100]	; (800d2cc <__s2b+0x90>)
 800d266:	21ce      	movs	r1, #206	; 0xce
 800d268:	f000 fff2 	bl	800e250 <__assert_func>
 800d26c:	0052      	lsls	r2, r2, #1
 800d26e:	3101      	adds	r1, #1
 800d270:	e7f0      	b.n	800d254 <__s2b+0x18>
 800d272:	9b08      	ldr	r3, [sp, #32]
 800d274:	6143      	str	r3, [r0, #20]
 800d276:	2d09      	cmp	r5, #9
 800d278:	f04f 0301 	mov.w	r3, #1
 800d27c:	6103      	str	r3, [r0, #16]
 800d27e:	dd16      	ble.n	800d2ae <__s2b+0x72>
 800d280:	f104 0909 	add.w	r9, r4, #9
 800d284:	46c8      	mov	r8, r9
 800d286:	442c      	add	r4, r5
 800d288:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d28c:	4601      	mov	r1, r0
 800d28e:	3b30      	subs	r3, #48	; 0x30
 800d290:	220a      	movs	r2, #10
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ff88 	bl	800d1a8 <__multadd>
 800d298:	45a0      	cmp	r8, r4
 800d29a:	d1f5      	bne.n	800d288 <__s2b+0x4c>
 800d29c:	f1a5 0408 	sub.w	r4, r5, #8
 800d2a0:	444c      	add	r4, r9
 800d2a2:	1b2d      	subs	r5, r5, r4
 800d2a4:	1963      	adds	r3, r4, r5
 800d2a6:	42bb      	cmp	r3, r7
 800d2a8:	db04      	blt.n	800d2b4 <__s2b+0x78>
 800d2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2ae:	340a      	adds	r4, #10
 800d2b0:	2509      	movs	r5, #9
 800d2b2:	e7f6      	b.n	800d2a2 <__s2b+0x66>
 800d2b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d2b8:	4601      	mov	r1, r0
 800d2ba:	3b30      	subs	r3, #48	; 0x30
 800d2bc:	220a      	movs	r2, #10
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7ff ff72 	bl	800d1a8 <__multadd>
 800d2c4:	e7ee      	b.n	800d2a4 <__s2b+0x68>
 800d2c6:	bf00      	nop
 800d2c8:	0800f0cb 	.word	0x0800f0cb
 800d2cc:	0800f1bc 	.word	0x0800f1bc

0800d2d0 <__hi0bits>:
 800d2d0:	0c03      	lsrs	r3, r0, #16
 800d2d2:	041b      	lsls	r3, r3, #16
 800d2d4:	b9d3      	cbnz	r3, 800d30c <__hi0bits+0x3c>
 800d2d6:	0400      	lsls	r0, r0, #16
 800d2d8:	2310      	movs	r3, #16
 800d2da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2de:	bf04      	itt	eq
 800d2e0:	0200      	lsleq	r0, r0, #8
 800d2e2:	3308      	addeq	r3, #8
 800d2e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2e8:	bf04      	itt	eq
 800d2ea:	0100      	lsleq	r0, r0, #4
 800d2ec:	3304      	addeq	r3, #4
 800d2ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2f2:	bf04      	itt	eq
 800d2f4:	0080      	lsleq	r0, r0, #2
 800d2f6:	3302      	addeq	r3, #2
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	db05      	blt.n	800d308 <__hi0bits+0x38>
 800d2fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d300:	f103 0301 	add.w	r3, r3, #1
 800d304:	bf08      	it	eq
 800d306:	2320      	moveq	r3, #32
 800d308:	4618      	mov	r0, r3
 800d30a:	4770      	bx	lr
 800d30c:	2300      	movs	r3, #0
 800d30e:	e7e4      	b.n	800d2da <__hi0bits+0xa>

0800d310 <__lo0bits>:
 800d310:	6803      	ldr	r3, [r0, #0]
 800d312:	f013 0207 	ands.w	r2, r3, #7
 800d316:	4601      	mov	r1, r0
 800d318:	d00b      	beq.n	800d332 <__lo0bits+0x22>
 800d31a:	07da      	lsls	r2, r3, #31
 800d31c:	d424      	bmi.n	800d368 <__lo0bits+0x58>
 800d31e:	0798      	lsls	r0, r3, #30
 800d320:	bf49      	itett	mi
 800d322:	085b      	lsrmi	r3, r3, #1
 800d324:	089b      	lsrpl	r3, r3, #2
 800d326:	2001      	movmi	r0, #1
 800d328:	600b      	strmi	r3, [r1, #0]
 800d32a:	bf5c      	itt	pl
 800d32c:	600b      	strpl	r3, [r1, #0]
 800d32e:	2002      	movpl	r0, #2
 800d330:	4770      	bx	lr
 800d332:	b298      	uxth	r0, r3
 800d334:	b9b0      	cbnz	r0, 800d364 <__lo0bits+0x54>
 800d336:	0c1b      	lsrs	r3, r3, #16
 800d338:	2010      	movs	r0, #16
 800d33a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d33e:	bf04      	itt	eq
 800d340:	0a1b      	lsreq	r3, r3, #8
 800d342:	3008      	addeq	r0, #8
 800d344:	071a      	lsls	r2, r3, #28
 800d346:	bf04      	itt	eq
 800d348:	091b      	lsreq	r3, r3, #4
 800d34a:	3004      	addeq	r0, #4
 800d34c:	079a      	lsls	r2, r3, #30
 800d34e:	bf04      	itt	eq
 800d350:	089b      	lsreq	r3, r3, #2
 800d352:	3002      	addeq	r0, #2
 800d354:	07da      	lsls	r2, r3, #31
 800d356:	d403      	bmi.n	800d360 <__lo0bits+0x50>
 800d358:	085b      	lsrs	r3, r3, #1
 800d35a:	f100 0001 	add.w	r0, r0, #1
 800d35e:	d005      	beq.n	800d36c <__lo0bits+0x5c>
 800d360:	600b      	str	r3, [r1, #0]
 800d362:	4770      	bx	lr
 800d364:	4610      	mov	r0, r2
 800d366:	e7e8      	b.n	800d33a <__lo0bits+0x2a>
 800d368:	2000      	movs	r0, #0
 800d36a:	4770      	bx	lr
 800d36c:	2020      	movs	r0, #32
 800d36e:	4770      	bx	lr

0800d370 <__i2b>:
 800d370:	b510      	push	{r4, lr}
 800d372:	460c      	mov	r4, r1
 800d374:	2101      	movs	r1, #1
 800d376:	f7ff feb5 	bl	800d0e4 <_Balloc>
 800d37a:	4602      	mov	r2, r0
 800d37c:	b928      	cbnz	r0, 800d38a <__i2b+0x1a>
 800d37e:	4b05      	ldr	r3, [pc, #20]	; (800d394 <__i2b+0x24>)
 800d380:	4805      	ldr	r0, [pc, #20]	; (800d398 <__i2b+0x28>)
 800d382:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d386:	f000 ff63 	bl	800e250 <__assert_func>
 800d38a:	2301      	movs	r3, #1
 800d38c:	6144      	str	r4, [r0, #20]
 800d38e:	6103      	str	r3, [r0, #16]
 800d390:	bd10      	pop	{r4, pc}
 800d392:	bf00      	nop
 800d394:	0800f0cb 	.word	0x0800f0cb
 800d398:	0800f1bc 	.word	0x0800f1bc

0800d39c <__multiply>:
 800d39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	4614      	mov	r4, r2
 800d3a2:	690a      	ldr	r2, [r1, #16]
 800d3a4:	6923      	ldr	r3, [r4, #16]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	bfb8      	it	lt
 800d3aa:	460b      	movlt	r3, r1
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	bfbc      	itt	lt
 800d3b0:	4625      	movlt	r5, r4
 800d3b2:	461c      	movlt	r4, r3
 800d3b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d3b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d3bc:	68ab      	ldr	r3, [r5, #8]
 800d3be:	6869      	ldr	r1, [r5, #4]
 800d3c0:	eb0a 0709 	add.w	r7, sl, r9
 800d3c4:	42bb      	cmp	r3, r7
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	bfb8      	it	lt
 800d3ca:	3101      	addlt	r1, #1
 800d3cc:	f7ff fe8a 	bl	800d0e4 <_Balloc>
 800d3d0:	b930      	cbnz	r0, 800d3e0 <__multiply+0x44>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	4b42      	ldr	r3, [pc, #264]	; (800d4e0 <__multiply+0x144>)
 800d3d6:	4843      	ldr	r0, [pc, #268]	; (800d4e4 <__multiply+0x148>)
 800d3d8:	f240 115d 	movw	r1, #349	; 0x15d
 800d3dc:	f000 ff38 	bl	800e250 <__assert_func>
 800d3e0:	f100 0614 	add.w	r6, r0, #20
 800d3e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d3e8:	4633      	mov	r3, r6
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4543      	cmp	r3, r8
 800d3ee:	d31e      	bcc.n	800d42e <__multiply+0x92>
 800d3f0:	f105 0c14 	add.w	ip, r5, #20
 800d3f4:	f104 0314 	add.w	r3, r4, #20
 800d3f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d3fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d400:	9202      	str	r2, [sp, #8]
 800d402:	ebac 0205 	sub.w	r2, ip, r5
 800d406:	3a15      	subs	r2, #21
 800d408:	f022 0203 	bic.w	r2, r2, #3
 800d40c:	3204      	adds	r2, #4
 800d40e:	f105 0115 	add.w	r1, r5, #21
 800d412:	458c      	cmp	ip, r1
 800d414:	bf38      	it	cc
 800d416:	2204      	movcc	r2, #4
 800d418:	9201      	str	r2, [sp, #4]
 800d41a:	9a02      	ldr	r2, [sp, #8]
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d808      	bhi.n	800d434 <__multiply+0x98>
 800d422:	2f00      	cmp	r7, #0
 800d424:	dc55      	bgt.n	800d4d2 <__multiply+0x136>
 800d426:	6107      	str	r7, [r0, #16]
 800d428:	b005      	add	sp, #20
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	f843 2b04 	str.w	r2, [r3], #4
 800d432:	e7db      	b.n	800d3ec <__multiply+0x50>
 800d434:	f8b3 a000 	ldrh.w	sl, [r3]
 800d438:	f1ba 0f00 	cmp.w	sl, #0
 800d43c:	d020      	beq.n	800d480 <__multiply+0xe4>
 800d43e:	f105 0e14 	add.w	lr, r5, #20
 800d442:	46b1      	mov	r9, r6
 800d444:	2200      	movs	r2, #0
 800d446:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d44a:	f8d9 b000 	ldr.w	fp, [r9]
 800d44e:	b2a1      	uxth	r1, r4
 800d450:	fa1f fb8b 	uxth.w	fp, fp
 800d454:	fb0a b101 	mla	r1, sl, r1, fp
 800d458:	4411      	add	r1, r2
 800d45a:	f8d9 2000 	ldr.w	r2, [r9]
 800d45e:	0c24      	lsrs	r4, r4, #16
 800d460:	0c12      	lsrs	r2, r2, #16
 800d462:	fb0a 2404 	mla	r4, sl, r4, r2
 800d466:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d46a:	b289      	uxth	r1, r1
 800d46c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d470:	45f4      	cmp	ip, lr
 800d472:	f849 1b04 	str.w	r1, [r9], #4
 800d476:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d47a:	d8e4      	bhi.n	800d446 <__multiply+0xaa>
 800d47c:	9901      	ldr	r1, [sp, #4]
 800d47e:	5072      	str	r2, [r6, r1]
 800d480:	9a03      	ldr	r2, [sp, #12]
 800d482:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d486:	3304      	adds	r3, #4
 800d488:	f1b9 0f00 	cmp.w	r9, #0
 800d48c:	d01f      	beq.n	800d4ce <__multiply+0x132>
 800d48e:	6834      	ldr	r4, [r6, #0]
 800d490:	f105 0114 	add.w	r1, r5, #20
 800d494:	46b6      	mov	lr, r6
 800d496:	f04f 0a00 	mov.w	sl, #0
 800d49a:	880a      	ldrh	r2, [r1, #0]
 800d49c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d4a0:	fb09 b202 	mla	r2, r9, r2, fp
 800d4a4:	4492      	add	sl, r2
 800d4a6:	b2a4      	uxth	r4, r4
 800d4a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d4ac:	f84e 4b04 	str.w	r4, [lr], #4
 800d4b0:	f851 4b04 	ldr.w	r4, [r1], #4
 800d4b4:	f8be 2000 	ldrh.w	r2, [lr]
 800d4b8:	0c24      	lsrs	r4, r4, #16
 800d4ba:	fb09 2404 	mla	r4, r9, r4, r2
 800d4be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d4c2:	458c      	cmp	ip, r1
 800d4c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d4c8:	d8e7      	bhi.n	800d49a <__multiply+0xfe>
 800d4ca:	9a01      	ldr	r2, [sp, #4]
 800d4cc:	50b4      	str	r4, [r6, r2]
 800d4ce:	3604      	adds	r6, #4
 800d4d0:	e7a3      	b.n	800d41a <__multiply+0x7e>
 800d4d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1a5      	bne.n	800d426 <__multiply+0x8a>
 800d4da:	3f01      	subs	r7, #1
 800d4dc:	e7a1      	b.n	800d422 <__multiply+0x86>
 800d4de:	bf00      	nop
 800d4e0:	0800f0cb 	.word	0x0800f0cb
 800d4e4:	0800f1bc 	.word	0x0800f1bc

0800d4e8 <__pow5mult>:
 800d4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ec:	4615      	mov	r5, r2
 800d4ee:	f012 0203 	ands.w	r2, r2, #3
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	d007      	beq.n	800d508 <__pow5mult+0x20>
 800d4f8:	4c25      	ldr	r4, [pc, #148]	; (800d590 <__pow5mult+0xa8>)
 800d4fa:	3a01      	subs	r2, #1
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d502:	f7ff fe51 	bl	800d1a8 <__multadd>
 800d506:	4607      	mov	r7, r0
 800d508:	10ad      	asrs	r5, r5, #2
 800d50a:	d03d      	beq.n	800d588 <__pow5mult+0xa0>
 800d50c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d50e:	b97c      	cbnz	r4, 800d530 <__pow5mult+0x48>
 800d510:	2010      	movs	r0, #16
 800d512:	f7ff fdbf 	bl	800d094 <malloc>
 800d516:	4602      	mov	r2, r0
 800d518:	6270      	str	r0, [r6, #36]	; 0x24
 800d51a:	b928      	cbnz	r0, 800d528 <__pow5mult+0x40>
 800d51c:	4b1d      	ldr	r3, [pc, #116]	; (800d594 <__pow5mult+0xac>)
 800d51e:	481e      	ldr	r0, [pc, #120]	; (800d598 <__pow5mult+0xb0>)
 800d520:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d524:	f000 fe94 	bl	800e250 <__assert_func>
 800d528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d52c:	6004      	str	r4, [r0, #0]
 800d52e:	60c4      	str	r4, [r0, #12]
 800d530:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d538:	b94c      	cbnz	r4, 800d54e <__pow5mult+0x66>
 800d53a:	f240 2171 	movw	r1, #625	; 0x271
 800d53e:	4630      	mov	r0, r6
 800d540:	f7ff ff16 	bl	800d370 <__i2b>
 800d544:	2300      	movs	r3, #0
 800d546:	f8c8 0008 	str.w	r0, [r8, #8]
 800d54a:	4604      	mov	r4, r0
 800d54c:	6003      	str	r3, [r0, #0]
 800d54e:	f04f 0900 	mov.w	r9, #0
 800d552:	07eb      	lsls	r3, r5, #31
 800d554:	d50a      	bpl.n	800d56c <__pow5mult+0x84>
 800d556:	4639      	mov	r1, r7
 800d558:	4622      	mov	r2, r4
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7ff ff1e 	bl	800d39c <__multiply>
 800d560:	4639      	mov	r1, r7
 800d562:	4680      	mov	r8, r0
 800d564:	4630      	mov	r0, r6
 800d566:	f7ff fdfd 	bl	800d164 <_Bfree>
 800d56a:	4647      	mov	r7, r8
 800d56c:	106d      	asrs	r5, r5, #1
 800d56e:	d00b      	beq.n	800d588 <__pow5mult+0xa0>
 800d570:	6820      	ldr	r0, [r4, #0]
 800d572:	b938      	cbnz	r0, 800d584 <__pow5mult+0x9c>
 800d574:	4622      	mov	r2, r4
 800d576:	4621      	mov	r1, r4
 800d578:	4630      	mov	r0, r6
 800d57a:	f7ff ff0f 	bl	800d39c <__multiply>
 800d57e:	6020      	str	r0, [r4, #0]
 800d580:	f8c0 9000 	str.w	r9, [r0]
 800d584:	4604      	mov	r4, r0
 800d586:	e7e4      	b.n	800d552 <__pow5mult+0x6a>
 800d588:	4638      	mov	r0, r7
 800d58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58e:	bf00      	nop
 800d590:	0800f310 	.word	0x0800f310
 800d594:	0800f055 	.word	0x0800f055
 800d598:	0800f1bc 	.word	0x0800f1bc

0800d59c <__lshift>:
 800d59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	6849      	ldr	r1, [r1, #4]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	4607      	mov	r7, r0
 800d5ae:	4691      	mov	r9, r2
 800d5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5b4:	f108 0601 	add.w	r6, r8, #1
 800d5b8:	42b3      	cmp	r3, r6
 800d5ba:	db0b      	blt.n	800d5d4 <__lshift+0x38>
 800d5bc:	4638      	mov	r0, r7
 800d5be:	f7ff fd91 	bl	800d0e4 <_Balloc>
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	b948      	cbnz	r0, 800d5da <__lshift+0x3e>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <__lshift+0xd0>)
 800d5ca:	4829      	ldr	r0, [pc, #164]	; (800d670 <__lshift+0xd4>)
 800d5cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5d0:	f000 fe3e 	bl	800e250 <__assert_func>
 800d5d4:	3101      	adds	r1, #1
 800d5d6:	005b      	lsls	r3, r3, #1
 800d5d8:	e7ee      	b.n	800d5b8 <__lshift+0x1c>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f100 0114 	add.w	r1, r0, #20
 800d5e0:	f100 0210 	add.w	r2, r0, #16
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	4553      	cmp	r3, sl
 800d5e8:	db33      	blt.n	800d652 <__lshift+0xb6>
 800d5ea:	6920      	ldr	r0, [r4, #16]
 800d5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5f0:	f104 0314 	add.w	r3, r4, #20
 800d5f4:	f019 091f 	ands.w	r9, r9, #31
 800d5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d600:	d02b      	beq.n	800d65a <__lshift+0xbe>
 800d602:	f1c9 0e20 	rsb	lr, r9, #32
 800d606:	468a      	mov	sl, r1
 800d608:	2200      	movs	r2, #0
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	fa00 f009 	lsl.w	r0, r0, r9
 800d610:	4302      	orrs	r2, r0
 800d612:	f84a 2b04 	str.w	r2, [sl], #4
 800d616:	f853 2b04 	ldr.w	r2, [r3], #4
 800d61a:	459c      	cmp	ip, r3
 800d61c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d620:	d8f3      	bhi.n	800d60a <__lshift+0x6e>
 800d622:	ebac 0304 	sub.w	r3, ip, r4
 800d626:	3b15      	subs	r3, #21
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	3304      	adds	r3, #4
 800d62e:	f104 0015 	add.w	r0, r4, #21
 800d632:	4584      	cmp	ip, r0
 800d634:	bf38      	it	cc
 800d636:	2304      	movcc	r3, #4
 800d638:	50ca      	str	r2, [r1, r3]
 800d63a:	b10a      	cbz	r2, 800d640 <__lshift+0xa4>
 800d63c:	f108 0602 	add.w	r6, r8, #2
 800d640:	3e01      	subs	r6, #1
 800d642:	4638      	mov	r0, r7
 800d644:	612e      	str	r6, [r5, #16]
 800d646:	4621      	mov	r1, r4
 800d648:	f7ff fd8c 	bl	800d164 <_Bfree>
 800d64c:	4628      	mov	r0, r5
 800d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d652:	f842 0f04 	str.w	r0, [r2, #4]!
 800d656:	3301      	adds	r3, #1
 800d658:	e7c5      	b.n	800d5e6 <__lshift+0x4a>
 800d65a:	3904      	subs	r1, #4
 800d65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d660:	f841 2f04 	str.w	r2, [r1, #4]!
 800d664:	459c      	cmp	ip, r3
 800d666:	d8f9      	bhi.n	800d65c <__lshift+0xc0>
 800d668:	e7ea      	b.n	800d640 <__lshift+0xa4>
 800d66a:	bf00      	nop
 800d66c:	0800f0cb 	.word	0x0800f0cb
 800d670:	0800f1bc 	.word	0x0800f1bc

0800d674 <__mcmp>:
 800d674:	b530      	push	{r4, r5, lr}
 800d676:	6902      	ldr	r2, [r0, #16]
 800d678:	690c      	ldr	r4, [r1, #16]
 800d67a:	1b12      	subs	r2, r2, r4
 800d67c:	d10e      	bne.n	800d69c <__mcmp+0x28>
 800d67e:	f100 0314 	add.w	r3, r0, #20
 800d682:	3114      	adds	r1, #20
 800d684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d68c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d694:	42a5      	cmp	r5, r4
 800d696:	d003      	beq.n	800d6a0 <__mcmp+0x2c>
 800d698:	d305      	bcc.n	800d6a6 <__mcmp+0x32>
 800d69a:	2201      	movs	r2, #1
 800d69c:	4610      	mov	r0, r2
 800d69e:	bd30      	pop	{r4, r5, pc}
 800d6a0:	4283      	cmp	r3, r0
 800d6a2:	d3f3      	bcc.n	800d68c <__mcmp+0x18>
 800d6a4:	e7fa      	b.n	800d69c <__mcmp+0x28>
 800d6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6aa:	e7f7      	b.n	800d69c <__mcmp+0x28>

0800d6ac <__mdiff>:
 800d6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	4617      	mov	r7, r2
 800d6ba:	f7ff ffdb 	bl	800d674 <__mcmp>
 800d6be:	1e05      	subs	r5, r0, #0
 800d6c0:	d110      	bne.n	800d6e4 <__mdiff+0x38>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7ff fd0d 	bl	800d0e4 <_Balloc>
 800d6ca:	b930      	cbnz	r0, 800d6da <__mdiff+0x2e>
 800d6cc:	4b39      	ldr	r3, [pc, #228]	; (800d7b4 <__mdiff+0x108>)
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	f240 2132 	movw	r1, #562	; 0x232
 800d6d4:	4838      	ldr	r0, [pc, #224]	; (800d7b8 <__mdiff+0x10c>)
 800d6d6:	f000 fdbb 	bl	800e250 <__assert_func>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e4:	bfa4      	itt	ge
 800d6e6:	463b      	movge	r3, r7
 800d6e8:	4627      	movge	r7, r4
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	bfa6      	itte	ge
 800d6f0:	461c      	movge	r4, r3
 800d6f2:	2500      	movge	r5, #0
 800d6f4:	2501      	movlt	r5, #1
 800d6f6:	f7ff fcf5 	bl	800d0e4 <_Balloc>
 800d6fa:	b920      	cbnz	r0, 800d706 <__mdiff+0x5a>
 800d6fc:	4b2d      	ldr	r3, [pc, #180]	; (800d7b4 <__mdiff+0x108>)
 800d6fe:	4602      	mov	r2, r0
 800d700:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d704:	e7e6      	b.n	800d6d4 <__mdiff+0x28>
 800d706:	693e      	ldr	r6, [r7, #16]
 800d708:	60c5      	str	r5, [r0, #12]
 800d70a:	6925      	ldr	r5, [r4, #16]
 800d70c:	f107 0114 	add.w	r1, r7, #20
 800d710:	f104 0914 	add.w	r9, r4, #20
 800d714:	f100 0e14 	add.w	lr, r0, #20
 800d718:	f107 0210 	add.w	r2, r7, #16
 800d71c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d720:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d724:	46f2      	mov	sl, lr
 800d726:	2700      	movs	r7, #0
 800d728:	f859 3b04 	ldr.w	r3, [r9], #4
 800d72c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d730:	fa1f f883 	uxth.w	r8, r3
 800d734:	fa17 f78b 	uxtah	r7, r7, fp
 800d738:	0c1b      	lsrs	r3, r3, #16
 800d73a:	eba7 0808 	sub.w	r8, r7, r8
 800d73e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d742:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d746:	fa1f f888 	uxth.w	r8, r8
 800d74a:	141f      	asrs	r7, r3, #16
 800d74c:	454d      	cmp	r5, r9
 800d74e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d752:	f84a 3b04 	str.w	r3, [sl], #4
 800d756:	d8e7      	bhi.n	800d728 <__mdiff+0x7c>
 800d758:	1b2b      	subs	r3, r5, r4
 800d75a:	3b15      	subs	r3, #21
 800d75c:	f023 0303 	bic.w	r3, r3, #3
 800d760:	3304      	adds	r3, #4
 800d762:	3415      	adds	r4, #21
 800d764:	42a5      	cmp	r5, r4
 800d766:	bf38      	it	cc
 800d768:	2304      	movcc	r3, #4
 800d76a:	4419      	add	r1, r3
 800d76c:	4473      	add	r3, lr
 800d76e:	469e      	mov	lr, r3
 800d770:	460d      	mov	r5, r1
 800d772:	4565      	cmp	r5, ip
 800d774:	d30e      	bcc.n	800d794 <__mdiff+0xe8>
 800d776:	f10c 0203 	add.w	r2, ip, #3
 800d77a:	1a52      	subs	r2, r2, r1
 800d77c:	f022 0203 	bic.w	r2, r2, #3
 800d780:	3903      	subs	r1, #3
 800d782:	458c      	cmp	ip, r1
 800d784:	bf38      	it	cc
 800d786:	2200      	movcc	r2, #0
 800d788:	441a      	add	r2, r3
 800d78a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d78e:	b17b      	cbz	r3, 800d7b0 <__mdiff+0x104>
 800d790:	6106      	str	r6, [r0, #16]
 800d792:	e7a5      	b.n	800d6e0 <__mdiff+0x34>
 800d794:	f855 8b04 	ldr.w	r8, [r5], #4
 800d798:	fa17 f488 	uxtah	r4, r7, r8
 800d79c:	1422      	asrs	r2, r4, #16
 800d79e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d7a2:	b2a4      	uxth	r4, r4
 800d7a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d7a8:	f84e 4b04 	str.w	r4, [lr], #4
 800d7ac:	1417      	asrs	r7, r2, #16
 800d7ae:	e7e0      	b.n	800d772 <__mdiff+0xc6>
 800d7b0:	3e01      	subs	r6, #1
 800d7b2:	e7ea      	b.n	800d78a <__mdiff+0xde>
 800d7b4:	0800f0cb 	.word	0x0800f0cb
 800d7b8:	0800f1bc 	.word	0x0800f1bc

0800d7bc <__ulp>:
 800d7bc:	b082      	sub	sp, #8
 800d7be:	ed8d 0b00 	vstr	d0, [sp]
 800d7c2:	9b01      	ldr	r3, [sp, #4]
 800d7c4:	4912      	ldr	r1, [pc, #72]	; (800d810 <__ulp+0x54>)
 800d7c6:	4019      	ands	r1, r3
 800d7c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d7cc:	2900      	cmp	r1, #0
 800d7ce:	dd05      	ble.n	800d7dc <__ulp+0x20>
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	ec43 2b10 	vmov	d0, r2, r3
 800d7d8:	b002      	add	sp, #8
 800d7da:	4770      	bx	lr
 800d7dc:	4249      	negs	r1, r1
 800d7de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d7e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d7e6:	f04f 0200 	mov.w	r2, #0
 800d7ea:	f04f 0300 	mov.w	r3, #0
 800d7ee:	da04      	bge.n	800d7fa <__ulp+0x3e>
 800d7f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d7f4:	fa41 f300 	asr.w	r3, r1, r0
 800d7f8:	e7ec      	b.n	800d7d4 <__ulp+0x18>
 800d7fa:	f1a0 0114 	sub.w	r1, r0, #20
 800d7fe:	291e      	cmp	r1, #30
 800d800:	bfda      	itte	le
 800d802:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d806:	fa20 f101 	lsrle.w	r1, r0, r1
 800d80a:	2101      	movgt	r1, #1
 800d80c:	460a      	mov	r2, r1
 800d80e:	e7e1      	b.n	800d7d4 <__ulp+0x18>
 800d810:	7ff00000 	.word	0x7ff00000

0800d814 <__b2d>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	6905      	ldr	r5, [r0, #16]
 800d818:	f100 0714 	add.w	r7, r0, #20
 800d81c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d820:	1f2e      	subs	r6, r5, #4
 800d822:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d826:	4620      	mov	r0, r4
 800d828:	f7ff fd52 	bl	800d2d0 <__hi0bits>
 800d82c:	f1c0 0320 	rsb	r3, r0, #32
 800d830:	280a      	cmp	r0, #10
 800d832:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d8b0 <__b2d+0x9c>
 800d836:	600b      	str	r3, [r1, #0]
 800d838:	dc14      	bgt.n	800d864 <__b2d+0x50>
 800d83a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d83e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d842:	42b7      	cmp	r7, r6
 800d844:	ea41 030c 	orr.w	r3, r1, ip
 800d848:	bf34      	ite	cc
 800d84a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d84e:	2100      	movcs	r1, #0
 800d850:	3015      	adds	r0, #21
 800d852:	fa04 f000 	lsl.w	r0, r4, r0
 800d856:	fa21 f10e 	lsr.w	r1, r1, lr
 800d85a:	ea40 0201 	orr.w	r2, r0, r1
 800d85e:	ec43 2b10 	vmov	d0, r2, r3
 800d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d864:	42b7      	cmp	r7, r6
 800d866:	bf3a      	itte	cc
 800d868:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d86c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d870:	2100      	movcs	r1, #0
 800d872:	380b      	subs	r0, #11
 800d874:	d017      	beq.n	800d8a6 <__b2d+0x92>
 800d876:	f1c0 0c20 	rsb	ip, r0, #32
 800d87a:	fa04 f500 	lsl.w	r5, r4, r0
 800d87e:	42be      	cmp	r6, r7
 800d880:	fa21 f40c 	lsr.w	r4, r1, ip
 800d884:	ea45 0504 	orr.w	r5, r5, r4
 800d888:	bf8c      	ite	hi
 800d88a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d88e:	2400      	movls	r4, #0
 800d890:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d894:	fa01 f000 	lsl.w	r0, r1, r0
 800d898:	fa24 f40c 	lsr.w	r4, r4, ip
 800d89c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d8a0:	ea40 0204 	orr.w	r2, r0, r4
 800d8a4:	e7db      	b.n	800d85e <__b2d+0x4a>
 800d8a6:	ea44 030c 	orr.w	r3, r4, ip
 800d8aa:	460a      	mov	r2, r1
 800d8ac:	e7d7      	b.n	800d85e <__b2d+0x4a>
 800d8ae:	bf00      	nop
 800d8b0:	3ff00000 	.word	0x3ff00000

0800d8b4 <__d2b>:
 800d8b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8b8:	4689      	mov	r9, r1
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	ec57 6b10 	vmov	r6, r7, d0
 800d8c0:	4690      	mov	r8, r2
 800d8c2:	f7ff fc0f 	bl	800d0e4 <_Balloc>
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	b930      	cbnz	r0, 800d8d8 <__d2b+0x24>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	4b25      	ldr	r3, [pc, #148]	; (800d964 <__d2b+0xb0>)
 800d8ce:	4826      	ldr	r0, [pc, #152]	; (800d968 <__d2b+0xb4>)
 800d8d0:	f240 310a 	movw	r1, #778	; 0x30a
 800d8d4:	f000 fcbc 	bl	800e250 <__assert_func>
 800d8d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d8dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d8e0:	bb35      	cbnz	r5, 800d930 <__d2b+0x7c>
 800d8e2:	2e00      	cmp	r6, #0
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	d028      	beq.n	800d93a <__d2b+0x86>
 800d8e8:	4668      	mov	r0, sp
 800d8ea:	9600      	str	r6, [sp, #0]
 800d8ec:	f7ff fd10 	bl	800d310 <__lo0bits>
 800d8f0:	9900      	ldr	r1, [sp, #0]
 800d8f2:	b300      	cbz	r0, 800d936 <__d2b+0x82>
 800d8f4:	9a01      	ldr	r2, [sp, #4]
 800d8f6:	f1c0 0320 	rsb	r3, r0, #32
 800d8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fe:	430b      	orrs	r3, r1
 800d900:	40c2      	lsrs	r2, r0
 800d902:	6163      	str	r3, [r4, #20]
 800d904:	9201      	str	r2, [sp, #4]
 800d906:	9b01      	ldr	r3, [sp, #4]
 800d908:	61a3      	str	r3, [r4, #24]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	bf14      	ite	ne
 800d90e:	2202      	movne	r2, #2
 800d910:	2201      	moveq	r2, #1
 800d912:	6122      	str	r2, [r4, #16]
 800d914:	b1d5      	cbz	r5, 800d94c <__d2b+0x98>
 800d916:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d91a:	4405      	add	r5, r0
 800d91c:	f8c9 5000 	str.w	r5, [r9]
 800d920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d924:	f8c8 0000 	str.w	r0, [r8]
 800d928:	4620      	mov	r0, r4
 800d92a:	b003      	add	sp, #12
 800d92c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d934:	e7d5      	b.n	800d8e2 <__d2b+0x2e>
 800d936:	6161      	str	r1, [r4, #20]
 800d938:	e7e5      	b.n	800d906 <__d2b+0x52>
 800d93a:	a801      	add	r0, sp, #4
 800d93c:	f7ff fce8 	bl	800d310 <__lo0bits>
 800d940:	9b01      	ldr	r3, [sp, #4]
 800d942:	6163      	str	r3, [r4, #20]
 800d944:	2201      	movs	r2, #1
 800d946:	6122      	str	r2, [r4, #16]
 800d948:	3020      	adds	r0, #32
 800d94a:	e7e3      	b.n	800d914 <__d2b+0x60>
 800d94c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d950:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d954:	f8c9 0000 	str.w	r0, [r9]
 800d958:	6918      	ldr	r0, [r3, #16]
 800d95a:	f7ff fcb9 	bl	800d2d0 <__hi0bits>
 800d95e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d962:	e7df      	b.n	800d924 <__d2b+0x70>
 800d964:	0800f0cb 	.word	0x0800f0cb
 800d968:	0800f1bc 	.word	0x0800f1bc

0800d96c <__ratio>:
 800d96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	4688      	mov	r8, r1
 800d972:	4669      	mov	r1, sp
 800d974:	4681      	mov	r9, r0
 800d976:	f7ff ff4d 	bl	800d814 <__b2d>
 800d97a:	a901      	add	r1, sp, #4
 800d97c:	4640      	mov	r0, r8
 800d97e:	ec55 4b10 	vmov	r4, r5, d0
 800d982:	f7ff ff47 	bl	800d814 <__b2d>
 800d986:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d98a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d98e:	eba3 0c02 	sub.w	ip, r3, r2
 800d992:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d996:	1a9b      	subs	r3, r3, r2
 800d998:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d99c:	ec51 0b10 	vmov	r0, r1, d0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	bfd6      	itet	le
 800d9a4:	460a      	movle	r2, r1
 800d9a6:	462a      	movgt	r2, r5
 800d9a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d9ac:	468b      	mov	fp, r1
 800d9ae:	462f      	mov	r7, r5
 800d9b0:	bfd4      	ite	le
 800d9b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d9b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	ee10 2a10 	vmov	r2, s0
 800d9c0:	465b      	mov	r3, fp
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f2 ff4a 	bl	800085c <__aeabi_ddiv>
 800d9c8:	ec41 0b10 	vmov	d0, r0, r1
 800d9cc:	b003      	add	sp, #12
 800d9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9d2 <__copybits>:
 800d9d2:	3901      	subs	r1, #1
 800d9d4:	b570      	push	{r4, r5, r6, lr}
 800d9d6:	1149      	asrs	r1, r1, #5
 800d9d8:	6914      	ldr	r4, [r2, #16]
 800d9da:	3101      	adds	r1, #1
 800d9dc:	f102 0314 	add.w	r3, r2, #20
 800d9e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d9e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9e8:	1f05      	subs	r5, r0, #4
 800d9ea:	42a3      	cmp	r3, r4
 800d9ec:	d30c      	bcc.n	800da08 <__copybits+0x36>
 800d9ee:	1aa3      	subs	r3, r4, r2
 800d9f0:	3b11      	subs	r3, #17
 800d9f2:	f023 0303 	bic.w	r3, r3, #3
 800d9f6:	3211      	adds	r2, #17
 800d9f8:	42a2      	cmp	r2, r4
 800d9fa:	bf88      	it	hi
 800d9fc:	2300      	movhi	r3, #0
 800d9fe:	4418      	add	r0, r3
 800da00:	2300      	movs	r3, #0
 800da02:	4288      	cmp	r0, r1
 800da04:	d305      	bcc.n	800da12 <__copybits+0x40>
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	f853 6b04 	ldr.w	r6, [r3], #4
 800da0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800da10:	e7eb      	b.n	800d9ea <__copybits+0x18>
 800da12:	f840 3b04 	str.w	r3, [r0], #4
 800da16:	e7f4      	b.n	800da02 <__copybits+0x30>

0800da18 <__any_on>:
 800da18:	f100 0214 	add.w	r2, r0, #20
 800da1c:	6900      	ldr	r0, [r0, #16]
 800da1e:	114b      	asrs	r3, r1, #5
 800da20:	4298      	cmp	r0, r3
 800da22:	b510      	push	{r4, lr}
 800da24:	db11      	blt.n	800da4a <__any_on+0x32>
 800da26:	dd0a      	ble.n	800da3e <__any_on+0x26>
 800da28:	f011 011f 	ands.w	r1, r1, #31
 800da2c:	d007      	beq.n	800da3e <__any_on+0x26>
 800da2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800da32:	fa24 f001 	lsr.w	r0, r4, r1
 800da36:	fa00 f101 	lsl.w	r1, r0, r1
 800da3a:	428c      	cmp	r4, r1
 800da3c:	d10b      	bne.n	800da56 <__any_on+0x3e>
 800da3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da42:	4293      	cmp	r3, r2
 800da44:	d803      	bhi.n	800da4e <__any_on+0x36>
 800da46:	2000      	movs	r0, #0
 800da48:	bd10      	pop	{r4, pc}
 800da4a:	4603      	mov	r3, r0
 800da4c:	e7f7      	b.n	800da3e <__any_on+0x26>
 800da4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da52:	2900      	cmp	r1, #0
 800da54:	d0f5      	beq.n	800da42 <__any_on+0x2a>
 800da56:	2001      	movs	r0, #1
 800da58:	e7f6      	b.n	800da48 <__any_on+0x30>

0800da5a <_calloc_r>:
 800da5a:	b513      	push	{r0, r1, r4, lr}
 800da5c:	434a      	muls	r2, r1
 800da5e:	4611      	mov	r1, r2
 800da60:	9201      	str	r2, [sp, #4]
 800da62:	f000 f859 	bl	800db18 <_malloc_r>
 800da66:	4604      	mov	r4, r0
 800da68:	b118      	cbz	r0, 800da72 <_calloc_r+0x18>
 800da6a:	9a01      	ldr	r2, [sp, #4]
 800da6c:	2100      	movs	r1, #0
 800da6e:	f7fc fadb 	bl	800a028 <memset>
 800da72:	4620      	mov	r0, r4
 800da74:	b002      	add	sp, #8
 800da76:	bd10      	pop	{r4, pc}

0800da78 <_free_r>:
 800da78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da7a:	2900      	cmp	r1, #0
 800da7c:	d048      	beq.n	800db10 <_free_r+0x98>
 800da7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da82:	9001      	str	r0, [sp, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	f1a1 0404 	sub.w	r4, r1, #4
 800da8a:	bfb8      	it	lt
 800da8c:	18e4      	addlt	r4, r4, r3
 800da8e:	f000 fc6d 	bl	800e36c <__malloc_lock>
 800da92:	4a20      	ldr	r2, [pc, #128]	; (800db14 <_free_r+0x9c>)
 800da94:	9801      	ldr	r0, [sp, #4]
 800da96:	6813      	ldr	r3, [r2, #0]
 800da98:	4615      	mov	r5, r2
 800da9a:	b933      	cbnz	r3, 800daaa <_free_r+0x32>
 800da9c:	6063      	str	r3, [r4, #4]
 800da9e:	6014      	str	r4, [r2, #0]
 800daa0:	b003      	add	sp, #12
 800daa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daa6:	f000 bc67 	b.w	800e378 <__malloc_unlock>
 800daaa:	42a3      	cmp	r3, r4
 800daac:	d90b      	bls.n	800dac6 <_free_r+0x4e>
 800daae:	6821      	ldr	r1, [r4, #0]
 800dab0:	1862      	adds	r2, r4, r1
 800dab2:	4293      	cmp	r3, r2
 800dab4:	bf04      	itt	eq
 800dab6:	681a      	ldreq	r2, [r3, #0]
 800dab8:	685b      	ldreq	r3, [r3, #4]
 800daba:	6063      	str	r3, [r4, #4]
 800dabc:	bf04      	itt	eq
 800dabe:	1852      	addeq	r2, r2, r1
 800dac0:	6022      	streq	r2, [r4, #0]
 800dac2:	602c      	str	r4, [r5, #0]
 800dac4:	e7ec      	b.n	800daa0 <_free_r+0x28>
 800dac6:	461a      	mov	r2, r3
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	b10b      	cbz	r3, 800dad0 <_free_r+0x58>
 800dacc:	42a3      	cmp	r3, r4
 800dace:	d9fa      	bls.n	800dac6 <_free_r+0x4e>
 800dad0:	6811      	ldr	r1, [r2, #0]
 800dad2:	1855      	adds	r5, r2, r1
 800dad4:	42a5      	cmp	r5, r4
 800dad6:	d10b      	bne.n	800daf0 <_free_r+0x78>
 800dad8:	6824      	ldr	r4, [r4, #0]
 800dada:	4421      	add	r1, r4
 800dadc:	1854      	adds	r4, r2, r1
 800dade:	42a3      	cmp	r3, r4
 800dae0:	6011      	str	r1, [r2, #0]
 800dae2:	d1dd      	bne.n	800daa0 <_free_r+0x28>
 800dae4:	681c      	ldr	r4, [r3, #0]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	6053      	str	r3, [r2, #4]
 800daea:	4421      	add	r1, r4
 800daec:	6011      	str	r1, [r2, #0]
 800daee:	e7d7      	b.n	800daa0 <_free_r+0x28>
 800daf0:	d902      	bls.n	800daf8 <_free_r+0x80>
 800daf2:	230c      	movs	r3, #12
 800daf4:	6003      	str	r3, [r0, #0]
 800daf6:	e7d3      	b.n	800daa0 <_free_r+0x28>
 800daf8:	6825      	ldr	r5, [r4, #0]
 800dafa:	1961      	adds	r1, r4, r5
 800dafc:	428b      	cmp	r3, r1
 800dafe:	bf04      	itt	eq
 800db00:	6819      	ldreq	r1, [r3, #0]
 800db02:	685b      	ldreq	r3, [r3, #4]
 800db04:	6063      	str	r3, [r4, #4]
 800db06:	bf04      	itt	eq
 800db08:	1949      	addeq	r1, r1, r5
 800db0a:	6021      	streq	r1, [r4, #0]
 800db0c:	6054      	str	r4, [r2, #4]
 800db0e:	e7c7      	b.n	800daa0 <_free_r+0x28>
 800db10:	b003      	add	sp, #12
 800db12:	bd30      	pop	{r4, r5, pc}
 800db14:	20000828 	.word	0x20000828

0800db18 <_malloc_r>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	1ccd      	adds	r5, r1, #3
 800db1c:	f025 0503 	bic.w	r5, r5, #3
 800db20:	3508      	adds	r5, #8
 800db22:	2d0c      	cmp	r5, #12
 800db24:	bf38      	it	cc
 800db26:	250c      	movcc	r5, #12
 800db28:	2d00      	cmp	r5, #0
 800db2a:	4606      	mov	r6, r0
 800db2c:	db01      	blt.n	800db32 <_malloc_r+0x1a>
 800db2e:	42a9      	cmp	r1, r5
 800db30:	d903      	bls.n	800db3a <_malloc_r+0x22>
 800db32:	230c      	movs	r3, #12
 800db34:	6033      	str	r3, [r6, #0]
 800db36:	2000      	movs	r0, #0
 800db38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db3a:	f000 fc17 	bl	800e36c <__malloc_lock>
 800db3e:	4921      	ldr	r1, [pc, #132]	; (800dbc4 <_malloc_r+0xac>)
 800db40:	680a      	ldr	r2, [r1, #0]
 800db42:	4614      	mov	r4, r2
 800db44:	b99c      	cbnz	r4, 800db6e <_malloc_r+0x56>
 800db46:	4f20      	ldr	r7, [pc, #128]	; (800dbc8 <_malloc_r+0xb0>)
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	b923      	cbnz	r3, 800db56 <_malloc_r+0x3e>
 800db4c:	4621      	mov	r1, r4
 800db4e:	4630      	mov	r0, r6
 800db50:	f000 fafa 	bl	800e148 <_sbrk_r>
 800db54:	6038      	str	r0, [r7, #0]
 800db56:	4629      	mov	r1, r5
 800db58:	4630      	mov	r0, r6
 800db5a:	f000 faf5 	bl	800e148 <_sbrk_r>
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	d123      	bne.n	800dbaa <_malloc_r+0x92>
 800db62:	230c      	movs	r3, #12
 800db64:	6033      	str	r3, [r6, #0]
 800db66:	4630      	mov	r0, r6
 800db68:	f000 fc06 	bl	800e378 <__malloc_unlock>
 800db6c:	e7e3      	b.n	800db36 <_malloc_r+0x1e>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	1b5b      	subs	r3, r3, r5
 800db72:	d417      	bmi.n	800dba4 <_malloc_r+0x8c>
 800db74:	2b0b      	cmp	r3, #11
 800db76:	d903      	bls.n	800db80 <_malloc_r+0x68>
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	441c      	add	r4, r3
 800db7c:	6025      	str	r5, [r4, #0]
 800db7e:	e004      	b.n	800db8a <_malloc_r+0x72>
 800db80:	6863      	ldr	r3, [r4, #4]
 800db82:	42a2      	cmp	r2, r4
 800db84:	bf0c      	ite	eq
 800db86:	600b      	streq	r3, [r1, #0]
 800db88:	6053      	strne	r3, [r2, #4]
 800db8a:	4630      	mov	r0, r6
 800db8c:	f000 fbf4 	bl	800e378 <__malloc_unlock>
 800db90:	f104 000b 	add.w	r0, r4, #11
 800db94:	1d23      	adds	r3, r4, #4
 800db96:	f020 0007 	bic.w	r0, r0, #7
 800db9a:	1ac2      	subs	r2, r0, r3
 800db9c:	d0cc      	beq.n	800db38 <_malloc_r+0x20>
 800db9e:	1a1b      	subs	r3, r3, r0
 800dba0:	50a3      	str	r3, [r4, r2]
 800dba2:	e7c9      	b.n	800db38 <_malloc_r+0x20>
 800dba4:	4622      	mov	r2, r4
 800dba6:	6864      	ldr	r4, [r4, #4]
 800dba8:	e7cc      	b.n	800db44 <_malloc_r+0x2c>
 800dbaa:	1cc4      	adds	r4, r0, #3
 800dbac:	f024 0403 	bic.w	r4, r4, #3
 800dbb0:	42a0      	cmp	r0, r4
 800dbb2:	d0e3      	beq.n	800db7c <_malloc_r+0x64>
 800dbb4:	1a21      	subs	r1, r4, r0
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f000 fac6 	bl	800e148 <_sbrk_r>
 800dbbc:	3001      	adds	r0, #1
 800dbbe:	d1dd      	bne.n	800db7c <_malloc_r+0x64>
 800dbc0:	e7cf      	b.n	800db62 <_malloc_r+0x4a>
 800dbc2:	bf00      	nop
 800dbc4:	20000828 	.word	0x20000828
 800dbc8:	2000082c 	.word	0x2000082c

0800dbcc <__ssputs_r>:
 800dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd0:	688e      	ldr	r6, [r1, #8]
 800dbd2:	429e      	cmp	r6, r3
 800dbd4:	4682      	mov	sl, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	4690      	mov	r8, r2
 800dbda:	461f      	mov	r7, r3
 800dbdc:	d838      	bhi.n	800dc50 <__ssputs_r+0x84>
 800dbde:	898a      	ldrh	r2, [r1, #12]
 800dbe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbe4:	d032      	beq.n	800dc4c <__ssputs_r+0x80>
 800dbe6:	6825      	ldr	r5, [r4, #0]
 800dbe8:	6909      	ldr	r1, [r1, #16]
 800dbea:	eba5 0901 	sub.w	r9, r5, r1
 800dbee:	6965      	ldr	r5, [r4, #20]
 800dbf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	444b      	add	r3, r9
 800dbfc:	106d      	asrs	r5, r5, #1
 800dbfe:	429d      	cmp	r5, r3
 800dc00:	bf38      	it	cc
 800dc02:	461d      	movcc	r5, r3
 800dc04:	0553      	lsls	r3, r2, #21
 800dc06:	d531      	bpl.n	800dc6c <__ssputs_r+0xa0>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	f7ff ff85 	bl	800db18 <_malloc_r>
 800dc0e:	4606      	mov	r6, r0
 800dc10:	b950      	cbnz	r0, 800dc28 <__ssputs_r+0x5c>
 800dc12:	230c      	movs	r3, #12
 800dc14:	f8ca 3000 	str.w	r3, [sl]
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc28:	6921      	ldr	r1, [r4, #16]
 800dc2a:	464a      	mov	r2, r9
 800dc2c:	f7ff fa4c 	bl	800d0c8 <memcpy>
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc3a:	81a3      	strh	r3, [r4, #12]
 800dc3c:	6126      	str	r6, [r4, #16]
 800dc3e:	6165      	str	r5, [r4, #20]
 800dc40:	444e      	add	r6, r9
 800dc42:	eba5 0509 	sub.w	r5, r5, r9
 800dc46:	6026      	str	r6, [r4, #0]
 800dc48:	60a5      	str	r5, [r4, #8]
 800dc4a:	463e      	mov	r6, r7
 800dc4c:	42be      	cmp	r6, r7
 800dc4e:	d900      	bls.n	800dc52 <__ssputs_r+0x86>
 800dc50:	463e      	mov	r6, r7
 800dc52:	4632      	mov	r2, r6
 800dc54:	6820      	ldr	r0, [r4, #0]
 800dc56:	4641      	mov	r1, r8
 800dc58:	f000 fb6e 	bl	800e338 <memmove>
 800dc5c:	68a3      	ldr	r3, [r4, #8]
 800dc5e:	6822      	ldr	r2, [r4, #0]
 800dc60:	1b9b      	subs	r3, r3, r6
 800dc62:	4432      	add	r2, r6
 800dc64:	60a3      	str	r3, [r4, #8]
 800dc66:	6022      	str	r2, [r4, #0]
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e7db      	b.n	800dc24 <__ssputs_r+0x58>
 800dc6c:	462a      	mov	r2, r5
 800dc6e:	f000 fb89 	bl	800e384 <_realloc_r>
 800dc72:	4606      	mov	r6, r0
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d1e1      	bne.n	800dc3c <__ssputs_r+0x70>
 800dc78:	6921      	ldr	r1, [r4, #16]
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	f7ff fefc 	bl	800da78 <_free_r>
 800dc80:	e7c7      	b.n	800dc12 <__ssputs_r+0x46>
	...

0800dc84 <_svfiprintf_r>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	4698      	mov	r8, r3
 800dc8a:	898b      	ldrh	r3, [r1, #12]
 800dc8c:	061b      	lsls	r3, r3, #24
 800dc8e:	b09d      	sub	sp, #116	; 0x74
 800dc90:	4607      	mov	r7, r0
 800dc92:	460d      	mov	r5, r1
 800dc94:	4614      	mov	r4, r2
 800dc96:	d50e      	bpl.n	800dcb6 <_svfiprintf_r+0x32>
 800dc98:	690b      	ldr	r3, [r1, #16]
 800dc9a:	b963      	cbnz	r3, 800dcb6 <_svfiprintf_r+0x32>
 800dc9c:	2140      	movs	r1, #64	; 0x40
 800dc9e:	f7ff ff3b 	bl	800db18 <_malloc_r>
 800dca2:	6028      	str	r0, [r5, #0]
 800dca4:	6128      	str	r0, [r5, #16]
 800dca6:	b920      	cbnz	r0, 800dcb2 <_svfiprintf_r+0x2e>
 800dca8:	230c      	movs	r3, #12
 800dcaa:	603b      	str	r3, [r7, #0]
 800dcac:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb0:	e0d1      	b.n	800de56 <_svfiprintf_r+0x1d2>
 800dcb2:	2340      	movs	r3, #64	; 0x40
 800dcb4:	616b      	str	r3, [r5, #20]
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcba:	2320      	movs	r3, #32
 800dcbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcc4:	2330      	movs	r3, #48	; 0x30
 800dcc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de70 <_svfiprintf_r+0x1ec>
 800dcca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcce:	f04f 0901 	mov.w	r9, #1
 800dcd2:	4623      	mov	r3, r4
 800dcd4:	469a      	mov	sl, r3
 800dcd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcda:	b10a      	cbz	r2, 800dce0 <_svfiprintf_r+0x5c>
 800dcdc:	2a25      	cmp	r2, #37	; 0x25
 800dcde:	d1f9      	bne.n	800dcd4 <_svfiprintf_r+0x50>
 800dce0:	ebba 0b04 	subs.w	fp, sl, r4
 800dce4:	d00b      	beq.n	800dcfe <_svfiprintf_r+0x7a>
 800dce6:	465b      	mov	r3, fp
 800dce8:	4622      	mov	r2, r4
 800dcea:	4629      	mov	r1, r5
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff ff6d 	bl	800dbcc <__ssputs_r>
 800dcf2:	3001      	adds	r0, #1
 800dcf4:	f000 80aa 	beq.w	800de4c <_svfiprintf_r+0x1c8>
 800dcf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcfa:	445a      	add	r2, fp
 800dcfc:	9209      	str	r2, [sp, #36]	; 0x24
 800dcfe:	f89a 3000 	ldrb.w	r3, [sl]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f000 80a2 	beq.w	800de4c <_svfiprintf_r+0x1c8>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd12:	f10a 0a01 	add.w	sl, sl, #1
 800dd16:	9304      	str	r3, [sp, #16]
 800dd18:	9307      	str	r3, [sp, #28]
 800dd1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd1e:	931a      	str	r3, [sp, #104]	; 0x68
 800dd20:	4654      	mov	r4, sl
 800dd22:	2205      	movs	r2, #5
 800dd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd28:	4851      	ldr	r0, [pc, #324]	; (800de70 <_svfiprintf_r+0x1ec>)
 800dd2a:	f7f2 fa61 	bl	80001f0 <memchr>
 800dd2e:	9a04      	ldr	r2, [sp, #16]
 800dd30:	b9d8      	cbnz	r0, 800dd6a <_svfiprintf_r+0xe6>
 800dd32:	06d0      	lsls	r0, r2, #27
 800dd34:	bf44      	itt	mi
 800dd36:	2320      	movmi	r3, #32
 800dd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd3c:	0711      	lsls	r1, r2, #28
 800dd3e:	bf44      	itt	mi
 800dd40:	232b      	movmi	r3, #43	; 0x2b
 800dd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd46:	f89a 3000 	ldrb.w	r3, [sl]
 800dd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800dd4c:	d015      	beq.n	800dd7a <_svfiprintf_r+0xf6>
 800dd4e:	9a07      	ldr	r2, [sp, #28]
 800dd50:	4654      	mov	r4, sl
 800dd52:	2000      	movs	r0, #0
 800dd54:	f04f 0c0a 	mov.w	ip, #10
 800dd58:	4621      	mov	r1, r4
 800dd5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd5e:	3b30      	subs	r3, #48	; 0x30
 800dd60:	2b09      	cmp	r3, #9
 800dd62:	d94e      	bls.n	800de02 <_svfiprintf_r+0x17e>
 800dd64:	b1b0      	cbz	r0, 800dd94 <_svfiprintf_r+0x110>
 800dd66:	9207      	str	r2, [sp, #28]
 800dd68:	e014      	b.n	800dd94 <_svfiprintf_r+0x110>
 800dd6a:	eba0 0308 	sub.w	r3, r0, r8
 800dd6e:	fa09 f303 	lsl.w	r3, r9, r3
 800dd72:	4313      	orrs	r3, r2
 800dd74:	9304      	str	r3, [sp, #16]
 800dd76:	46a2      	mov	sl, r4
 800dd78:	e7d2      	b.n	800dd20 <_svfiprintf_r+0x9c>
 800dd7a:	9b03      	ldr	r3, [sp, #12]
 800dd7c:	1d19      	adds	r1, r3, #4
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	9103      	str	r1, [sp, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	bfbb      	ittet	lt
 800dd86:	425b      	neglt	r3, r3
 800dd88:	f042 0202 	orrlt.w	r2, r2, #2
 800dd8c:	9307      	strge	r3, [sp, #28]
 800dd8e:	9307      	strlt	r3, [sp, #28]
 800dd90:	bfb8      	it	lt
 800dd92:	9204      	strlt	r2, [sp, #16]
 800dd94:	7823      	ldrb	r3, [r4, #0]
 800dd96:	2b2e      	cmp	r3, #46	; 0x2e
 800dd98:	d10c      	bne.n	800ddb4 <_svfiprintf_r+0x130>
 800dd9a:	7863      	ldrb	r3, [r4, #1]
 800dd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd9e:	d135      	bne.n	800de0c <_svfiprintf_r+0x188>
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	1d1a      	adds	r2, r3, #4
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	9203      	str	r2, [sp, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	bfb8      	it	lt
 800ddac:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddb0:	3402      	adds	r4, #2
 800ddb2:	9305      	str	r3, [sp, #20]
 800ddb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de80 <_svfiprintf_r+0x1fc>
 800ddb8:	7821      	ldrb	r1, [r4, #0]
 800ddba:	2203      	movs	r2, #3
 800ddbc:	4650      	mov	r0, sl
 800ddbe:	f7f2 fa17 	bl	80001f0 <memchr>
 800ddc2:	b140      	cbz	r0, 800ddd6 <_svfiprintf_r+0x152>
 800ddc4:	2340      	movs	r3, #64	; 0x40
 800ddc6:	eba0 000a 	sub.w	r0, r0, sl
 800ddca:	fa03 f000 	lsl.w	r0, r3, r0
 800ddce:	9b04      	ldr	r3, [sp, #16]
 800ddd0:	4303      	orrs	r3, r0
 800ddd2:	3401      	adds	r4, #1
 800ddd4:	9304      	str	r3, [sp, #16]
 800ddd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddda:	4826      	ldr	r0, [pc, #152]	; (800de74 <_svfiprintf_r+0x1f0>)
 800dddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dde0:	2206      	movs	r2, #6
 800dde2:	f7f2 fa05 	bl	80001f0 <memchr>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d038      	beq.n	800de5c <_svfiprintf_r+0x1d8>
 800ddea:	4b23      	ldr	r3, [pc, #140]	; (800de78 <_svfiprintf_r+0x1f4>)
 800ddec:	bb1b      	cbnz	r3, 800de36 <_svfiprintf_r+0x1b2>
 800ddee:	9b03      	ldr	r3, [sp, #12]
 800ddf0:	3307      	adds	r3, #7
 800ddf2:	f023 0307 	bic.w	r3, r3, #7
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	9303      	str	r3, [sp, #12]
 800ddfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfc:	4433      	add	r3, r6
 800ddfe:	9309      	str	r3, [sp, #36]	; 0x24
 800de00:	e767      	b.n	800dcd2 <_svfiprintf_r+0x4e>
 800de02:	fb0c 3202 	mla	r2, ip, r2, r3
 800de06:	460c      	mov	r4, r1
 800de08:	2001      	movs	r0, #1
 800de0a:	e7a5      	b.n	800dd58 <_svfiprintf_r+0xd4>
 800de0c:	2300      	movs	r3, #0
 800de0e:	3401      	adds	r4, #1
 800de10:	9305      	str	r3, [sp, #20]
 800de12:	4619      	mov	r1, r3
 800de14:	f04f 0c0a 	mov.w	ip, #10
 800de18:	4620      	mov	r0, r4
 800de1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de1e:	3a30      	subs	r2, #48	; 0x30
 800de20:	2a09      	cmp	r2, #9
 800de22:	d903      	bls.n	800de2c <_svfiprintf_r+0x1a8>
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0c5      	beq.n	800ddb4 <_svfiprintf_r+0x130>
 800de28:	9105      	str	r1, [sp, #20]
 800de2a:	e7c3      	b.n	800ddb4 <_svfiprintf_r+0x130>
 800de2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800de30:	4604      	mov	r4, r0
 800de32:	2301      	movs	r3, #1
 800de34:	e7f0      	b.n	800de18 <_svfiprintf_r+0x194>
 800de36:	ab03      	add	r3, sp, #12
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	462a      	mov	r2, r5
 800de3c:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <_svfiprintf_r+0x1f8>)
 800de3e:	a904      	add	r1, sp, #16
 800de40:	4638      	mov	r0, r7
 800de42:	f7fc f999 	bl	800a178 <_printf_float>
 800de46:	1c42      	adds	r2, r0, #1
 800de48:	4606      	mov	r6, r0
 800de4a:	d1d6      	bne.n	800ddfa <_svfiprintf_r+0x176>
 800de4c:	89ab      	ldrh	r3, [r5, #12]
 800de4e:	065b      	lsls	r3, r3, #25
 800de50:	f53f af2c 	bmi.w	800dcac <_svfiprintf_r+0x28>
 800de54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de56:	b01d      	add	sp, #116	; 0x74
 800de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5c:	ab03      	add	r3, sp, #12
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	462a      	mov	r2, r5
 800de62:	4b06      	ldr	r3, [pc, #24]	; (800de7c <_svfiprintf_r+0x1f8>)
 800de64:	a904      	add	r1, sp, #16
 800de66:	4638      	mov	r0, r7
 800de68:	f7fc fc2a 	bl	800a6c0 <_printf_i>
 800de6c:	e7eb      	b.n	800de46 <_svfiprintf_r+0x1c2>
 800de6e:	bf00      	nop
 800de70:	0800f31c 	.word	0x0800f31c
 800de74:	0800f326 	.word	0x0800f326
 800de78:	0800a179 	.word	0x0800a179
 800de7c:	0800dbcd 	.word	0x0800dbcd
 800de80:	0800f322 	.word	0x0800f322

0800de84 <__sfputc_r>:
 800de84:	6893      	ldr	r3, [r2, #8]
 800de86:	3b01      	subs	r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	b410      	push	{r4}
 800de8c:	6093      	str	r3, [r2, #8]
 800de8e:	da08      	bge.n	800dea2 <__sfputc_r+0x1e>
 800de90:	6994      	ldr	r4, [r2, #24]
 800de92:	42a3      	cmp	r3, r4
 800de94:	db01      	blt.n	800de9a <__sfputc_r+0x16>
 800de96:	290a      	cmp	r1, #10
 800de98:	d103      	bne.n	800dea2 <__sfputc_r+0x1e>
 800de9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de9e:	f7fd bc2d 	b.w	800b6fc <__swbuf_r>
 800dea2:	6813      	ldr	r3, [r2, #0]
 800dea4:	1c58      	adds	r0, r3, #1
 800dea6:	6010      	str	r0, [r2, #0]
 800dea8:	7019      	strb	r1, [r3, #0]
 800deaa:	4608      	mov	r0, r1
 800deac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <__sfputs_r>:
 800deb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb4:	4606      	mov	r6, r0
 800deb6:	460f      	mov	r7, r1
 800deb8:	4614      	mov	r4, r2
 800deba:	18d5      	adds	r5, r2, r3
 800debc:	42ac      	cmp	r4, r5
 800debe:	d101      	bne.n	800dec4 <__sfputs_r+0x12>
 800dec0:	2000      	movs	r0, #0
 800dec2:	e007      	b.n	800ded4 <__sfputs_r+0x22>
 800dec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dec8:	463a      	mov	r2, r7
 800deca:	4630      	mov	r0, r6
 800decc:	f7ff ffda 	bl	800de84 <__sfputc_r>
 800ded0:	1c43      	adds	r3, r0, #1
 800ded2:	d1f3      	bne.n	800debc <__sfputs_r+0xa>
 800ded4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ded8 <_vfiprintf_r>:
 800ded8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dedc:	460d      	mov	r5, r1
 800dede:	b09d      	sub	sp, #116	; 0x74
 800dee0:	4614      	mov	r4, r2
 800dee2:	4698      	mov	r8, r3
 800dee4:	4606      	mov	r6, r0
 800dee6:	b118      	cbz	r0, 800def0 <_vfiprintf_r+0x18>
 800dee8:	6983      	ldr	r3, [r0, #24]
 800deea:	b90b      	cbnz	r3, 800def0 <_vfiprintf_r+0x18>
 800deec:	f7fe fc5a 	bl	800c7a4 <__sinit>
 800def0:	4b89      	ldr	r3, [pc, #548]	; (800e118 <_vfiprintf_r+0x240>)
 800def2:	429d      	cmp	r5, r3
 800def4:	d11b      	bne.n	800df2e <_vfiprintf_r+0x56>
 800def6:	6875      	ldr	r5, [r6, #4]
 800def8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800defa:	07d9      	lsls	r1, r3, #31
 800defc:	d405      	bmi.n	800df0a <_vfiprintf_r+0x32>
 800defe:	89ab      	ldrh	r3, [r5, #12]
 800df00:	059a      	lsls	r2, r3, #22
 800df02:	d402      	bmi.n	800df0a <_vfiprintf_r+0x32>
 800df04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df06:	f7ff f85e 	bl	800cfc6 <__retarget_lock_acquire_recursive>
 800df0a:	89ab      	ldrh	r3, [r5, #12]
 800df0c:	071b      	lsls	r3, r3, #28
 800df0e:	d501      	bpl.n	800df14 <_vfiprintf_r+0x3c>
 800df10:	692b      	ldr	r3, [r5, #16]
 800df12:	b9eb      	cbnz	r3, 800df50 <_vfiprintf_r+0x78>
 800df14:	4629      	mov	r1, r5
 800df16:	4630      	mov	r0, r6
 800df18:	f7fd fc42 	bl	800b7a0 <__swsetup_r>
 800df1c:	b1c0      	cbz	r0, 800df50 <_vfiprintf_r+0x78>
 800df1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df20:	07dc      	lsls	r4, r3, #31
 800df22:	d50e      	bpl.n	800df42 <_vfiprintf_r+0x6a>
 800df24:	f04f 30ff 	mov.w	r0, #4294967295
 800df28:	b01d      	add	sp, #116	; 0x74
 800df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2e:	4b7b      	ldr	r3, [pc, #492]	; (800e11c <_vfiprintf_r+0x244>)
 800df30:	429d      	cmp	r5, r3
 800df32:	d101      	bne.n	800df38 <_vfiprintf_r+0x60>
 800df34:	68b5      	ldr	r5, [r6, #8]
 800df36:	e7df      	b.n	800def8 <_vfiprintf_r+0x20>
 800df38:	4b79      	ldr	r3, [pc, #484]	; (800e120 <_vfiprintf_r+0x248>)
 800df3a:	429d      	cmp	r5, r3
 800df3c:	bf08      	it	eq
 800df3e:	68f5      	ldreq	r5, [r6, #12]
 800df40:	e7da      	b.n	800def8 <_vfiprintf_r+0x20>
 800df42:	89ab      	ldrh	r3, [r5, #12]
 800df44:	0598      	lsls	r0, r3, #22
 800df46:	d4ed      	bmi.n	800df24 <_vfiprintf_r+0x4c>
 800df48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df4a:	f7ff f83d 	bl	800cfc8 <__retarget_lock_release_recursive>
 800df4e:	e7e9      	b.n	800df24 <_vfiprintf_r+0x4c>
 800df50:	2300      	movs	r3, #0
 800df52:	9309      	str	r3, [sp, #36]	; 0x24
 800df54:	2320      	movs	r3, #32
 800df56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800df5e:	2330      	movs	r3, #48	; 0x30
 800df60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e124 <_vfiprintf_r+0x24c>
 800df64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df68:	f04f 0901 	mov.w	r9, #1
 800df6c:	4623      	mov	r3, r4
 800df6e:	469a      	mov	sl, r3
 800df70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df74:	b10a      	cbz	r2, 800df7a <_vfiprintf_r+0xa2>
 800df76:	2a25      	cmp	r2, #37	; 0x25
 800df78:	d1f9      	bne.n	800df6e <_vfiprintf_r+0x96>
 800df7a:	ebba 0b04 	subs.w	fp, sl, r4
 800df7e:	d00b      	beq.n	800df98 <_vfiprintf_r+0xc0>
 800df80:	465b      	mov	r3, fp
 800df82:	4622      	mov	r2, r4
 800df84:	4629      	mov	r1, r5
 800df86:	4630      	mov	r0, r6
 800df88:	f7ff ff93 	bl	800deb2 <__sfputs_r>
 800df8c:	3001      	adds	r0, #1
 800df8e:	f000 80aa 	beq.w	800e0e6 <_vfiprintf_r+0x20e>
 800df92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df94:	445a      	add	r2, fp
 800df96:	9209      	str	r2, [sp, #36]	; 0x24
 800df98:	f89a 3000 	ldrb.w	r3, [sl]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f000 80a2 	beq.w	800e0e6 <_vfiprintf_r+0x20e>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfac:	f10a 0a01 	add.w	sl, sl, #1
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	9307      	str	r3, [sp, #28]
 800dfb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfb8:	931a      	str	r3, [sp, #104]	; 0x68
 800dfba:	4654      	mov	r4, sl
 800dfbc:	2205      	movs	r2, #5
 800dfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfc2:	4858      	ldr	r0, [pc, #352]	; (800e124 <_vfiprintf_r+0x24c>)
 800dfc4:	f7f2 f914 	bl	80001f0 <memchr>
 800dfc8:	9a04      	ldr	r2, [sp, #16]
 800dfca:	b9d8      	cbnz	r0, 800e004 <_vfiprintf_r+0x12c>
 800dfcc:	06d1      	lsls	r1, r2, #27
 800dfce:	bf44      	itt	mi
 800dfd0:	2320      	movmi	r3, #32
 800dfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfd6:	0713      	lsls	r3, r2, #28
 800dfd8:	bf44      	itt	mi
 800dfda:	232b      	movmi	r3, #43	; 0x2b
 800dfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800dfe4:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe6:	d015      	beq.n	800e014 <_vfiprintf_r+0x13c>
 800dfe8:	9a07      	ldr	r2, [sp, #28]
 800dfea:	4654      	mov	r4, sl
 800dfec:	2000      	movs	r0, #0
 800dfee:	f04f 0c0a 	mov.w	ip, #10
 800dff2:	4621      	mov	r1, r4
 800dff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dff8:	3b30      	subs	r3, #48	; 0x30
 800dffa:	2b09      	cmp	r3, #9
 800dffc:	d94e      	bls.n	800e09c <_vfiprintf_r+0x1c4>
 800dffe:	b1b0      	cbz	r0, 800e02e <_vfiprintf_r+0x156>
 800e000:	9207      	str	r2, [sp, #28]
 800e002:	e014      	b.n	800e02e <_vfiprintf_r+0x156>
 800e004:	eba0 0308 	sub.w	r3, r0, r8
 800e008:	fa09 f303 	lsl.w	r3, r9, r3
 800e00c:	4313      	orrs	r3, r2
 800e00e:	9304      	str	r3, [sp, #16]
 800e010:	46a2      	mov	sl, r4
 800e012:	e7d2      	b.n	800dfba <_vfiprintf_r+0xe2>
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	1d19      	adds	r1, r3, #4
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	9103      	str	r1, [sp, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	bfbb      	ittet	lt
 800e020:	425b      	neglt	r3, r3
 800e022:	f042 0202 	orrlt.w	r2, r2, #2
 800e026:	9307      	strge	r3, [sp, #28]
 800e028:	9307      	strlt	r3, [sp, #28]
 800e02a:	bfb8      	it	lt
 800e02c:	9204      	strlt	r2, [sp, #16]
 800e02e:	7823      	ldrb	r3, [r4, #0]
 800e030:	2b2e      	cmp	r3, #46	; 0x2e
 800e032:	d10c      	bne.n	800e04e <_vfiprintf_r+0x176>
 800e034:	7863      	ldrb	r3, [r4, #1]
 800e036:	2b2a      	cmp	r3, #42	; 0x2a
 800e038:	d135      	bne.n	800e0a6 <_vfiprintf_r+0x1ce>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	1d1a      	adds	r2, r3, #4
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	9203      	str	r2, [sp, #12]
 800e042:	2b00      	cmp	r3, #0
 800e044:	bfb8      	it	lt
 800e046:	f04f 33ff 	movlt.w	r3, #4294967295
 800e04a:	3402      	adds	r4, #2
 800e04c:	9305      	str	r3, [sp, #20]
 800e04e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e134 <_vfiprintf_r+0x25c>
 800e052:	7821      	ldrb	r1, [r4, #0]
 800e054:	2203      	movs	r2, #3
 800e056:	4650      	mov	r0, sl
 800e058:	f7f2 f8ca 	bl	80001f0 <memchr>
 800e05c:	b140      	cbz	r0, 800e070 <_vfiprintf_r+0x198>
 800e05e:	2340      	movs	r3, #64	; 0x40
 800e060:	eba0 000a 	sub.w	r0, r0, sl
 800e064:	fa03 f000 	lsl.w	r0, r3, r0
 800e068:	9b04      	ldr	r3, [sp, #16]
 800e06a:	4303      	orrs	r3, r0
 800e06c:	3401      	adds	r4, #1
 800e06e:	9304      	str	r3, [sp, #16]
 800e070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e074:	482c      	ldr	r0, [pc, #176]	; (800e128 <_vfiprintf_r+0x250>)
 800e076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e07a:	2206      	movs	r2, #6
 800e07c:	f7f2 f8b8 	bl	80001f0 <memchr>
 800e080:	2800      	cmp	r0, #0
 800e082:	d03f      	beq.n	800e104 <_vfiprintf_r+0x22c>
 800e084:	4b29      	ldr	r3, [pc, #164]	; (800e12c <_vfiprintf_r+0x254>)
 800e086:	bb1b      	cbnz	r3, 800e0d0 <_vfiprintf_r+0x1f8>
 800e088:	9b03      	ldr	r3, [sp, #12]
 800e08a:	3307      	adds	r3, #7
 800e08c:	f023 0307 	bic.w	r3, r3, #7
 800e090:	3308      	adds	r3, #8
 800e092:	9303      	str	r3, [sp, #12]
 800e094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e096:	443b      	add	r3, r7
 800e098:	9309      	str	r3, [sp, #36]	; 0x24
 800e09a:	e767      	b.n	800df6c <_vfiprintf_r+0x94>
 800e09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	2001      	movs	r0, #1
 800e0a4:	e7a5      	b.n	800dff2 <_vfiprintf_r+0x11a>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	3401      	adds	r4, #1
 800e0aa:	9305      	str	r3, [sp, #20]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f04f 0c0a 	mov.w	ip, #10
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0b8:	3a30      	subs	r2, #48	; 0x30
 800e0ba:	2a09      	cmp	r2, #9
 800e0bc:	d903      	bls.n	800e0c6 <_vfiprintf_r+0x1ee>
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0c5      	beq.n	800e04e <_vfiprintf_r+0x176>
 800e0c2:	9105      	str	r1, [sp, #20]
 800e0c4:	e7c3      	b.n	800e04e <_vfiprintf_r+0x176>
 800e0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	e7f0      	b.n	800e0b2 <_vfiprintf_r+0x1da>
 800e0d0:	ab03      	add	r3, sp, #12
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	462a      	mov	r2, r5
 800e0d6:	4b16      	ldr	r3, [pc, #88]	; (800e130 <_vfiprintf_r+0x258>)
 800e0d8:	a904      	add	r1, sp, #16
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f7fc f84c 	bl	800a178 <_printf_float>
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	1c78      	adds	r0, r7, #1
 800e0e4:	d1d6      	bne.n	800e094 <_vfiprintf_r+0x1bc>
 800e0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0e8:	07d9      	lsls	r1, r3, #31
 800e0ea:	d405      	bmi.n	800e0f8 <_vfiprintf_r+0x220>
 800e0ec:	89ab      	ldrh	r3, [r5, #12]
 800e0ee:	059a      	lsls	r2, r3, #22
 800e0f0:	d402      	bmi.n	800e0f8 <_vfiprintf_r+0x220>
 800e0f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0f4:	f7fe ff68 	bl	800cfc8 <__retarget_lock_release_recursive>
 800e0f8:	89ab      	ldrh	r3, [r5, #12]
 800e0fa:	065b      	lsls	r3, r3, #25
 800e0fc:	f53f af12 	bmi.w	800df24 <_vfiprintf_r+0x4c>
 800e100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e102:	e711      	b.n	800df28 <_vfiprintf_r+0x50>
 800e104:	ab03      	add	r3, sp, #12
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	462a      	mov	r2, r5
 800e10a:	4b09      	ldr	r3, [pc, #36]	; (800e130 <_vfiprintf_r+0x258>)
 800e10c:	a904      	add	r1, sp, #16
 800e10e:	4630      	mov	r0, r6
 800e110:	f7fc fad6 	bl	800a6c0 <_printf_i>
 800e114:	e7e4      	b.n	800e0e0 <_vfiprintf_r+0x208>
 800e116:	bf00      	nop
 800e118:	0800f0fc 	.word	0x0800f0fc
 800e11c:	0800f11c 	.word	0x0800f11c
 800e120:	0800f0dc 	.word	0x0800f0dc
 800e124:	0800f31c 	.word	0x0800f31c
 800e128:	0800f326 	.word	0x0800f326
 800e12c:	0800a179 	.word	0x0800a179
 800e130:	0800deb3 	.word	0x0800deb3
 800e134:	0800f322 	.word	0x0800f322

0800e138 <nan>:
 800e138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e140 <nan+0x8>
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	00000000 	.word	0x00000000
 800e144:	7ff80000 	.word	0x7ff80000

0800e148 <_sbrk_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4d06      	ldr	r5, [pc, #24]	; (800e164 <_sbrk_r+0x1c>)
 800e14c:	2300      	movs	r3, #0
 800e14e:	4604      	mov	r4, r0
 800e150:	4608      	mov	r0, r1
 800e152:	602b      	str	r3, [r5, #0]
 800e154:	f7f4 f814 	bl	8002180 <_sbrk>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_sbrk_r+0x1a>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_sbrk_r+0x1a>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	20000e04 	.word	0x20000e04

0800e168 <__sread>:
 800e168:	b510      	push	{r4, lr}
 800e16a:	460c      	mov	r4, r1
 800e16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e170:	f000 f92e 	bl	800e3d0 <_read_r>
 800e174:	2800      	cmp	r0, #0
 800e176:	bfab      	itete	ge
 800e178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e17a:	89a3      	ldrhlt	r3, [r4, #12]
 800e17c:	181b      	addge	r3, r3, r0
 800e17e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e182:	bfac      	ite	ge
 800e184:	6563      	strge	r3, [r4, #84]	; 0x54
 800e186:	81a3      	strhlt	r3, [r4, #12]
 800e188:	bd10      	pop	{r4, pc}

0800e18a <__swrite>:
 800e18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e18e:	461f      	mov	r7, r3
 800e190:	898b      	ldrh	r3, [r1, #12]
 800e192:	05db      	lsls	r3, r3, #23
 800e194:	4605      	mov	r5, r0
 800e196:	460c      	mov	r4, r1
 800e198:	4616      	mov	r6, r2
 800e19a:	d505      	bpl.n	800e1a8 <__swrite+0x1e>
 800e19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f000 f8b6 	bl	800e314 <_lseek_r>
 800e1a8:	89a3      	ldrh	r3, [r4, #12]
 800e1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1b2:	81a3      	strh	r3, [r4, #12]
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1be:	f000 b835 	b.w	800e22c <_write_r>

0800e1c2 <__sseek>:
 800e1c2:	b510      	push	{r4, lr}
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ca:	f000 f8a3 	bl	800e314 <_lseek_r>
 800e1ce:	1c43      	adds	r3, r0, #1
 800e1d0:	89a3      	ldrh	r3, [r4, #12]
 800e1d2:	bf15      	itete	ne
 800e1d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e1de:	81a3      	strheq	r3, [r4, #12]
 800e1e0:	bf18      	it	ne
 800e1e2:	81a3      	strhne	r3, [r4, #12]
 800e1e4:	bd10      	pop	{r4, pc}

0800e1e6 <__sclose>:
 800e1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ea:	f000 b84f 	b.w	800e28c <_close_r>

0800e1ee <strncmp>:
 800e1ee:	b510      	push	{r4, lr}
 800e1f0:	b16a      	cbz	r2, 800e20e <strncmp+0x20>
 800e1f2:	3901      	subs	r1, #1
 800e1f4:	1884      	adds	r4, r0, r2
 800e1f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e1fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d103      	bne.n	800e20a <strncmp+0x1c>
 800e202:	42a0      	cmp	r0, r4
 800e204:	d001      	beq.n	800e20a <strncmp+0x1c>
 800e206:	2b00      	cmp	r3, #0
 800e208:	d1f5      	bne.n	800e1f6 <strncmp+0x8>
 800e20a:	1a98      	subs	r0, r3, r2
 800e20c:	bd10      	pop	{r4, pc}
 800e20e:	4610      	mov	r0, r2
 800e210:	e7fc      	b.n	800e20c <strncmp+0x1e>

0800e212 <__ascii_wctomb>:
 800e212:	b149      	cbz	r1, 800e228 <__ascii_wctomb+0x16>
 800e214:	2aff      	cmp	r2, #255	; 0xff
 800e216:	bf85      	ittet	hi
 800e218:	238a      	movhi	r3, #138	; 0x8a
 800e21a:	6003      	strhi	r3, [r0, #0]
 800e21c:	700a      	strbls	r2, [r1, #0]
 800e21e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e222:	bf98      	it	ls
 800e224:	2001      	movls	r0, #1
 800e226:	4770      	bx	lr
 800e228:	4608      	mov	r0, r1
 800e22a:	4770      	bx	lr

0800e22c <_write_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	4d07      	ldr	r5, [pc, #28]	; (800e24c <_write_r+0x20>)
 800e230:	4604      	mov	r4, r0
 800e232:	4608      	mov	r0, r1
 800e234:	4611      	mov	r1, r2
 800e236:	2200      	movs	r2, #0
 800e238:	602a      	str	r2, [r5, #0]
 800e23a:	461a      	mov	r2, r3
 800e23c:	f7f3 ff4f 	bl	80020de <_write>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d102      	bne.n	800e24a <_write_r+0x1e>
 800e244:	682b      	ldr	r3, [r5, #0]
 800e246:	b103      	cbz	r3, 800e24a <_write_r+0x1e>
 800e248:	6023      	str	r3, [r4, #0]
 800e24a:	bd38      	pop	{r3, r4, r5, pc}
 800e24c:	20000e04 	.word	0x20000e04

0800e250 <__assert_func>:
 800e250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e252:	4614      	mov	r4, r2
 800e254:	461a      	mov	r2, r3
 800e256:	4b09      	ldr	r3, [pc, #36]	; (800e27c <__assert_func+0x2c>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4605      	mov	r5, r0
 800e25c:	68d8      	ldr	r0, [r3, #12]
 800e25e:	b14c      	cbz	r4, 800e274 <__assert_func+0x24>
 800e260:	4b07      	ldr	r3, [pc, #28]	; (800e280 <__assert_func+0x30>)
 800e262:	9100      	str	r1, [sp, #0]
 800e264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e268:	4906      	ldr	r1, [pc, #24]	; (800e284 <__assert_func+0x34>)
 800e26a:	462b      	mov	r3, r5
 800e26c:	f000 f81e 	bl	800e2ac <fiprintf>
 800e270:	f000 f8c0 	bl	800e3f4 <abort>
 800e274:	4b04      	ldr	r3, [pc, #16]	; (800e288 <__assert_func+0x38>)
 800e276:	461c      	mov	r4, r3
 800e278:	e7f3      	b.n	800e262 <__assert_func+0x12>
 800e27a:	bf00      	nop
 800e27c:	20000014 	.word	0x20000014
 800e280:	0800f32d 	.word	0x0800f32d
 800e284:	0800f33a 	.word	0x0800f33a
 800e288:	0800f368 	.word	0x0800f368

0800e28c <_close_r>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	4d06      	ldr	r5, [pc, #24]	; (800e2a8 <_close_r+0x1c>)
 800e290:	2300      	movs	r3, #0
 800e292:	4604      	mov	r4, r0
 800e294:	4608      	mov	r0, r1
 800e296:	602b      	str	r3, [r5, #0]
 800e298:	f7f3 ff3d 	bl	8002116 <_close>
 800e29c:	1c43      	adds	r3, r0, #1
 800e29e:	d102      	bne.n	800e2a6 <_close_r+0x1a>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	b103      	cbz	r3, 800e2a6 <_close_r+0x1a>
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	bd38      	pop	{r3, r4, r5, pc}
 800e2a8:	20000e04 	.word	0x20000e04

0800e2ac <fiprintf>:
 800e2ac:	b40e      	push	{r1, r2, r3}
 800e2ae:	b503      	push	{r0, r1, lr}
 800e2b0:	4601      	mov	r1, r0
 800e2b2:	ab03      	add	r3, sp, #12
 800e2b4:	4805      	ldr	r0, [pc, #20]	; (800e2cc <fiprintf+0x20>)
 800e2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ba:	6800      	ldr	r0, [r0, #0]
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	f7ff fe0b 	bl	800ded8 <_vfiprintf_r>
 800e2c2:	b002      	add	sp, #8
 800e2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2c8:	b003      	add	sp, #12
 800e2ca:	4770      	bx	lr
 800e2cc:	20000014 	.word	0x20000014

0800e2d0 <_fstat_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4d07      	ldr	r5, [pc, #28]	; (800e2f0 <_fstat_r+0x20>)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	4608      	mov	r0, r1
 800e2da:	4611      	mov	r1, r2
 800e2dc:	602b      	str	r3, [r5, #0]
 800e2de:	f7f3 ff26 	bl	800212e <_fstat>
 800e2e2:	1c43      	adds	r3, r0, #1
 800e2e4:	d102      	bne.n	800e2ec <_fstat_r+0x1c>
 800e2e6:	682b      	ldr	r3, [r5, #0]
 800e2e8:	b103      	cbz	r3, 800e2ec <_fstat_r+0x1c>
 800e2ea:	6023      	str	r3, [r4, #0]
 800e2ec:	bd38      	pop	{r3, r4, r5, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20000e04 	.word	0x20000e04

0800e2f4 <_isatty_r>:
 800e2f4:	b538      	push	{r3, r4, r5, lr}
 800e2f6:	4d06      	ldr	r5, [pc, #24]	; (800e310 <_isatty_r+0x1c>)
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	4604      	mov	r4, r0
 800e2fc:	4608      	mov	r0, r1
 800e2fe:	602b      	str	r3, [r5, #0]
 800e300:	f7f3 ff25 	bl	800214e <_isatty>
 800e304:	1c43      	adds	r3, r0, #1
 800e306:	d102      	bne.n	800e30e <_isatty_r+0x1a>
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	b103      	cbz	r3, 800e30e <_isatty_r+0x1a>
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	bd38      	pop	{r3, r4, r5, pc}
 800e310:	20000e04 	.word	0x20000e04

0800e314 <_lseek_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	; (800e334 <_lseek_r+0x20>)
 800e318:	4604      	mov	r4, r0
 800e31a:	4608      	mov	r0, r1
 800e31c:	4611      	mov	r1, r2
 800e31e:	2200      	movs	r2, #0
 800e320:	602a      	str	r2, [r5, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	f7f3 ff1e 	bl	8002164 <_lseek>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d102      	bne.n	800e332 <_lseek_r+0x1e>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	b103      	cbz	r3, 800e332 <_lseek_r+0x1e>
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	bd38      	pop	{r3, r4, r5, pc}
 800e334:	20000e04 	.word	0x20000e04

0800e338 <memmove>:
 800e338:	4288      	cmp	r0, r1
 800e33a:	b510      	push	{r4, lr}
 800e33c:	eb01 0402 	add.w	r4, r1, r2
 800e340:	d902      	bls.n	800e348 <memmove+0x10>
 800e342:	4284      	cmp	r4, r0
 800e344:	4623      	mov	r3, r4
 800e346:	d807      	bhi.n	800e358 <memmove+0x20>
 800e348:	1e43      	subs	r3, r0, #1
 800e34a:	42a1      	cmp	r1, r4
 800e34c:	d008      	beq.n	800e360 <memmove+0x28>
 800e34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e352:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e356:	e7f8      	b.n	800e34a <memmove+0x12>
 800e358:	4402      	add	r2, r0
 800e35a:	4601      	mov	r1, r0
 800e35c:	428a      	cmp	r2, r1
 800e35e:	d100      	bne.n	800e362 <memmove+0x2a>
 800e360:	bd10      	pop	{r4, pc}
 800e362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e36a:	e7f7      	b.n	800e35c <memmove+0x24>

0800e36c <__malloc_lock>:
 800e36c:	4801      	ldr	r0, [pc, #4]	; (800e374 <__malloc_lock+0x8>)
 800e36e:	f7fe be2a 	b.w	800cfc6 <__retarget_lock_acquire_recursive>
 800e372:	bf00      	nop
 800e374:	20000dfc 	.word	0x20000dfc

0800e378 <__malloc_unlock>:
 800e378:	4801      	ldr	r0, [pc, #4]	; (800e380 <__malloc_unlock+0x8>)
 800e37a:	f7fe be25 	b.w	800cfc8 <__retarget_lock_release_recursive>
 800e37e:	bf00      	nop
 800e380:	20000dfc 	.word	0x20000dfc

0800e384 <_realloc_r>:
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	4607      	mov	r7, r0
 800e388:	4614      	mov	r4, r2
 800e38a:	460e      	mov	r6, r1
 800e38c:	b921      	cbnz	r1, 800e398 <_realloc_r+0x14>
 800e38e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e392:	4611      	mov	r1, r2
 800e394:	f7ff bbc0 	b.w	800db18 <_malloc_r>
 800e398:	b922      	cbnz	r2, 800e3a4 <_realloc_r+0x20>
 800e39a:	f7ff fb6d 	bl	800da78 <_free_r>
 800e39e:	4625      	mov	r5, r4
 800e3a0:	4628      	mov	r0, r5
 800e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a4:	f000 f82d 	bl	800e402 <_malloc_usable_size_r>
 800e3a8:	42a0      	cmp	r0, r4
 800e3aa:	d20f      	bcs.n	800e3cc <_realloc_r+0x48>
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f7ff fbb2 	bl	800db18 <_malloc_r>
 800e3b4:	4605      	mov	r5, r0
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	d0f2      	beq.n	800e3a0 <_realloc_r+0x1c>
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4622      	mov	r2, r4
 800e3be:	f7fe fe83 	bl	800d0c8 <memcpy>
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	f7ff fb57 	bl	800da78 <_free_r>
 800e3ca:	e7e9      	b.n	800e3a0 <_realloc_r+0x1c>
 800e3cc:	4635      	mov	r5, r6
 800e3ce:	e7e7      	b.n	800e3a0 <_realloc_r+0x1c>

0800e3d0 <_read_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4d07      	ldr	r5, [pc, #28]	; (800e3f0 <_read_r+0x20>)
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	4608      	mov	r0, r1
 800e3d8:	4611      	mov	r1, r2
 800e3da:	2200      	movs	r2, #0
 800e3dc:	602a      	str	r2, [r5, #0]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f7f3 fe60 	bl	80020a4 <_read>
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d102      	bne.n	800e3ee <_read_r+0x1e>
 800e3e8:	682b      	ldr	r3, [r5, #0]
 800e3ea:	b103      	cbz	r3, 800e3ee <_read_r+0x1e>
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	bd38      	pop	{r3, r4, r5, pc}
 800e3f0:	20000e04 	.word	0x20000e04

0800e3f4 <abort>:
 800e3f4:	b508      	push	{r3, lr}
 800e3f6:	2006      	movs	r0, #6
 800e3f8:	f000 f834 	bl	800e464 <raise>
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	f7f3 fe47 	bl	8002090 <_exit>

0800e402 <_malloc_usable_size_r>:
 800e402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e406:	1f18      	subs	r0, r3, #4
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bfbc      	itt	lt
 800e40c:	580b      	ldrlt	r3, [r1, r0]
 800e40e:	18c0      	addlt	r0, r0, r3
 800e410:	4770      	bx	lr

0800e412 <_raise_r>:
 800e412:	291f      	cmp	r1, #31
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	4604      	mov	r4, r0
 800e418:	460d      	mov	r5, r1
 800e41a:	d904      	bls.n	800e426 <_raise_r+0x14>
 800e41c:	2316      	movs	r3, #22
 800e41e:	6003      	str	r3, [r0, #0]
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	bd38      	pop	{r3, r4, r5, pc}
 800e426:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e428:	b112      	cbz	r2, 800e430 <_raise_r+0x1e>
 800e42a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e42e:	b94b      	cbnz	r3, 800e444 <_raise_r+0x32>
 800e430:	4620      	mov	r0, r4
 800e432:	f000 f831 	bl	800e498 <_getpid_r>
 800e436:	462a      	mov	r2, r5
 800e438:	4601      	mov	r1, r0
 800e43a:	4620      	mov	r0, r4
 800e43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e440:	f000 b818 	b.w	800e474 <_kill_r>
 800e444:	2b01      	cmp	r3, #1
 800e446:	d00a      	beq.n	800e45e <_raise_r+0x4c>
 800e448:	1c59      	adds	r1, r3, #1
 800e44a:	d103      	bne.n	800e454 <_raise_r+0x42>
 800e44c:	2316      	movs	r3, #22
 800e44e:	6003      	str	r3, [r0, #0]
 800e450:	2001      	movs	r0, #1
 800e452:	e7e7      	b.n	800e424 <_raise_r+0x12>
 800e454:	2400      	movs	r4, #0
 800e456:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e45a:	4628      	mov	r0, r5
 800e45c:	4798      	blx	r3
 800e45e:	2000      	movs	r0, #0
 800e460:	e7e0      	b.n	800e424 <_raise_r+0x12>
	...

0800e464 <raise>:
 800e464:	4b02      	ldr	r3, [pc, #8]	; (800e470 <raise+0xc>)
 800e466:	4601      	mov	r1, r0
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	f7ff bfd2 	b.w	800e412 <_raise_r>
 800e46e:	bf00      	nop
 800e470:	20000014 	.word	0x20000014

0800e474 <_kill_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4d07      	ldr	r5, [pc, #28]	; (800e494 <_kill_r+0x20>)
 800e478:	2300      	movs	r3, #0
 800e47a:	4604      	mov	r4, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	4611      	mov	r1, r2
 800e480:	602b      	str	r3, [r5, #0]
 800e482:	f7f3 fdf5 	bl	8002070 <_kill>
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	d102      	bne.n	800e490 <_kill_r+0x1c>
 800e48a:	682b      	ldr	r3, [r5, #0]
 800e48c:	b103      	cbz	r3, 800e490 <_kill_r+0x1c>
 800e48e:	6023      	str	r3, [r4, #0]
 800e490:	bd38      	pop	{r3, r4, r5, pc}
 800e492:	bf00      	nop
 800e494:	20000e04 	.word	0x20000e04

0800e498 <_getpid_r>:
 800e498:	f7f3 bde2 	b.w	8002060 <_getpid>

0800e49c <_init>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr

0800e4a8 <_fini>:
 800e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4aa:	bf00      	nop
 800e4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ae:	bc08      	pop	{r3}
 800e4b0:	469e      	mov	lr, r3
 800e4b2:	4770      	bx	lr
