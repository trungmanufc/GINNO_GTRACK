
G_TRACK_I2C_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009184  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  08009328  08009328  00019328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d4c  08009d4c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d54  08009d54  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001e8  08009f44  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08009f44  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc0f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  0002de27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  00030a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173eb  00000000  00000000  000313d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2b3  00000000  00000000  000487c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d44  00000000  00000000  00055a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de7ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f70  00000000  00000000  000de810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800930c 	.word	0x0800930c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800930c 	.word	0x0800930c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b9a4 	b.w	8000f58 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	468c      	mov	ip, r1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8083 	bne.w	8000daa <__udivmoddi4+0x116>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	4617      	mov	r7, r2
 8000ca8:	d947      	bls.n	8000d3a <__udivmoddi4+0xa6>
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	b142      	cbz	r2, 8000cc2 <__udivmoddi4+0x2e>
 8000cb0:	f1c2 0020 	rsb	r0, r2, #32
 8000cb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	4097      	lsls	r7, r2
 8000cbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cc6:	0c23      	lsrs	r3, r4, #16
 8000cc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000ccc:	fa1f fe87 	uxth.w	lr, r7
 8000cd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x60>
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ce6:	f080 8119 	bcs.w	8000f1c <__udivmoddi4+0x288>
 8000cea:	4299      	cmp	r1, r3
 8000cec:	f240 8116 	bls.w	8000f1c <__udivmoddi4+0x288>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	443b      	add	r3, r7
 8000cf4:	1a5b      	subs	r3, r3, r1
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x8c>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	f080 8105 	bcs.w	8000f20 <__udivmoddi4+0x28c>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f240 8102 	bls.w	8000f20 <__udivmoddi4+0x28c>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	443c      	add	r4, r7
 8000d20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d24:	eba4 040e 	sub.w	r4, r4, lr
 8000d28:	2600      	movs	r6, #0
 8000d2a:	b11d      	cbz	r5, 8000d34 <__udivmoddi4+0xa0>
 8000d2c:	40d4      	lsrs	r4, r2
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e9c5 4300 	strd	r4, r3, [r5]
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xaa>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f282 	clz	r2, r2
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d150      	bne.n	8000de8 <__udivmoddi4+0x154>
 8000d46:	1bcb      	subs	r3, r1, r7
 8000d48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	2601      	movs	r6, #1
 8000d52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d56:	0c21      	lsrs	r1, r4, #16
 8000d58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d60:	fb08 f30c 	mul.w	r3, r8, ip
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xe4>
 8000d68:	1879      	adds	r1, r7, r1
 8000d6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0xe2>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	f200 80e9 	bhi.w	8000f48 <__udivmoddi4+0x2b4>
 8000d76:	4684      	mov	ip, r0
 8000d78:	1ac9      	subs	r1, r1, r3
 8000d7a:	b2a3      	uxth	r3, r4
 8000d7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d88:	fb08 f800 	mul.w	r8, r8, r0
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x10c>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x10a>
 8000d98:	45a0      	cmp	r8, r4
 8000d9a:	f200 80d9 	bhi.w	8000f50 <__udivmoddi4+0x2bc>
 8000d9e:	4618      	mov	r0, r3
 8000da0:	eba4 0408 	sub.w	r4, r4, r8
 8000da4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da8:	e7bf      	b.n	8000d2a <__udivmoddi4+0x96>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x12e>
 8000dae:	2d00      	cmp	r5, #0
 8000db0:	f000 80b1 	beq.w	8000f16 <__udivmoddi4+0x282>
 8000db4:	2600      	movs	r6, #0
 8000db6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dba:	4630      	mov	r0, r6
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	fab3 f683 	clz	r6, r3
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d14a      	bne.n	8000e60 <__udivmoddi4+0x1cc>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d302      	bcc.n	8000dd4 <__udivmoddi4+0x140>
 8000dce:	4282      	cmp	r2, r0
 8000dd0:	f200 80b8 	bhi.w	8000f44 <__udivmoddi4+0x2b0>
 8000dd4:	1a84      	subs	r4, r0, r2
 8000dd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dda:	2001      	movs	r0, #1
 8000ddc:	468c      	mov	ip, r1
 8000dde:	2d00      	cmp	r5, #0
 8000de0:	d0a8      	beq.n	8000d34 <__udivmoddi4+0xa0>
 8000de2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f603 	lsr.w	r6, r0, r3
 8000df0:	4097      	lsls	r7, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfa:	40d9      	lsrs	r1, r3
 8000dfc:	4330      	orrs	r0, r6
 8000dfe:	0c03      	lsrs	r3, r0, #16
 8000e00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e04:	fa1f f887 	uxth.w	r8, r7
 8000e08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e10:	fb06 f108 	mul.w	r1, r6, r8
 8000e14:	4299      	cmp	r1, r3
 8000e16:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1a:	d909      	bls.n	8000e30 <__udivmoddi4+0x19c>
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e22:	f080 808d 	bcs.w	8000f40 <__udivmoddi4+0x2ac>
 8000e26:	4299      	cmp	r1, r3
 8000e28:	f240 808a 	bls.w	8000f40 <__udivmoddi4+0x2ac>
 8000e2c:	3e02      	subs	r6, #2
 8000e2e:	443b      	add	r3, r7
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b281      	uxth	r1, r0
 8000e34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb00 f308 	mul.w	r3, r0, r8
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x1c4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4e:	d273      	bcs.n	8000f38 <__udivmoddi4+0x2a4>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d971      	bls.n	8000f38 <__udivmoddi4+0x2a4>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4439      	add	r1, r7
 8000e58:	1acb      	subs	r3, r1, r3
 8000e5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e5e:	e778      	b.n	8000d52 <__udivmoddi4+0xbe>
 8000e60:	f1c6 0c20 	rsb	ip, r6, #32
 8000e64:	fa03 f406 	lsl.w	r4, r3, r6
 8000e68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e6c:	431c      	orrs	r4, r3
 8000e6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e72:	fa01 f306 	lsl.w	r3, r1, r6
 8000e76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	0c3b      	lsrs	r3, r7, #16
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fa1f f884 	uxth.w	r8, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e92:	fb09 fa08 	mul.w	sl, r9, r8
 8000e96:	458a      	cmp	sl, r1
 8000e98:	fa02 f206 	lsl.w	r2, r2, r6
 8000e9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x220>
 8000ea2:	1861      	adds	r1, r4, r1
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d248      	bcs.n	8000f3c <__udivmoddi4+0x2a8>
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	d946      	bls.n	8000f3c <__udivmoddi4+0x2a8>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	4421      	add	r1, r4
 8000eb4:	eba1 010a 	sub.w	r1, r1, sl
 8000eb8:	b2bf      	uxth	r7, r7
 8000eba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ebe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x24a>
 8000ece:	19e7      	adds	r7, r4, r7
 8000ed0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed4:	d22e      	bcs.n	8000f34 <__udivmoddi4+0x2a0>
 8000ed6:	45b8      	cmp	r8, r7
 8000ed8:	d92c      	bls.n	8000f34 <__udivmoddi4+0x2a0>
 8000eda:	3802      	subs	r0, #2
 8000edc:	4427      	add	r7, r4
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba7 0708 	sub.w	r7, r7, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454f      	cmp	r7, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	4649      	mov	r1, r9
 8000ef0:	d31a      	bcc.n	8000f28 <__udivmoddi4+0x294>
 8000ef2:	d017      	beq.n	8000f24 <__udivmoddi4+0x290>
 8000ef4:	b15d      	cbz	r5, 8000f0e <__udivmoddi4+0x27a>
 8000ef6:	ebb3 020e 	subs.w	r2, r3, lr
 8000efa:	eb67 0701 	sbc.w	r7, r7, r1
 8000efe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f02:	40f2      	lsrs	r2, r6
 8000f04:	ea4c 0202 	orr.w	r2, ip, r2
 8000f08:	40f7      	lsrs	r7, r6
 8000f0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f0e:	2600      	movs	r6, #0
 8000f10:	4631      	mov	r1, r6
 8000f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f16:	462e      	mov	r6, r5
 8000f18:	4628      	mov	r0, r5
 8000f1a:	e70b      	b.n	8000d34 <__udivmoddi4+0xa0>
 8000f1c:	4606      	mov	r6, r0
 8000f1e:	e6e9      	b.n	8000cf4 <__udivmoddi4+0x60>
 8000f20:	4618      	mov	r0, r3
 8000f22:	e6fd      	b.n	8000d20 <__udivmoddi4+0x8c>
 8000f24:	4543      	cmp	r3, r8
 8000f26:	d2e5      	bcs.n	8000ef4 <__udivmoddi4+0x260>
 8000f28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f30:	3801      	subs	r0, #1
 8000f32:	e7df      	b.n	8000ef4 <__udivmoddi4+0x260>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e7d2      	b.n	8000ede <__udivmoddi4+0x24a>
 8000f38:	4660      	mov	r0, ip
 8000f3a:	e78d      	b.n	8000e58 <__udivmoddi4+0x1c4>
 8000f3c:	4681      	mov	r9, r0
 8000f3e:	e7b9      	b.n	8000eb4 <__udivmoddi4+0x220>
 8000f40:	4666      	mov	r6, ip
 8000f42:	e775      	b.n	8000e30 <__udivmoddi4+0x19c>
 8000f44:	4630      	mov	r0, r6
 8000f46:	e74a      	b.n	8000dde <__udivmoddi4+0x14a>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	4439      	add	r1, r7
 8000f4e:	e713      	b.n	8000d78 <__udivmoddi4+0xe4>
 8000f50:	3802      	subs	r0, #2
 8000f52:	443c      	add	r4, r7
 8000f54:	e724      	b.n	8000da0 <__udivmoddi4+0x10c>
 8000f56:	bf00      	nop

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNU__C */

PUTCHAR_PROTOTYPE
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&uartLog, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <__io_putchar+0x20>)
 8000f6e:	f002 fc4a 	bl	8003806 <HAL_UART_Transmit>

	return ch;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200004ac 	.word	0x200004ac

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b0cc      	sub	sp, #304	; 0x130
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fc83 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f8ab 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 f98b 	bl	80012a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f92:	f000 f907 	bl	80011a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f96:	f000 f95d 	bl	8001254 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f9a:	f000 f931 	bl	8001200 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  u8Test = SC7A20_Init();
 8000f9e:	f004 f84f 	bl	8005040 <SC7A20_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <main+0x120>)
 8000fa8:	701a      	strb	r2, [r3, #0]
  //Quectel_Init();


  char cGpsOnly[100] = "$PMTK353,1,0,0,0,0*2B\n\r";
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <main+0x124>)
 8000fac:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8000fb0:	461d      	mov	r5, r3
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fba:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fbe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fc2:	224c      	movs	r2, #76	; 0x4c
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 f928 	bl	800521c <memset>
  HAL_UART_Transmit_IT(&uartGPS, (uint8_t*)cGpsOnly, strlen(cGpsOnly));
 8000fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f905 	bl	80001e0 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4831      	ldr	r0, [pc, #196]	; (80010a8 <main+0x128>)
 8000fe2:	f002 fca9 	bl	8003938 <HAL_UART_Transmit_IT>

  /*Enable GPS*/
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2110      	movs	r1, #16
 8000fea:	4830      	ldr	r0, [pc, #192]	; (80010ac <main+0x12c>)
 8000fec:	f000 ffb6 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&uartGPS, (uint8_t*)rxBuffer, (sizeof(rxBuffer) - 1));
 8000ff0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ff4:	492e      	ldr	r1, [pc, #184]	; (80010b0 <main+0x130>)
 8000ff6:	482c      	ldr	r0, [pc, #176]	; (80010a8 <main+0x128>)
 8000ff8:	f002 fce3 	bl	80039c2 <HAL_UART_Receive_IT>

  /* Print log to indicate that we initialize the program */
  printf("************GTRACK STM32 PROGRAM*************\r\n");
 8000ffc:	482d      	ldr	r0, [pc, #180]	; (80010b4 <main+0x134>)
 8000ffe:	f004 fe05 	bl	8005c0c <puts>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if ((HAL_GetTick() - u32CurrentTime) > TIME_5MINUTE)
 8001002:	f000 fcab 	bl	800195c <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <main+0x138>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001012:	4293      	cmp	r3, r2
 8001014:	d902      	bls.n	800101c <main+0x9c>
	  {
		  printf("!!!INMOTION DETECTION!!!\r\n");
 8001016:	4829      	ldr	r0, [pc, #164]	; (80010bc <main+0x13c>)
 8001018:	f004 fdf8 	bl	8005c0c <puts>
	  }

	  SC7A20_coordinate_read(&testXYZ);
 800101c:	4828      	ldr	r0, [pc, #160]	; (80010c0 <main+0x140>)
 800101e:	f004 f83d 	bl	800509c <SC7A20_coordinate_read>
	  u8ReceiveTest = SC7A20_read(SC7A20_ADDR_INT1_SOURCE);
 8001022:	2031      	movs	r0, #49	; 0x31
 8001024:	f004 f88e 	bl	8005144 <SC7A20_read>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <main+0x144>)
 800102e:	701a      	strb	r2, [r3, #0]
	  //HAL_UART_Receive(&uartLog, (uint8_t*)rxBuffer, (sizeof(rxBuffer) - 1), HAL_MAX_DELAY);

	  if(bIsMotion)
 8001030:	4b25      	ldr	r3, [pc, #148]	; (80010c8 <main+0x148>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <main+0xc4>
	  {
		  printf("!!!!MOTION DETECTED !!!!!\n\r");
 8001038:	4824      	ldr	r0, [pc, #144]	; (80010cc <main+0x14c>)
 800103a:	f004 fd61 	bl	8005b00 <iprintf>
		  bIsMotion = false;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <main+0x148>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	  printf("Acceleration Y: %d\n\r", testXYZ.u16YCoor);
	  printf("Acceleration Z: %d\n\r", testXYZ.u16ZCoor);
	  printf("**********END OF RECEPTION*********\n\n\n\r");
*/
	  /* Print LOG start the while loop */
	  printf("\r\n****START THE CONVERSION******\r\n\n");
 8001044:	4822      	ldr	r0, [pc, #136]	; (80010d0 <main+0x150>)
 8001046:	f004 fde1 	bl	8005c0c <puts>



	  char test_GNGGA[100] = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	3304      	adds	r3, #4
 8001052:	2260      	movs	r2, #96	; 0x60
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f004 f8e0 	bl	800521c <memset>
	  char test_GNRMC[100] = {0};
 800105c:	2300      	movs	r3, #0
 800105e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001060:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001064:	2260      	movs	r2, #96	; 0x60
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f004 f8d7 	bl	800521c <memset>

	   /* 2 strings to split the GNGAA from the NMEA sent from the Quectel L76 LB */
		printf("%s\r\n\n", rxBuffer);
 800106e:	4910      	ldr	r1, [pc, #64]	; (80010b0 <main+0x130>)
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <main+0x154>)
 8001072:	f004 fd45 	bl	8005b00 <iprintf>
		printf("%d\r\n\n", strlen(rxBuffer));
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <main+0x130>)
 8001078:	f7ff f8b2 	bl	80001e0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	4619      	mov	r1, r3
 8001080:	4815      	ldr	r0, [pc, #84]	; (80010d8 <main+0x158>)
 8001082:	f004 fd3d 	bl	8005b00 <iprintf>
		gps_read(testBuffer, &test_L76, test_GNGGA, test_GNRMC);
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <main+0x15c>)
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	4913      	ldr	r1, [pc, #76]	; (80010e0 <main+0x160>)
 8001092:	f003 fb11 	bl	80046b8 <gps_read>

		HAL_Delay(500);
 8001096:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800109a:	f000 fc6b 	bl	8001974 <HAL_Delay>
  {
 800109e:	e7b0      	b.n	8001002 <main+0x82>
 80010a0:	20000000 	.word	0x20000000
 80010a4:	08009684 	.word	0x08009684
 80010a8:	2000026c 	.word	0x2000026c
 80010ac:	40020000 	.word	0x40020000
 80010b0:	200002b8 	.word	0x200002b8
 80010b4:	080095e8 	.word	0x080095e8
 80010b8:	20000208 	.word	0x20000208
 80010bc:	08009618 	.word	0x08009618
 80010c0:	200002b0 	.word	0x200002b0
 80010c4:	20000204 	.word	0x20000204
 80010c8:	20000206 	.word	0x20000206
 80010cc:	08009634 	.word	0x08009634
 80010d0:	08009650 	.word	0x08009650
 80010d4:	08009674 	.word	0x08009674
 80010d8:	0800967c 	.word	0x0800967c
 80010dc:	20000004 	.word	0x20000004
 80010e0:	20000500 	.word	0x20000500

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	; 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f892 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <SystemClock_Config+0xb8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a22      	ldr	r2, [pc, #136]	; (800119c <SystemClock_Config+0xb8>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b20      	ldr	r3, [pc, #128]	; (800119c <SystemClock_Config+0xb8>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <SystemClock_Config+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <SystemClock_Config+0xbc>)
 8001132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <SystemClock_Config+0xbc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fec7 	bl	8002eec <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001164:	f000 f952 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f922 	bl	80033cc <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800118e:	f000 f93d 	bl	800140c <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3750      	adds	r7, #80	; 0x50
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <MX_I2C1_Init+0x54>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_I2C1_Init+0x58>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C1_Init+0x50>)
 80011e2:	f000 feed 	bl	8001fc0 <HAL_I2C_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ec:	f000 f90e 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000218 	.word	0x20000218
 80011f8:	40005400 	.word	0x40005400
 80011fc:	00061a80 	.word	0x00061a80

08001200 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  uartLog.Instance = USART1;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_USART1_UART_Init+0x50>)
 8001208:	601a      	str	r2, [r3, #0]
  uartLog.Init.BaudRate = 115200;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  uartLog.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  uartLog.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  uartLog.Init.Parity = UART_PARITY_NONE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  uartLog.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  uartLog.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  uartLog.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&uartLog) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_USART1_UART_Init+0x4c>)
 8001238:	f002 fa98 	bl	800376c <HAL_UART_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001242:	f000 f8e3 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200004ac 	.word	0x200004ac
 8001250:	40011000 	.word	0x40011000

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  uartGPS.Instance = USART2;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800125a:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <MX_USART2_UART_Init+0x50>)
 800125c:	601a      	str	r2, [r3, #0]
  uartGPS.Init.BaudRate = 9600;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001260:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001264:	605a      	str	r2, [r3, #4]
  uartGPS.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  uartGPS.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  uartGPS.Init.Parity = UART_PARITY_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  uartGPS.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  uartGPS.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  uartGPS.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&uartGPS) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART2_UART_Init+0x4c>)
 800128c:	f002 fa6e 	bl	800376c <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001296:	f000 f8b9 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000026c 	.word	0x2000026c
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <MX_GPIO_Init+0xec>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a33      	ldr	r2, [pc, #204]	; (8001394 <MX_GPIO_Init+0xec>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <MX_GPIO_Init+0xec>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <MX_GPIO_Init+0xec>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <MX_GPIO_Init+0xec>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <MX_GPIO_Init+0xec>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0xec>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a25      	ldr	r2, [pc, #148]	; (8001394 <MX_GPIO_Init+0xec>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <MX_GPIO_Init+0xec>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	4820      	ldr	r0, [pc, #128]	; (8001398 <MX_GPIO_Init+0xf0>)
 8001318:	f000 fe20 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001322:	481e      	ldr	r0, [pc, #120]	; (800139c <MX_GPIO_Init+0xf4>)
 8001324:	f000 fe1a 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001328:	2301      	movs	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_GPIO_Init+0xf8>)
 800132e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	4619      	mov	r1, r3
 800133a:	4817      	ldr	r0, [pc, #92]	; (8001398 <MX_GPIO_Init+0xf0>)
 800133c:	f000 fc72 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_4;
 8001340:	2390      	movs	r3, #144	; 0x90
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	4810      	ldr	r0, [pc, #64]	; (8001398 <MX_GPIO_Init+0xf0>)
 8001358:	f000 fc64 	bl	8001c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800135c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <MX_GPIO_Init+0xf4>)
 8001376:	f000 fc55 	bl	8001c24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2006      	movs	r0, #6
 8001380:	f000 fbf7 	bl	8001b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001384:	2006      	movs	r0, #6
 8001386:	f000 fc10 	bl	8001baa <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020800 	.word	0x40020800
 80013a0:	10310000 	.word	0x10310000

080013a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	u8StatusInt1++;
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_GPIO_EXTI_Callback+0x54>)
 80013b8:	701a      	strb	r2, [r3, #0]
	u32CurrentTime = HAL_GetTick();
 80013ba:	f000 facf 	bl	800195c <HAL_GetTick>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_GPIO_EXTI_Callback+0x58>)
 80013c2:	6013      	str	r3, [r2, #0]
	if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80013c4:	2101      	movs	r1, #1
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <HAL_GPIO_EXTI_Callback+0x5c>)
 80013c8:	f000 fdb0 	bl	8001f2c <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d103      	bne.n	80013da <HAL_GPIO_EXTI_Callback+0x36>
	{
		bIsMotion = true;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_GPIO_EXTI_Callback+0x60>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
		bIsInMotion = true;
	}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013d8:	e009      	b.n	80013ee <HAL_GPIO_EXTI_Callback+0x4a>
	else if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 80013da:	2101      	movs	r1, #1
 80013dc:	4808      	ldr	r0, [pc, #32]	; (8001400 <HAL_GPIO_EXTI_Callback+0x5c>)
 80013de:	f000 fda5 	bl	8001f2c <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <HAL_GPIO_EXTI_Callback+0x4a>
		bIsInMotion = true;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_GPIO_EXTI_Callback+0x64>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000205 	.word	0x20000205
 80013fc:	20000208 	.word	0x20000208
 8001400:	40020000 	.word	0x40020000
 8001404:	20000206 	.word	0x20000206
 8001408:	20000207 	.word	0x20000207

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_MspInit+0x4c>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x4c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	603b      	str	r3, [r7, #0]
 8001458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <HAL_I2C_MspInit+0x84>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12b      	bne.n	80014e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ba:	2304      	movs	r3, #4
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <HAL_I2C_MspInit+0x8c>)
 80014c6:	f000 fbad 	bl	8001c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_I2C_MspInit+0x88>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40005400 	.word	0x40005400
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <HAL_UART_MspInit+0xf8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12d      	bne.n	800157a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	4b35      	ldr	r3, [pc, #212]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a34      	ldr	r2, [pc, #208]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	61bb      	str	r3, [r7, #24]
 8001538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001556:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001568:	2307      	movs	r3, #7
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <HAL_UART_MspInit+0x100>)
 8001574:	f000 fb56 	bl	8001c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001578:	e038      	b.n	80015ec <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a20      	ldr	r2, [pc, #128]	; (8001600 <HAL_UART_MspInit+0x104>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d133      	bne.n	80015ec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_UART_MspInit+0xfc>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015bc:	230c      	movs	r3, #12
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015cc:	2307      	movs	r3, #7
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4809      	ldr	r0, [pc, #36]	; (80015fc <HAL_UART_MspInit+0x100>)
 80015d8:	f000 fb24 	bl	8001c24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2026      	movs	r0, #38	; 0x26
 80015e2:	f000 fac6 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015e6:	2026      	movs	r0, #38	; 0x26
 80015e8:	f000 fadf 	bl	8001baa <HAL_NVIC_EnableIRQ>
}
 80015ec:	bf00      	nop
 80015ee:	3730      	adds	r7, #48	; 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40011000 	.word	0x40011000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40004400 	.word	0x40004400

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <MemManage_Handler+0x4>

0800161e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <UsageFault_Handler+0x4>

0800162a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f96c 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001664:	2001      	movs	r0, #1
 8001666:	f000 fc93 	bl	8001f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&uartGPS);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART2_IRQHandler+0x10>)
 8001676:	f002 f9f9 	bl	8003a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000026c 	.word	0x2000026c

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_kill>:

int _kill(int pid, int sig)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800169e:	f003 fd93 	bl	80051c8 <__errno>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2216      	movs	r2, #22
 80016a6:	601a      	str	r2, [r3, #0]
	return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_exit>:

void _exit (int status)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffe7 	bl	8001694 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016c6:	e7fe      	b.n	80016c6 <_exit+0x12>

080016c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
	}

return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc1d 	bl	8000f5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf1      	blt.n	8001714 <_write+0x12>
	}
	return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	605a      	str	r2, [r3, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f003 fcf8 	bl	80051c8 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20010000 	.word	0x20010000
 8001804:	00000400 	.word	0x00000400
 8001808:	2000020c 	.word	0x2000020c
 800180c:	20000530 	.word	0x20000530

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <SystemInit+0x28>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <SystemInit+0x28>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SystemInit+0x28>)
 8001826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182a:	609a      	str	r2, [r3, #8]
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001842:	e003      	b.n	800184c <LoopCopyDataInit>

08001844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800184a:	3104      	adds	r1, #4

0800184c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001854:	d3f6      	bcc.n	8001844 <CopyDataInit>
  ldr  r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001858:	e002      	b.n	8001860 <LoopFillZerobss>

0800185a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800185a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800185c:	f842 3b04 	str.w	r3, [r2], #4

08001860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001864:	d3f9      	bcc.n	800185a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001866:	f7ff ffd3 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f003 fcb3 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff fb87 	bl	8000f80 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001878:	08009d5c 	.word	0x08009d5c
  ldr  r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001880:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8001884:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8001888:	2000052c 	.word	0x2000052c

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f94f 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fdaa 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f967 	bl	8001bc6 <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f92f 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000008 	.word	0x20000008
 800192c:	20000010 	.word	0x20000010
 8001930:	2000000c 	.word	0x2000000c

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000010 	.word	0x20000010
 8001958:	20000518 	.word	0x20000518

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000518 	.word	0x20000518

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000010 	.word	0x20000010

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff3e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff31 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00c      	b.n	8001c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e159      	b.n	8001ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8148 	bne.w	8001eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d00b      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c72:	2b11      	cmp	r3, #17
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0xfc>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	69b9      	ldr	r1, [r7, #24]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a2 	beq.w	8001eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a56      	ldr	r2, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <HAL_GPIO_Init+0x2e8>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_GPIO_Init+0x2f0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x202>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a48      	ldr	r2, [pc, #288]	; (8001f18 <HAL_GPIO_Init+0x2f4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x1fe>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_GPIO_Init+0x2f8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x1fa>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <HAL_GPIO_Init+0x2fc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x1f6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a45      	ldr	r2, [pc, #276]	; (8001f24 <HAL_GPIO_Init+0x300>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x1f2>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e008      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e004      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e002      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_GPIO_Init+0x204>
 8001e26:	2300      	movs	r3, #0
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	f002 0203 	and.w	r2, r2, #3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	4093      	lsls	r3, r2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e38:	4935      	ldr	r1, [pc, #212]	; (8001f10 <HAL_GPIO_Init+0x2ec>)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e6a:	4a2f      	ldr	r2, [pc, #188]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee8:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_GPIO_Init+0x304>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f67f aea2 	bls.w	8001c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e001      	b.n	8001f4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f9f8 	bl	80013a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e12b      	b.n	800222a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fa40 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2224      	movs	r2, #36	; 0x24
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0201 	bic.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002024:	f001 fb7a 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8002028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a81      	ldr	r2, [pc, #516]	; (8002234 <HAL_I2C_Init+0x274>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d807      	bhi.n	8002044 <HAL_I2C_Init+0x84>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a80      	ldr	r2, [pc, #512]	; (8002238 <HAL_I2C_Init+0x278>)
 8002038:	4293      	cmp	r3, r2
 800203a:	bf94      	ite	ls
 800203c:	2301      	movls	r3, #1
 800203e:	2300      	movhi	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	e006      	b.n	8002052 <HAL_I2C_Init+0x92>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a7d      	ldr	r2, [pc, #500]	; (800223c <HAL_I2C_Init+0x27c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0e7      	b.n	800222a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a78      	ldr	r2, [pc, #480]	; (8002240 <HAL_I2C_Init+0x280>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0c9b      	lsrs	r3, r3, #18
 8002064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	430a      	orrs	r2, r1
 8002078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <HAL_I2C_Init+0x274>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d802      	bhi.n	8002094 <HAL_I2C_Init+0xd4>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3301      	adds	r3, #1
 8002092:	e009      	b.n	80020a8 <HAL_I2C_Init+0xe8>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	4a69      	ldr	r2, [pc, #420]	; (8002244 <HAL_I2C_Init+0x284>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	3301      	adds	r3, #1
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	495c      	ldr	r1, [pc, #368]	; (8002234 <HAL_I2C_Init+0x274>)
 80020c4:	428b      	cmp	r3, r1
 80020c6:	d819      	bhi.n	80020fc <HAL_I2C_Init+0x13c>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e59      	subs	r1, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d6:	1c59      	adds	r1, r3, #1
 80020d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020dc:	400b      	ands	r3, r1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_I2C_Init+0x138>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1e59      	subs	r1, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	e051      	b.n	800219c <HAL_I2C_Init+0x1dc>
 80020f8:	2304      	movs	r3, #4
 80020fa:	e04f      	b.n	800219c <HAL_I2C_Init+0x1dc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d111      	bne.n	8002128 <HAL_I2C_Init+0x168>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1e58      	subs	r0, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e012      	b.n	800214e <HAL_I2C_Init+0x18e>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1e58      	subs	r0, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	0099      	lsls	r1, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	fbb0 f3f3 	udiv	r3, r0, r3
 800213e:	3301      	adds	r3, #1
 8002140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Init+0x196>
 8002152:	2301      	movs	r3, #1
 8002154:	e022      	b.n	800219c <HAL_I2C_Init+0x1dc>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <HAL_I2C_Init+0x1bc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1e58      	subs	r0, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	440b      	add	r3, r1
 800216c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800217a:	e00f      	b.n	800219c <HAL_I2C_Init+0x1dc>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	0099      	lsls	r1, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	6809      	ldr	r1, [r1, #0]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6911      	ldr	r1, [r2, #16]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68d2      	ldr	r2, [r2, #12]
 80021d6:	4311      	orrs	r1, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	000186a0 	.word	0x000186a0
 8002238:	001e847f 	.word	0x001e847f
 800223c:	003d08ff 	.word	0x003d08ff
 8002240:	431bde83 	.word	0x431bde83
 8002244:	10624dd3 	.word	0x10624dd3

08002248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	461a      	mov	r2, r3
 8002254:	460b      	mov	r3, r1
 8002256:	817b      	strh	r3, [r7, #10]
 8002258:	4613      	mov	r3, r2
 800225a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fb7e 	bl	800195c <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	f040 80e0 	bne.w	8002430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2319      	movs	r3, #25
 8002276:	2201      	movs	r2, #1
 8002278:	4970      	ldr	r1, [pc, #448]	; (800243c <HAL_I2C_Master_Transmit+0x1f4>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fc58 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	e0d3      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x50>
 8002294:	2302      	movs	r3, #2
 8002296:	e0cc      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d007      	beq.n	80022be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2221      	movs	r2, #33	; 0x21
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_I2C_Master_Transmit+0x1f8>)
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002300:	8979      	ldrh	r1, [r7, #10]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fac2 	bl	8002890 <I2C_MasterRequestWrite>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e08d      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800232c:	e066      	b.n	80023fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fcd2 	bl	8002cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b04      	cmp	r3, #4
 8002344:	d107      	bne.n	8002356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11b      	bne.n	80023d0 <HAL_I2C_Master_Transmit+0x188>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d017      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fcc2 	bl	8002d5e <I2C_WaitOnBTFFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00d      	beq.n	80023fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e01a      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d194      	bne.n	800232e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002430:	2302      	movs	r3, #2
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	00100002 	.word	0x00100002
 8002440:	ffff0000 	.word	0xffff0000

08002444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	817b      	strh	r3, [r7, #10]
 8002454:	4613      	mov	r3, r2
 8002456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7ff fa80 	bl	800195c <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b20      	cmp	r3, #32
 8002468:	f040 820b 	bne.w	8002882 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2319      	movs	r3, #25
 8002472:	2201      	movs	r2, #1
 8002474:	497c      	ldr	r1, [pc, #496]	; (8002668 <HAL_I2C_Master_Receive+0x224>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fb5a 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
 8002484:	e1fe      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Master_Receive+0x50>
 8002490:	2302      	movs	r3, #2
 8002492:	e1f7      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d007      	beq.n	80024ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2222      	movs	r2, #34	; 0x22
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2210      	movs	r2, #16
 80024d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a5c      	ldr	r2, [pc, #368]	; (800266c <HAL_I2C_Master_Receive+0x228>)
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fa46 	bl	8002994 <I2C_MasterRequestRead>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1b8      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d113      	bne.n	8002542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e18c      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11b      	bne.n	8002582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e16c      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002586:	2b02      	cmp	r3, #2
 8002588:	d11b      	bne.n	80025c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	e14c      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025e8:	e138      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	f200 80f1 	bhi.w	80027d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d123      	bne.n	8002644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fbed 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e139      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002642:	e10b      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b02      	cmp	r3, #2
 800264a:	d14e      	bne.n	80026ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	4906      	ldr	r1, [pc, #24]	; (8002670 <HAL_I2C_Master_Receive+0x22c>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fa6a 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e10e      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
 8002666:	bf00      	nop
 8002668:	00100002 	.word	0x00100002
 800266c:	ffff0000 	.word	0xffff0000
 8002670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026e8:	e0b8      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	2200      	movs	r2, #0
 80026f2:	4966      	ldr	r1, [pc, #408]	; (800288c <HAL_I2C_Master_Receive+0x448>)
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fa1b 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0bf      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	494f      	ldr	r1, [pc, #316]	; (800288c <HAL_I2C_Master_Receive+0x448>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f9ed 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e091      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d4:	e042      	b.n	800285c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fb00 	bl	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e04c      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d118      	bne.n	800285c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f aec2 	bne.w	80025ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	00010004 	.word	0x00010004

08002890 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af02      	add	r7, sp, #8
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d006      	beq.n	80028ba <I2C_MasterRequestWrite+0x2a>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d003      	beq.n	80028ba <I2C_MasterRequestWrite+0x2a>
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028b8:	d108      	bne.n	80028cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	e00b      	b.n	80028e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	2b12      	cmp	r3, #18
 80028d2:	d107      	bne.n	80028e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 f91d 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290a:	d103      	bne.n	8002914 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e035      	b.n	8002984 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002920:	d108      	bne.n	8002934 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	e01b      	b.n	800296c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	11db      	asrs	r3, r3, #7
 8002938:	b2db      	uxtb	r3, r3
 800293a:	f003 0306 	and.w	r3, r3, #6
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f063 030f 	orn	r3, r3, #15
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	490e      	ldr	r1, [pc, #56]	; (800298c <I2C_MasterRequestWrite+0xfc>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f943 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e010      	b.n	8002984 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <I2C_MasterRequestWrite+0x100>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 f933 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	00010008 	.word	0x00010008
 8002990:	00010002 	.word	0x00010002

08002994 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d006      	beq.n	80029ce <I2C_MasterRequestRead+0x3a>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d003      	beq.n	80029ce <I2C_MasterRequestRead+0x3a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00b      	b.n	80029f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d107      	bne.n	80029f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f893 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d103      	bne.n	8002a28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e079      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a34:	d108      	bne.n	8002a48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e05f      	b.n	8002b08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	11db      	asrs	r3, r3, #7
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f063 030f 	orn	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4930      	ldr	r1, [pc, #192]	; (8002b28 <I2C_MasterRequestRead+0x194>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f8b9 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e054      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4929      	ldr	r1, [pc, #164]	; (8002b2c <I2C_MasterRequestRead+0x198>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f8a9 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e044      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f831 	bl	8002b30 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d103      	bne.n	8002aec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e017      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	11db      	asrs	r3, r3, #7
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0306 	and.w	r3, r3, #6
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f063 030e 	orn	r3, r3, #14
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <I2C_MasterRequestRead+0x198>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f865 	bl	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010008 	.word	0x00010008
 8002b2c:	00010002 	.word	0x00010002

08002b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b40:	e025      	b.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe ff07 	bl	800195c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e023      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10d      	bne.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	e00c      	b.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d0b6      	beq.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	60f8      	str	r0, [r7, #12]
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bec:	e051      	b.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfc:	d123      	bne.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e046      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d021      	beq.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fe85 	bl	800195c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e020      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	0c1b      	lsrs	r3, r3, #16
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10c      	bne.n	8002cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e00b      	b.n	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d18d      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce8:	e02d      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8ce 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e02d      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d021      	beq.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7fe fe2b 	bl	800195c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d116      	bne.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e007      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d1ca      	bne.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d6a:	e02d      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f88d 	bl	8002e8c <I2C_IsAcknowledgeFailed>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e02d      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d82:	d021      	beq.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7fe fdea 	bl	800195c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d302      	bcc.n	8002d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e007      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d1ca      	bne.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dec:	e042      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d119      	bne.n	8002e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0210 	mvn.w	r2, #16
 8002e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e029      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe fd94 	bl	800195c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d1b5      	bne.n	8002dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d11b      	bne.n	8002edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e25b      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d075      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0a:	4ba3      	ldr	r3, [pc, #652]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d00c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d112      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b9d      	ldr	r3, [pc, #628]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	4b99      	ldr	r3, [pc, #612]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05b      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x108>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d157      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e236      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x74>
 8002f52:	4b91      	ldr	r3, [pc, #580]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a90      	ldr	r2, [pc, #576]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xb0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x98>
 8002f6a:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a8a      	ldr	r2, [pc, #552]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a87      	ldr	r2, [pc, #540]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xb0>
 8002f84:	4b84      	ldr	r3, [pc, #528]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a83      	ldr	r2, [pc, #524]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b81      	ldr	r3, [pc, #516]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a80      	ldr	r2, [pc, #512]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fcda 	bl	800195c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe fcd6 	bl	800195c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1fb      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xc0>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fcc6 	bl	800195c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fcc2 	bl	800195c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1e7      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xe8>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003002:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b62      	ldr	r3, [pc, #392]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d11c      	bne.n	8003054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	4b5c      	ldr	r3, [pc, #368]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x152>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1bb      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4952      	ldr	r1, [pc, #328]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	e03a      	b.n	80030ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	4b4f      	ldr	r3, [pc, #316]	; (800319c <HAL_RCC_OscConfig+0x2b0>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fe fc7b 	bl	800195c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306a:	f7fe fc77 	bl	800195c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e19c      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307c:	4b46      	ldr	r3, [pc, #280]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4940      	ldr	r1, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
 800309c:	e015      	b.n	80030ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_OscConfig+0x2b0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fc5a 	bl	800195c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ac:	f7fe fc56 	bl	800195c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e17b      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	4b36      	ldr	r3, [pc, #216]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d030      	beq.n	8003138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_RCC_OscConfig+0x2b4>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fc3a 	bl	800195c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ec:	f7fe fc36 	bl	800195c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e15b      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x200>
 800310a:	e015      	b.n	8003138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <HAL_RCC_OscConfig+0x2b4>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe fc23 	bl	800195c <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311a:	f7fe fc1f 	bl	800195c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e144      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a0 	beq.w	8003286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_RCC_OscConfig+0x2ac>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317e:	2b00      	cmp	r3, #0
 8003180:	d121      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_RCC_OscConfig+0x2b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <HAL_RCC_OscConfig+0x2b8>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318e:	f7fe fbe5 	bl	800195c <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	e011      	b.n	80031ba <HAL_RCC_OscConfig+0x2ce>
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	42470000 	.word	0x42470000
 80031a0:	42470e80 	.word	0x42470e80
 80031a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a8:	f7fe fbd8 	bl	800195c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0fd      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <HAL_RCC_OscConfig+0x4d4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d106      	bne.n	80031dc <HAL_RCC_OscConfig+0x2f0>
 80031ce:	4b7d      	ldr	r3, [pc, #500]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a7c      	ldr	r2, [pc, #496]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x32a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x312>
 80031e4:	4b77      	ldr	r3, [pc, #476]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a76      	ldr	r2, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	4b74      	ldr	r3, [pc, #464]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	4a73      	ldr	r2, [pc, #460]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x32a>
 80031fe:	4b71      	ldr	r3, [pc, #452]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a70      	ldr	r2, [pc, #448]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
 800320a:	4b6e      	ldr	r3, [pc, #440]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	4a6d      	ldr	r2, [pc, #436]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fb9d 	bl	800195c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fb99 	bl	800195c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0bc      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b61      	ldr	r3, [pc, #388]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x33a>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fb87 	bl	800195c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fb83 	bl	800195c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0a6      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a51      	ldr	r2, [pc, #324]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8092 	beq.w	80033b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003290:	4b4c      	ldr	r3, [pc, #304]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d05c      	beq.n	8003356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d141      	bne.n	8003328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b48      	ldr	r3, [pc, #288]	; (80033c8 <HAL_RCC_OscConfig+0x4dc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe fb57 	bl	800195c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe fb53 	bl	800195c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e078      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c4:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	4933      	ldr	r1, [pc, #204]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fa:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_RCC_OscConfig+0x4dc>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fb2c 	bl	800195c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fb28 	bl	800195c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e04d      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x41c>
 8003326:	e045      	b.n	80033b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003328:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x4dc>)
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fe fb15 	bl	800195c <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fb11 	bl	800195c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e036      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f0      	bne.n	8003336 <HAL_RCC_OscConfig+0x44a>
 8003354:	e02e      	b.n	80033b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e029      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_RCC_OscConfig+0x4d8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	429a      	cmp	r2, r3
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d115      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800338a:	4013      	ands	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003390:	4293      	cmp	r3, r2
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40007000 	.word	0x40007000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	42470060 	.word	0x42470060

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0cc      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d90c      	bls.n	8003408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e067      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4934      	ldr	r1, [pc, #208]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fa4e 	bl	800195c <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe fa4a 	bl	800195c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20c      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe f9ae 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	08009888 	.word	0x08009888
 8003590:	20000008 	.word	0x20000008
 8003594:	2000000c 	.word	0x2000000c

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800359e:	2100      	movs	r1, #0
 80035a0:	6079      	str	r1, [r7, #4]
 80035a2:	2100      	movs	r1, #0
 80035a4:	60f9      	str	r1, [r7, #12]
 80035a6:	2100      	movs	r1, #0
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035aa:	2100      	movs	r1, #0
 80035ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ae:	4952      	ldr	r1, [pc, #328]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b0:	6889      	ldr	r1, [r1, #8]
 80035b2:	f001 010c 	and.w	r1, r1, #12
 80035b6:	2908      	cmp	r1, #8
 80035b8:	d00d      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80035ba:	2908      	cmp	r1, #8
 80035bc:	f200 8094 	bhi.w	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d002      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x32>
 80035c4:	2904      	cmp	r1, #4
 80035c6:	d003      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x38>
 80035c8:	e08e      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_GetSysClockFreq+0x164>)
 80035cc:	60bb      	str	r3, [r7, #8]
       break;
 80035ce:	e08e      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_GetSysClockFreq+0x168>)
 80035d2:	60bb      	str	r3, [r7, #8]
      break;
 80035d4:	e08b      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d6:	4948      	ldr	r1, [pc, #288]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035d8:	6849      	ldr	r1, [r1, #4]
 80035da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e0:	4945      	ldr	r1, [pc, #276]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035e2:	6849      	ldr	r1, [r1, #4]
 80035e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d024      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ec:	4942      	ldr	r1, [pc, #264]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035ee:	6849      	ldr	r1, [r1, #4]
 80035f0:	0989      	lsrs	r1, r1, #6
 80035f2:	4608      	mov	r0, r1
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035fc:	f04f 0500 	mov.w	r5, #0
 8003600:	ea00 0204 	and.w	r2, r0, r4
 8003604:	ea01 0305 	and.w	r3, r1, r5
 8003608:	493d      	ldr	r1, [pc, #244]	; (8003700 <HAL_RCC_GetSysClockFreq+0x168>)
 800360a:	fb01 f003 	mul.w	r0, r1, r3
 800360e:	2100      	movs	r1, #0
 8003610:	fb01 f102 	mul.w	r1, r1, r2
 8003614:	1844      	adds	r4, r0, r1
 8003616:	493a      	ldr	r1, [pc, #232]	; (8003700 <HAL_RCC_GetSysClockFreq+0x168>)
 8003618:	fba2 0101 	umull	r0, r1, r2, r1
 800361c:	1863      	adds	r3, r4, r1
 800361e:	4619      	mov	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f7fd fae6 	bl	8000bf8 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e04a      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	461a      	mov	r2, r3
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	ea02 0400 	and.w	r4, r2, r0
 800364e:	ea03 0501 	and.w	r5, r3, r1
 8003652:	4620      	mov	r0, r4
 8003654:	4629      	mov	r1, r5
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	014b      	lsls	r3, r1, #5
 8003660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003664:	0142      	lsls	r2, r0, #5
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	1b00      	subs	r0, r0, r4
 800366c:	eb61 0105 	sbc.w	r1, r1, r5
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	018b      	lsls	r3, r1, #6
 800367a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800367e:	0182      	lsls	r2, r0, #6
 8003680:	1a12      	subs	r2, r2, r0
 8003682:	eb63 0301 	sbc.w	r3, r3, r1
 8003686:	f04f 0000 	mov.w	r0, #0
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	00d9      	lsls	r1, r3, #3
 8003690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003694:	00d0      	lsls	r0, r2, #3
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	1912      	adds	r2, r2, r4
 800369c:	eb45 0303 	adc.w	r3, r5, r3
 80036a0:	f04f 0000 	mov.w	r0, #0
 80036a4:	f04f 0100 	mov.w	r1, #0
 80036a8:	0299      	lsls	r1, r3, #10
 80036aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036ae:	0290      	lsls	r0, r2, #10
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	f7fd fa9a 	bl	8000bf8 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4613      	mov	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	60bb      	str	r3, [r7, #8]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCC_GetSysClockFreq+0x164>)
 80036ea:	60bb      	str	r3, [r7, #8]
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	68bb      	ldr	r3, [r7, #8]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	017d7840 	.word	0x017d7840

08003704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000008 	.word	0x20000008

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	08009898 	.word	0x08009898

08003744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003748:	f7ff ffdc 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0b5b      	lsrs	r3, r3, #13
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	08009898 	.word	0x08009898

0800376c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e03f      	b.n	80037fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd feb2 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fbe5 	bl	8003f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b088      	sub	sp, #32
 800380a:	af02      	add	r7, sp, #8
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	f040 8083 	bne.w	800392e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_UART_Transmit+0x2e>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e07b      	b.n	8003930 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Transmit+0x40>
 8003842:	2302      	movs	r3, #2
 8003844:	e074      	b.n	8003930 <HAL_UART_Transmit+0x12a>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800385c:	f7fe f87e 	bl	800195c <HAL_GetTick>
 8003860:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	88fa      	ldrh	r2, [r7, #6]
 8003866:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003876:	e042      	b.n	80038fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d122      	bne.n	80038d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2200      	movs	r2, #0
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fa04 	bl	8003ca8 <UART_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e042      	b.n	8003930 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3302      	adds	r3, #2
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	e017      	b.n	80038fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e013      	b.n	80038fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2180      	movs	r1, #128	; 0x80
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f9e1 	bl	8003ca8 <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e01f      	b.n	8003930 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	60ba      	str	r2, [r7, #8]
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1b7      	bne.n	8003878 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f9c8 	bl	8003ca8 <UART_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e006      	b.n	8003930 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d130      	bne.n	80039b4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Transmit_IT+0x26>
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e029      	b.n	80039b6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_UART_Transmit_IT+0x38>
 800396c:	2302      	movs	r3, #2
 800396e:	e022      	b.n	80039b6 <HAL_UART_Transmit_IT+0x7e>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2221      	movs	r2, #33	; 0x21
 8003994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d140      	bne.n	8003a5e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_UART_Receive_IT+0x26>
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e039      	b.n	8003a60 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Receive_IT+0x38>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e032      	b.n	8003a60 <HAL_UART_Receive_IT+0x9e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2222      	movs	r2, #34	; 0x22
 8003a1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a38:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0220 	orr.w	r2, r2, #32
 8003a58:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_UART_IRQHandler+0x52>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f9e0 	bl	8003e7c <UART_Receive_IT>
      return;
 8003abc:	e0d0      	b.n	8003c60 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80b0 	beq.w	8003c26 <HAL_UART_IRQHandler+0x1ba>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_UART_IRQHandler+0x70>
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80a5 	beq.w	8003c26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_UART_IRQHandler+0x90>
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_UART_IRQHandler+0xb0>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	f043 0202 	orr.w	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_UART_IRQHandler+0xd0>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00f      	beq.n	8003b66 <HAL_UART_IRQHandler+0xfa>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_UART_IRQHandler+0xee>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	f043 0208 	orr.w	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d077      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_UART_IRQHandler+0x11c>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f003 0320 	and.w	r3, r3, #32
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f97a 	bl	8003e7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x144>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d031      	beq.n	8003c14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8c3 	bl	8003d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d123      	bne.n	8003c0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <HAL_UART_IRQHandler+0x1fc>)
 8003be2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fff8 	bl	8001bde <HAL_DMA_Abort_IT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d016      	beq.n	8003c22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c02:	e00e      	b.n	8003c22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f845 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0a:	e00a      	b.n	8003c22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f841 	bl	8003c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c12:	e006      	b.n	8003c22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f83d 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c20:	e01d      	b.n	8003c5e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c22:	bf00      	nop
    return;
 8003c24:	e01b      	b.n	8003c5e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8b0 	bl	8003da0 <UART_Transmit_IT>
    return;
 8003c40:	e00e      	b.n	8003c60 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_UART_IRQHandler+0x1f4>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8f8 	bl	8003e4c <UART_EndTransmit_IT>
    return;
 8003c5c:	e000      	b.n	8003c60 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003c5e:	bf00      	nop
  }
}
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	08003d79 	.word	0x08003d79

08003c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	e02c      	b.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d028      	beq.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cc8:	f7fd fe48 	bl	800195c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d21d      	bcs.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ce6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e00f      	b.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d0c3      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff7e 	bl	8003c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b21      	cmp	r3, #33	; 0x21
 8003db2:	d144      	bne.n	8003e3e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d11a      	bne.n	8003df4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dd2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]
 8003de6:	e00e      	b.n	8003e06 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	621a      	str	r2, [r3, #32]
 8003df2:	e008      	b.n	8003e06 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	1c59      	adds	r1, r3, #1
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6211      	str	r1, [r2, #32]
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4619      	mov	r1, r3
 8003e14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e000      	b.n	8003e40 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fefd 	bl	8003c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b22      	cmp	r3, #34	; 0x22
 8003e8e:	d171      	bne.n	8003f74 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d123      	bne.n	8003ee2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10e      	bne.n	8003ec6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec4:	e029      	b.n	8003f1a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee0:	e01b      	b.n	8003f1a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10a      	bne.n	8003f00 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6858      	ldr	r0, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	1c59      	adds	r1, r3, #1
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6291      	str	r1, [r2, #40]	; 0x28
 8003efa:	b2c2      	uxtb	r2, r0
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e00c      	b.n	8003f1a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	1c58      	adds	r0, r3, #1
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	6288      	str	r0, [r1, #40]	; 0x28
 8003f12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4619      	mov	r1, r3
 8003f28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d120      	bne.n	8003f70 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0220 	bic.w	r2, r2, #32
 8003f3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0201 	bic.w	r2, r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fe8a 	bl	8003c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e002      	b.n	8003f76 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	b0bd      	sub	sp, #244	; 0xf4
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9c:	68d9      	ldr	r1, [r3, #12]
 8003f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	ea40 0301 	orr.w	r3, r0, r1
 8003fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	6999      	ldr	r1, [r3, #24]
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	ea40 0301 	orr.w	r3, r0, r1
 8004006:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004012:	f040 81a5 	bne.w	8004360 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4bcd      	ldr	r3, [pc, #820]	; (8004354 <UART_SetConfig+0x3d4>)
 800401e:	429a      	cmp	r2, r3
 8004020:	d006      	beq.n	8004030 <UART_SetConfig+0xb0>
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4bcb      	ldr	r3, [pc, #812]	; (8004358 <UART_SetConfig+0x3d8>)
 800402a:	429a      	cmp	r2, r3
 800402c:	f040 80cb 	bne.w	80041c6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7ff fb88 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 8004034:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800403c:	461c      	mov	r4, r3
 800403e:	f04f 0500 	mov.w	r5, #0
 8004042:	4622      	mov	r2, r4
 8004044:	462b      	mov	r3, r5
 8004046:	1891      	adds	r1, r2, r2
 8004048:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800404c:	415b      	adcs	r3, r3
 800404e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004052:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004056:	1912      	adds	r2, r2, r4
 8004058:	eb45 0303 	adc.w	r3, r5, r3
 800405c:	f04f 0000 	mov.w	r0, #0
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	00d9      	lsls	r1, r3, #3
 8004066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800406a:	00d0      	lsls	r0, r2, #3
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	1911      	adds	r1, r2, r4
 8004072:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004076:	416b      	adcs	r3, r5
 8004078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800407c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	461a      	mov	r2, r3
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	1891      	adds	r1, r2, r2
 800408a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800408e:	415b      	adcs	r3, r3
 8004090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004094:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004098:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800409c:	f7fc fdac 	bl	8000bf8 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4bad      	ldr	r3, [pc, #692]	; (800435c <UART_SetConfig+0x3dc>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011e      	lsls	r6, r3, #4
 80040ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040b2:	461c      	mov	r4, r3
 80040b4:	f04f 0500 	mov.w	r5, #0
 80040b8:	4622      	mov	r2, r4
 80040ba:	462b      	mov	r3, r5
 80040bc:	1891      	adds	r1, r2, r2
 80040be:	67b9      	str	r1, [r7, #120]	; 0x78
 80040c0:	415b      	adcs	r3, r3
 80040c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040c4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80040c8:	1912      	adds	r2, r2, r4
 80040ca:	eb45 0303 	adc.w	r3, r5, r3
 80040ce:	f04f 0000 	mov.w	r0, #0
 80040d2:	f04f 0100 	mov.w	r1, #0
 80040d6:	00d9      	lsls	r1, r3, #3
 80040d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040dc:	00d0      	lsls	r0, r2, #3
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	1911      	adds	r1, r2, r4
 80040e4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80040e8:	416b      	adcs	r3, r5
 80040ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	461a      	mov	r2, r3
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	1891      	adds	r1, r2, r2
 80040fc:	6739      	str	r1, [r7, #112]	; 0x70
 80040fe:	415b      	adcs	r3, r3
 8004100:	677b      	str	r3, [r7, #116]	; 0x74
 8004102:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004106:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800410a:	f7fc fd75 	bl	8000bf8 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4b92      	ldr	r3, [pc, #584]	; (800435c <UART_SetConfig+0x3dc>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a8d      	ldr	r2, [pc, #564]	; (800435c <UART_SetConfig+0x3dc>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004134:	441e      	add	r6, r3
 8004136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800413a:	4618      	mov	r0, r3
 800413c:	f04f 0100 	mov.w	r1, #0
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	1894      	adds	r4, r2, r2
 8004146:	66bc      	str	r4, [r7, #104]	; 0x68
 8004148:	415b      	adcs	r3, r3
 800414a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800414c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004150:	1812      	adds	r2, r2, r0
 8004152:	eb41 0303 	adc.w	r3, r1, r3
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	f04f 0500 	mov.w	r5, #0
 800415e:	00dd      	lsls	r5, r3, #3
 8004160:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004164:	00d4      	lsls	r4, r2, #3
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	1814      	adds	r4, r2, r0
 800416c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004170:	414b      	adcs	r3, r1
 8004172:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	1891      	adds	r1, r2, r2
 8004184:	6639      	str	r1, [r7, #96]	; 0x60
 8004186:	415b      	adcs	r3, r3
 8004188:	667b      	str	r3, [r7, #100]	; 0x64
 800418a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800418e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004192:	f7fc fd31 	bl	8000bf8 <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4b70      	ldr	r3, [pc, #448]	; (800435c <UART_SetConfig+0x3dc>)
 800419c:	fba3 1302 	umull	r1, r3, r3, r2
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	2164      	movs	r1, #100	; 0x64
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	3332      	adds	r3, #50	; 0x32
 80041ae:	4a6b      	ldr	r2, [pc, #428]	; (800435c <UART_SetConfig+0x3dc>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	f003 0207 	and.w	r2, r3, #7
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4432      	add	r2, r6
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e26d      	b.n	80046a2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041c6:	f7ff faa9 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 80041ca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041d2:	461c      	mov	r4, r3
 80041d4:	f04f 0500 	mov.w	r5, #0
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	65b9      	str	r1, [r7, #88]	; 0x58
 80041e0:	415b      	adcs	r3, r3
 80041e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041e8:	1912      	adds	r2, r2, r4
 80041ea:	eb45 0303 	adc.w	r3, r5, r3
 80041ee:	f04f 0000 	mov.w	r0, #0
 80041f2:	f04f 0100 	mov.w	r1, #0
 80041f6:	00d9      	lsls	r1, r3, #3
 80041f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041fc:	00d0      	lsls	r0, r2, #3
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	1911      	adds	r1, r2, r4
 8004204:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004208:	416b      	adcs	r3, r5
 800420a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	461a      	mov	r2, r3
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	1891      	adds	r1, r2, r2
 800421c:	6539      	str	r1, [r7, #80]	; 0x50
 800421e:	415b      	adcs	r3, r3
 8004220:	657b      	str	r3, [r7, #84]	; 0x54
 8004222:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004226:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800422a:	f7fc fce5 	bl	8000bf8 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <UART_SetConfig+0x3dc>)
 8004234:	fba3 2302 	umull	r2, r3, r3, r2
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	011e      	lsls	r6, r3, #4
 800423c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004240:	461c      	mov	r4, r3
 8004242:	f04f 0500 	mov.w	r5, #0
 8004246:	4622      	mov	r2, r4
 8004248:	462b      	mov	r3, r5
 800424a:	1891      	adds	r1, r2, r2
 800424c:	64b9      	str	r1, [r7, #72]	; 0x48
 800424e:	415b      	adcs	r3, r3
 8004250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004252:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004256:	1912      	adds	r2, r2, r4
 8004258:	eb45 0303 	adc.w	r3, r5, r3
 800425c:	f04f 0000 	mov.w	r0, #0
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	00d9      	lsls	r1, r3, #3
 8004266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800426a:	00d0      	lsls	r0, r2, #3
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	1911      	adds	r1, r2, r4
 8004272:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004276:	416b      	adcs	r3, r5
 8004278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	1891      	adds	r1, r2, r2
 800428a:	6439      	str	r1, [r7, #64]	; 0x40
 800428c:	415b      	adcs	r3, r3
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
 8004290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004294:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004298:	f7fc fcae 	bl	8000bf8 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4b2e      	ldr	r3, [pc, #184]	; (800435c <UART_SetConfig+0x3dc>)
 80042a2:	fba3 1302 	umull	r1, r3, r3, r2
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2164      	movs	r1, #100	; 0x64
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	3332      	adds	r3, #50	; 0x32
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <UART_SetConfig+0x3dc>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042c2:	441e      	add	r6, r3
 80042c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042c8:	4618      	mov	r0, r3
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	1894      	adds	r4, r2, r2
 80042d4:	63bc      	str	r4, [r7, #56]	; 0x38
 80042d6:	415b      	adcs	r3, r3
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042de:	1812      	adds	r2, r2, r0
 80042e0:	eb41 0303 	adc.w	r3, r1, r3
 80042e4:	f04f 0400 	mov.w	r4, #0
 80042e8:	f04f 0500 	mov.w	r5, #0
 80042ec:	00dd      	lsls	r5, r3, #3
 80042ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042f2:	00d4      	lsls	r4, r2, #3
 80042f4:	4622      	mov	r2, r4
 80042f6:	462b      	mov	r3, r5
 80042f8:	1814      	adds	r4, r2, r0
 80042fa:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80042fe:	414b      	adcs	r3, r1
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	461a      	mov	r2, r3
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	1891      	adds	r1, r2, r2
 8004312:	6339      	str	r1, [r7, #48]	; 0x30
 8004314:	415b      	adcs	r3, r3
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
 8004318:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800431c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004320:	f7fc fc6a 	bl	8000bf8 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <UART_SetConfig+0x3dc>)
 800432a:	fba3 1302 	umull	r1, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2164      	movs	r1, #100	; 0x64
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	3332      	adds	r3, #50	; 0x32
 800433c:	4a07      	ldr	r2, [pc, #28]	; (800435c <UART_SetConfig+0x3dc>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 0207 	and.w	r2, r3, #7
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4432      	add	r2, r6
 8004350:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004352:	e1a6      	b.n	80046a2 <UART_SetConfig+0x722>
 8004354:	40011000 	.word	0x40011000
 8004358:	40011400 	.word	0x40011400
 800435c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4bd1      	ldr	r3, [pc, #836]	; (80046ac <UART_SetConfig+0x72c>)
 8004368:	429a      	cmp	r2, r3
 800436a:	d006      	beq.n	800437a <UART_SetConfig+0x3fa>
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4bcf      	ldr	r3, [pc, #828]	; (80046b0 <UART_SetConfig+0x730>)
 8004374:	429a      	cmp	r2, r3
 8004376:	f040 80ca 	bne.w	800450e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800437a:	f7ff f9e3 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 800437e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004382:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004386:	461c      	mov	r4, r3
 8004388:	f04f 0500 	mov.w	r5, #0
 800438c:	4622      	mov	r2, r4
 800438e:	462b      	mov	r3, r5
 8004390:	1891      	adds	r1, r2, r2
 8004392:	62b9      	str	r1, [r7, #40]	; 0x28
 8004394:	415b      	adcs	r3, r3
 8004396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439c:	1912      	adds	r2, r2, r4
 800439e:	eb45 0303 	adc.w	r3, r5, r3
 80043a2:	f04f 0000 	mov.w	r0, #0
 80043a6:	f04f 0100 	mov.w	r1, #0
 80043aa:	00d9      	lsls	r1, r3, #3
 80043ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b0:	00d0      	lsls	r0, r2, #3
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	eb12 0a04 	adds.w	sl, r2, r4
 80043ba:	eb43 0b05 	adc.w	fp, r3, r5
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f04f 0100 	mov.w	r1, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	008b      	lsls	r3, r1, #2
 80043d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043d8:	0082      	lsls	r2, r0, #2
 80043da:	4650      	mov	r0, sl
 80043dc:	4659      	mov	r1, fp
 80043de:	f7fc fc0b 	bl	8000bf8 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4bb3      	ldr	r3, [pc, #716]	; (80046b4 <UART_SetConfig+0x734>)
 80043e8:	fba3 2302 	umull	r2, r3, r3, r2
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	011e      	lsls	r6, r3, #4
 80043f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043f4:	4618      	mov	r0, r3
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	1894      	adds	r4, r2, r2
 8004400:	623c      	str	r4, [r7, #32]
 8004402:	415b      	adcs	r3, r3
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800440a:	1812      	adds	r2, r2, r0
 800440c:	eb41 0303 	adc.w	r3, r1, r3
 8004410:	f04f 0400 	mov.w	r4, #0
 8004414:	f04f 0500 	mov.w	r5, #0
 8004418:	00dd      	lsls	r5, r3, #3
 800441a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800441e:	00d4      	lsls	r4, r2, #3
 8004420:	4622      	mov	r2, r4
 8004422:	462b      	mov	r3, r5
 8004424:	1814      	adds	r4, r2, r0
 8004426:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800442a:	414b      	adcs	r3, r1
 800442c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	008b      	lsls	r3, r1, #2
 8004446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800444a:	0082      	lsls	r2, r0, #2
 800444c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004450:	f7fc fbd2 	bl	8000bf8 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b96      	ldr	r3, [pc, #600]	; (80046b4 <UART_SetConfig+0x734>)
 800445a:	fba3 1302 	umull	r1, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2164      	movs	r1, #100	; 0x64
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	; 0x32
 800446c:	4a91      	ldr	r2, [pc, #580]	; (80046b4 <UART_SetConfig+0x734>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004478:	441e      	add	r6, r3
 800447a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800447e:	4618      	mov	r0, r3
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	1894      	adds	r4, r2, r2
 800448a:	61bc      	str	r4, [r7, #24]
 800448c:	415b      	adcs	r3, r3
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004494:	1812      	adds	r2, r2, r0
 8004496:	eb41 0303 	adc.w	r3, r1, r3
 800449a:	f04f 0400 	mov.w	r4, #0
 800449e:	f04f 0500 	mov.w	r5, #0
 80044a2:	00dd      	lsls	r5, r3, #3
 80044a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044a8:	00d4      	lsls	r4, r2, #3
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	1814      	adds	r4, r2, r0
 80044b0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80044b4:	414b      	adcs	r3, r1
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044d4:	0082      	lsls	r2, r0, #2
 80044d6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80044da:	f7fc fb8d 	bl	8000bf8 <__aeabi_uldivmod>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4b74      	ldr	r3, [pc, #464]	; (80046b4 <UART_SetConfig+0x734>)
 80044e4:	fba3 1302 	umull	r1, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	2164      	movs	r1, #100	; 0x64
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	3332      	adds	r3, #50	; 0x32
 80044f6:	4a6f      	ldr	r2, [pc, #444]	; (80046b4 <UART_SetConfig+0x734>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4432      	add	r2, r6
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	e0c9      	b.n	80046a2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800450e:	f7ff f905 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8004512:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800451a:	461c      	mov	r4, r3
 800451c:	f04f 0500 	mov.w	r5, #0
 8004520:	4622      	mov	r2, r4
 8004522:	462b      	mov	r3, r5
 8004524:	1891      	adds	r1, r2, r2
 8004526:	6139      	str	r1, [r7, #16]
 8004528:	415b      	adcs	r3, r3
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004530:	1912      	adds	r2, r2, r4
 8004532:	eb45 0303 	adc.w	r3, r5, r3
 8004536:	f04f 0000 	mov.w	r0, #0
 800453a:	f04f 0100 	mov.w	r1, #0
 800453e:	00d9      	lsls	r1, r3, #3
 8004540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004544:	00d0      	lsls	r0, r2, #3
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	eb12 0804 	adds.w	r8, r2, r4
 800454e:	eb43 0905 	adc.w	r9, r3, r5
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	f04f 0100 	mov.w	r1, #0
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	008b      	lsls	r3, r1, #2
 8004568:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800456c:	0082      	lsls	r2, r0, #2
 800456e:	4640      	mov	r0, r8
 8004570:	4649      	mov	r1, r9
 8004572:	f7fc fb41 	bl	8000bf8 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <UART_SetConfig+0x734>)
 800457c:	fba3 2302 	umull	r2, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	011e      	lsls	r6, r3, #4
 8004584:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004588:	4618      	mov	r0, r3
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	1894      	adds	r4, r2, r2
 8004594:	60bc      	str	r4, [r7, #8]
 8004596:	415b      	adcs	r3, r3
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800459e:	1812      	adds	r2, r2, r0
 80045a0:	eb41 0303 	adc.w	r3, r1, r3
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	f04f 0500 	mov.w	r5, #0
 80045ac:	00dd      	lsls	r5, r3, #3
 80045ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045b2:	00d4      	lsls	r4, r2, #3
 80045b4:	4622      	mov	r2, r4
 80045b6:	462b      	mov	r3, r5
 80045b8:	1814      	adds	r4, r2, r0
 80045ba:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80045be:	414b      	adcs	r3, r1
 80045c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f04f 0100 	mov.w	r1, #0
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	008b      	lsls	r3, r1, #2
 80045da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045de:	0082      	lsls	r2, r0, #2
 80045e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045e4:	f7fc fb08 	bl	8000bf8 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <UART_SetConfig+0x734>)
 80045ee:	fba3 1302 	umull	r1, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2164      	movs	r1, #100	; 0x64
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	3332      	adds	r3, #50	; 0x32
 8004600:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <UART_SetConfig+0x734>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800460c:	441e      	add	r6, r3
 800460e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004612:	4618      	mov	r0, r3
 8004614:	f04f 0100 	mov.w	r1, #0
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	1894      	adds	r4, r2, r2
 800461e:	603c      	str	r4, [r7, #0]
 8004620:	415b      	adcs	r3, r3
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004628:	1812      	adds	r2, r2, r0
 800462a:	eb41 0303 	adc.w	r3, r1, r3
 800462e:	f04f 0400 	mov.w	r4, #0
 8004632:	f04f 0500 	mov.w	r5, #0
 8004636:	00dd      	lsls	r5, r3, #3
 8004638:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800463c:	00d4      	lsls	r4, r2, #3
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	1814      	adds	r4, r2, r0
 8004644:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004648:	414b      	adcs	r3, r1
 800464a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4618      	mov	r0, r3
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	008b      	lsls	r3, r1, #2
 8004664:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004668:	0082      	lsls	r2, r0, #2
 800466a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800466e:	f7fc fac3 	bl	8000bf8 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <UART_SetConfig+0x734>)
 8004678:	fba3 1302 	umull	r1, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2164      	movs	r1, #100	; 0x64
 8004680:	fb01 f303 	mul.w	r3, r1, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	3332      	adds	r3, #50	; 0x32
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <UART_SetConfig+0x734>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4432      	add	r2, r6
 800469e:	609a      	str	r2, [r3, #8]
}
 80046a0:	e7ff      	b.n	80046a2 <UART_SetConfig+0x722>
 80046a2:	bf00      	nop
 80046a4:	37f4      	adds	r7, #244	; 0xf4
 80046a6:	46bd      	mov	sp, r7
 80046a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ac:	40011000 	.word	0x40011000
 80046b0:	40011400 	.word	0x40011400
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <gps_read>:

	return 0;
}

void gps_read(char*	sRxBuffer, L76* pL76, char *seGNGGA, char* seGNRMC)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b0b2      	sub	sp, #200	; 0xc8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]

	uint8_t u8IsFix = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	uint8_t u8IndexOfComma[20] = {0};
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]
 80046de:	60da      	str	r2, [r3, #12]
	uint8_t u8IndexOfComma2[20] = {0};
 80046e0:	2300      	movs	r3, #0
 80046e2:	673b      	str	r3, [r7, #112]	; 0x70
 80046e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
	char sUtcTime[15] = {0};
 80046f2:	2300      	movs	r3, #0
 80046f4:	663b      	str	r3, [r7, #96]	; 0x60
 80046f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	605a      	str	r2, [r3, #4]
 8004700:	f8c3 2007 	str.w	r2, [r3, #7]
	char sDate[10]	  = {0};
 8004704:	2300      	movs	r3, #0
 8004706:	657b      	str	r3, [r7, #84]	; 0x54
 8004708:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	809a      	strh	r2, [r3, #4]

	memset(pL76, 0, sizeof(L76));
 8004712:	2218      	movs	r2, #24
 8004714:	2100      	movs	r1, #0
 8004716:	68b8      	ldr	r0, [r7, #8]
 8004718:	f000 fd80 	bl	800521c <memset>

	/* 2 strings to split the GNGAA and GNRMC from the NMEA sent from the Quectel L76 LB */
	char *sSubGPS  = strstr(sRxBuffer, "$GNGGA");
 800471c:	49c1      	ldr	r1, [pc, #772]	; (8004a24 <gps_read+0x36c>)
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f001 fa7c 	bl	8005c1c <strstr>
 8004724:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	char* sSubGPS2 = strstr(sRxBuffer, "$GNRMC");
 8004728:	49bf      	ldr	r1, [pc, #764]	; (8004a28 <gps_read+0x370>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f001 fa76 	bl	8005c1c <strstr>
 8004730:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	/* Split the GNRMC from the string above */
	for (int i = 0; i < strlen(sSubGPS2); i++)
 8004734:	2300      	movs	r3, #0
 8004736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800473a:	e02d      	b.n	8004798 <gps_read+0xe0>
	{
		if (sSubGPS2[i] == '\r')
 800473c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004740:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004744:	4413      	add	r3, r2
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b0d      	cmp	r3, #13
 800474a:	d120      	bne.n	800478e <gps_read+0xd6>
		{
			for(int j = 0; j < i; j++)
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004752:	e00f      	b.n	8004774 <gps_read+0xbc>
			{
				seGNRMC[j] = sSubGPS2[j];
 8004754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004758:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800475c:	441a      	add	r2, r3
 800475e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004762:	6839      	ldr	r1, [r7, #0]
 8004764:	440b      	add	r3, r1
 8004766:	7812      	ldrb	r2, [r2, #0]
 8004768:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < i; j++)
 800476a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800476e:	3301      	adds	r3, #1
 8004770:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004774:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800477c:	429a      	cmp	r2, r3
 800477e:	dbe9      	blt.n	8004754 <gps_read+0x9c>
			}
			seGNRMC[i] = '\0';
 8004780:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	4413      	add	r3, r2
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
			break;
 800478c:	e00d      	b.n	80047aa <gps_read+0xf2>
	for (int i = 0; i < strlen(sSubGPS2); i++)
 800478e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004792:	3301      	adds	r3, #1
 8004794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004798:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800479c:	f7fb fd20 	bl	80001e0 <strlen>
 80047a0:	4602      	mov	r2, r0
 80047a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d8c8      	bhi.n	800473c <gps_read+0x84>
		}
	}

	/* Test */
	printf("the string of the subGNRMC: %s\r\n", seGNRMC);
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	489f      	ldr	r0, [pc, #636]	; (8004a2c <gps_read+0x374>)
 80047ae:	f001 f9a7 	bl	8005b00 <iprintf>

	/* Split the GNGGA from the string above */
	for (int i = 0; i < strlen(sSubGPS); i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b8:	e02d      	b.n	8004816 <gps_read+0x15e>
	{
		if (sSubGPS[i] == '\r')
 80047ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047be:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80047c2:	4413      	add	r3, r2
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b0d      	cmp	r3, #13
 80047c8:	d120      	bne.n	800480c <gps_read+0x154>
		{
			for(int j = 0; j < i; j++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d0:	e00f      	b.n	80047f2 <gps_read+0x13a>
			{
				seGNGGA[j] = sSubGPS[j];
 80047d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80047da:	441a      	add	r2, r3
 80047dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	440b      	add	r3, r1
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < i; j++)
 80047e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047ec:	3301      	adds	r3, #1
 80047ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047fa:	429a      	cmp	r2, r3
 80047fc:	dbe9      	blt.n	80047d2 <gps_read+0x11a>
			}
			seGNGGA[i] = '\0';
 80047fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
			break;
 800480a:	e00d      	b.n	8004828 <gps_read+0x170>
	for (int i = 0; i < strlen(sSubGPS); i++)
 800480c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004810:	3301      	adds	r3, #1
 8004812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004816:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800481a:	f7fb fce1 	bl	80001e0 <strlen>
 800481e:	4602      	mov	r2, r0
 8004820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004824:	429a      	cmp	r2, r3
 8004826:	d8c8      	bhi.n	80047ba <gps_read+0x102>
		}
	}

	/* Test */
	printf("the string of the subGNGGA: %s\r\n", seGNGGA);
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4881      	ldr	r0, [pc, #516]	; (8004a30 <gps_read+0x378>)
 800482c:	f001 f968 	bl	8005b00 <iprintf>

	int j = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNGGA string */
	for (int i = 0; i < strlen(seGNGGA); i++)
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800483c:	e018      	b.n	8004870 <gps_read+0x1b8>
	{
		if (seGNGGA[i] == ',')
 800483e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b2c      	cmp	r3, #44	; 0x2c
 800484a:	d10c      	bne.n	8004866 <gps_read+0x1ae>
		{
			u8IndexOfComma[j++] = i;
 800484c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8004860:	440b      	add	r3, r1
 8004862:	f803 2c44 	strb.w	r2, [r3, #-68]
	for (int i = 0; i < strlen(seGNGGA); i++)
 8004866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800486a:	3301      	adds	r3, #1
 800486c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7fb fcb5 	bl	80001e0 <strlen>
 8004876:	4602      	mov	r2, r0
 8004878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800487c:	429a      	cmp	r2, r3
 800487e:	d8de      	bhi.n	800483e <gps_read+0x186>
		}
	}

	j = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	/* Find the index of each comma in GNRMC string */
	for (int i = 0; i < strlen(seGNRMC); i++)
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800488c:	e018      	b.n	80048c0 <gps_read+0x208>
	{
		if (seGNRMC[i] == ',')
 800488e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	4413      	add	r3, r2
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b2c      	cmp	r3, #44	; 0x2c
 800489a:	d10c      	bne.n	80048b6 <gps_read+0x1fe>
		{
			u8IndexOfComma2[j++] = i;
 800489c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80048a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80048b0:	440b      	add	r3, r1
 80048b2:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (int i = 0; i < strlen(seGNRMC); i++)
 80048b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048ba:	3301      	adds	r3, #1
 80048bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	f7fb fc8d 	bl	80001e0 <strlen>
 80048c6:	4602      	mov	r2, r0
 80048c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d8de      	bhi.n	800488e <gps_read+0x1d6>
		}
	}

	/* Check whether the GPS is fix or not on GNGGA */
	if (seGNGGA[u8IndexOfComma[5] + 1] == '0' || strlen(seGNGGA) == 0)
 80048d0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80048d4:	3301      	adds	r3, #1
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b30      	cmp	r3, #48	; 0x30
 80048de:	d003      	beq.n	80048e8 <gps_read+0x230>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10e      	bne.n	8004906 <gps_read+0x24e>
	{
		if (seGNGGA[u8IndexOfComma[5] + 1] == '0')
 80048e8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80048ec:	3301      	adds	r3, #1
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	4413      	add	r3, r2
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b30      	cmp	r3, #48	; 0x30
 80048f6:	d102      	bne.n	80048fe <gps_read+0x246>
		{
			printf("GPS NOT FIX!!!\r\n");
 80048f8:	484e      	ldr	r0, [pc, #312]	; (8004a34 <gps_read+0x37c>)
 80048fa:	f001 f987 	bl	8005c0c <puts>
		}
		u8IsFix = GPS_NOT_FIX;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8004904:	e002      	b.n	800490c <gps_read+0x254>
	}else
	{
		u8IsFix = GPS_FIX;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	/* If GPS is fix, Get the DATA */
	if (u8IsFix == GPS_NOT_FIX)
 800490c:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <gps_read+0x26e>
	{
		/* Information of NMEA */
		memset(pL76, 0, sizeof(*pL76));
 8004914:	2218      	movs	r2, #24
 8004916:	2100      	movs	r1, #0
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f000 fc7f 	bl	800521c <memset>
		printf("GPS NOT AVAILABLE\r\n");
 800491e:	4846      	ldr	r0, [pc, #280]	; (8004a38 <gps_read+0x380>)
 8004920:	f001 f974 	bl	8005c0c <puts>
			u8E_W = GPS_WEST;
		}
		L76_Long_Parse(sLong, pL76, u8E_W);

	}
}
 8004924:	e18c      	b.n	8004c40 <gps_read+0x588>
		char sLat[20] = {0};
 8004926:	2300      	movs	r3, #0
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
 800492a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	609a      	str	r2, [r3, #8]
 8004936:	60da      	str	r2, [r3, #12]
		char sN_S[3] = {0};
 8004938:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <gps_read+0x384>)
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800493e:	2300      	movs	r3, #0
 8004940:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		j = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 800494a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800494e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004952:	e016      	b.n	8004982 <gps_read+0x2ca>
			sUtcTime[j] = seGNGGA[i+1];
 8004954:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004958:	3301      	adds	r3, #1
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4413      	add	r3, r2
 800495e:	7819      	ldrb	r1, [r3, #0]
 8004960:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004968:	4413      	add	r3, r2
 800496a:	460a      	mov	r2, r1
 800496c:	701a      	strb	r2, [r3, #0]
			j++;
 800496e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004972:	3301      	adds	r3, #1
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[0]; i < u8IndexOfComma[1]; i++)
 8004978:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800497c:	3301      	adds	r3, #1
 800497e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8004982:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8004986:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800498a:	429a      	cmp	r2, r3
 800498c:	d3e2      	bcc.n	8004954 <gps_read+0x29c>
		sUtcTime[j-1] = '\0';
 800498e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004992:	3b01      	subs	r3, #1
 8004994:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	f803 2c68 	strb.w	r2, [r3, #-104]
		L76_Time_Parse(sUtcTime, pL76);
 80049a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fab4 	bl	8004f14 <L76_Time_Parse>
		j = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma[9]; i++)
 80049b2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80049b6:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 80049ba:	e016      	b.n	80049ea <gps_read+0x332>
			sDate[j] = seGNRMC[i+1];
 80049bc:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80049c0:	3301      	adds	r3, #1
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	4413      	add	r3, r2
 80049c6:	7819      	ldrb	r1, [r3, #0]
 80049c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80049cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049d0:	4413      	add	r3, r2
 80049d2:	460a      	mov	r2, r1
 80049d4:	701a      	strb	r2, [r3, #0]
			j++;
 80049d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049da:	3301      	adds	r3, #1
 80049dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma2[8]; i < u8IndexOfComma[9]; i++)
 80049e0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80049e4:	3301      	adds	r3, #1
 80049e6:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 80049ea:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80049ee:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d3e2      	bcc.n	80049bc <gps_read+0x304>
		sDate[j-1] = '\0';
 80049f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049fa:	3b01      	subs	r3, #1
 80049fc:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004a00:	4413      	add	r3, r2
 8004a02:	2200      	movs	r2, #0
 8004a04:	f803 2c74 	strb.w	r2, [r3, #-116]
		L76_Date_Parse(sDate, pL76);
 8004a08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 faca 	bl	8004fa8 <L76_Date_Parse>
		j = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 8004a1a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8004a1e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8004a22:	e024      	b.n	8004a6e <gps_read+0x3b6>
 8004a24:	0800974c 	.word	0x0800974c
 8004a28:	08009754 	.word	0x08009754
 8004a2c:	0800975c 	.word	0x0800975c
 8004a30:	08009780 	.word	0x08009780
 8004a34:	080097a4 	.word	0x080097a4
 8004a38:	080097b4 	.word	0x080097b4
 8004a3c:	080097d8 	.word	0x080097d8
			sLat[j] = seGNGGA[i+1];
 8004a40:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8004a44:	3301      	adds	r3, #1
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	7819      	ldrb	r1, [r3, #0]
 8004a4c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a54:	4413      	add	r3, r2
 8004a56:	460a      	mov	r2, r1
 8004a58:	701a      	strb	r2, [r3, #0]
			j++;
 8004a5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[1]; i < u8IndexOfComma[2]; i++)
 8004a64:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8004a68:	3301      	adds	r3, #1
 8004a6a:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8004a6e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004a72:	f897 20a5 	ldrb.w	r2, [r7, #165]	; 0xa5
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d3e2      	bcc.n	8004a40 <gps_read+0x388>
		sLat[j-1] = '\0';
 8004a7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004a84:	4413      	add	r3, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	f803 2c88 	strb.w	r2, [r3, #-136]
		printf("%s\n\r", sLat);
 8004a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a90:	4619      	mov	r1, r3
 8004a92:	486d      	ldr	r0, [pc, #436]	; (8004c48 <gps_read+0x590>)
 8004a94:	f001 f834 	bl	8005b00 <iprintf>
		j = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8004a9e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8004aa2:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8004aa6:	e016      	b.n	8004ad6 <gps_read+0x41e>
			sN_S[j] = seGNGGA[i+1];
 8004aa8:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004aac:	3301      	adds	r3, #1
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	7819      	ldrb	r1, [r3, #0]
 8004ab4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004abc:	4413      	add	r3, r2
 8004abe:	460a      	mov	r2, r1
 8004ac0:	701a      	strb	r2, [r3, #0]
			j++;
 8004ac2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[2]; i < u8IndexOfComma[3]; i++)
 8004acc:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8004ad6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004ada:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3e2      	bcc.n	8004aa8 <gps_read+0x3f0>
		sN_S[j-1] = '\0';
 8004ae2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004aec:	4413      	add	r3, r2
 8004aee:	2200      	movs	r2, #0
 8004af0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		uint8_t u8N_S = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		if (sN_S[0] == 'N')
 8004afa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004afe:	2b4e      	cmp	r3, #78	; 0x4e
 8004b00:	d103      	bne.n	8004b0a <gps_read+0x452>
			u8N_S = GPS_NORTH;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8004b08:	e006      	b.n	8004b18 <gps_read+0x460>
		}else if(sN_S[0] == 'S')
 8004b0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b0e:	2b53      	cmp	r3, #83	; 0x53
 8004b10:	d102      	bne.n	8004b18 <gps_read+0x460>
			u8N_S = GPS_SOUTH;
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		L76_Lat_Parse(sLat, pL76, u8N_S);
 8004b18:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8004b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f894 	bl	8004c50 <L76_Lat_Parse>
		j = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sLong[20] = {0};
 8004b2e:	2300      	movs	r3, #0
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
 8004b3e:	60da      	str	r2, [r3, #12]
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 8004b40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8004b44:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004b48:	e016      	b.n	8004b78 <gps_read+0x4c0>
			sLong[j] = seGNGGA[i+1];
 8004b4a:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004b4e:	3301      	adds	r3, #1
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	7819      	ldrb	r1, [r3, #0]
 8004b56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b5e:	4413      	add	r3, r2
 8004b60:	460a      	mov	r2, r1
 8004b62:	701a      	strb	r2, [r3, #0]
			j++;
 8004b64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b68:	3301      	adds	r3, #1
 8004b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[3]; i < u8IndexOfComma[4]; i++)
 8004b6e:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004b72:	3301      	adds	r3, #1
 8004b74:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 8004b78:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004b7c:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d3e2      	bcc.n	8004b4a <gps_read+0x492>
		sLong[j-1] = '\0';
 8004b84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004b8e:	4413      	add	r3, r2
 8004b90:	2200      	movs	r2, #0
 8004b92:	f803 2ca0 	strb.w	r2, [r3, #-160]
		printf("%s\r\n",sLong);
 8004b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	482b      	ldr	r0, [pc, #172]	; (8004c4c <gps_read+0x594>)
 8004b9e:	f000 ffaf 	bl	8005b00 <iprintf>
		j = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		char sE_W[20] = {0};
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	f107 0318 	add.w	r3, r7, #24
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	60da      	str	r2, [r3, #12]
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8004bba:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004bbe:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8004bc2:	e016      	b.n	8004bf2 <gps_read+0x53a>
			sE_W[j] = seGNGGA[i+1];
 8004bc4:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004bc8:	3301      	adds	r3, #1
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	7819      	ldrb	r1, [r3, #0]
 8004bd0:	f107 0214 	add.w	r2, r7, #20
 8004bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bd8:	4413      	add	r3, r2
 8004bda:	460a      	mov	r2, r1
 8004bdc:	701a      	strb	r2, [r3, #0]
			j++;
 8004bde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004be2:	3301      	adds	r3, #1
 8004be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (uint8_t i = u8IndexOfComma[4]; i < u8IndexOfComma[5]; i++)
 8004be8:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8004bec:	3301      	adds	r3, #1
 8004bee:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8004bf2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004bf6:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d3e2      	bcc.n	8004bc4 <gps_read+0x50c>
		sE_W[j-1] = '\0';
 8004bfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004c08:	4413      	add	r3, r2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f803 2cb4 	strb.w	r2, [r3, #-180]
		uint8_t u8E_W = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		if (sE_W[0] == 'E')
 8004c16:	7d3b      	ldrb	r3, [r7, #20]
 8004c18:	2b45      	cmp	r3, #69	; 0x45
 8004c1a:	d103      	bne.n	8004c24 <gps_read+0x56c>
			u8E_W = GPS_EAST;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8004c22:	e005      	b.n	8004c30 <gps_read+0x578>
		else if (sE_W[0] == 'W')
 8004c24:	7d3b      	ldrb	r3, [r7, #20]
 8004c26:	2b57      	cmp	r3, #87	; 0x57
 8004c28:	d102      	bne.n	8004c30 <gps_read+0x578>
			u8E_W = GPS_WEST;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
		L76_Long_Parse(sLong, pL76, u8E_W);
 8004c30:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8004c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f8bc 	bl	8004db8 <L76_Long_Parse>
}
 8004c40:	bf00      	nop
 8004c42:	37c8      	adds	r7, #200	; 0xc8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	080097c8 	.word	0x080097c8
 8004c4c:	080097d0 	.word	0x080097d0

08004c50 <L76_Lat_Parse>:

static void L76_Lat_Parse(char* sLat, L76* pL76, uint8_t u8NorS)
{
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b08f      	sub	sp, #60	; 0x3c
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	71fb      	strb	r3, [r7, #7]
	/* Check the postition of the dot to divide the degrees and minutes
	 * The Latitude NMEA form ddmm.mmmm
	 */

	/* 1. Parse the Degree */
	for (uint8_t i = 0; i < 2; i++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004c64:	e010      	b.n	8004c88 <L76_Lat_Parse+0x38>
	{
		degree[i] = sLat[i];
 8004c66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c78:	440b      	add	r3, r1
 8004c7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 2; i++)
 8004c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c82:	3301      	adds	r3, #1
 8004c84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d9ea      	bls.n	8004c66 <L76_Lat_Parse+0x16>
	}
	degree[2] = '\0';
 8004c90:	2300      	movs	r3, #0
 8004c92:	77bb      	strb	r3, [r7, #30]

	/* Test */
	printf("Lat Degree: %s\r\n", degree);
 8004c94:	f107 031c 	add.w	r3, r7, #28
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4842      	ldr	r0, [pc, #264]	; (8004da4 <L76_Lat_Parse+0x154>)
 8004c9c:	f000 ff30 	bl	8005b00 <iprintf>

	double dTempDeg = atof(degree);
 8004ca0:	f107 031c 	add.w	r3, r7, #28
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fa8b 	bl	80051c0 <atof>
 8004caa:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minute */
	uint8_t j = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	printf("%s\r\n", sLat);
 8004cb4:	68f9      	ldr	r1, [r7, #12]
 8004cb6:	483c      	ldr	r0, [pc, #240]	; (8004da8 <L76_Lat_Parse+0x158>)
 8004cb8:	f000 ff22 	bl	8005b00 <iprintf>

	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004cc2:	e015      	b.n	8004cf0 <L76_Lat_Parse+0xa0>
	{
		minute[j] = sLat[i];
 8004cc4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	441a      	add	r2, r3
 8004ccc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004cd0:	7812      	ldrb	r2, [r2, #0]
 8004cd2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 8004cdc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 2; i < (strlen(sLat) - 1); i++)
 8004ce6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004cea:	3301      	adds	r3, #1
 8004cec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004cf0:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7fb fa73 	bl	80001e0 <strlen>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	429e      	cmp	r6, r3
 8004d00:	d3e0      	bcc.n	8004cc4 <L76_Lat_Parse+0x74>
	}
	minute[j] = '\0';
 8004d02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004d06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004d0a:	4413      	add	r3, r2
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f803 2c28 	strb.w	r2, [r3, #-40]

	printf("Lat Minute: %s\r\n", minute);
 8004d12:	f107 0310 	add.w	r3, r7, #16
 8004d16:	4619      	mov	r1, r3
 8004d18:	4824      	ldr	r0, [pc, #144]	; (8004dac <L76_Lat_Parse+0x15c>)
 8004d1a:	f000 fef1 	bl	8005b00 <iprintf>

	double dTempMin = atof(minute);
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fa4c 	bl	80051c0 <atof>
 8004d28:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form dd.xxxxx */
	if (u8NorS == GPS_NORTH)
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d114      	bne.n	8004d5c <L76_Lat_Parse+0x10c>
	{
		pL76->dLattitude = dTempDeg + (dTempMin / 60);
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	4b1e      	ldr	r3, [pc, #120]	; (8004db0 <L76_Lat_Parse+0x160>)
 8004d38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d3c:	f7fb fd8e 	bl	800085c <__aeabi_ddiv>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d4c:	f7fb faa6 	bl	800029c <__adddf3>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d5a:	e019      	b.n	8004d90 <L76_Lat_Parse+0x140>
	}
	else if (u8NorS == GPS_SOUTH)
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d116      	bne.n	8004d90 <L76_Lat_Parse+0x140>
	{
		pL76->dLattitude = -(dTempDeg + (dTempMin / 60));
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <L76_Lat_Parse+0x160>)
 8004d68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004d6c:	f7fb fd76 	bl	800085c <__aeabi_ddiv>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d7c:	f7fb fa8e 	bl	800029c <__adddf3>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4614      	mov	r4, r2
 8004d86:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	e9c3 4502 	strd	r4, r5, [r3, #8]
	else
	{
		//Unavailable
		;
	}
	printf("NMEA latitude: %lf\r\n", pL76->dLattitude);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d96:	4807      	ldr	r0, [pc, #28]	; (8004db4 <L76_Lat_Parse+0x164>)
 8004d98:	f000 feb2 	bl	8005b00 <iprintf>

}
 8004d9c:	bf00      	nop
 8004d9e:	373c      	adds	r7, #60	; 0x3c
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da4:	080097dc 	.word	0x080097dc
 8004da8:	080097d0 	.word	0x080097d0
 8004dac:	080097f0 	.word	0x080097f0
 8004db0:	404e0000 	.word	0x404e0000
 8004db4:	08009804 	.word	0x08009804

08004db8 <L76_Long_Parse>:

static void L76_Long_Parse(char* sLong, L76* pL76, uint8_t u8EorW)
{
 8004db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dba:	b08f      	sub	sp, #60	; 0x3c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	71fb      	strb	r3, [r7, #7]
	/* Check the position of the dot to divide degrees and minutes
	 * The Longtitude NMEA form dddmm.mmmm
	 */

	/* 1. Parse the degrees */
	for (uint8_t i = 0; i < 3; i++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004dcc:	e010      	b.n	8004df0 <L76_Long_Parse+0x38>
	{
		degree[i] = sLong[i];
 8004dce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004de0:	440b      	add	r3, r1
 8004de2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (uint8_t i = 0; i < 3; i++)
 8004de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004dea:	3301      	adds	r3, #1
 8004dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004df0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d9ea      	bls.n	8004dce <L76_Long_Parse+0x16>
	}
	degree[3] = '\0';
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77fb      	strb	r3, [r7, #31]

	/* Test */
	printf("Long Degree: %s\r\n", degree);
 8004dfc:	f107 031c 	add.w	r3, r7, #28
 8004e00:	4619      	mov	r1, r3
 8004e02:	4840      	ldr	r0, [pc, #256]	; (8004f04 <L76_Long_Parse+0x14c>)
 8004e04:	f000 fe7c 	bl	8005b00 <iprintf>

	double dTempDeg = atof(degree);
 8004e08:	f107 031c 	add.w	r3, r7, #28
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 f9d7 	bl	80051c0 <atof>
 8004e12:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28

	/* 2. Parse the minutes */
	uint8_t j = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004e22:	e015      	b.n	8004e50 <L76_Long_Parse+0x98>
	{
		minute[j] = sLong[i];
 8004e24:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004e36:	440b      	add	r3, r1
 8004e38:	f803 2c28 	strb.w	r2, [r3, #-40]
		j++;
 8004e3c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004e40:	3301      	adds	r3, #1
 8004e42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (uint8_t i = 3; i < (strlen(sLong) - 1); i++)
 8004e46:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8004e50:	f897 6035 	ldrb.w	r6, [r7, #53]	; 0x35
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7fb f9c3 	bl	80001e0 <strlen>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	429e      	cmp	r6, r3
 8004e60:	d3e0      	bcc.n	8004e24 <L76_Long_Parse+0x6c>
	}
	minute[j] = '\0';
 8004e62:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004e66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004e6a:	4413      	add	r3, r2
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f803 2c28 	strb.w	r2, [r3, #-40]

	/* Test */
	printf("Long minute: %s\r\n", minute);
 8004e72:	f107 0310 	add.w	r3, r7, #16
 8004e76:	4619      	mov	r1, r3
 8004e78:	4823      	ldr	r0, [pc, #140]	; (8004f08 <L76_Long_Parse+0x150>)
 8004e7a:	f000 fe41 	bl	8005b00 <iprintf>

	double dTempMin = atof(minute);
 8004e7e:	f107 0310 	add.w	r3, r7, #16
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f99c 	bl	80051c0 <atof>
 8004e88:	ed87 0b08 	vstr	d0, [r7, #32]

	/* 3. Get the latitude in form of ddd.xxxxx */
	if (u8EorW == GPS_EAST)
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d114      	bne.n	8004ebc <L76_Long_Parse+0x104>
	{
		pL76->dLongtitude = dTempDeg + (dTempMin / 60);
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <L76_Long_Parse+0x154>)
 8004e98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004e9c:	f7fb fcde 	bl	800085c <__aeabi_ddiv>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eac:	f7fb f9f6 	bl	800029c <__adddf3>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	e9c1 2300 	strd	r2, r3, [r1]
 8004eba:	e019      	b.n	8004ef0 <L76_Long_Parse+0x138>
	}
	else if (u8EorW == GPS_WEST)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <L76_Long_Parse+0x138>
	{
		pL76->dLongtitude = -(dTempDeg + (dTempMin / 60));
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <L76_Long_Parse+0x154>)
 8004ec8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004ecc:	f7fb fcc6 	bl	800085c <__aeabi_ddiv>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004edc:	f7fb f9de 	bl	800029c <__adddf3>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	e9c3 4500 	strd	r4, r5, [r3]
		//Unavailable
		;
	}

	/* Test */
	printf("NMEA longtitude: %lf\r\n", pL76->dLongtitude);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	4806      	ldr	r0, [pc, #24]	; (8004f10 <L76_Long_Parse+0x158>)
 8004ef8:	f000 fe02 	bl	8005b00 <iprintf>

}
 8004efc:	bf00      	nop
 8004efe:	373c      	adds	r7, #60	; 0x3c
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f04:	0800981c 	.word	0x0800981c
 8004f08:	08009830 	.word	0x08009830
 8004f0c:	404e0000 	.word	0x404e0000
 8004f10:	08009844 	.word	0x08009844

08004f14 <L76_Time_Parse>:

static void L76_Time_Parse(char* sUtcTime, L76* pL76)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	uint32_t dTime = (uint32_t)atof(sUtcTime);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f94e 	bl	80051c0 <atof>
 8004f24:	ec53 2b10 	vmov	r2, r3, d0
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	f7fb fe44 	bl	8000bb8 <__aeabi_d2uiz>
 8004f30:	4603      	mov	r3, r0
 8004f32:	60fb      	str	r3, [r7, #12]

	/* 1. Get the seconds */
	pL76->u8Second = (uint8_t) (dTime % 100);
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <L76_Time_Parse+0x88>)
 8004f38:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	2164      	movs	r1, #100	; 0x64
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	759a      	strb	r2, [r3, #22]

	/* 2. Get the minutes */
	pL76->u8Minute = (uint8_t) ((dTime / 100) % 100);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <L76_Time_Parse+0x88>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095a      	lsrs	r2, r3, #5
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <L76_Time_Parse+0x88>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2164      	movs	r1, #100	; 0x64
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	755a      	strb	r2, [r3, #21]

	/* 3. Get the hour */
	pL76->u8Hour = (uint8_t) (dTime / 10000);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <L76_Time_Parse+0x8c>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	0b5b      	lsrs	r3, r3, #13
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	751a      	strb	r2, [r3, #20]

	/* Test */
	printf("UTC TIME: %d:%d:%d\r\n", pL76->u8Hour, pL76->u8Minute, pL76->u8Second);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7d1b      	ldrb	r3, [r3, #20]
 8004f80:	4619      	mov	r1, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	7d5b      	ldrb	r3, [r3, #21]
 8004f86:	461a      	mov	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	7d9b      	ldrb	r3, [r3, #22]
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <L76_Time_Parse+0x90>)
 8004f8e:	f000 fdb7 	bl	8005b00 <iprintf>
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	51eb851f 	.word	0x51eb851f
 8004fa0:	d1b71759 	.word	0xd1b71759
 8004fa4:	0800985c 	.word	0x0800985c

08004fa8 <L76_Date_Parse>:

static void L76_Date_Parse(char* sRmcDate, L76* pL76Handle)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
	uint32_t dDate = (uint32_t)atof(sRmcDate);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f904 	bl	80051c0 <atof>
 8004fb8:	ec53 2b10 	vmov	r2, r3, d0
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f7fb fdfa 	bl	8000bb8 <__aeabi_d2uiz>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	60fb      	str	r3, [r7, #12]

	/* 1. Get the day */
	pL76Handle->u8Day = (uint8_t) (dDate / 10000);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <L76_Date_Parse+0x8c>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	0b5b      	lsrs	r3, r3, #13
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	741a      	strb	r2, [r3, #16]

	/* 2. Get the month */
	pL76Handle->u8Month = (uint8_t) ((dDate / 100) % 100);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <L76_Date_Parse+0x90>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095a      	lsrs	r2, r3, #5
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <L76_Date_Parse+0x90>)
 8004fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2164      	movs	r1, #100	; 0x64
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	745a      	strb	r2, [r3, #17]

	/* 3. Get the year */
	pL76Handle->u16Year = (uint16_t) (2000 + (dDate % 100));
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <L76_Date_Parse+0x90>)
 8004ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2164      	movs	r1, #100	; 0x64
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	b29b      	uxth	r3, r3
 800500c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005010:	b29a      	uxth	r2, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	825a      	strh	r2, [r3, #18]

	/* Test */
	printf("Date: %d/%d/%d \r\n", pL76Handle->u8Day, pL76Handle->u8Month, pL76Handle->u16Year);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	7c1b      	ldrb	r3, [r3, #16]
 800501a:	4619      	mov	r1, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	7c5b      	ldrb	r3, [r3, #17]
 8005020:	461a      	mov	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	8a5b      	ldrh	r3, [r3, #18]
 8005026:	4805      	ldr	r0, [pc, #20]	; (800503c <L76_Date_Parse+0x94>)
 8005028:	f000 fd6a 	bl	8005b00 <iprintf>

}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	d1b71759 	.word	0xd1b71759
 8005038:	51eb851f 	.word	0x51eb851f
 800503c:	08009874 	.word	0x08009874

08005040 <SC7A20_Init>:


extern I2C_HandleTypeDef hi2c1;

uint8_t SC7A20_Init()
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	/*1. Turn on the sensor with ODR = 400Hz normal mode*/
	SC7A20_write(SC7A20_CR1_NORMAL_400HZ_EN, SC7A20_ADDR_CTRL_REG1);
 8005044:	2120      	movs	r1, #32
 8005046:	2073      	movs	r0, #115	; 0x73
 8005048:	f000 f860 	bl	800510c <SC7A20_write>

	/*2. Enable AOI1 Interrupt SIGNAL in INT1*/
	SC7A20_write(SC7A20_CR3_ENABLE_AOI_INT1, SC7A20_ADDR_CTRL_REG3);
 800504c:	2122      	movs	r1, #34	; 0x22
 800504e:	2040      	movs	r0, #64	; 0x40
 8005050:	f000 f85c 	bl	800510c <SC7A20_write>

	/*3. Enable Reset after Interrupt event and filter used*/
	SC7A20_write(SC7A20_CR2_INT_RST_FILTER, SC7A20_ADDR_CTRL_REG2);
 8005054:	2121      	movs	r1, #33	; 0x21
 8005056:	2000      	movs	r0, #0
 8005058:	f000 f858 	bl	800510c <SC7A20_write>

	/*4. Detection */
	SC7A20_write(SC7A20_CR5_4D_DISABLE, SC7A20_ADDR_CTRL_REG5);
 800505c:	2124      	movs	r1, #36	; 0x24
 800505e:	2000      	movs	r0, #0
 8005060:	f000 f854 	bl	800510c <SC7A20_write>

	/*5. Enable 16G range of the SC7A20*/
	SC7A20_write(SC7A20_CR4_2G, SC7A20_ADDR_CTRL_REG4);
 8005064:	2123      	movs	r1, #35	; 0x23
 8005066:	2038      	movs	r0, #56	; 0x38
 8005068:	f000 f850 	bl	800510c <SC7A20_write>

	/*6. Enable Interrupt 1 for Motion detection*/
	SC7A20_write(SC7A20_INT1_MOTION_DETECT, SC7A20_ADDR_INT1_CFG);
 800506c:	2130      	movs	r1, #48	; 0x30
 800506e:	200a      	movs	r0, #10
 8005070:	f000 f84c 	bl	800510c <SC7A20_write>

	/*7. Set motion detection Threshold */
	SC7A20_setMotionTHS(16);
 8005074:	2010      	movs	r0, #16
 8005076:	f000 f887 	bl	8005188 <SC7A20_setMotionTHS>

	/*8. Set duration of INT1 to 10*/
	SC7A20_setInt1Duration(10);
 800507a:	200a      	movs	r0, #10
 800507c:	f000 f892 	bl	80051a4 <SC7A20_setInt1Duration>

	/*10. Read back the data from CTRL1, if the data is successfully writen, the initialization is successful*/
	if (SC7A20_read(SC7A20_ADDR_CTRL_REG1) == SC7A20_CR1_NORMAL_400HZ_EN)
 8005080:	2020      	movs	r0, #32
 8005082:	f000 f85f 	bl	8005144 <SC7A20_read>
 8005086:	4603      	mov	r3, r0
 8005088:	2b73      	cmp	r3, #115	; 0x73
 800508a:	d104      	bne.n	8005096 <SC7A20_Init+0x56>
	{
		return SC7A20_read(SC7A20_ADDR_CTRL_REG1);
 800508c:	2020      	movs	r0, #32
 800508e:	f000 f859 	bl	8005144 <SC7A20_read>
 8005092:	4603      	mov	r3, r0
 8005094:	e000      	b.n	8005098 <SC7A20_Init+0x58>
	}else
	{
		return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
	}

}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}

0800509c <SC7A20_coordinate_read>:

void SC7A20_coordinate_read(Coordinate_t* pCoordinate)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

	/*1. Read the OUT_X_L register */
	pCoordinate->u16XCoor = ((SC7A20_read(SC7A20_ADDR_OUT_X_H) << 8) | SC7A20_read(SC7A20_ADDR_OUT_X_L));
 80050a4:	2029      	movs	r0, #41	; 0x29
 80050a6:	f000 f84d 	bl	8005144 <SC7A20_read>
 80050aa:	4603      	mov	r3, r0
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	b21c      	sxth	r4, r3
 80050b0:	2028      	movs	r0, #40	; 0x28
 80050b2:	f000 f847 	bl	8005144 <SC7A20_read>
 80050b6:	4603      	mov	r3, r0
 80050b8:	b21b      	sxth	r3, r3
 80050ba:	4323      	orrs	r3, r4
 80050bc:	b21b      	sxth	r3, r3
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	801a      	strh	r2, [r3, #0]
	/*2. Read the OUT_Y_L register */
	pCoordinate->u16YCoor = ((SC7A20_read(SC7A20_ADDR_OUT_Y_H) << 8) | SC7A20_read(SC7A20_ADDR_OUT_Y_L));
 80050c4:	202b      	movs	r0, #43	; 0x2b
 80050c6:	f000 f83d 	bl	8005144 <SC7A20_read>
 80050ca:	4603      	mov	r3, r0
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	b21c      	sxth	r4, r3
 80050d0:	202a      	movs	r0, #42	; 0x2a
 80050d2:	f000 f837 	bl	8005144 <SC7A20_read>
 80050d6:	4603      	mov	r3, r0
 80050d8:	b21b      	sxth	r3, r3
 80050da:	4323      	orrs	r3, r4
 80050dc:	b21b      	sxth	r3, r3
 80050de:	b29a      	uxth	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	805a      	strh	r2, [r3, #2]
	/*3. Read the OUT_Z_L register */
	pCoordinate->u16ZCoor = ((SC7A20_read(SC7A20_ADDR_OUT_Z_H) << 8) | SC7A20_read(SC7A20_ADDR_OUT_Z_L));
 80050e4:	202d      	movs	r0, #45	; 0x2d
 80050e6:	f000 f82d 	bl	8005144 <SC7A20_read>
 80050ea:	4603      	mov	r3, r0
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	b21c      	sxth	r4, r3
 80050f0:	202c      	movs	r0, #44	; 0x2c
 80050f2:	f000 f827 	bl	8005144 <SC7A20_read>
 80050f6:	4603      	mov	r3, r0
 80050f8:	b21b      	sxth	r3, r3
 80050fa:	4323      	orrs	r3, r4
 80050fc:	b21b      	sxth	r3, r3
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	809a      	strh	r2, [r3, #4]

}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bd90      	pop	{r4, r7, pc}

0800510c <SC7A20_write>:

static void SC7A20_write(uint8_t u8Value, uint8_t u8RegAddress)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	4603      	mov	r3, r0
 8005114:	460a      	mov	r2, r1
 8005116:	71fb      	strb	r3, [r7, #7]
 8005118:	4613      	mov	r3, r2
 800511a:	71bb      	strb	r3, [r7, #6]
	uint8_t u8Tx[2];
	u8Tx[0] = u8RegAddress;
 800511c:	79bb      	ldrb	r3, [r7, #6]
 800511e:	733b      	strb	r3, [r7, #12]
	u8Tx[1] = u8Value;
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, u8Tx, 2, HAL_MAX_DELAY);
 8005124:	f107 020c 	add.w	r2, r7, #12
 8005128:	f04f 33ff 	mov.w	r3, #4294967295
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	2302      	movs	r3, #2
 8005130:	2130      	movs	r1, #48	; 0x30
 8005132:	4803      	ldr	r0, [pc, #12]	; (8005140 <SC7A20_write+0x34>)
 8005134:	f7fd f888 	bl	8002248 <HAL_I2C_Master_Transmit>
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000218 	.word	0x20000218

08005144 <SC7A20_read>:

uint8_t SC7A20_read(uint8_t u8RegAddress)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	4603      	mov	r3, r0
 800514c:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Data = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	73fb      	strb	r3, [r7, #15]

	/*1. First send the address of the register we want to read*/
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8RegAddress, 1, HAL_MAX_DELAY);
 8005152:	1dfa      	adds	r2, r7, #7
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2301      	movs	r3, #1
 800515c:	2130      	movs	r1, #48	; 0x30
 800515e:	4809      	ldr	r0, [pc, #36]	; (8005184 <SC7A20_read+0x40>)
 8005160:	f7fd f872 	bl	8002248 <HAL_I2C_Master_Transmit>

	/*2. Receive the data of the register we want to read*/
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)SC7A20_I2C_ADDRESS, &u8Data, 1, HAL_MAX_DELAY);
 8005164:	f107 020f 	add.w	r2, r7, #15
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	2301      	movs	r3, #1
 8005170:	2130      	movs	r1, #48	; 0x30
 8005172:	4804      	ldr	r0, [pc, #16]	; (8005184 <SC7A20_read+0x40>)
 8005174:	f7fd f966 	bl	8002444 <HAL_I2C_Master_Receive>

	return u8Data;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000218 	.word	0x20000218

08005188 <SC7A20_setMotionTHS>:

static void SC7A20_setMotionTHS(uint8_t u8Threshold)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Threshold, SC7A20_ADDR_INT1_THS);
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	2132      	movs	r1, #50	; 0x32
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ffb8 	bl	800510c <SC7A20_write>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <SC7A20_setInt1Duration>:

static void SC7A20_setInt1Duration(uint8_t u8Time)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
	SC7A20_write(u8Time, SC7A20_ADDR_INT1_DURATION);
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	2133      	movs	r1, #51	; 0x33
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ffaa 	bl	800510c <SC7A20_write>
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <atof>:
 80051c0:	2100      	movs	r1, #0
 80051c2:	f001 bb6b 	b.w	800689c <strtod>
	...

080051c8 <__errno>:
 80051c8:	4b01      	ldr	r3, [pc, #4]	; (80051d0 <__errno+0x8>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000014 	.word	0x20000014

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	; (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	; (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <__libc_init_array+0x44>)
 80051e8:	f004 f890 	bl	800930c <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	08009d54 	.word	0x08009d54
 8005210:	08009d54 	.word	0x08009d54
 8005214:	08009d54 	.word	0x08009d54
 8005218:	08009d58 	.word	0x08009d58

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <__cvt>:
 800522c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005230:	ec55 4b10 	vmov	r4, r5, d0
 8005234:	2d00      	cmp	r5, #0
 8005236:	460e      	mov	r6, r1
 8005238:	4619      	mov	r1, r3
 800523a:	462b      	mov	r3, r5
 800523c:	bfbb      	ittet	lt
 800523e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005242:	461d      	movlt	r5, r3
 8005244:	2300      	movge	r3, #0
 8005246:	232d      	movlt	r3, #45	; 0x2d
 8005248:	700b      	strb	r3, [r1, #0]
 800524a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800524c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005250:	4691      	mov	r9, r2
 8005252:	f023 0820 	bic.w	r8, r3, #32
 8005256:	bfbc      	itt	lt
 8005258:	4622      	movlt	r2, r4
 800525a:	4614      	movlt	r4, r2
 800525c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005260:	d005      	beq.n	800526e <__cvt+0x42>
 8005262:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005266:	d100      	bne.n	800526a <__cvt+0x3e>
 8005268:	3601      	adds	r6, #1
 800526a:	2102      	movs	r1, #2
 800526c:	e000      	b.n	8005270 <__cvt+0x44>
 800526e:	2103      	movs	r1, #3
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	ab02      	add	r3, sp, #8
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	ec45 4b10 	vmov	d0, r4, r5
 800527c:	4653      	mov	r3, sl
 800527e:	4632      	mov	r2, r6
 8005280:	f001 fc66 	bl	8006b50 <_dtoa_r>
 8005284:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005288:	4607      	mov	r7, r0
 800528a:	d102      	bne.n	8005292 <__cvt+0x66>
 800528c:	f019 0f01 	tst.w	r9, #1
 8005290:	d022      	beq.n	80052d8 <__cvt+0xac>
 8005292:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005296:	eb07 0906 	add.w	r9, r7, r6
 800529a:	d110      	bne.n	80052be <__cvt+0x92>
 800529c:	783b      	ldrb	r3, [r7, #0]
 800529e:	2b30      	cmp	r3, #48	; 0x30
 80052a0:	d10a      	bne.n	80052b8 <__cvt+0x8c>
 80052a2:	2200      	movs	r2, #0
 80052a4:	2300      	movs	r3, #0
 80052a6:	4620      	mov	r0, r4
 80052a8:	4629      	mov	r1, r5
 80052aa:	f7fb fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ae:	b918      	cbnz	r0, 80052b8 <__cvt+0x8c>
 80052b0:	f1c6 0601 	rsb	r6, r6, #1
 80052b4:	f8ca 6000 	str.w	r6, [sl]
 80052b8:	f8da 3000 	ldr.w	r3, [sl]
 80052bc:	4499      	add	r9, r3
 80052be:	2200      	movs	r2, #0
 80052c0:	2300      	movs	r3, #0
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7fb fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ca:	b108      	cbz	r0, 80052d0 <__cvt+0xa4>
 80052cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80052d0:	2230      	movs	r2, #48	; 0x30
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	454b      	cmp	r3, r9
 80052d6:	d307      	bcc.n	80052e8 <__cvt+0xbc>
 80052d8:	9b03      	ldr	r3, [sp, #12]
 80052da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052dc:	1bdb      	subs	r3, r3, r7
 80052de:	4638      	mov	r0, r7
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	b004      	add	sp, #16
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	1c59      	adds	r1, r3, #1
 80052ea:	9103      	str	r1, [sp, #12]
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e7f0      	b.n	80052d2 <__cvt+0xa6>

080052f0 <__exponent>:
 80052f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052f2:	4603      	mov	r3, r0
 80052f4:	2900      	cmp	r1, #0
 80052f6:	bfb8      	it	lt
 80052f8:	4249      	neglt	r1, r1
 80052fa:	f803 2b02 	strb.w	r2, [r3], #2
 80052fe:	bfb4      	ite	lt
 8005300:	222d      	movlt	r2, #45	; 0x2d
 8005302:	222b      	movge	r2, #43	; 0x2b
 8005304:	2909      	cmp	r1, #9
 8005306:	7042      	strb	r2, [r0, #1]
 8005308:	dd2a      	ble.n	8005360 <__exponent+0x70>
 800530a:	f10d 0407 	add.w	r4, sp, #7
 800530e:	46a4      	mov	ip, r4
 8005310:	270a      	movs	r7, #10
 8005312:	46a6      	mov	lr, r4
 8005314:	460a      	mov	r2, r1
 8005316:	fb91 f6f7 	sdiv	r6, r1, r7
 800531a:	fb07 1516 	mls	r5, r7, r6, r1
 800531e:	3530      	adds	r5, #48	; 0x30
 8005320:	2a63      	cmp	r2, #99	; 0x63
 8005322:	f104 34ff 	add.w	r4, r4, #4294967295
 8005326:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800532a:	4631      	mov	r1, r6
 800532c:	dcf1      	bgt.n	8005312 <__exponent+0x22>
 800532e:	3130      	adds	r1, #48	; 0x30
 8005330:	f1ae 0502 	sub.w	r5, lr, #2
 8005334:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005338:	1c44      	adds	r4, r0, #1
 800533a:	4629      	mov	r1, r5
 800533c:	4561      	cmp	r1, ip
 800533e:	d30a      	bcc.n	8005356 <__exponent+0x66>
 8005340:	f10d 0209 	add.w	r2, sp, #9
 8005344:	eba2 020e 	sub.w	r2, r2, lr
 8005348:	4565      	cmp	r5, ip
 800534a:	bf88      	it	hi
 800534c:	2200      	movhi	r2, #0
 800534e:	4413      	add	r3, r2
 8005350:	1a18      	subs	r0, r3, r0
 8005352:	b003      	add	sp, #12
 8005354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800535a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800535e:	e7ed      	b.n	800533c <__exponent+0x4c>
 8005360:	2330      	movs	r3, #48	; 0x30
 8005362:	3130      	adds	r1, #48	; 0x30
 8005364:	7083      	strb	r3, [r0, #2]
 8005366:	70c1      	strb	r1, [r0, #3]
 8005368:	1d03      	adds	r3, r0, #4
 800536a:	e7f1      	b.n	8005350 <__exponent+0x60>

0800536c <_printf_float>:
 800536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005370:	ed2d 8b02 	vpush	{d8}
 8005374:	b08d      	sub	sp, #52	; 0x34
 8005376:	460c      	mov	r4, r1
 8005378:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800537c:	4616      	mov	r6, r2
 800537e:	461f      	mov	r7, r3
 8005380:	4605      	mov	r5, r0
 8005382:	f002 fef7 	bl	8008174 <_localeconv_r>
 8005386:	f8d0 a000 	ldr.w	sl, [r0]
 800538a:	4650      	mov	r0, sl
 800538c:	f7fa ff28 	bl	80001e0 <strlen>
 8005390:	2300      	movs	r3, #0
 8005392:	930a      	str	r3, [sp, #40]	; 0x28
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	9305      	str	r3, [sp, #20]
 8005398:	f8d8 3000 	ldr.w	r3, [r8]
 800539c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053a0:	3307      	adds	r3, #7
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	f103 0208 	add.w	r2, r3, #8
 80053aa:	f8c8 2000 	str.w	r2, [r8]
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053be:	9307      	str	r3, [sp, #28]
 80053c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80053c4:	ee08 0a10 	vmov	s16, r0
 80053c8:	4b9f      	ldr	r3, [pc, #636]	; (8005648 <_printf_float+0x2dc>)
 80053ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295
 80053d2:	f7fb fbb3 	bl	8000b3c <__aeabi_dcmpun>
 80053d6:	bb88      	cbnz	r0, 800543c <_printf_float+0xd0>
 80053d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053dc:	4b9a      	ldr	r3, [pc, #616]	; (8005648 <_printf_float+0x2dc>)
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	f7fb fb8d 	bl	8000b00 <__aeabi_dcmple>
 80053e6:	bb48      	cbnz	r0, 800543c <_printf_float+0xd0>
 80053e8:	2200      	movs	r2, #0
 80053ea:	2300      	movs	r3, #0
 80053ec:	4640      	mov	r0, r8
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fb fb7c 	bl	8000aec <__aeabi_dcmplt>
 80053f4:	b110      	cbz	r0, 80053fc <_printf_float+0x90>
 80053f6:	232d      	movs	r3, #45	; 0x2d
 80053f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fc:	4b93      	ldr	r3, [pc, #588]	; (800564c <_printf_float+0x2e0>)
 80053fe:	4894      	ldr	r0, [pc, #592]	; (8005650 <_printf_float+0x2e4>)
 8005400:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005404:	bf94      	ite	ls
 8005406:	4698      	movls	r8, r3
 8005408:	4680      	movhi	r8, r0
 800540a:	2303      	movs	r3, #3
 800540c:	6123      	str	r3, [r4, #16]
 800540e:	9b05      	ldr	r3, [sp, #20]
 8005410:	f023 0204 	bic.w	r2, r3, #4
 8005414:	6022      	str	r2, [r4, #0]
 8005416:	f04f 0900 	mov.w	r9, #0
 800541a:	9700      	str	r7, [sp, #0]
 800541c:	4633      	mov	r3, r6
 800541e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f9d8 	bl	80057d8 <_printf_common>
 8005428:	3001      	adds	r0, #1
 800542a:	f040 8090 	bne.w	800554e <_printf_float+0x1e2>
 800542e:	f04f 30ff 	mov.w	r0, #4294967295
 8005432:	b00d      	add	sp, #52	; 0x34
 8005434:	ecbd 8b02 	vpop	{d8}
 8005438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	4640      	mov	r0, r8
 8005442:	4649      	mov	r1, r9
 8005444:	f7fb fb7a 	bl	8000b3c <__aeabi_dcmpun>
 8005448:	b140      	cbz	r0, 800545c <_printf_float+0xf0>
 800544a:	464b      	mov	r3, r9
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfbc      	itt	lt
 8005450:	232d      	movlt	r3, #45	; 0x2d
 8005452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005456:	487f      	ldr	r0, [pc, #508]	; (8005654 <_printf_float+0x2e8>)
 8005458:	4b7f      	ldr	r3, [pc, #508]	; (8005658 <_printf_float+0x2ec>)
 800545a:	e7d1      	b.n	8005400 <_printf_float+0x94>
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005462:	9206      	str	r2, [sp, #24]
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	d13f      	bne.n	80054e8 <_printf_float+0x17c>
 8005468:	2306      	movs	r3, #6
 800546a:	6063      	str	r3, [r4, #4]
 800546c:	9b05      	ldr	r3, [sp, #20]
 800546e:	6861      	ldr	r1, [r4, #4]
 8005470:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	ab0a      	add	r3, sp, #40	; 0x28
 800547a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800547e:	ab09      	add	r3, sp, #36	; 0x24
 8005480:	ec49 8b10 	vmov	d0, r8, r9
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6022      	str	r2, [r4, #0]
 8005488:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800548c:	4628      	mov	r0, r5
 800548e:	f7ff fecd 	bl	800522c <__cvt>
 8005492:	9b06      	ldr	r3, [sp, #24]
 8005494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005496:	2b47      	cmp	r3, #71	; 0x47
 8005498:	4680      	mov	r8, r0
 800549a:	d108      	bne.n	80054ae <_printf_float+0x142>
 800549c:	1cc8      	adds	r0, r1, #3
 800549e:	db02      	blt.n	80054a6 <_printf_float+0x13a>
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	4299      	cmp	r1, r3
 80054a4:	dd41      	ble.n	800552a <_printf_float+0x1be>
 80054a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80054aa:	fa5f fb8b 	uxtb.w	fp, fp
 80054ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054b2:	d820      	bhi.n	80054f6 <_printf_float+0x18a>
 80054b4:	3901      	subs	r1, #1
 80054b6:	465a      	mov	r2, fp
 80054b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054bc:	9109      	str	r1, [sp, #36]	; 0x24
 80054be:	f7ff ff17 	bl	80052f0 <__exponent>
 80054c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054c4:	1813      	adds	r3, r2, r0
 80054c6:	2a01      	cmp	r2, #1
 80054c8:	4681      	mov	r9, r0
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	dc02      	bgt.n	80054d4 <_printf_float+0x168>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	07d2      	lsls	r2, r2, #31
 80054d2:	d501      	bpl.n	80054d8 <_printf_float+0x16c>
 80054d4:	3301      	adds	r3, #1
 80054d6:	6123      	str	r3, [r4, #16]
 80054d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d09c      	beq.n	800541a <_printf_float+0xae>
 80054e0:	232d      	movs	r3, #45	; 0x2d
 80054e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e6:	e798      	b.n	800541a <_printf_float+0xae>
 80054e8:	9a06      	ldr	r2, [sp, #24]
 80054ea:	2a47      	cmp	r2, #71	; 0x47
 80054ec:	d1be      	bne.n	800546c <_printf_float+0x100>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1bc      	bne.n	800546c <_printf_float+0x100>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e7b9      	b.n	800546a <_printf_float+0xfe>
 80054f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054fa:	d118      	bne.n	800552e <_printf_float+0x1c2>
 80054fc:	2900      	cmp	r1, #0
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	dd0b      	ble.n	800551a <_printf_float+0x1ae>
 8005502:	6121      	str	r1, [r4, #16]
 8005504:	b913      	cbnz	r3, 800550c <_printf_float+0x1a0>
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	07d0      	lsls	r0, r2, #31
 800550a:	d502      	bpl.n	8005512 <_printf_float+0x1a6>
 800550c:	3301      	adds	r3, #1
 800550e:	440b      	add	r3, r1
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	65a1      	str	r1, [r4, #88]	; 0x58
 8005514:	f04f 0900 	mov.w	r9, #0
 8005518:	e7de      	b.n	80054d8 <_printf_float+0x16c>
 800551a:	b913      	cbnz	r3, 8005522 <_printf_float+0x1b6>
 800551c:	6822      	ldr	r2, [r4, #0]
 800551e:	07d2      	lsls	r2, r2, #31
 8005520:	d501      	bpl.n	8005526 <_printf_float+0x1ba>
 8005522:	3302      	adds	r3, #2
 8005524:	e7f4      	b.n	8005510 <_printf_float+0x1a4>
 8005526:	2301      	movs	r3, #1
 8005528:	e7f2      	b.n	8005510 <_printf_float+0x1a4>
 800552a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800552e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005530:	4299      	cmp	r1, r3
 8005532:	db05      	blt.n	8005540 <_printf_float+0x1d4>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	6121      	str	r1, [r4, #16]
 8005538:	07d8      	lsls	r0, r3, #31
 800553a:	d5ea      	bpl.n	8005512 <_printf_float+0x1a6>
 800553c:	1c4b      	adds	r3, r1, #1
 800553e:	e7e7      	b.n	8005510 <_printf_float+0x1a4>
 8005540:	2900      	cmp	r1, #0
 8005542:	bfd4      	ite	le
 8005544:	f1c1 0202 	rsble	r2, r1, #2
 8005548:	2201      	movgt	r2, #1
 800554a:	4413      	add	r3, r2
 800554c:	e7e0      	b.n	8005510 <_printf_float+0x1a4>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	055a      	lsls	r2, r3, #21
 8005552:	d407      	bmi.n	8005564 <_printf_float+0x1f8>
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	4642      	mov	r2, r8
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	d12c      	bne.n	80055bc <_printf_float+0x250>
 8005562:	e764      	b.n	800542e <_printf_float+0xc2>
 8005564:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005568:	f240 80e0 	bls.w	800572c <_printf_float+0x3c0>
 800556c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005570:	2200      	movs	r2, #0
 8005572:	2300      	movs	r3, #0
 8005574:	f7fb fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005578:	2800      	cmp	r0, #0
 800557a:	d034      	beq.n	80055e6 <_printf_float+0x27a>
 800557c:	4a37      	ldr	r2, [pc, #220]	; (800565c <_printf_float+0x2f0>)
 800557e:	2301      	movs	r3, #1
 8005580:	4631      	mov	r1, r6
 8005582:	4628      	mov	r0, r5
 8005584:	47b8      	blx	r7
 8005586:	3001      	adds	r0, #1
 8005588:	f43f af51 	beq.w	800542e <_printf_float+0xc2>
 800558c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005590:	429a      	cmp	r2, r3
 8005592:	db02      	blt.n	800559a <_printf_float+0x22e>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	07d8      	lsls	r0, r3, #31
 8005598:	d510      	bpl.n	80055bc <_printf_float+0x250>
 800559a:	ee18 3a10 	vmov	r3, s16
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f af41 	beq.w	800542e <_printf_float+0xc2>
 80055ac:	f04f 0800 	mov.w	r8, #0
 80055b0:	f104 091a 	add.w	r9, r4, #26
 80055b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b6:	3b01      	subs	r3, #1
 80055b8:	4543      	cmp	r3, r8
 80055ba:	dc09      	bgt.n	80055d0 <_printf_float+0x264>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	079b      	lsls	r3, r3, #30
 80055c0:	f100 8105 	bmi.w	80057ce <_printf_float+0x462>
 80055c4:	68e0      	ldr	r0, [r4, #12]
 80055c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c8:	4298      	cmp	r0, r3
 80055ca:	bfb8      	it	lt
 80055cc:	4618      	movlt	r0, r3
 80055ce:	e730      	b.n	8005432 <_printf_float+0xc6>
 80055d0:	2301      	movs	r3, #1
 80055d2:	464a      	mov	r2, r9
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f af27 	beq.w	800542e <_printf_float+0xc2>
 80055e0:	f108 0801 	add.w	r8, r8, #1
 80055e4:	e7e6      	b.n	80055b4 <_printf_float+0x248>
 80055e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dc39      	bgt.n	8005660 <_printf_float+0x2f4>
 80055ec:	4a1b      	ldr	r2, [pc, #108]	; (800565c <_printf_float+0x2f0>)
 80055ee:	2301      	movs	r3, #1
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af19 	beq.w	800542e <_printf_float+0xc2>
 80055fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005600:	4313      	orrs	r3, r2
 8005602:	d102      	bne.n	800560a <_printf_float+0x29e>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	07d9      	lsls	r1, r3, #31
 8005608:	d5d8      	bpl.n	80055bc <_printf_float+0x250>
 800560a:	ee18 3a10 	vmov	r3, s16
 800560e:	4652      	mov	r2, sl
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f af09 	beq.w	800542e <_printf_float+0xc2>
 800561c:	f04f 0900 	mov.w	r9, #0
 8005620:	f104 0a1a 	add.w	sl, r4, #26
 8005624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005626:	425b      	negs	r3, r3
 8005628:	454b      	cmp	r3, r9
 800562a:	dc01      	bgt.n	8005630 <_printf_float+0x2c4>
 800562c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562e:	e792      	b.n	8005556 <_printf_float+0x1ea>
 8005630:	2301      	movs	r3, #1
 8005632:	4652      	mov	r2, sl
 8005634:	4631      	mov	r1, r6
 8005636:	4628      	mov	r0, r5
 8005638:	47b8      	blx	r7
 800563a:	3001      	adds	r0, #1
 800563c:	f43f aef7 	beq.w	800542e <_printf_float+0xc2>
 8005640:	f109 0901 	add.w	r9, r9, #1
 8005644:	e7ee      	b.n	8005624 <_printf_float+0x2b8>
 8005646:	bf00      	nop
 8005648:	7fefffff 	.word	0x7fefffff
 800564c:	080098a4 	.word	0x080098a4
 8005650:	080098a8 	.word	0x080098a8
 8005654:	080098b0 	.word	0x080098b0
 8005658:	080098ac 	.word	0x080098ac
 800565c:	080098b4 	.word	0x080098b4
 8005660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005664:	429a      	cmp	r2, r3
 8005666:	bfa8      	it	ge
 8005668:	461a      	movge	r2, r3
 800566a:	2a00      	cmp	r2, #0
 800566c:	4691      	mov	r9, r2
 800566e:	dc37      	bgt.n	80056e0 <_printf_float+0x374>
 8005670:	f04f 0b00 	mov.w	fp, #0
 8005674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005678:	f104 021a 	add.w	r2, r4, #26
 800567c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800567e:	9305      	str	r3, [sp, #20]
 8005680:	eba3 0309 	sub.w	r3, r3, r9
 8005684:	455b      	cmp	r3, fp
 8005686:	dc33      	bgt.n	80056f0 <_printf_float+0x384>
 8005688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800568c:	429a      	cmp	r2, r3
 800568e:	db3b      	blt.n	8005708 <_printf_float+0x39c>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07da      	lsls	r2, r3, #31
 8005694:	d438      	bmi.n	8005708 <_printf_float+0x39c>
 8005696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005698:	9b05      	ldr	r3, [sp, #20]
 800569a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	eba2 0901 	sub.w	r9, r2, r1
 80056a2:	4599      	cmp	r9, r3
 80056a4:	bfa8      	it	ge
 80056a6:	4699      	movge	r9, r3
 80056a8:	f1b9 0f00 	cmp.w	r9, #0
 80056ac:	dc35      	bgt.n	800571a <_printf_float+0x3ae>
 80056ae:	f04f 0800 	mov.w	r8, #0
 80056b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056b6:	f104 0a1a 	add.w	sl, r4, #26
 80056ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	eba3 0309 	sub.w	r3, r3, r9
 80056c4:	4543      	cmp	r3, r8
 80056c6:	f77f af79 	ble.w	80055bc <_printf_float+0x250>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4652      	mov	r2, sl
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	f43f aeaa 	beq.w	800542e <_printf_float+0xc2>
 80056da:	f108 0801 	add.w	r8, r8, #1
 80056de:	e7ec      	b.n	80056ba <_printf_float+0x34e>
 80056e0:	4613      	mov	r3, r2
 80056e2:	4631      	mov	r1, r6
 80056e4:	4642      	mov	r2, r8
 80056e6:	4628      	mov	r0, r5
 80056e8:	47b8      	blx	r7
 80056ea:	3001      	adds	r0, #1
 80056ec:	d1c0      	bne.n	8005670 <_printf_float+0x304>
 80056ee:	e69e      	b.n	800542e <_printf_float+0xc2>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4631      	mov	r1, r6
 80056f4:	4628      	mov	r0, r5
 80056f6:	9205      	str	r2, [sp, #20]
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	f43f ae97 	beq.w	800542e <_printf_float+0xc2>
 8005700:	9a05      	ldr	r2, [sp, #20]
 8005702:	f10b 0b01 	add.w	fp, fp, #1
 8005706:	e7b9      	b.n	800567c <_printf_float+0x310>
 8005708:	ee18 3a10 	vmov	r3, s16
 800570c:	4652      	mov	r2, sl
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	47b8      	blx	r7
 8005714:	3001      	adds	r0, #1
 8005716:	d1be      	bne.n	8005696 <_printf_float+0x32a>
 8005718:	e689      	b.n	800542e <_printf_float+0xc2>
 800571a:	9a05      	ldr	r2, [sp, #20]
 800571c:	464b      	mov	r3, r9
 800571e:	4442      	add	r2, r8
 8005720:	4631      	mov	r1, r6
 8005722:	4628      	mov	r0, r5
 8005724:	47b8      	blx	r7
 8005726:	3001      	adds	r0, #1
 8005728:	d1c1      	bne.n	80056ae <_printf_float+0x342>
 800572a:	e680      	b.n	800542e <_printf_float+0xc2>
 800572c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800572e:	2a01      	cmp	r2, #1
 8005730:	dc01      	bgt.n	8005736 <_printf_float+0x3ca>
 8005732:	07db      	lsls	r3, r3, #31
 8005734:	d538      	bpl.n	80057a8 <_printf_float+0x43c>
 8005736:	2301      	movs	r3, #1
 8005738:	4642      	mov	r2, r8
 800573a:	4631      	mov	r1, r6
 800573c:	4628      	mov	r0, r5
 800573e:	47b8      	blx	r7
 8005740:	3001      	adds	r0, #1
 8005742:	f43f ae74 	beq.w	800542e <_printf_float+0xc2>
 8005746:	ee18 3a10 	vmov	r3, s16
 800574a:	4652      	mov	r2, sl
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	47b8      	blx	r7
 8005752:	3001      	adds	r0, #1
 8005754:	f43f ae6b 	beq.w	800542e <_printf_float+0xc2>
 8005758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800575c:	2200      	movs	r2, #0
 800575e:	2300      	movs	r3, #0
 8005760:	f7fb f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8005764:	b9d8      	cbnz	r0, 800579e <_printf_float+0x432>
 8005766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005768:	f108 0201 	add.w	r2, r8, #1
 800576c:	3b01      	subs	r3, #1
 800576e:	4631      	mov	r1, r6
 8005770:	4628      	mov	r0, r5
 8005772:	47b8      	blx	r7
 8005774:	3001      	adds	r0, #1
 8005776:	d10e      	bne.n	8005796 <_printf_float+0x42a>
 8005778:	e659      	b.n	800542e <_printf_float+0xc2>
 800577a:	2301      	movs	r3, #1
 800577c:	4652      	mov	r2, sl
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	f43f ae52 	beq.w	800542e <_printf_float+0xc2>
 800578a:	f108 0801 	add.w	r8, r8, #1
 800578e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005790:	3b01      	subs	r3, #1
 8005792:	4543      	cmp	r3, r8
 8005794:	dcf1      	bgt.n	800577a <_printf_float+0x40e>
 8005796:	464b      	mov	r3, r9
 8005798:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800579c:	e6dc      	b.n	8005558 <_printf_float+0x1ec>
 800579e:	f04f 0800 	mov.w	r8, #0
 80057a2:	f104 0a1a 	add.w	sl, r4, #26
 80057a6:	e7f2      	b.n	800578e <_printf_float+0x422>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4642      	mov	r2, r8
 80057ac:	e7df      	b.n	800576e <_printf_float+0x402>
 80057ae:	2301      	movs	r3, #1
 80057b0:	464a      	mov	r2, r9
 80057b2:	4631      	mov	r1, r6
 80057b4:	4628      	mov	r0, r5
 80057b6:	47b8      	blx	r7
 80057b8:	3001      	adds	r0, #1
 80057ba:	f43f ae38 	beq.w	800542e <_printf_float+0xc2>
 80057be:	f108 0801 	add.w	r8, r8, #1
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057c6:	1a5b      	subs	r3, r3, r1
 80057c8:	4543      	cmp	r3, r8
 80057ca:	dcf0      	bgt.n	80057ae <_printf_float+0x442>
 80057cc:	e6fa      	b.n	80055c4 <_printf_float+0x258>
 80057ce:	f04f 0800 	mov.w	r8, #0
 80057d2:	f104 0919 	add.w	r9, r4, #25
 80057d6:	e7f4      	b.n	80057c2 <_printf_float+0x456>

080057d8 <_printf_common>:
 80057d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	4616      	mov	r6, r2
 80057de:	4699      	mov	r9, r3
 80057e0:	688a      	ldr	r2, [r1, #8]
 80057e2:	690b      	ldr	r3, [r1, #16]
 80057e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	bfb8      	it	lt
 80057ec:	4613      	movlt	r3, r2
 80057ee:	6033      	str	r3, [r6, #0]
 80057f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057f4:	4607      	mov	r7, r0
 80057f6:	460c      	mov	r4, r1
 80057f8:	b10a      	cbz	r2, 80057fe <_printf_common+0x26>
 80057fa:	3301      	adds	r3, #1
 80057fc:	6033      	str	r3, [r6, #0]
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	0699      	lsls	r1, r3, #26
 8005802:	bf42      	ittt	mi
 8005804:	6833      	ldrmi	r3, [r6, #0]
 8005806:	3302      	addmi	r3, #2
 8005808:	6033      	strmi	r3, [r6, #0]
 800580a:	6825      	ldr	r5, [r4, #0]
 800580c:	f015 0506 	ands.w	r5, r5, #6
 8005810:	d106      	bne.n	8005820 <_printf_common+0x48>
 8005812:	f104 0a19 	add.w	sl, r4, #25
 8005816:	68e3      	ldr	r3, [r4, #12]
 8005818:	6832      	ldr	r2, [r6, #0]
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	42ab      	cmp	r3, r5
 800581e:	dc26      	bgt.n	800586e <_printf_common+0x96>
 8005820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005824:	1e13      	subs	r3, r2, #0
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	bf18      	it	ne
 800582a:	2301      	movne	r3, #1
 800582c:	0692      	lsls	r2, r2, #26
 800582e:	d42b      	bmi.n	8005888 <_printf_common+0xb0>
 8005830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005834:	4649      	mov	r1, r9
 8005836:	4638      	mov	r0, r7
 8005838:	47c0      	blx	r8
 800583a:	3001      	adds	r0, #1
 800583c:	d01e      	beq.n	800587c <_printf_common+0xa4>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	68e5      	ldr	r5, [r4, #12]
 8005842:	6832      	ldr	r2, [r6, #0]
 8005844:	f003 0306 	and.w	r3, r3, #6
 8005848:	2b04      	cmp	r3, #4
 800584a:	bf08      	it	eq
 800584c:	1aad      	subeq	r5, r5, r2
 800584e:	68a3      	ldr	r3, [r4, #8]
 8005850:	6922      	ldr	r2, [r4, #16]
 8005852:	bf0c      	ite	eq
 8005854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005858:	2500      	movne	r5, #0
 800585a:	4293      	cmp	r3, r2
 800585c:	bfc4      	itt	gt
 800585e:	1a9b      	subgt	r3, r3, r2
 8005860:	18ed      	addgt	r5, r5, r3
 8005862:	2600      	movs	r6, #0
 8005864:	341a      	adds	r4, #26
 8005866:	42b5      	cmp	r5, r6
 8005868:	d11a      	bne.n	80058a0 <_printf_common+0xc8>
 800586a:	2000      	movs	r0, #0
 800586c:	e008      	b.n	8005880 <_printf_common+0xa8>
 800586e:	2301      	movs	r3, #1
 8005870:	4652      	mov	r2, sl
 8005872:	4649      	mov	r1, r9
 8005874:	4638      	mov	r0, r7
 8005876:	47c0      	blx	r8
 8005878:	3001      	adds	r0, #1
 800587a:	d103      	bne.n	8005884 <_printf_common+0xac>
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005884:	3501      	adds	r5, #1
 8005886:	e7c6      	b.n	8005816 <_printf_common+0x3e>
 8005888:	18e1      	adds	r1, r4, r3
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	2030      	movs	r0, #48	; 0x30
 800588e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005892:	4422      	add	r2, r4
 8005894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800589c:	3302      	adds	r3, #2
 800589e:	e7c7      	b.n	8005830 <_printf_common+0x58>
 80058a0:	2301      	movs	r3, #1
 80058a2:	4622      	mov	r2, r4
 80058a4:	4649      	mov	r1, r9
 80058a6:	4638      	mov	r0, r7
 80058a8:	47c0      	blx	r8
 80058aa:	3001      	adds	r0, #1
 80058ac:	d0e6      	beq.n	800587c <_printf_common+0xa4>
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7d9      	b.n	8005866 <_printf_common+0x8e>
	...

080058b4 <_printf_i>:
 80058b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	460c      	mov	r4, r1
 80058ba:	4691      	mov	r9, r2
 80058bc:	7e27      	ldrb	r7, [r4, #24]
 80058be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058c0:	2f78      	cmp	r7, #120	; 0x78
 80058c2:	4680      	mov	r8, r0
 80058c4:	469a      	mov	sl, r3
 80058c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ca:	d807      	bhi.n	80058dc <_printf_i+0x28>
 80058cc:	2f62      	cmp	r7, #98	; 0x62
 80058ce:	d80a      	bhi.n	80058e6 <_printf_i+0x32>
 80058d0:	2f00      	cmp	r7, #0
 80058d2:	f000 80d8 	beq.w	8005a86 <_printf_i+0x1d2>
 80058d6:	2f58      	cmp	r7, #88	; 0x58
 80058d8:	f000 80a3 	beq.w	8005a22 <_printf_i+0x16e>
 80058dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058e4:	e03a      	b.n	800595c <_printf_i+0xa8>
 80058e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058ea:	2b15      	cmp	r3, #21
 80058ec:	d8f6      	bhi.n	80058dc <_printf_i+0x28>
 80058ee:	a001      	add	r0, pc, #4	; (adr r0, 80058f4 <_printf_i+0x40>)
 80058f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80058f4:	0800594d 	.word	0x0800594d
 80058f8:	08005961 	.word	0x08005961
 80058fc:	080058dd 	.word	0x080058dd
 8005900:	080058dd 	.word	0x080058dd
 8005904:	080058dd 	.word	0x080058dd
 8005908:	080058dd 	.word	0x080058dd
 800590c:	08005961 	.word	0x08005961
 8005910:	080058dd 	.word	0x080058dd
 8005914:	080058dd 	.word	0x080058dd
 8005918:	080058dd 	.word	0x080058dd
 800591c:	080058dd 	.word	0x080058dd
 8005920:	08005a6d 	.word	0x08005a6d
 8005924:	08005991 	.word	0x08005991
 8005928:	08005a4f 	.word	0x08005a4f
 800592c:	080058dd 	.word	0x080058dd
 8005930:	080058dd 	.word	0x080058dd
 8005934:	08005a8f 	.word	0x08005a8f
 8005938:	080058dd 	.word	0x080058dd
 800593c:	08005991 	.word	0x08005991
 8005940:	080058dd 	.word	0x080058dd
 8005944:	080058dd 	.word	0x080058dd
 8005948:	08005a57 	.word	0x08005a57
 800594c:	680b      	ldr	r3, [r1, #0]
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	600a      	str	r2, [r1, #0]
 8005954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800595c:	2301      	movs	r3, #1
 800595e:	e0a3      	b.n	8005aa8 <_printf_i+0x1f4>
 8005960:	6825      	ldr	r5, [r4, #0]
 8005962:	6808      	ldr	r0, [r1, #0]
 8005964:	062e      	lsls	r6, r5, #24
 8005966:	f100 0304 	add.w	r3, r0, #4
 800596a:	d50a      	bpl.n	8005982 <_printf_i+0xce>
 800596c:	6805      	ldr	r5, [r0, #0]
 800596e:	600b      	str	r3, [r1, #0]
 8005970:	2d00      	cmp	r5, #0
 8005972:	da03      	bge.n	800597c <_printf_i+0xc8>
 8005974:	232d      	movs	r3, #45	; 0x2d
 8005976:	426d      	negs	r5, r5
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597c:	485e      	ldr	r0, [pc, #376]	; (8005af8 <_printf_i+0x244>)
 800597e:	230a      	movs	r3, #10
 8005980:	e019      	b.n	80059b6 <_printf_i+0x102>
 8005982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005986:	6805      	ldr	r5, [r0, #0]
 8005988:	600b      	str	r3, [r1, #0]
 800598a:	bf18      	it	ne
 800598c:	b22d      	sxthne	r5, r5
 800598e:	e7ef      	b.n	8005970 <_printf_i+0xbc>
 8005990:	680b      	ldr	r3, [r1, #0]
 8005992:	6825      	ldr	r5, [r4, #0]
 8005994:	1d18      	adds	r0, r3, #4
 8005996:	6008      	str	r0, [r1, #0]
 8005998:	0628      	lsls	r0, r5, #24
 800599a:	d501      	bpl.n	80059a0 <_printf_i+0xec>
 800599c:	681d      	ldr	r5, [r3, #0]
 800599e:	e002      	b.n	80059a6 <_printf_i+0xf2>
 80059a0:	0669      	lsls	r1, r5, #25
 80059a2:	d5fb      	bpl.n	800599c <_printf_i+0xe8>
 80059a4:	881d      	ldrh	r5, [r3, #0]
 80059a6:	4854      	ldr	r0, [pc, #336]	; (8005af8 <_printf_i+0x244>)
 80059a8:	2f6f      	cmp	r7, #111	; 0x6f
 80059aa:	bf0c      	ite	eq
 80059ac:	2308      	moveq	r3, #8
 80059ae:	230a      	movne	r3, #10
 80059b0:	2100      	movs	r1, #0
 80059b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059b6:	6866      	ldr	r6, [r4, #4]
 80059b8:	60a6      	str	r6, [r4, #8]
 80059ba:	2e00      	cmp	r6, #0
 80059bc:	bfa2      	ittt	ge
 80059be:	6821      	ldrge	r1, [r4, #0]
 80059c0:	f021 0104 	bicge.w	r1, r1, #4
 80059c4:	6021      	strge	r1, [r4, #0]
 80059c6:	b90d      	cbnz	r5, 80059cc <_printf_i+0x118>
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	d04d      	beq.n	8005a68 <_printf_i+0x1b4>
 80059cc:	4616      	mov	r6, r2
 80059ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80059d2:	fb03 5711 	mls	r7, r3, r1, r5
 80059d6:	5dc7      	ldrb	r7, [r0, r7]
 80059d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059dc:	462f      	mov	r7, r5
 80059de:	42bb      	cmp	r3, r7
 80059e0:	460d      	mov	r5, r1
 80059e2:	d9f4      	bls.n	80059ce <_printf_i+0x11a>
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d10b      	bne.n	8005a00 <_printf_i+0x14c>
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	07df      	lsls	r7, r3, #31
 80059ec:	d508      	bpl.n	8005a00 <_printf_i+0x14c>
 80059ee:	6923      	ldr	r3, [r4, #16]
 80059f0:	6861      	ldr	r1, [r4, #4]
 80059f2:	4299      	cmp	r1, r3
 80059f4:	bfde      	ittt	le
 80059f6:	2330      	movle	r3, #48	; 0x30
 80059f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a00:	1b92      	subs	r2, r2, r6
 8005a02:	6122      	str	r2, [r4, #16]
 8005a04:	f8cd a000 	str.w	sl, [sp]
 8005a08:	464b      	mov	r3, r9
 8005a0a:	aa03      	add	r2, sp, #12
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4640      	mov	r0, r8
 8005a10:	f7ff fee2 	bl	80057d8 <_printf_common>
 8005a14:	3001      	adds	r0, #1
 8005a16:	d14c      	bne.n	8005ab2 <_printf_i+0x1fe>
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	b004      	add	sp, #16
 8005a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a22:	4835      	ldr	r0, [pc, #212]	; (8005af8 <_printf_i+0x244>)
 8005a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	680e      	ldr	r6, [r1, #0]
 8005a2c:	061f      	lsls	r7, r3, #24
 8005a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a32:	600e      	str	r6, [r1, #0]
 8005a34:	d514      	bpl.n	8005a60 <_printf_i+0x1ac>
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	bf44      	itt	mi
 8005a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a3e:	6023      	strmi	r3, [r4, #0]
 8005a40:	b91d      	cbnz	r5, 8005a4a <_printf_i+0x196>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	f023 0320 	bic.w	r3, r3, #32
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	e7b0      	b.n	80059b0 <_printf_i+0xfc>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f043 0320 	orr.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	2378      	movs	r3, #120	; 0x78
 8005a58:	4828      	ldr	r0, [pc, #160]	; (8005afc <_printf_i+0x248>)
 8005a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a5e:	e7e3      	b.n	8005a28 <_printf_i+0x174>
 8005a60:	065e      	lsls	r6, r3, #25
 8005a62:	bf48      	it	mi
 8005a64:	b2ad      	uxthmi	r5, r5
 8005a66:	e7e6      	b.n	8005a36 <_printf_i+0x182>
 8005a68:	4616      	mov	r6, r2
 8005a6a:	e7bb      	b.n	80059e4 <_printf_i+0x130>
 8005a6c:	680b      	ldr	r3, [r1, #0]
 8005a6e:	6826      	ldr	r6, [r4, #0]
 8005a70:	6960      	ldr	r0, [r4, #20]
 8005a72:	1d1d      	adds	r5, r3, #4
 8005a74:	600d      	str	r5, [r1, #0]
 8005a76:	0635      	lsls	r5, r6, #24
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	d501      	bpl.n	8005a80 <_printf_i+0x1cc>
 8005a7c:	6018      	str	r0, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <_printf_i+0x1d2>
 8005a80:	0671      	lsls	r1, r6, #25
 8005a82:	d5fb      	bpl.n	8005a7c <_printf_i+0x1c8>
 8005a84:	8018      	strh	r0, [r3, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	4616      	mov	r6, r2
 8005a8c:	e7ba      	b.n	8005a04 <_printf_i+0x150>
 8005a8e:	680b      	ldr	r3, [r1, #0]
 8005a90:	1d1a      	adds	r2, r3, #4
 8005a92:	600a      	str	r2, [r1, #0]
 8005a94:	681e      	ldr	r6, [r3, #0]
 8005a96:	6862      	ldr	r2, [r4, #4]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f7fa fba8 	bl	80001f0 <memchr>
 8005aa0:	b108      	cbz	r0, 8005aa6 <_printf_i+0x1f2>
 8005aa2:	1b80      	subs	r0, r0, r6
 8005aa4:	6060      	str	r0, [r4, #4]
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab0:	e7a8      	b.n	8005a04 <_printf_i+0x150>
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	47d0      	blx	sl
 8005abc:	3001      	adds	r0, #1
 8005abe:	d0ab      	beq.n	8005a18 <_printf_i+0x164>
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	079b      	lsls	r3, r3, #30
 8005ac4:	d413      	bmi.n	8005aee <_printf_i+0x23a>
 8005ac6:	68e0      	ldr	r0, [r4, #12]
 8005ac8:	9b03      	ldr	r3, [sp, #12]
 8005aca:	4298      	cmp	r0, r3
 8005acc:	bfb8      	it	lt
 8005ace:	4618      	movlt	r0, r3
 8005ad0:	e7a4      	b.n	8005a1c <_printf_i+0x168>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4640      	mov	r0, r8
 8005ada:	47d0      	blx	sl
 8005adc:	3001      	adds	r0, #1
 8005ade:	d09b      	beq.n	8005a18 <_printf_i+0x164>
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	9903      	ldr	r1, [sp, #12]
 8005ae6:	1a5b      	subs	r3, r3, r1
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	dcf2      	bgt.n	8005ad2 <_printf_i+0x21e>
 8005aec:	e7eb      	b.n	8005ac6 <_printf_i+0x212>
 8005aee:	2500      	movs	r5, #0
 8005af0:	f104 0619 	add.w	r6, r4, #25
 8005af4:	e7f5      	b.n	8005ae2 <_printf_i+0x22e>
 8005af6:	bf00      	nop
 8005af8:	080098b6 	.word	0x080098b6
 8005afc:	080098c7 	.word	0x080098c7

08005b00 <iprintf>:
 8005b00:	b40f      	push	{r0, r1, r2, r3}
 8005b02:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <iprintf+0x2c>)
 8005b04:	b513      	push	{r0, r1, r4, lr}
 8005b06:	681c      	ldr	r4, [r3, #0]
 8005b08:	b124      	cbz	r4, 8005b14 <iprintf+0x14>
 8005b0a:	69a3      	ldr	r3, [r4, #24]
 8005b0c:	b913      	cbnz	r3, 8005b14 <iprintf+0x14>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f001 ff24 	bl	800795c <__sinit>
 8005b14:	ab05      	add	r3, sp, #20
 8005b16:	9a04      	ldr	r2, [sp, #16]
 8005b18:	68a1      	ldr	r1, [r4, #8]
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f003 f95b 	bl	8008dd8 <_vfiprintf_r>
 8005b22:	b002      	add	sp, #8
 8005b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b28:	b004      	add	sp, #16
 8005b2a:	4770      	bx	lr
 8005b2c:	20000014 	.word	0x20000014

08005b30 <_puts_r>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	460e      	mov	r6, r1
 8005b34:	4605      	mov	r5, r0
 8005b36:	b118      	cbz	r0, 8005b40 <_puts_r+0x10>
 8005b38:	6983      	ldr	r3, [r0, #24]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <_puts_r+0x10>
 8005b3c:	f001 ff0e 	bl	800795c <__sinit>
 8005b40:	69ab      	ldr	r3, [r5, #24]
 8005b42:	68ac      	ldr	r4, [r5, #8]
 8005b44:	b913      	cbnz	r3, 8005b4c <_puts_r+0x1c>
 8005b46:	4628      	mov	r0, r5
 8005b48:	f001 ff08 	bl	800795c <__sinit>
 8005b4c:	4b2c      	ldr	r3, [pc, #176]	; (8005c00 <_puts_r+0xd0>)
 8005b4e:	429c      	cmp	r4, r3
 8005b50:	d120      	bne.n	8005b94 <_puts_r+0x64>
 8005b52:	686c      	ldr	r4, [r5, #4]
 8005b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b56:	07db      	lsls	r3, r3, #31
 8005b58:	d405      	bmi.n	8005b66 <_puts_r+0x36>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	0598      	lsls	r0, r3, #22
 8005b5e:	d402      	bmi.n	8005b66 <_puts_r+0x36>
 8005b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b62:	f002 fb0c 	bl	800817e <__retarget_lock_acquire_recursive>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	0719      	lsls	r1, r3, #28
 8005b6a:	d51d      	bpl.n	8005ba8 <_puts_r+0x78>
 8005b6c:	6923      	ldr	r3, [r4, #16]
 8005b6e:	b1db      	cbz	r3, 8005ba8 <_puts_r+0x78>
 8005b70:	3e01      	subs	r6, #1
 8005b72:	68a3      	ldr	r3, [r4, #8]
 8005b74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	bb39      	cbnz	r1, 8005bce <_puts_r+0x9e>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da38      	bge.n	8005bf4 <_puts_r+0xc4>
 8005b82:	4622      	mov	r2, r4
 8005b84:	210a      	movs	r1, #10
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 fe94 	bl	80068b4 <__swbuf_r>
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d011      	beq.n	8005bb4 <_puts_r+0x84>
 8005b90:	250a      	movs	r5, #10
 8005b92:	e011      	b.n	8005bb8 <_puts_r+0x88>
 8005b94:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <_puts_r+0xd4>)
 8005b96:	429c      	cmp	r4, r3
 8005b98:	d101      	bne.n	8005b9e <_puts_r+0x6e>
 8005b9a:	68ac      	ldr	r4, [r5, #8]
 8005b9c:	e7da      	b.n	8005b54 <_puts_r+0x24>
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <_puts_r+0xd8>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	bf08      	it	eq
 8005ba4:	68ec      	ldreq	r4, [r5, #12]
 8005ba6:	e7d5      	b.n	8005b54 <_puts_r+0x24>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 fed4 	bl	8006958 <__swsetup_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d0dd      	beq.n	8005b70 <_puts_r+0x40>
 8005bb4:	f04f 35ff 	mov.w	r5, #4294967295
 8005bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bba:	07da      	lsls	r2, r3, #31
 8005bbc:	d405      	bmi.n	8005bca <_puts_r+0x9a>
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	059b      	lsls	r3, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_puts_r+0x9a>
 8005bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bc6:	f002 fadb 	bl	8008180 <__retarget_lock_release_recursive>
 8005bca:	4628      	mov	r0, r5
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da04      	bge.n	8005bdc <_puts_r+0xac>
 8005bd2:	69a2      	ldr	r2, [r4, #24]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	dc06      	bgt.n	8005be6 <_puts_r+0xb6>
 8005bd8:	290a      	cmp	r1, #10
 8005bda:	d004      	beq.n	8005be6 <_puts_r+0xb6>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	6022      	str	r2, [r4, #0]
 8005be2:	7019      	strb	r1, [r3, #0]
 8005be4:	e7c5      	b.n	8005b72 <_puts_r+0x42>
 8005be6:	4622      	mov	r2, r4
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 fe63 	bl	80068b4 <__swbuf_r>
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d1bf      	bne.n	8005b72 <_puts_r+0x42>
 8005bf2:	e7df      	b.n	8005bb4 <_puts_r+0x84>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	250a      	movs	r5, #10
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	6022      	str	r2, [r4, #0]
 8005bfc:	701d      	strb	r5, [r3, #0]
 8005bfe:	e7db      	b.n	8005bb8 <_puts_r+0x88>
 8005c00:	080099dc 	.word	0x080099dc
 8005c04:	080099fc 	.word	0x080099fc
 8005c08:	080099bc 	.word	0x080099bc

08005c0c <puts>:
 8005c0c:	4b02      	ldr	r3, [pc, #8]	; (8005c18 <puts+0xc>)
 8005c0e:	4601      	mov	r1, r0
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	f7ff bf8d 	b.w	8005b30 <_puts_r>
 8005c16:	bf00      	nop
 8005c18:	20000014 	.word	0x20000014

08005c1c <strstr>:
 8005c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1e:	780c      	ldrb	r4, [r1, #0]
 8005c20:	b164      	cbz	r4, 8005c3c <strstr+0x20>
 8005c22:	4603      	mov	r3, r0
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	1c5e      	adds	r6, r3, #1
 8005c2a:	b90a      	cbnz	r2, 8005c30 <strstr+0x14>
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	e005      	b.n	8005c3c <strstr+0x20>
 8005c30:	4294      	cmp	r4, r2
 8005c32:	d108      	bne.n	8005c46 <strstr+0x2a>
 8005c34:	460d      	mov	r5, r1
 8005c36:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005c3a:	b902      	cbnz	r2, 8005c3e <strstr+0x22>
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005c42:	4297      	cmp	r7, r2
 8005c44:	d0f7      	beq.n	8005c36 <strstr+0x1a>
 8005c46:	4633      	mov	r3, r6
 8005c48:	e7ec      	b.n	8005c24 <strstr+0x8>

08005c4a <sulp>:
 8005c4a:	b570      	push	{r4, r5, r6, lr}
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	460d      	mov	r5, r1
 8005c50:	ec45 4b10 	vmov	d0, r4, r5
 8005c54:	4616      	mov	r6, r2
 8005c56:	f002 fe8d 	bl	8008974 <__ulp>
 8005c5a:	ec51 0b10 	vmov	r0, r1, d0
 8005c5e:	b17e      	cbz	r6, 8005c80 <sulp+0x36>
 8005c60:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005c64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd09      	ble.n	8005c80 <sulp+0x36>
 8005c6c:	051b      	lsls	r3, r3, #20
 8005c6e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c72:	2400      	movs	r4, #0
 8005c74:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	f7fa fcc4 	bl	8000608 <__aeabi_dmul>
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	0000      	movs	r0, r0
 8005c84:	0000      	movs	r0, r0
	...

08005c88 <_strtod_l>:
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	b0a3      	sub	sp, #140	; 0x8c
 8005c8e:	461f      	mov	r7, r3
 8005c90:	2300      	movs	r3, #0
 8005c92:	931e      	str	r3, [sp, #120]	; 0x78
 8005c94:	4ba4      	ldr	r3, [pc, #656]	; (8005f28 <_strtod_l+0x2a0>)
 8005c96:	9219      	str	r2, [sp, #100]	; 0x64
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	9307      	str	r3, [sp, #28]
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	4688      	mov	r8, r1
 8005ca2:	f7fa fa9d 	bl	80001e0 <strlen>
 8005ca6:	f04f 0a00 	mov.w	sl, #0
 8005caa:	4605      	mov	r5, r0
 8005cac:	f04f 0b00 	mov.w	fp, #0
 8005cb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005cb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	2a2b      	cmp	r2, #43	; 0x2b
 8005cba:	d04c      	beq.n	8005d56 <_strtod_l+0xce>
 8005cbc:	d839      	bhi.n	8005d32 <_strtod_l+0xaa>
 8005cbe:	2a0d      	cmp	r2, #13
 8005cc0:	d832      	bhi.n	8005d28 <_strtod_l+0xa0>
 8005cc2:	2a08      	cmp	r2, #8
 8005cc4:	d832      	bhi.n	8005d2c <_strtod_l+0xa4>
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d03c      	beq.n	8005d44 <_strtod_l+0xbc>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8005cce:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005cd0:	7833      	ldrb	r3, [r6, #0]
 8005cd2:	2b30      	cmp	r3, #48	; 0x30
 8005cd4:	f040 80b4 	bne.w	8005e40 <_strtod_l+0x1b8>
 8005cd8:	7873      	ldrb	r3, [r6, #1]
 8005cda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cde:	2b58      	cmp	r3, #88	; 0x58
 8005ce0:	d16c      	bne.n	8005dbc <_strtod_l+0x134>
 8005ce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	ab1e      	add	r3, sp, #120	; 0x78
 8005ce8:	9702      	str	r7, [sp, #8]
 8005cea:	9300      	str	r3, [sp, #0]
 8005cec:	4a8f      	ldr	r2, [pc, #572]	; (8005f2c <_strtod_l+0x2a4>)
 8005cee:	ab1f      	add	r3, sp, #124	; 0x7c
 8005cf0:	a91d      	add	r1, sp, #116	; 0x74
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f001 ff36 	bl	8007b64 <__gethex>
 8005cf8:	f010 0707 	ands.w	r7, r0, #7
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	d005      	beq.n	8005d0c <_strtod_l+0x84>
 8005d00:	2f06      	cmp	r7, #6
 8005d02:	d12a      	bne.n	8005d5a <_strtod_l+0xd2>
 8005d04:	3601      	adds	r6, #1
 8005d06:	2300      	movs	r3, #0
 8005d08:	961d      	str	r6, [sp, #116]	; 0x74
 8005d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005d0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 8596 	bne.w	8006840 <_strtod_l+0xbb8>
 8005d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d16:	b1db      	cbz	r3, 8005d50 <_strtod_l+0xc8>
 8005d18:	4652      	mov	r2, sl
 8005d1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d1e:	ec43 2b10 	vmov	d0, r2, r3
 8005d22:	b023      	add	sp, #140	; 0x8c
 8005d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d28:	2a20      	cmp	r2, #32
 8005d2a:	d1ce      	bne.n	8005cca <_strtod_l+0x42>
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	931d      	str	r3, [sp, #116]	; 0x74
 8005d30:	e7c0      	b.n	8005cb4 <_strtod_l+0x2c>
 8005d32:	2a2d      	cmp	r2, #45	; 0x2d
 8005d34:	d1c9      	bne.n	8005cca <_strtod_l+0x42>
 8005d36:	2201      	movs	r2, #1
 8005d38:	920e      	str	r2, [sp, #56]	; 0x38
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	921d      	str	r2, [sp, #116]	; 0x74
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1c4      	bne.n	8005cce <_strtod_l+0x46>
 8005d44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d46:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 8576 	bne.w	800683c <_strtod_l+0xbb4>
 8005d50:	4652      	mov	r2, sl
 8005d52:	465b      	mov	r3, fp
 8005d54:	e7e3      	b.n	8005d1e <_strtod_l+0x96>
 8005d56:	2200      	movs	r2, #0
 8005d58:	e7ee      	b.n	8005d38 <_strtod_l+0xb0>
 8005d5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d5c:	b13a      	cbz	r2, 8005d6e <_strtod_l+0xe6>
 8005d5e:	2135      	movs	r1, #53	; 0x35
 8005d60:	a820      	add	r0, sp, #128	; 0x80
 8005d62:	f002 ff12 	bl	8008b8a <__copybits>
 8005d66:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f002 fad7 	bl	800831c <_Bfree>
 8005d6e:	3f01      	subs	r7, #1
 8005d70:	2f05      	cmp	r7, #5
 8005d72:	d807      	bhi.n	8005d84 <_strtod_l+0xfc>
 8005d74:	e8df f007 	tbb	[pc, r7]
 8005d78:	1d180b0e 	.word	0x1d180b0e
 8005d7c:	030e      	.short	0x030e
 8005d7e:	f04f 0b00 	mov.w	fp, #0
 8005d82:	46da      	mov	sl, fp
 8005d84:	0728      	lsls	r0, r5, #28
 8005d86:	d5c1      	bpl.n	8005d0c <_strtod_l+0x84>
 8005d88:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005d8c:	e7be      	b.n	8005d0c <_strtod_l+0x84>
 8005d8e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005d92:	e7f7      	b.n	8005d84 <_strtod_l+0xfc>
 8005d94:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005d98:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005d9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005da2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005da6:	e7ed      	b.n	8005d84 <_strtod_l+0xfc>
 8005da8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005f30 <_strtod_l+0x2a8>
 8005dac:	f04f 0a00 	mov.w	sl, #0
 8005db0:	e7e8      	b.n	8005d84 <_strtod_l+0xfc>
 8005db2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005db6:	f04f 3aff 	mov.w	sl, #4294967295
 8005dba:	e7e3      	b.n	8005d84 <_strtod_l+0xfc>
 8005dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	921d      	str	r2, [sp, #116]	; 0x74
 8005dc2:	785b      	ldrb	r3, [r3, #1]
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d0f9      	beq.n	8005dbc <_strtod_l+0x134>
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d09f      	beq.n	8005d0c <_strtod_l+0x84>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f04f 0900 	mov.w	r9, #0
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005ddc:	464f      	mov	r7, r9
 8005dde:	220a      	movs	r2, #10
 8005de0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005de2:	7806      	ldrb	r6, [r0, #0]
 8005de4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005de8:	b2d9      	uxtb	r1, r3
 8005dea:	2909      	cmp	r1, #9
 8005dec:	d92a      	bls.n	8005e44 <_strtod_l+0x1bc>
 8005dee:	9907      	ldr	r1, [sp, #28]
 8005df0:	462a      	mov	r2, r5
 8005df2:	f003 f97c 	bl	80090ee <strncmp>
 8005df6:	b398      	cbz	r0, 8005e60 <_strtod_l+0x1d8>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	4633      	mov	r3, r6
 8005dfc:	463d      	mov	r5, r7
 8005dfe:	9007      	str	r0, [sp, #28]
 8005e00:	4602      	mov	r2, r0
 8005e02:	2b65      	cmp	r3, #101	; 0x65
 8005e04:	d001      	beq.n	8005e0a <_strtod_l+0x182>
 8005e06:	2b45      	cmp	r3, #69	; 0x45
 8005e08:	d118      	bne.n	8005e3c <_strtod_l+0x1b4>
 8005e0a:	b91d      	cbnz	r5, 8005e14 <_strtod_l+0x18c>
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	4303      	orrs	r3, r0
 8005e10:	d098      	beq.n	8005d44 <_strtod_l+0xbc>
 8005e12:	2500      	movs	r5, #0
 8005e14:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005e18:	f108 0301 	add.w	r3, r8, #1
 8005e1c:	931d      	str	r3, [sp, #116]	; 0x74
 8005e1e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e22:	2b2b      	cmp	r3, #43	; 0x2b
 8005e24:	d075      	beq.n	8005f12 <_strtod_l+0x28a>
 8005e26:	2b2d      	cmp	r3, #45	; 0x2d
 8005e28:	d07b      	beq.n	8005f22 <_strtod_l+0x29a>
 8005e2a:	f04f 0c00 	mov.w	ip, #0
 8005e2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005e32:	2909      	cmp	r1, #9
 8005e34:	f240 8082 	bls.w	8005f3c <_strtod_l+0x2b4>
 8005e38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005e3c:	2600      	movs	r6, #0
 8005e3e:	e09d      	b.n	8005f7c <_strtod_l+0x2f4>
 8005e40:	2300      	movs	r3, #0
 8005e42:	e7c4      	b.n	8005dce <_strtod_l+0x146>
 8005e44:	2f08      	cmp	r7, #8
 8005e46:	bfd8      	it	le
 8005e48:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005e4a:	f100 0001 	add.w	r0, r0, #1
 8005e4e:	bfda      	itte	le
 8005e50:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e54:	9309      	strle	r3, [sp, #36]	; 0x24
 8005e56:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005e5a:	3701      	adds	r7, #1
 8005e5c:	901d      	str	r0, [sp, #116]	; 0x74
 8005e5e:	e7bf      	b.n	8005de0 <_strtod_l+0x158>
 8005e60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e62:	195a      	adds	r2, r3, r5
 8005e64:	921d      	str	r2, [sp, #116]	; 0x74
 8005e66:	5d5b      	ldrb	r3, [r3, r5]
 8005e68:	2f00      	cmp	r7, #0
 8005e6a:	d037      	beq.n	8005edc <_strtod_l+0x254>
 8005e6c:	9007      	str	r0, [sp, #28]
 8005e6e:	463d      	mov	r5, r7
 8005e70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005e74:	2a09      	cmp	r2, #9
 8005e76:	d912      	bls.n	8005e9e <_strtod_l+0x216>
 8005e78:	2201      	movs	r2, #1
 8005e7a:	e7c2      	b.n	8005e02 <_strtod_l+0x17a>
 8005e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	921d      	str	r2, [sp, #116]	; 0x74
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	3001      	adds	r0, #1
 8005e86:	2b30      	cmp	r3, #48	; 0x30
 8005e88:	d0f8      	beq.n	8005e7c <_strtod_l+0x1f4>
 8005e8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005e8e:	2a08      	cmp	r2, #8
 8005e90:	f200 84db 	bhi.w	800684a <_strtod_l+0xbc2>
 8005e94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005e96:	9007      	str	r0, [sp, #28]
 8005e98:	2000      	movs	r0, #0
 8005e9a:	920a      	str	r2, [sp, #40]	; 0x28
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	3b30      	subs	r3, #48	; 0x30
 8005ea0:	f100 0201 	add.w	r2, r0, #1
 8005ea4:	d014      	beq.n	8005ed0 <_strtod_l+0x248>
 8005ea6:	9907      	ldr	r1, [sp, #28]
 8005ea8:	4411      	add	r1, r2
 8005eaa:	9107      	str	r1, [sp, #28]
 8005eac:	462a      	mov	r2, r5
 8005eae:	eb00 0e05 	add.w	lr, r0, r5
 8005eb2:	210a      	movs	r1, #10
 8005eb4:	4572      	cmp	r2, lr
 8005eb6:	d113      	bne.n	8005ee0 <_strtod_l+0x258>
 8005eb8:	182a      	adds	r2, r5, r0
 8005eba:	2a08      	cmp	r2, #8
 8005ebc:	f105 0501 	add.w	r5, r5, #1
 8005ec0:	4405      	add	r5, r0
 8005ec2:	dc1c      	bgt.n	8005efe <_strtod_l+0x276>
 8005ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	fb02 3301 	mla	r3, r2, r1, r3
 8005ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ece:	2200      	movs	r2, #0
 8005ed0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	911d      	str	r1, [sp, #116]	; 0x74
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	4610      	mov	r0, r2
 8005eda:	e7c9      	b.n	8005e70 <_strtod_l+0x1e8>
 8005edc:	4638      	mov	r0, r7
 8005ede:	e7d2      	b.n	8005e86 <_strtod_l+0x1fe>
 8005ee0:	2a08      	cmp	r2, #8
 8005ee2:	dc04      	bgt.n	8005eee <_strtod_l+0x266>
 8005ee4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ee6:	434e      	muls	r6, r1
 8005ee8:	9609      	str	r6, [sp, #36]	; 0x24
 8005eea:	3201      	adds	r2, #1
 8005eec:	e7e2      	b.n	8005eb4 <_strtod_l+0x22c>
 8005eee:	f102 0c01 	add.w	ip, r2, #1
 8005ef2:	f1bc 0f10 	cmp.w	ip, #16
 8005ef6:	bfd8      	it	le
 8005ef8:	fb01 f909 	mulle.w	r9, r1, r9
 8005efc:	e7f5      	b.n	8005eea <_strtod_l+0x262>
 8005efe:	2d10      	cmp	r5, #16
 8005f00:	bfdc      	itt	le
 8005f02:	220a      	movle	r2, #10
 8005f04:	fb02 3909 	mlale	r9, r2, r9, r3
 8005f08:	e7e1      	b.n	8005ece <_strtod_l+0x246>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9307      	str	r3, [sp, #28]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	e77c      	b.n	8005e0c <_strtod_l+0x184>
 8005f12:	f04f 0c00 	mov.w	ip, #0
 8005f16:	f108 0302 	add.w	r3, r8, #2
 8005f1a:	931d      	str	r3, [sp, #116]	; 0x74
 8005f1c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005f20:	e785      	b.n	8005e2e <_strtod_l+0x1a6>
 8005f22:	f04f 0c01 	mov.w	ip, #1
 8005f26:	e7f6      	b.n	8005f16 <_strtod_l+0x28e>
 8005f28:	08009a88 	.word	0x08009a88
 8005f2c:	080098d8 	.word	0x080098d8
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f36:	1c59      	adds	r1, r3, #1
 8005f38:	911d      	str	r1, [sp, #116]	; 0x74
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b30      	cmp	r3, #48	; 0x30
 8005f3e:	d0f9      	beq.n	8005f34 <_strtod_l+0x2ac>
 8005f40:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005f44:	2908      	cmp	r1, #8
 8005f46:	f63f af79 	bhi.w	8005e3c <_strtod_l+0x1b4>
 8005f4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005f4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f50:	9308      	str	r3, [sp, #32]
 8005f52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	911d      	str	r1, [sp, #116]	; 0x74
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005f5e:	2e09      	cmp	r6, #9
 8005f60:	d937      	bls.n	8005fd2 <_strtod_l+0x34a>
 8005f62:	9e08      	ldr	r6, [sp, #32]
 8005f64:	1b89      	subs	r1, r1, r6
 8005f66:	2908      	cmp	r1, #8
 8005f68:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005f6c:	dc02      	bgt.n	8005f74 <_strtod_l+0x2ec>
 8005f6e:	4576      	cmp	r6, lr
 8005f70:	bfa8      	it	ge
 8005f72:	4676      	movge	r6, lr
 8005f74:	f1bc 0f00 	cmp.w	ip, #0
 8005f78:	d000      	beq.n	8005f7c <_strtod_l+0x2f4>
 8005f7a:	4276      	negs	r6, r6
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	d14f      	bne.n	8006020 <_strtod_l+0x398>
 8005f80:	9904      	ldr	r1, [sp, #16]
 8005f82:	4301      	orrs	r1, r0
 8005f84:	f47f aec2 	bne.w	8005d0c <_strtod_l+0x84>
 8005f88:	2a00      	cmp	r2, #0
 8005f8a:	f47f aedb 	bne.w	8005d44 <_strtod_l+0xbc>
 8005f8e:	2b69      	cmp	r3, #105	; 0x69
 8005f90:	d027      	beq.n	8005fe2 <_strtod_l+0x35a>
 8005f92:	dc24      	bgt.n	8005fde <_strtod_l+0x356>
 8005f94:	2b49      	cmp	r3, #73	; 0x49
 8005f96:	d024      	beq.n	8005fe2 <_strtod_l+0x35a>
 8005f98:	2b4e      	cmp	r3, #78	; 0x4e
 8005f9a:	f47f aed3 	bne.w	8005d44 <_strtod_l+0xbc>
 8005f9e:	499e      	ldr	r1, [pc, #632]	; (8006218 <_strtod_l+0x590>)
 8005fa0:	a81d      	add	r0, sp, #116	; 0x74
 8005fa2:	f002 f837 	bl	8008014 <__match>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f43f aecc 	beq.w	8005d44 <_strtod_l+0xbc>
 8005fac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b28      	cmp	r3, #40	; 0x28
 8005fb2:	d12d      	bne.n	8006010 <_strtod_l+0x388>
 8005fb4:	4999      	ldr	r1, [pc, #612]	; (800621c <_strtod_l+0x594>)
 8005fb6:	aa20      	add	r2, sp, #128	; 0x80
 8005fb8:	a81d      	add	r0, sp, #116	; 0x74
 8005fba:	f002 f83f 	bl	800803c <__hexnan>
 8005fbe:	2805      	cmp	r0, #5
 8005fc0:	d126      	bne.n	8006010 <_strtod_l+0x388>
 8005fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005fc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005fcc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005fd0:	e69c      	b.n	8005d0c <_strtod_l+0x84>
 8005fd2:	210a      	movs	r1, #10
 8005fd4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005fd8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005fdc:	e7b9      	b.n	8005f52 <_strtod_l+0x2ca>
 8005fde:	2b6e      	cmp	r3, #110	; 0x6e
 8005fe0:	e7db      	b.n	8005f9a <_strtod_l+0x312>
 8005fe2:	498f      	ldr	r1, [pc, #572]	; (8006220 <_strtod_l+0x598>)
 8005fe4:	a81d      	add	r0, sp, #116	; 0x74
 8005fe6:	f002 f815 	bl	8008014 <__match>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f43f aeaa 	beq.w	8005d44 <_strtod_l+0xbc>
 8005ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005ff2:	498c      	ldr	r1, [pc, #560]	; (8006224 <_strtod_l+0x59c>)
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	a81d      	add	r0, sp, #116	; 0x74
 8005ff8:	931d      	str	r3, [sp, #116]	; 0x74
 8005ffa:	f002 f80b 	bl	8008014 <__match>
 8005ffe:	b910      	cbnz	r0, 8006006 <_strtod_l+0x37e>
 8006000:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006002:	3301      	adds	r3, #1
 8006004:	931d      	str	r3, [sp, #116]	; 0x74
 8006006:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006234 <_strtod_l+0x5ac>
 800600a:	f04f 0a00 	mov.w	sl, #0
 800600e:	e67d      	b.n	8005d0c <_strtod_l+0x84>
 8006010:	4885      	ldr	r0, [pc, #532]	; (8006228 <_strtod_l+0x5a0>)
 8006012:	f003 f811 	bl	8009038 <nan>
 8006016:	ed8d 0b04 	vstr	d0, [sp, #16]
 800601a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800601e:	e675      	b.n	8005d0c <_strtod_l+0x84>
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006024:	1af3      	subs	r3, r6, r3
 8006026:	2f00      	cmp	r7, #0
 8006028:	bf08      	it	eq
 800602a:	462f      	moveq	r7, r5
 800602c:	2d10      	cmp	r5, #16
 800602e:	9308      	str	r3, [sp, #32]
 8006030:	46a8      	mov	r8, r5
 8006032:	bfa8      	it	ge
 8006034:	f04f 0810 	movge.w	r8, #16
 8006038:	f7fa fa6c 	bl	8000514 <__aeabi_ui2d>
 800603c:	2d09      	cmp	r5, #9
 800603e:	4682      	mov	sl, r0
 8006040:	468b      	mov	fp, r1
 8006042:	dd13      	ble.n	800606c <_strtod_l+0x3e4>
 8006044:	4b79      	ldr	r3, [pc, #484]	; (800622c <_strtod_l+0x5a4>)
 8006046:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800604a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800604e:	f7fa fadb 	bl	8000608 <__aeabi_dmul>
 8006052:	4682      	mov	sl, r0
 8006054:	4648      	mov	r0, r9
 8006056:	468b      	mov	fp, r1
 8006058:	f7fa fa5c 	bl	8000514 <__aeabi_ui2d>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4650      	mov	r0, sl
 8006062:	4659      	mov	r1, fp
 8006064:	f7fa f91a 	bl	800029c <__adddf3>
 8006068:	4682      	mov	sl, r0
 800606a:	468b      	mov	fp, r1
 800606c:	2d0f      	cmp	r5, #15
 800606e:	dc38      	bgt.n	80060e2 <_strtod_l+0x45a>
 8006070:	9b08      	ldr	r3, [sp, #32]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f43f ae4a 	beq.w	8005d0c <_strtod_l+0x84>
 8006078:	dd24      	ble.n	80060c4 <_strtod_l+0x43c>
 800607a:	2b16      	cmp	r3, #22
 800607c:	dc0b      	bgt.n	8006096 <_strtod_l+0x40e>
 800607e:	4d6b      	ldr	r5, [pc, #428]	; (800622c <_strtod_l+0x5a4>)
 8006080:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006084:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006088:	4652      	mov	r2, sl
 800608a:	465b      	mov	r3, fp
 800608c:	f7fa fabc 	bl	8000608 <__aeabi_dmul>
 8006090:	4682      	mov	sl, r0
 8006092:	468b      	mov	fp, r1
 8006094:	e63a      	b.n	8005d0c <_strtod_l+0x84>
 8006096:	9a08      	ldr	r2, [sp, #32]
 8006098:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800609c:	4293      	cmp	r3, r2
 800609e:	db20      	blt.n	80060e2 <_strtod_l+0x45a>
 80060a0:	4c62      	ldr	r4, [pc, #392]	; (800622c <_strtod_l+0x5a4>)
 80060a2:	f1c5 050f 	rsb	r5, r5, #15
 80060a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80060aa:	4652      	mov	r2, sl
 80060ac:	465b      	mov	r3, fp
 80060ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b2:	f7fa faa9 	bl	8000608 <__aeabi_dmul>
 80060b6:	9b08      	ldr	r3, [sp, #32]
 80060b8:	1b5d      	subs	r5, r3, r5
 80060ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80060be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060c2:	e7e3      	b.n	800608c <_strtod_l+0x404>
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	3316      	adds	r3, #22
 80060c8:	db0b      	blt.n	80060e2 <_strtod_l+0x45a>
 80060ca:	9b07      	ldr	r3, [sp, #28]
 80060cc:	4a57      	ldr	r2, [pc, #348]	; (800622c <_strtod_l+0x5a4>)
 80060ce:	1b9e      	subs	r6, r3, r6
 80060d0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80060d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060d8:	4650      	mov	r0, sl
 80060da:	4659      	mov	r1, fp
 80060dc:	f7fa fbbe 	bl	800085c <__aeabi_ddiv>
 80060e0:	e7d6      	b.n	8006090 <_strtod_l+0x408>
 80060e2:	9b08      	ldr	r3, [sp, #32]
 80060e4:	eba5 0808 	sub.w	r8, r5, r8
 80060e8:	4498      	add	r8, r3
 80060ea:	f1b8 0f00 	cmp.w	r8, #0
 80060ee:	dd71      	ble.n	80061d4 <_strtod_l+0x54c>
 80060f0:	f018 030f 	ands.w	r3, r8, #15
 80060f4:	d00a      	beq.n	800610c <_strtod_l+0x484>
 80060f6:	494d      	ldr	r1, [pc, #308]	; (800622c <_strtod_l+0x5a4>)
 80060f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060fc:	4652      	mov	r2, sl
 80060fe:	465b      	mov	r3, fp
 8006100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006104:	f7fa fa80 	bl	8000608 <__aeabi_dmul>
 8006108:	4682      	mov	sl, r0
 800610a:	468b      	mov	fp, r1
 800610c:	f038 080f 	bics.w	r8, r8, #15
 8006110:	d04d      	beq.n	80061ae <_strtod_l+0x526>
 8006112:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006116:	dd22      	ble.n	800615e <_strtod_l+0x4d6>
 8006118:	2500      	movs	r5, #0
 800611a:	462e      	mov	r6, r5
 800611c:	9509      	str	r5, [sp, #36]	; 0x24
 800611e:	9507      	str	r5, [sp, #28]
 8006120:	2322      	movs	r3, #34	; 0x22
 8006122:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006234 <_strtod_l+0x5ac>
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	f04f 0a00 	mov.w	sl, #0
 800612c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	f43f adec 	beq.w	8005d0c <_strtod_l+0x84>
 8006134:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006136:	4620      	mov	r0, r4
 8006138:	f002 f8f0 	bl	800831c <_Bfree>
 800613c:	9907      	ldr	r1, [sp, #28]
 800613e:	4620      	mov	r0, r4
 8006140:	f002 f8ec 	bl	800831c <_Bfree>
 8006144:	4631      	mov	r1, r6
 8006146:	4620      	mov	r0, r4
 8006148:	f002 f8e8 	bl	800831c <_Bfree>
 800614c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800614e:	4620      	mov	r0, r4
 8006150:	f002 f8e4 	bl	800831c <_Bfree>
 8006154:	4629      	mov	r1, r5
 8006156:	4620      	mov	r0, r4
 8006158:	f002 f8e0 	bl	800831c <_Bfree>
 800615c:	e5d6      	b.n	8005d0c <_strtod_l+0x84>
 800615e:	2300      	movs	r3, #0
 8006160:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006164:	4650      	mov	r0, sl
 8006166:	4659      	mov	r1, fp
 8006168:	4699      	mov	r9, r3
 800616a:	f1b8 0f01 	cmp.w	r8, #1
 800616e:	dc21      	bgt.n	80061b4 <_strtod_l+0x52c>
 8006170:	b10b      	cbz	r3, 8006176 <_strtod_l+0x4ee>
 8006172:	4682      	mov	sl, r0
 8006174:	468b      	mov	fp, r1
 8006176:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <_strtod_l+0x5a8>)
 8006178:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800617c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006180:	4652      	mov	r2, sl
 8006182:	465b      	mov	r3, fp
 8006184:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006188:	f7fa fa3e 	bl	8000608 <__aeabi_dmul>
 800618c:	4b29      	ldr	r3, [pc, #164]	; (8006234 <_strtod_l+0x5ac>)
 800618e:	460a      	mov	r2, r1
 8006190:	400b      	ands	r3, r1
 8006192:	4929      	ldr	r1, [pc, #164]	; (8006238 <_strtod_l+0x5b0>)
 8006194:	428b      	cmp	r3, r1
 8006196:	4682      	mov	sl, r0
 8006198:	d8be      	bhi.n	8006118 <_strtod_l+0x490>
 800619a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800619e:	428b      	cmp	r3, r1
 80061a0:	bf86      	itte	hi
 80061a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800623c <_strtod_l+0x5b4>
 80061a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80061aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80061ae:	2300      	movs	r3, #0
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	e081      	b.n	80062b8 <_strtod_l+0x630>
 80061b4:	f018 0f01 	tst.w	r8, #1
 80061b8:	d007      	beq.n	80061ca <_strtod_l+0x542>
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <_strtod_l+0x5a8>)
 80061bc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa fa20 	bl	8000608 <__aeabi_dmul>
 80061c8:	2301      	movs	r3, #1
 80061ca:	f109 0901 	add.w	r9, r9, #1
 80061ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061d2:	e7ca      	b.n	800616a <_strtod_l+0x4e2>
 80061d4:	d0eb      	beq.n	80061ae <_strtod_l+0x526>
 80061d6:	f1c8 0800 	rsb	r8, r8, #0
 80061da:	f018 020f 	ands.w	r2, r8, #15
 80061de:	d00a      	beq.n	80061f6 <_strtod_l+0x56e>
 80061e0:	4b12      	ldr	r3, [pc, #72]	; (800622c <_strtod_l+0x5a4>)
 80061e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e6:	4650      	mov	r0, sl
 80061e8:	4659      	mov	r1, fp
 80061ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ee:	f7fa fb35 	bl	800085c <__aeabi_ddiv>
 80061f2:	4682      	mov	sl, r0
 80061f4:	468b      	mov	fp, r1
 80061f6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80061fa:	d0d8      	beq.n	80061ae <_strtod_l+0x526>
 80061fc:	f1b8 0f1f 	cmp.w	r8, #31
 8006200:	dd1e      	ble.n	8006240 <_strtod_l+0x5b8>
 8006202:	2500      	movs	r5, #0
 8006204:	462e      	mov	r6, r5
 8006206:	9509      	str	r5, [sp, #36]	; 0x24
 8006208:	9507      	str	r5, [sp, #28]
 800620a:	2322      	movs	r3, #34	; 0x22
 800620c:	f04f 0a00 	mov.w	sl, #0
 8006210:	f04f 0b00 	mov.w	fp, #0
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	e789      	b.n	800612c <_strtod_l+0x4a4>
 8006218:	080098b1 	.word	0x080098b1
 800621c:	080098ec 	.word	0x080098ec
 8006220:	080098a9 	.word	0x080098a9
 8006224:	0800992b 	.word	0x0800992b
 8006228:	08009c48 	.word	0x08009c48
 800622c:	08009b28 	.word	0x08009b28
 8006230:	08009b00 	.word	0x08009b00
 8006234:	7ff00000 	.word	0x7ff00000
 8006238:	7ca00000 	.word	0x7ca00000
 800623c:	7fefffff 	.word	0x7fefffff
 8006240:	f018 0310 	ands.w	r3, r8, #16
 8006244:	bf18      	it	ne
 8006246:	236a      	movne	r3, #106	; 0x6a
 8006248:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006600 <_strtod_l+0x978>
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	4650      	mov	r0, sl
 8006250:	4659      	mov	r1, fp
 8006252:	2300      	movs	r3, #0
 8006254:	f018 0f01 	tst.w	r8, #1
 8006258:	d004      	beq.n	8006264 <_strtod_l+0x5dc>
 800625a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800625e:	f7fa f9d3 	bl	8000608 <__aeabi_dmul>
 8006262:	2301      	movs	r3, #1
 8006264:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006268:	f109 0908 	add.w	r9, r9, #8
 800626c:	d1f2      	bne.n	8006254 <_strtod_l+0x5cc>
 800626e:	b10b      	cbz	r3, 8006274 <_strtod_l+0x5ec>
 8006270:	4682      	mov	sl, r0
 8006272:	468b      	mov	fp, r1
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	b1bb      	cbz	r3, 80062a8 <_strtod_l+0x620>
 8006278:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800627c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006280:	2b00      	cmp	r3, #0
 8006282:	4659      	mov	r1, fp
 8006284:	dd10      	ble.n	80062a8 <_strtod_l+0x620>
 8006286:	2b1f      	cmp	r3, #31
 8006288:	f340 8128 	ble.w	80064dc <_strtod_l+0x854>
 800628c:	2b34      	cmp	r3, #52	; 0x34
 800628e:	bfde      	ittt	le
 8006290:	3b20      	suble	r3, #32
 8006292:	f04f 32ff 	movle.w	r2, #4294967295
 8006296:	fa02 f303 	lslle.w	r3, r2, r3
 800629a:	f04f 0a00 	mov.w	sl, #0
 800629e:	bfcc      	ite	gt
 80062a0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80062a4:	ea03 0b01 	andle.w	fp, r3, r1
 80062a8:	2200      	movs	r2, #0
 80062aa:	2300      	movs	r3, #0
 80062ac:	4650      	mov	r0, sl
 80062ae:	4659      	mov	r1, fp
 80062b0:	f7fa fc12 	bl	8000ad8 <__aeabi_dcmpeq>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d1a4      	bne.n	8006202 <_strtod_l+0x57a>
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062be:	462b      	mov	r3, r5
 80062c0:	463a      	mov	r2, r7
 80062c2:	4620      	mov	r0, r4
 80062c4:	f002 f896 	bl	80083f4 <__s2b>
 80062c8:	9009      	str	r0, [sp, #36]	; 0x24
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f43f af24 	beq.w	8006118 <_strtod_l+0x490>
 80062d0:	9b07      	ldr	r3, [sp, #28]
 80062d2:	1b9e      	subs	r6, r3, r6
 80062d4:	9b08      	ldr	r3, [sp, #32]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bfb4      	ite	lt
 80062da:	4633      	movlt	r3, r6
 80062dc:	2300      	movge	r3, #0
 80062de:	9310      	str	r3, [sp, #64]	; 0x40
 80062e0:	9b08      	ldr	r3, [sp, #32]
 80062e2:	2500      	movs	r5, #0
 80062e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80062e8:	9318      	str	r3, [sp, #96]	; 0x60
 80062ea:	462e      	mov	r6, r5
 80062ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ee:	4620      	mov	r0, r4
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	f001 ffd3 	bl	800829c <_Balloc>
 80062f6:	9007      	str	r0, [sp, #28]
 80062f8:	2800      	cmp	r0, #0
 80062fa:	f43f af11 	beq.w	8006120 <_strtod_l+0x498>
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	3202      	adds	r2, #2
 8006304:	f103 010c 	add.w	r1, r3, #12
 8006308:	0092      	lsls	r2, r2, #2
 800630a:	300c      	adds	r0, #12
 800630c:	f001 ffb8 	bl	8008280 <memcpy>
 8006310:	ec4b ab10 	vmov	d0, sl, fp
 8006314:	aa20      	add	r2, sp, #128	; 0x80
 8006316:	a91f      	add	r1, sp, #124	; 0x7c
 8006318:	4620      	mov	r0, r4
 800631a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800631e:	f002 fba5 	bl	8008a6c <__d2b>
 8006322:	901e      	str	r0, [sp, #120]	; 0x78
 8006324:	2800      	cmp	r0, #0
 8006326:	f43f aefb 	beq.w	8006120 <_strtod_l+0x498>
 800632a:	2101      	movs	r1, #1
 800632c:	4620      	mov	r0, r4
 800632e:	f002 f8fb 	bl	8008528 <__i2b>
 8006332:	4606      	mov	r6, r0
 8006334:	2800      	cmp	r0, #0
 8006336:	f43f aef3 	beq.w	8006120 <_strtod_l+0x498>
 800633a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800633c:	9904      	ldr	r1, [sp, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfab      	itete	ge
 8006342:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006344:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006346:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006348:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800634c:	bfac      	ite	ge
 800634e:	eb03 0902 	addge.w	r9, r3, r2
 8006352:	1ad7      	sublt	r7, r2, r3
 8006354:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006356:	eba3 0801 	sub.w	r8, r3, r1
 800635a:	4490      	add	r8, r2
 800635c:	4ba3      	ldr	r3, [pc, #652]	; (80065ec <_strtod_l+0x964>)
 800635e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006362:	4598      	cmp	r8, r3
 8006364:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006368:	f280 80cc 	bge.w	8006504 <_strtod_l+0x87c>
 800636c:	eba3 0308 	sub.w	r3, r3, r8
 8006370:	2b1f      	cmp	r3, #31
 8006372:	eba2 0203 	sub.w	r2, r2, r3
 8006376:	f04f 0101 	mov.w	r1, #1
 800637a:	f300 80b6 	bgt.w	80064ea <_strtod_l+0x862>
 800637e:	fa01 f303 	lsl.w	r3, r1, r3
 8006382:	9311      	str	r3, [sp, #68]	; 0x44
 8006384:	2300      	movs	r3, #0
 8006386:	930c      	str	r3, [sp, #48]	; 0x30
 8006388:	eb09 0802 	add.w	r8, r9, r2
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	45c1      	cmp	r9, r8
 8006390:	4417      	add	r7, r2
 8006392:	441f      	add	r7, r3
 8006394:	464b      	mov	r3, r9
 8006396:	bfa8      	it	ge
 8006398:	4643      	movge	r3, r8
 800639a:	42bb      	cmp	r3, r7
 800639c:	bfa8      	it	ge
 800639e:	463b      	movge	r3, r7
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bfc2      	ittt	gt
 80063a4:	eba8 0803 	subgt.w	r8, r8, r3
 80063a8:	1aff      	subgt	r7, r7, r3
 80063aa:	eba9 0903 	subgt.w	r9, r9, r3
 80063ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	dd17      	ble.n	80063e4 <_strtod_l+0x75c>
 80063b4:	4631      	mov	r1, r6
 80063b6:	461a      	mov	r2, r3
 80063b8:	4620      	mov	r0, r4
 80063ba:	f002 f971 	bl	80086a0 <__pow5mult>
 80063be:	4606      	mov	r6, r0
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f43f aead 	beq.w	8006120 <_strtod_l+0x498>
 80063c6:	4601      	mov	r1, r0
 80063c8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80063ca:	4620      	mov	r0, r4
 80063cc:	f002 f8c2 	bl	8008554 <__multiply>
 80063d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80063d2:	2800      	cmp	r0, #0
 80063d4:	f43f aea4 	beq.w	8006120 <_strtod_l+0x498>
 80063d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80063da:	4620      	mov	r0, r4
 80063dc:	f001 ff9e 	bl	800831c <_Bfree>
 80063e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063e2:	931e      	str	r3, [sp, #120]	; 0x78
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	f300 8091 	bgt.w	800650e <_strtod_l+0x886>
 80063ec:	9b08      	ldr	r3, [sp, #32]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	dd08      	ble.n	8006404 <_strtod_l+0x77c>
 80063f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80063f4:	9907      	ldr	r1, [sp, #28]
 80063f6:	4620      	mov	r0, r4
 80063f8:	f002 f952 	bl	80086a0 <__pow5mult>
 80063fc:	9007      	str	r0, [sp, #28]
 80063fe:	2800      	cmp	r0, #0
 8006400:	f43f ae8e 	beq.w	8006120 <_strtod_l+0x498>
 8006404:	2f00      	cmp	r7, #0
 8006406:	dd08      	ble.n	800641a <_strtod_l+0x792>
 8006408:	9907      	ldr	r1, [sp, #28]
 800640a:	463a      	mov	r2, r7
 800640c:	4620      	mov	r0, r4
 800640e:	f002 f9a1 	bl	8008754 <__lshift>
 8006412:	9007      	str	r0, [sp, #28]
 8006414:	2800      	cmp	r0, #0
 8006416:	f43f ae83 	beq.w	8006120 <_strtod_l+0x498>
 800641a:	f1b9 0f00 	cmp.w	r9, #0
 800641e:	dd08      	ble.n	8006432 <_strtod_l+0x7aa>
 8006420:	4631      	mov	r1, r6
 8006422:	464a      	mov	r2, r9
 8006424:	4620      	mov	r0, r4
 8006426:	f002 f995 	bl	8008754 <__lshift>
 800642a:	4606      	mov	r6, r0
 800642c:	2800      	cmp	r0, #0
 800642e:	f43f ae77 	beq.w	8006120 <_strtod_l+0x498>
 8006432:	9a07      	ldr	r2, [sp, #28]
 8006434:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006436:	4620      	mov	r0, r4
 8006438:	f002 fa14 	bl	8008864 <__mdiff>
 800643c:	4605      	mov	r5, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	f43f ae6e 	beq.w	8006120 <_strtod_l+0x498>
 8006444:	68c3      	ldr	r3, [r0, #12]
 8006446:	930f      	str	r3, [sp, #60]	; 0x3c
 8006448:	2300      	movs	r3, #0
 800644a:	60c3      	str	r3, [r0, #12]
 800644c:	4631      	mov	r1, r6
 800644e:	f002 f9ed 	bl	800882c <__mcmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	da65      	bge.n	8006522 <_strtod_l+0x89a>
 8006456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006458:	ea53 030a 	orrs.w	r3, r3, sl
 800645c:	f040 8087 	bne.w	800656e <_strtod_l+0x8e6>
 8006460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006464:	2b00      	cmp	r3, #0
 8006466:	f040 8082 	bne.w	800656e <_strtod_l+0x8e6>
 800646a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800646e:	0d1b      	lsrs	r3, r3, #20
 8006470:	051b      	lsls	r3, r3, #20
 8006472:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006476:	d97a      	bls.n	800656e <_strtod_l+0x8e6>
 8006478:	696b      	ldr	r3, [r5, #20]
 800647a:	b913      	cbnz	r3, 8006482 <_strtod_l+0x7fa>
 800647c:	692b      	ldr	r3, [r5, #16]
 800647e:	2b01      	cmp	r3, #1
 8006480:	dd75      	ble.n	800656e <_strtod_l+0x8e6>
 8006482:	4629      	mov	r1, r5
 8006484:	2201      	movs	r2, #1
 8006486:	4620      	mov	r0, r4
 8006488:	f002 f964 	bl	8008754 <__lshift>
 800648c:	4631      	mov	r1, r6
 800648e:	4605      	mov	r5, r0
 8006490:	f002 f9cc 	bl	800882c <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	dd6a      	ble.n	800656e <_strtod_l+0x8e6>
 8006498:	9904      	ldr	r1, [sp, #16]
 800649a:	4a55      	ldr	r2, [pc, #340]	; (80065f0 <_strtod_l+0x968>)
 800649c:	465b      	mov	r3, fp
 800649e:	2900      	cmp	r1, #0
 80064a0:	f000 8085 	beq.w	80065ae <_strtod_l+0x926>
 80064a4:	ea02 010b 	and.w	r1, r2, fp
 80064a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064ac:	dc7f      	bgt.n	80065ae <_strtod_l+0x926>
 80064ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064b2:	f77f aeaa 	ble.w	800620a <_strtod_l+0x582>
 80064b6:	4a4f      	ldr	r2, [pc, #316]	; (80065f4 <_strtod_l+0x96c>)
 80064b8:	2300      	movs	r3, #0
 80064ba:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80064be:	4650      	mov	r0, sl
 80064c0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80064c4:	4659      	mov	r1, fp
 80064c6:	f7fa f89f 	bl	8000608 <__aeabi_dmul>
 80064ca:	460b      	mov	r3, r1
 80064cc:	4303      	orrs	r3, r0
 80064ce:	bf08      	it	eq
 80064d0:	2322      	moveq	r3, #34	; 0x22
 80064d2:	4682      	mov	sl, r0
 80064d4:	468b      	mov	fp, r1
 80064d6:	bf08      	it	eq
 80064d8:	6023      	streq	r3, [r4, #0]
 80064da:	e62b      	b.n	8006134 <_strtod_l+0x4ac>
 80064dc:	f04f 32ff 	mov.w	r2, #4294967295
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	ea03 0a0a 	and.w	sl, r3, sl
 80064e8:	e6de      	b.n	80062a8 <_strtod_l+0x620>
 80064ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80064ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80064f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80064f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80064fa:	fa01 f308 	lsl.w	r3, r1, r8
 80064fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006500:	9111      	str	r1, [sp, #68]	; 0x44
 8006502:	e741      	b.n	8006388 <_strtod_l+0x700>
 8006504:	2300      	movs	r3, #0
 8006506:	930c      	str	r3, [sp, #48]	; 0x30
 8006508:	2301      	movs	r3, #1
 800650a:	9311      	str	r3, [sp, #68]	; 0x44
 800650c:	e73c      	b.n	8006388 <_strtod_l+0x700>
 800650e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006510:	4642      	mov	r2, r8
 8006512:	4620      	mov	r0, r4
 8006514:	f002 f91e 	bl	8008754 <__lshift>
 8006518:	901e      	str	r0, [sp, #120]	; 0x78
 800651a:	2800      	cmp	r0, #0
 800651c:	f47f af66 	bne.w	80063ec <_strtod_l+0x764>
 8006520:	e5fe      	b.n	8006120 <_strtod_l+0x498>
 8006522:	465f      	mov	r7, fp
 8006524:	d16e      	bne.n	8006604 <_strtod_l+0x97c>
 8006526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800652c:	b342      	cbz	r2, 8006580 <_strtod_l+0x8f8>
 800652e:	4a32      	ldr	r2, [pc, #200]	; (80065f8 <_strtod_l+0x970>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d128      	bne.n	8006586 <_strtod_l+0x8fe>
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	4650      	mov	r0, sl
 8006538:	b1eb      	cbz	r3, 8006576 <_strtod_l+0x8ee>
 800653a:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <_strtod_l+0x968>)
 800653c:	403a      	ands	r2, r7
 800653e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006542:	f04f 31ff 	mov.w	r1, #4294967295
 8006546:	d819      	bhi.n	800657c <_strtod_l+0x8f4>
 8006548:	0d12      	lsrs	r2, r2, #20
 800654a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800654e:	fa01 f303 	lsl.w	r3, r1, r3
 8006552:	4298      	cmp	r0, r3
 8006554:	d117      	bne.n	8006586 <_strtod_l+0x8fe>
 8006556:	4b29      	ldr	r3, [pc, #164]	; (80065fc <_strtod_l+0x974>)
 8006558:	429f      	cmp	r7, r3
 800655a:	d102      	bne.n	8006562 <_strtod_l+0x8da>
 800655c:	3001      	adds	r0, #1
 800655e:	f43f addf 	beq.w	8006120 <_strtod_l+0x498>
 8006562:	4b23      	ldr	r3, [pc, #140]	; (80065f0 <_strtod_l+0x968>)
 8006564:	403b      	ands	r3, r7
 8006566:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800656a:	f04f 0a00 	mov.w	sl, #0
 800656e:	9b04      	ldr	r3, [sp, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1a0      	bne.n	80064b6 <_strtod_l+0x82e>
 8006574:	e5de      	b.n	8006134 <_strtod_l+0x4ac>
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	e7ea      	b.n	8006552 <_strtod_l+0x8ca>
 800657c:	460b      	mov	r3, r1
 800657e:	e7e8      	b.n	8006552 <_strtod_l+0x8ca>
 8006580:	ea53 030a 	orrs.w	r3, r3, sl
 8006584:	d088      	beq.n	8006498 <_strtod_l+0x810>
 8006586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006588:	b1db      	cbz	r3, 80065c2 <_strtod_l+0x93a>
 800658a:	423b      	tst	r3, r7
 800658c:	d0ef      	beq.n	800656e <_strtod_l+0x8e6>
 800658e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006590:	9a04      	ldr	r2, [sp, #16]
 8006592:	4650      	mov	r0, sl
 8006594:	4659      	mov	r1, fp
 8006596:	b1c3      	cbz	r3, 80065ca <_strtod_l+0x942>
 8006598:	f7ff fb57 	bl	8005c4a <sulp>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065a4:	f7f9 fe7a 	bl	800029c <__adddf3>
 80065a8:	4682      	mov	sl, r0
 80065aa:	468b      	mov	fp, r1
 80065ac:	e7df      	b.n	800656e <_strtod_l+0x8e6>
 80065ae:	4013      	ands	r3, r2
 80065b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80065b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80065bc:	f04f 3aff 	mov.w	sl, #4294967295
 80065c0:	e7d5      	b.n	800656e <_strtod_l+0x8e6>
 80065c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065c4:	ea13 0f0a 	tst.w	r3, sl
 80065c8:	e7e0      	b.n	800658c <_strtod_l+0x904>
 80065ca:	f7ff fb3e 	bl	8005c4a <sulp>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065d6:	f7f9 fe5f 	bl	8000298 <__aeabi_dsub>
 80065da:	2200      	movs	r2, #0
 80065dc:	2300      	movs	r3, #0
 80065de:	4682      	mov	sl, r0
 80065e0:	468b      	mov	fp, r1
 80065e2:	f7fa fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d0c1      	beq.n	800656e <_strtod_l+0x8e6>
 80065ea:	e60e      	b.n	800620a <_strtod_l+0x582>
 80065ec:	fffffc02 	.word	0xfffffc02
 80065f0:	7ff00000 	.word	0x7ff00000
 80065f4:	39500000 	.word	0x39500000
 80065f8:	000fffff 	.word	0x000fffff
 80065fc:	7fefffff 	.word	0x7fefffff
 8006600:	08009900 	.word	0x08009900
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	f002 fa8c 	bl	8008b24 <__ratio>
 800660c:	ec59 8b10 	vmov	r8, r9, d0
 8006610:	ee10 0a10 	vmov	r0, s0
 8006614:	2200      	movs	r2, #0
 8006616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800661a:	4649      	mov	r1, r9
 800661c:	f7fa fa70 	bl	8000b00 <__aeabi_dcmple>
 8006620:	2800      	cmp	r0, #0
 8006622:	d07c      	beq.n	800671e <_strtod_l+0xa96>
 8006624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d04c      	beq.n	80066c4 <_strtod_l+0xa3c>
 800662a:	4b95      	ldr	r3, [pc, #596]	; (8006880 <_strtod_l+0xbf8>)
 800662c:	2200      	movs	r2, #0
 800662e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006632:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006880 <_strtod_l+0xbf8>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	4b92      	ldr	r3, [pc, #584]	; (8006884 <_strtod_l+0xbfc>)
 800663c:	403b      	ands	r3, r7
 800663e:	9311      	str	r3, [sp, #68]	; 0x44
 8006640:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006642:	4b91      	ldr	r3, [pc, #580]	; (8006888 <_strtod_l+0xc00>)
 8006644:	429a      	cmp	r2, r3
 8006646:	f040 80b2 	bne.w	80067ae <_strtod_l+0xb26>
 800664a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800664e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006652:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006656:	ec4b ab10 	vmov	d0, sl, fp
 800665a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800665e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006662:	f002 f987 	bl	8008974 <__ulp>
 8006666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800666a:	ec53 2b10 	vmov	r2, r3, d0
 800666e:	f7f9 ffcb 	bl	8000608 <__aeabi_dmul>
 8006672:	4652      	mov	r2, sl
 8006674:	465b      	mov	r3, fp
 8006676:	f7f9 fe11 	bl	800029c <__adddf3>
 800667a:	460b      	mov	r3, r1
 800667c:	4981      	ldr	r1, [pc, #516]	; (8006884 <_strtod_l+0xbfc>)
 800667e:	4a83      	ldr	r2, [pc, #524]	; (800688c <_strtod_l+0xc04>)
 8006680:	4019      	ands	r1, r3
 8006682:	4291      	cmp	r1, r2
 8006684:	4682      	mov	sl, r0
 8006686:	d95e      	bls.n	8006746 <_strtod_l+0xabe>
 8006688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800668a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800668e:	4293      	cmp	r3, r2
 8006690:	d103      	bne.n	800669a <_strtod_l+0xa12>
 8006692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006694:	3301      	adds	r3, #1
 8006696:	f43f ad43 	beq.w	8006120 <_strtod_l+0x498>
 800669a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006898 <_strtod_l+0xc10>
 800669e:	f04f 3aff 	mov.w	sl, #4294967295
 80066a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80066a4:	4620      	mov	r0, r4
 80066a6:	f001 fe39 	bl	800831c <_Bfree>
 80066aa:	9907      	ldr	r1, [sp, #28]
 80066ac:	4620      	mov	r0, r4
 80066ae:	f001 fe35 	bl	800831c <_Bfree>
 80066b2:	4631      	mov	r1, r6
 80066b4:	4620      	mov	r0, r4
 80066b6:	f001 fe31 	bl	800831c <_Bfree>
 80066ba:	4629      	mov	r1, r5
 80066bc:	4620      	mov	r0, r4
 80066be:	f001 fe2d 	bl	800831c <_Bfree>
 80066c2:	e613      	b.n	80062ec <_strtod_l+0x664>
 80066c4:	f1ba 0f00 	cmp.w	sl, #0
 80066c8:	d11b      	bne.n	8006702 <_strtod_l+0xa7a>
 80066ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066ce:	b9f3      	cbnz	r3, 800670e <_strtod_l+0xa86>
 80066d0:	4b6b      	ldr	r3, [pc, #428]	; (8006880 <_strtod_l+0xbf8>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	4640      	mov	r0, r8
 80066d6:	4649      	mov	r1, r9
 80066d8:	f7fa fa08 	bl	8000aec <__aeabi_dcmplt>
 80066dc:	b9d0      	cbnz	r0, 8006714 <_strtod_l+0xa8c>
 80066de:	4640      	mov	r0, r8
 80066e0:	4649      	mov	r1, r9
 80066e2:	4b6b      	ldr	r3, [pc, #428]	; (8006890 <_strtod_l+0xc08>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	f7f9 ff8f 	bl	8000608 <__aeabi_dmul>
 80066ea:	4680      	mov	r8, r0
 80066ec:	4689      	mov	r9, r1
 80066ee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80066f2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80066f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80066f8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80066fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006700:	e79b      	b.n	800663a <_strtod_l+0x9b2>
 8006702:	f1ba 0f01 	cmp.w	sl, #1
 8006706:	d102      	bne.n	800670e <_strtod_l+0xa86>
 8006708:	2f00      	cmp	r7, #0
 800670a:	f43f ad7e 	beq.w	800620a <_strtod_l+0x582>
 800670e:	4b61      	ldr	r3, [pc, #388]	; (8006894 <_strtod_l+0xc0c>)
 8006710:	2200      	movs	r2, #0
 8006712:	e78c      	b.n	800662e <_strtod_l+0x9a6>
 8006714:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006890 <_strtod_l+0xc08>
 8006718:	f04f 0800 	mov.w	r8, #0
 800671c:	e7e7      	b.n	80066ee <_strtod_l+0xa66>
 800671e:	4b5c      	ldr	r3, [pc, #368]	; (8006890 <_strtod_l+0xc08>)
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	2200      	movs	r2, #0
 8006726:	f7f9 ff6f 	bl	8000608 <__aeabi_dmul>
 800672a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800672c:	4680      	mov	r8, r0
 800672e:	4689      	mov	r9, r1
 8006730:	b933      	cbnz	r3, 8006740 <_strtod_l+0xab8>
 8006732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006736:	9012      	str	r0, [sp, #72]	; 0x48
 8006738:	9313      	str	r3, [sp, #76]	; 0x4c
 800673a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800673e:	e7dd      	b.n	80066fc <_strtod_l+0xa74>
 8006740:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006744:	e7f9      	b.n	800673a <_strtod_l+0xab2>
 8006746:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800674a:	9b04      	ldr	r3, [sp, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1a8      	bne.n	80066a2 <_strtod_l+0xa1a>
 8006750:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006754:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006756:	0d1b      	lsrs	r3, r3, #20
 8006758:	051b      	lsls	r3, r3, #20
 800675a:	429a      	cmp	r2, r3
 800675c:	d1a1      	bne.n	80066a2 <_strtod_l+0xa1a>
 800675e:	4640      	mov	r0, r8
 8006760:	4649      	mov	r1, r9
 8006762:	f7fa fa61 	bl	8000c28 <__aeabi_d2lz>
 8006766:	f7f9 ff21 	bl	80005ac <__aeabi_l2d>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4640      	mov	r0, r8
 8006770:	4649      	mov	r1, r9
 8006772:	f7f9 fd91 	bl	8000298 <__aeabi_dsub>
 8006776:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006778:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800677c:	ea43 030a 	orr.w	r3, r3, sl
 8006780:	4313      	orrs	r3, r2
 8006782:	4680      	mov	r8, r0
 8006784:	4689      	mov	r9, r1
 8006786:	d053      	beq.n	8006830 <_strtod_l+0xba8>
 8006788:	a335      	add	r3, pc, #212	; (adr r3, 8006860 <_strtod_l+0xbd8>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f7fa f9ad 	bl	8000aec <__aeabi_dcmplt>
 8006792:	2800      	cmp	r0, #0
 8006794:	f47f acce 	bne.w	8006134 <_strtod_l+0x4ac>
 8006798:	a333      	add	r3, pc, #204	; (adr r3, 8006868 <_strtod_l+0xbe0>)
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7fa f9c1 	bl	8000b28 <__aeabi_dcmpgt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f43f af7b 	beq.w	80066a2 <_strtod_l+0xa1a>
 80067ac:	e4c2      	b.n	8006134 <_strtod_l+0x4ac>
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	b333      	cbz	r3, 8006800 <_strtod_l+0xb78>
 80067b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067b8:	d822      	bhi.n	8006800 <_strtod_l+0xb78>
 80067ba:	a32d      	add	r3, pc, #180	; (adr r3, 8006870 <_strtod_l+0xbe8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	f7fa f99c 	bl	8000b00 <__aeabi_dcmple>
 80067c8:	b1a0      	cbz	r0, 80067f4 <_strtod_l+0xb6c>
 80067ca:	4649      	mov	r1, r9
 80067cc:	4640      	mov	r0, r8
 80067ce:	f7fa f9f3 	bl	8000bb8 <__aeabi_d2uiz>
 80067d2:	2801      	cmp	r0, #1
 80067d4:	bf38      	it	cc
 80067d6:	2001      	movcc	r0, #1
 80067d8:	f7f9 fe9c 	bl	8000514 <__aeabi_ui2d>
 80067dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067de:	4680      	mov	r8, r0
 80067e0:	4689      	mov	r9, r1
 80067e2:	bb13      	cbnz	r3, 800682a <_strtod_l+0xba2>
 80067e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067e8:	9014      	str	r0, [sp, #80]	; 0x50
 80067ea:	9315      	str	r3, [sp, #84]	; 0x54
 80067ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80067f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80067f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	930d      	str	r3, [sp, #52]	; 0x34
 8006800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006804:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006808:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800680c:	f002 f8b2 	bl	8008974 <__ulp>
 8006810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006814:	ec53 2b10 	vmov	r2, r3, d0
 8006818:	f7f9 fef6 	bl	8000608 <__aeabi_dmul>
 800681c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006820:	f7f9 fd3c 	bl	800029c <__adddf3>
 8006824:	4682      	mov	sl, r0
 8006826:	468b      	mov	fp, r1
 8006828:	e78f      	b.n	800674a <_strtod_l+0xac2>
 800682a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800682e:	e7dd      	b.n	80067ec <_strtod_l+0xb64>
 8006830:	a311      	add	r3, pc, #68	; (adr r3, 8006878 <_strtod_l+0xbf0>)
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	f7fa f959 	bl	8000aec <__aeabi_dcmplt>
 800683a:	e7b4      	b.n	80067a6 <_strtod_l+0xb1e>
 800683c:	2300      	movs	r3, #0
 800683e:	930e      	str	r3, [sp, #56]	; 0x38
 8006840:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006842:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	f7ff ba65 	b.w	8005d14 <_strtod_l+0x8c>
 800684a:	2b65      	cmp	r3, #101	; 0x65
 800684c:	f43f ab5d 	beq.w	8005f0a <_strtod_l+0x282>
 8006850:	2b45      	cmp	r3, #69	; 0x45
 8006852:	f43f ab5a 	beq.w	8005f0a <_strtod_l+0x282>
 8006856:	2201      	movs	r2, #1
 8006858:	f7ff bb92 	b.w	8005f80 <_strtod_l+0x2f8>
 800685c:	f3af 8000 	nop.w
 8006860:	94a03595 	.word	0x94a03595
 8006864:	3fdfffff 	.word	0x3fdfffff
 8006868:	35afe535 	.word	0x35afe535
 800686c:	3fe00000 	.word	0x3fe00000
 8006870:	ffc00000 	.word	0xffc00000
 8006874:	41dfffff 	.word	0x41dfffff
 8006878:	94a03595 	.word	0x94a03595
 800687c:	3fcfffff 	.word	0x3fcfffff
 8006880:	3ff00000 	.word	0x3ff00000
 8006884:	7ff00000 	.word	0x7ff00000
 8006888:	7fe00000 	.word	0x7fe00000
 800688c:	7c9fffff 	.word	0x7c9fffff
 8006890:	3fe00000 	.word	0x3fe00000
 8006894:	bff00000 	.word	0xbff00000
 8006898:	7fefffff 	.word	0x7fefffff

0800689c <strtod>:
 800689c:	460a      	mov	r2, r1
 800689e:	4601      	mov	r1, r0
 80068a0:	4802      	ldr	r0, [pc, #8]	; (80068ac <strtod+0x10>)
 80068a2:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <strtod+0x14>)
 80068a4:	6800      	ldr	r0, [r0, #0]
 80068a6:	f7ff b9ef 	b.w	8005c88 <_strtod_l>
 80068aa:	bf00      	nop
 80068ac:	20000014 	.word	0x20000014
 80068b0:	2000007c 	.word	0x2000007c

080068b4 <__swbuf_r>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	460e      	mov	r6, r1
 80068b8:	4614      	mov	r4, r2
 80068ba:	4605      	mov	r5, r0
 80068bc:	b118      	cbz	r0, 80068c6 <__swbuf_r+0x12>
 80068be:	6983      	ldr	r3, [r0, #24]
 80068c0:	b90b      	cbnz	r3, 80068c6 <__swbuf_r+0x12>
 80068c2:	f001 f84b 	bl	800795c <__sinit>
 80068c6:	4b21      	ldr	r3, [pc, #132]	; (800694c <__swbuf_r+0x98>)
 80068c8:	429c      	cmp	r4, r3
 80068ca:	d12b      	bne.n	8006924 <__swbuf_r+0x70>
 80068cc:	686c      	ldr	r4, [r5, #4]
 80068ce:	69a3      	ldr	r3, [r4, #24]
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	071a      	lsls	r2, r3, #28
 80068d6:	d52f      	bpl.n	8006938 <__swbuf_r+0x84>
 80068d8:	6923      	ldr	r3, [r4, #16]
 80068da:	b36b      	cbz	r3, 8006938 <__swbuf_r+0x84>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	1ac0      	subs	r0, r0, r3
 80068e2:	6963      	ldr	r3, [r4, #20]
 80068e4:	b2f6      	uxtb	r6, r6
 80068e6:	4283      	cmp	r3, r0
 80068e8:	4637      	mov	r7, r6
 80068ea:	dc04      	bgt.n	80068f6 <__swbuf_r+0x42>
 80068ec:	4621      	mov	r1, r4
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 ffa0 	bl	8007834 <_fflush_r>
 80068f4:	bb30      	cbnz	r0, 8006944 <__swbuf_r+0x90>
 80068f6:	68a3      	ldr	r3, [r4, #8]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	60a3      	str	r3, [r4, #8]
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	6022      	str	r2, [r4, #0]
 8006902:	701e      	strb	r6, [r3, #0]
 8006904:	6963      	ldr	r3, [r4, #20]
 8006906:	3001      	adds	r0, #1
 8006908:	4283      	cmp	r3, r0
 800690a:	d004      	beq.n	8006916 <__swbuf_r+0x62>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	07db      	lsls	r3, r3, #31
 8006910:	d506      	bpl.n	8006920 <__swbuf_r+0x6c>
 8006912:	2e0a      	cmp	r6, #10
 8006914:	d104      	bne.n	8006920 <__swbuf_r+0x6c>
 8006916:	4621      	mov	r1, r4
 8006918:	4628      	mov	r0, r5
 800691a:	f000 ff8b 	bl	8007834 <_fflush_r>
 800691e:	b988      	cbnz	r0, 8006944 <__swbuf_r+0x90>
 8006920:	4638      	mov	r0, r7
 8006922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <__swbuf_r+0x9c>)
 8006926:	429c      	cmp	r4, r3
 8006928:	d101      	bne.n	800692e <__swbuf_r+0x7a>
 800692a:	68ac      	ldr	r4, [r5, #8]
 800692c:	e7cf      	b.n	80068ce <__swbuf_r+0x1a>
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <__swbuf_r+0xa0>)
 8006930:	429c      	cmp	r4, r3
 8006932:	bf08      	it	eq
 8006934:	68ec      	ldreq	r4, [r5, #12]
 8006936:	e7ca      	b.n	80068ce <__swbuf_r+0x1a>
 8006938:	4621      	mov	r1, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f80c 	bl	8006958 <__swsetup_r>
 8006940:	2800      	cmp	r0, #0
 8006942:	d0cb      	beq.n	80068dc <__swbuf_r+0x28>
 8006944:	f04f 37ff 	mov.w	r7, #4294967295
 8006948:	e7ea      	b.n	8006920 <__swbuf_r+0x6c>
 800694a:	bf00      	nop
 800694c:	080099dc 	.word	0x080099dc
 8006950:	080099fc 	.word	0x080099fc
 8006954:	080099bc 	.word	0x080099bc

08006958 <__swsetup_r>:
 8006958:	4b32      	ldr	r3, [pc, #200]	; (8006a24 <__swsetup_r+0xcc>)
 800695a:	b570      	push	{r4, r5, r6, lr}
 800695c:	681d      	ldr	r5, [r3, #0]
 800695e:	4606      	mov	r6, r0
 8006960:	460c      	mov	r4, r1
 8006962:	b125      	cbz	r5, 800696e <__swsetup_r+0x16>
 8006964:	69ab      	ldr	r3, [r5, #24]
 8006966:	b913      	cbnz	r3, 800696e <__swsetup_r+0x16>
 8006968:	4628      	mov	r0, r5
 800696a:	f000 fff7 	bl	800795c <__sinit>
 800696e:	4b2e      	ldr	r3, [pc, #184]	; (8006a28 <__swsetup_r+0xd0>)
 8006970:	429c      	cmp	r4, r3
 8006972:	d10f      	bne.n	8006994 <__swsetup_r+0x3c>
 8006974:	686c      	ldr	r4, [r5, #4]
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800697c:	0719      	lsls	r1, r3, #28
 800697e:	d42c      	bmi.n	80069da <__swsetup_r+0x82>
 8006980:	06dd      	lsls	r5, r3, #27
 8006982:	d411      	bmi.n	80069a8 <__swsetup_r+0x50>
 8006984:	2309      	movs	r3, #9
 8006986:	6033      	str	r3, [r6, #0]
 8006988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	e03e      	b.n	8006a12 <__swsetup_r+0xba>
 8006994:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <__swsetup_r+0xd4>)
 8006996:	429c      	cmp	r4, r3
 8006998:	d101      	bne.n	800699e <__swsetup_r+0x46>
 800699a:	68ac      	ldr	r4, [r5, #8]
 800699c:	e7eb      	b.n	8006976 <__swsetup_r+0x1e>
 800699e:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <__swsetup_r+0xd8>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	bf08      	it	eq
 80069a4:	68ec      	ldreq	r4, [r5, #12]
 80069a6:	e7e6      	b.n	8006976 <__swsetup_r+0x1e>
 80069a8:	0758      	lsls	r0, r3, #29
 80069aa:	d512      	bpl.n	80069d2 <__swsetup_r+0x7a>
 80069ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ae:	b141      	cbz	r1, 80069c2 <__swsetup_r+0x6a>
 80069b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069b4:	4299      	cmp	r1, r3
 80069b6:	d002      	beq.n	80069be <__swsetup_r+0x66>
 80069b8:	4630      	mov	r0, r6
 80069ba:	f002 f939 	bl	8008c30 <_free_r>
 80069be:	2300      	movs	r3, #0
 80069c0:	6363      	str	r3, [r4, #52]	; 0x34
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	2300      	movs	r3, #0
 80069cc:	6063      	str	r3, [r4, #4]
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	f043 0308 	orr.w	r3, r3, #8
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	b94b      	cbnz	r3, 80069f2 <__swsetup_r+0x9a>
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e8:	d003      	beq.n	80069f2 <__swsetup_r+0x9a>
 80069ea:	4621      	mov	r1, r4
 80069ec:	4630      	mov	r0, r6
 80069ee:	f001 fbed 	bl	80081cc <__smakebuf_r>
 80069f2:	89a0      	ldrh	r0, [r4, #12]
 80069f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069f8:	f010 0301 	ands.w	r3, r0, #1
 80069fc:	d00a      	beq.n	8006a14 <__swsetup_r+0xbc>
 80069fe:	2300      	movs	r3, #0
 8006a00:	60a3      	str	r3, [r4, #8]
 8006a02:	6963      	ldr	r3, [r4, #20]
 8006a04:	425b      	negs	r3, r3
 8006a06:	61a3      	str	r3, [r4, #24]
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	b943      	cbnz	r3, 8006a1e <__swsetup_r+0xc6>
 8006a0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a10:	d1ba      	bne.n	8006988 <__swsetup_r+0x30>
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	0781      	lsls	r1, r0, #30
 8006a16:	bf58      	it	pl
 8006a18:	6963      	ldrpl	r3, [r4, #20]
 8006a1a:	60a3      	str	r3, [r4, #8]
 8006a1c:	e7f4      	b.n	8006a08 <__swsetup_r+0xb0>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7f7      	b.n	8006a12 <__swsetup_r+0xba>
 8006a22:	bf00      	nop
 8006a24:	20000014 	.word	0x20000014
 8006a28:	080099dc 	.word	0x080099dc
 8006a2c:	080099fc 	.word	0x080099fc
 8006a30:	080099bc 	.word	0x080099bc

08006a34 <quorem>:
 8006a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	6903      	ldr	r3, [r0, #16]
 8006a3a:	690c      	ldr	r4, [r1, #16]
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	4607      	mov	r7, r0
 8006a40:	f2c0 8081 	blt.w	8006b46 <quorem+0x112>
 8006a44:	3c01      	subs	r4, #1
 8006a46:	f101 0814 	add.w	r8, r1, #20
 8006a4a:	f100 0514 	add.w	r5, r0, #20
 8006a4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a6c:	d331      	bcc.n	8006ad2 <quorem+0x9e>
 8006a6e:	f04f 0e00 	mov.w	lr, #0
 8006a72:	4640      	mov	r0, r8
 8006a74:	46ac      	mov	ip, r5
 8006a76:	46f2      	mov	sl, lr
 8006a78:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a7c:	b293      	uxth	r3, r2
 8006a7e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	ebaa 0303 	sub.w	r3, sl, r3
 8006a8c:	0c12      	lsrs	r2, r2, #16
 8006a8e:	f8dc a000 	ldr.w	sl, [ip]
 8006a92:	fb06 e202 	mla	r2, r6, r2, lr
 8006a96:	fa13 f38a 	uxtah	r3, r3, sl
 8006a9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a9e:	fa1f fa82 	uxth.w	sl, r2
 8006aa2:	f8dc 2000 	ldr.w	r2, [ip]
 8006aa6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ab4:	4581      	cmp	r9, r0
 8006ab6:	f84c 3b04 	str.w	r3, [ip], #4
 8006aba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006abe:	d2db      	bcs.n	8006a78 <quorem+0x44>
 8006ac0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ac4:	b92b      	cbnz	r3, 8006ad2 <quorem+0x9e>
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	3b04      	subs	r3, #4
 8006aca:	429d      	cmp	r5, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	d32e      	bcc.n	8006b2e <quorem+0xfa>
 8006ad0:	613c      	str	r4, [r7, #16]
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f001 feaa 	bl	800882c <__mcmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	db24      	blt.n	8006b26 <quorem+0xf2>
 8006adc:	3601      	adds	r6, #1
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f04f 0c00 	mov.w	ip, #0
 8006ae4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ae8:	f8d0 e000 	ldr.w	lr, [r0]
 8006aec:	b293      	uxth	r3, r2
 8006aee:	ebac 0303 	sub.w	r3, ip, r3
 8006af2:	0c12      	lsrs	r2, r2, #16
 8006af4:	fa13 f38e 	uxtah	r3, r3, lr
 8006af8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b06:	45c1      	cmp	r9, r8
 8006b08:	f840 3b04 	str.w	r3, [r0], #4
 8006b0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b10:	d2e8      	bcs.n	8006ae4 <quorem+0xb0>
 8006b12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b1a:	b922      	cbnz	r2, 8006b26 <quorem+0xf2>
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	429d      	cmp	r5, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	d30a      	bcc.n	8006b3a <quorem+0x106>
 8006b24:	613c      	str	r4, [r7, #16]
 8006b26:	4630      	mov	r0, r6
 8006b28:	b003      	add	sp, #12
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	6812      	ldr	r2, [r2, #0]
 8006b30:	3b04      	subs	r3, #4
 8006b32:	2a00      	cmp	r2, #0
 8006b34:	d1cc      	bne.n	8006ad0 <quorem+0x9c>
 8006b36:	3c01      	subs	r4, #1
 8006b38:	e7c7      	b.n	8006aca <quorem+0x96>
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	3b04      	subs	r3, #4
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d1f0      	bne.n	8006b24 <quorem+0xf0>
 8006b42:	3c01      	subs	r4, #1
 8006b44:	e7eb      	b.n	8006b1e <quorem+0xea>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e7ee      	b.n	8006b28 <quorem+0xf4>
 8006b4a:	0000      	movs	r0, r0
 8006b4c:	0000      	movs	r0, r0
	...

08006b50 <_dtoa_r>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	ed2d 8b02 	vpush	{d8}
 8006b58:	ec57 6b10 	vmov	r6, r7, d0
 8006b5c:	b095      	sub	sp, #84	; 0x54
 8006b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b64:	9105      	str	r1, [sp, #20]
 8006b66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b70:	b975      	cbnz	r5, 8006b90 <_dtoa_r+0x40>
 8006b72:	2010      	movs	r0, #16
 8006b74:	f001 fb6a 	bl	800824c <malloc>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b7c:	b920      	cbnz	r0, 8006b88 <_dtoa_r+0x38>
 8006b7e:	4bb2      	ldr	r3, [pc, #712]	; (8006e48 <_dtoa_r+0x2f8>)
 8006b80:	21ea      	movs	r1, #234	; 0xea
 8006b82:	48b2      	ldr	r0, [pc, #712]	; (8006e4c <_dtoa_r+0x2fc>)
 8006b84:	f002 fae4 	bl	8009150 <__assert_func>
 8006b88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b8c:	6005      	str	r5, [r0, #0]
 8006b8e:	60c5      	str	r5, [r0, #12]
 8006b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b92:	6819      	ldr	r1, [r3, #0]
 8006b94:	b151      	cbz	r1, 8006bac <_dtoa_r+0x5c>
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	604a      	str	r2, [r1, #4]
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4093      	lsls	r3, r2
 8006b9e:	608b      	str	r3, [r1, #8]
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 fbbb 	bl	800831c <_Bfree>
 8006ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	1e3b      	subs	r3, r7, #0
 8006bae:	bfb9      	ittee	lt
 8006bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	9303      	strlt	r3, [sp, #12]
 8006bb6:	2300      	movge	r3, #0
 8006bb8:	f8c8 3000 	strge.w	r3, [r8]
 8006bbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006bc0:	4ba3      	ldr	r3, [pc, #652]	; (8006e50 <_dtoa_r+0x300>)
 8006bc2:	bfbc      	itt	lt
 8006bc4:	2201      	movlt	r2, #1
 8006bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8006bca:	ea33 0309 	bics.w	r3, r3, r9
 8006bce:	d11b      	bne.n	8006c08 <_dtoa_r+0xb8>
 8006bd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bdc:	4333      	orrs	r3, r6
 8006bde:	f000 857a 	beq.w	80076d6 <_dtoa_r+0xb86>
 8006be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006be4:	b963      	cbnz	r3, 8006c00 <_dtoa_r+0xb0>
 8006be6:	4b9b      	ldr	r3, [pc, #620]	; (8006e54 <_dtoa_r+0x304>)
 8006be8:	e024      	b.n	8006c34 <_dtoa_r+0xe4>
 8006bea:	4b9b      	ldr	r3, [pc, #620]	; (8006e58 <_dtoa_r+0x308>)
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	9800      	ldr	r0, [sp, #0]
 8006bf6:	b015      	add	sp, #84	; 0x54
 8006bf8:	ecbd 8b02 	vpop	{d8}
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	4b94      	ldr	r3, [pc, #592]	; (8006e54 <_dtoa_r+0x304>)
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	3303      	adds	r3, #3
 8006c06:	e7f3      	b.n	8006bf0 <_dtoa_r+0xa0>
 8006c08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	ec51 0b17 	vmov	r0, r1, d7
 8006c12:	2300      	movs	r3, #0
 8006c14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c18:	f7f9 ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	b158      	cbz	r0, 8006c38 <_dtoa_r+0xe8>
 8006c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c22:	2301      	movs	r3, #1
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8551 	beq.w	80076d0 <_dtoa_r+0xb80>
 8006c2e:	488b      	ldr	r0, [pc, #556]	; (8006e5c <_dtoa_r+0x30c>)
 8006c30:	6018      	str	r0, [r3, #0]
 8006c32:	1e43      	subs	r3, r0, #1
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	e7dd      	b.n	8006bf4 <_dtoa_r+0xa4>
 8006c38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006c3c:	aa12      	add	r2, sp, #72	; 0x48
 8006c3e:	a913      	add	r1, sp, #76	; 0x4c
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 ff13 	bl	8008a6c <__d2b>
 8006c46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c4a:	4683      	mov	fp, r0
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	d07c      	beq.n	8006d4a <_dtoa_r+0x1fa>
 8006c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006c5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c6a:	4b7d      	ldr	r3, [pc, #500]	; (8006e60 <_dtoa_r+0x310>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f7f9 fb11 	bl	8000298 <__aeabi_dsub>
 8006c76:	a36e      	add	r3, pc, #440	; (adr r3, 8006e30 <_dtoa_r+0x2e0>)
 8006c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7c:	f7f9 fcc4 	bl	8000608 <__aeabi_dmul>
 8006c80:	a36d      	add	r3, pc, #436	; (adr r3, 8006e38 <_dtoa_r+0x2e8>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 fb09 	bl	800029c <__adddf3>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	460f      	mov	r7, r1
 8006c90:	f7f9 fc50 	bl	8000534 <__aeabi_i2d>
 8006c94:	a36a      	add	r3, pc, #424	; (adr r3, 8006e40 <_dtoa_r+0x2f0>)
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	f7f9 fcb5 	bl	8000608 <__aeabi_dmul>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 faf9 	bl	800029c <__adddf3>
 8006caa:	4606      	mov	r6, r0
 8006cac:	460f      	mov	r7, r1
 8006cae:	f7f9 ff5b 	bl	8000b68 <__aeabi_d2iz>
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4682      	mov	sl, r0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4630      	mov	r0, r6
 8006cba:	4639      	mov	r1, r7
 8006cbc:	f7f9 ff16 	bl	8000aec <__aeabi_dcmplt>
 8006cc0:	b148      	cbz	r0, 8006cd6 <_dtoa_r+0x186>
 8006cc2:	4650      	mov	r0, sl
 8006cc4:	f7f9 fc36 	bl	8000534 <__aeabi_i2d>
 8006cc8:	4632      	mov	r2, r6
 8006cca:	463b      	mov	r3, r7
 8006ccc:	f7f9 ff04 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cd0:	b908      	cbnz	r0, 8006cd6 <_dtoa_r+0x186>
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	f1ba 0f16 	cmp.w	sl, #22
 8006cda:	d854      	bhi.n	8006d86 <_dtoa_r+0x236>
 8006cdc:	4b61      	ldr	r3, [pc, #388]	; (8006e64 <_dtoa_r+0x314>)
 8006cde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cea:	f7f9 feff 	bl	8000aec <__aeabi_dcmplt>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d04b      	beq.n	8006d8a <_dtoa_r+0x23a>
 8006cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	930e      	str	r3, [sp, #56]	; 0x38
 8006cfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cfc:	1b5d      	subs	r5, r3, r5
 8006cfe:	1e6b      	subs	r3, r5, #1
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	bf43      	ittte	mi
 8006d04:	2300      	movmi	r3, #0
 8006d06:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d0a:	9304      	strmi	r3, [sp, #16]
 8006d0c:	f04f 0800 	movpl.w	r8, #0
 8006d10:	f1ba 0f00 	cmp.w	sl, #0
 8006d14:	db3b      	blt.n	8006d8e <_dtoa_r+0x23e>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d1c:	4453      	add	r3, sl
 8006d1e:	9304      	str	r3, [sp, #16]
 8006d20:	2300      	movs	r3, #0
 8006d22:	9306      	str	r3, [sp, #24]
 8006d24:	9b05      	ldr	r3, [sp, #20]
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d869      	bhi.n	8006dfe <_dtoa_r+0x2ae>
 8006d2a:	2b05      	cmp	r3, #5
 8006d2c:	bfc4      	itt	gt
 8006d2e:	3b04      	subgt	r3, #4
 8006d30:	9305      	strgt	r3, [sp, #20]
 8006d32:	9b05      	ldr	r3, [sp, #20]
 8006d34:	f1a3 0302 	sub.w	r3, r3, #2
 8006d38:	bfcc      	ite	gt
 8006d3a:	2500      	movgt	r5, #0
 8006d3c:	2501      	movle	r5, #1
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d869      	bhi.n	8006e16 <_dtoa_r+0x2c6>
 8006d42:	e8df f003 	tbb	[pc, r3]
 8006d46:	4e2c      	.short	0x4e2c
 8006d48:	5a4c      	.short	0x5a4c
 8006d4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006d4e:	441d      	add	r5, r3
 8006d50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	bfc1      	itttt	gt
 8006d58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d60:	fa09 f303 	lslgt.w	r3, r9, r3
 8006d64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d68:	bfda      	itte	le
 8006d6a:	f1c3 0320 	rsble	r3, r3, #32
 8006d6e:	fa06 f003 	lslle.w	r0, r6, r3
 8006d72:	4318      	orrgt	r0, r3
 8006d74:	f7f9 fbce 	bl	8000514 <__aeabi_ui2d>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d80:	3d01      	subs	r5, #1
 8006d82:	9310      	str	r3, [sp, #64]	; 0x40
 8006d84:	e771      	b.n	8006c6a <_dtoa_r+0x11a>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e7b6      	b.n	8006cf8 <_dtoa_r+0x1a8>
 8006d8a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d8c:	e7b5      	b.n	8006cfa <_dtoa_r+0x1aa>
 8006d8e:	f1ca 0300 	rsb	r3, sl, #0
 8006d92:	9306      	str	r3, [sp, #24]
 8006d94:	2300      	movs	r3, #0
 8006d96:	eba8 080a 	sub.w	r8, r8, sl
 8006d9a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d9c:	e7c2      	b.n	8006d24 <_dtoa_r+0x1d4>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	9308      	str	r3, [sp, #32]
 8006da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	dc39      	bgt.n	8006e1c <_dtoa_r+0x2cc>
 8006da8:	f04f 0901 	mov.w	r9, #1
 8006dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8006db0:	464b      	mov	r3, r9
 8006db2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006db6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006db8:	2200      	movs	r2, #0
 8006dba:	6042      	str	r2, [r0, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f102 0614 	add.w	r6, r2, #20
 8006dc2:	429e      	cmp	r6, r3
 8006dc4:	6841      	ldr	r1, [r0, #4]
 8006dc6:	d92f      	bls.n	8006e28 <_dtoa_r+0x2d8>
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f001 fa67 	bl	800829c <_Balloc>
 8006dce:	9000      	str	r0, [sp, #0]
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d14b      	bne.n	8006e6c <_dtoa_r+0x31c>
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <_dtoa_r+0x318>)
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ddc:	e6d1      	b.n	8006b82 <_dtoa_r+0x32>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e7de      	b.n	8006da0 <_dtoa_r+0x250>
 8006de2:	2300      	movs	r3, #0
 8006de4:	9308      	str	r3, [sp, #32]
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	eb0a 0903 	add.w	r9, sl, r3
 8006dec:	f109 0301 	add.w	r3, r9, #1
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	bfb8      	it	lt
 8006df6:	2301      	movlt	r3, #1
 8006df8:	e7dd      	b.n	8006db6 <_dtoa_r+0x266>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e7f2      	b.n	8006de4 <_dtoa_r+0x294>
 8006dfe:	2501      	movs	r5, #1
 8006e00:	2300      	movs	r3, #0
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	9508      	str	r5, [sp, #32]
 8006e06:	f04f 39ff 	mov.w	r9, #4294967295
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e10:	2312      	movs	r3, #18
 8006e12:	9209      	str	r2, [sp, #36]	; 0x24
 8006e14:	e7cf      	b.n	8006db6 <_dtoa_r+0x266>
 8006e16:	2301      	movs	r3, #1
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	e7f4      	b.n	8006e06 <_dtoa_r+0x2b6>
 8006e1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e20:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e24:	464b      	mov	r3, r9
 8006e26:	e7c6      	b.n	8006db6 <_dtoa_r+0x266>
 8006e28:	3101      	adds	r1, #1
 8006e2a:	6041      	str	r1, [r0, #4]
 8006e2c:	0052      	lsls	r2, r2, #1
 8006e2e:	e7c6      	b.n	8006dbe <_dtoa_r+0x26e>
 8006e30:	636f4361 	.word	0x636f4361
 8006e34:	3fd287a7 	.word	0x3fd287a7
 8006e38:	8b60c8b3 	.word	0x8b60c8b3
 8006e3c:	3fc68a28 	.word	0x3fc68a28
 8006e40:	509f79fb 	.word	0x509f79fb
 8006e44:	3fd34413 	.word	0x3fd34413
 8006e48:	08009935 	.word	0x08009935
 8006e4c:	0800994c 	.word	0x0800994c
 8006e50:	7ff00000 	.word	0x7ff00000
 8006e54:	08009931 	.word	0x08009931
 8006e58:	08009928 	.word	0x08009928
 8006e5c:	080098b5 	.word	0x080098b5
 8006e60:	3ff80000 	.word	0x3ff80000
 8006e64:	08009b28 	.word	0x08009b28
 8006e68:	080099ab 	.word	0x080099ab
 8006e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6e:	9a00      	ldr	r2, [sp, #0]
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	2b0e      	cmp	r3, #14
 8006e76:	f200 80ad 	bhi.w	8006fd4 <_dtoa_r+0x484>
 8006e7a:	2d00      	cmp	r5, #0
 8006e7c:	f000 80aa 	beq.w	8006fd4 <_dtoa_r+0x484>
 8006e80:	f1ba 0f00 	cmp.w	sl, #0
 8006e84:	dd36      	ble.n	8006ef4 <_dtoa_r+0x3a4>
 8006e86:	4ac3      	ldr	r2, [pc, #780]	; (8007194 <_dtoa_r+0x644>)
 8006e88:	f00a 030f 	and.w	r3, sl, #15
 8006e8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e90:	ed93 7b00 	vldr	d7, [r3]
 8006e94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006e98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006e9c:	eeb0 8a47 	vmov.f32	s16, s14
 8006ea0:	eef0 8a67 	vmov.f32	s17, s15
 8006ea4:	d016      	beq.n	8006ed4 <_dtoa_r+0x384>
 8006ea6:	4bbc      	ldr	r3, [pc, #752]	; (8007198 <_dtoa_r+0x648>)
 8006ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006eac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eb0:	f7f9 fcd4 	bl	800085c <__aeabi_ddiv>
 8006eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb8:	f007 070f 	and.w	r7, r7, #15
 8006ebc:	2503      	movs	r5, #3
 8006ebe:	4eb6      	ldr	r6, [pc, #728]	; (8007198 <_dtoa_r+0x648>)
 8006ec0:	b957      	cbnz	r7, 8006ed8 <_dtoa_r+0x388>
 8006ec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ec6:	ec53 2b18 	vmov	r2, r3, d8
 8006eca:	f7f9 fcc7 	bl	800085c <__aeabi_ddiv>
 8006ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed2:	e029      	b.n	8006f28 <_dtoa_r+0x3d8>
 8006ed4:	2502      	movs	r5, #2
 8006ed6:	e7f2      	b.n	8006ebe <_dtoa_r+0x36e>
 8006ed8:	07f9      	lsls	r1, r7, #31
 8006eda:	d508      	bpl.n	8006eee <_dtoa_r+0x39e>
 8006edc:	ec51 0b18 	vmov	r0, r1, d8
 8006ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ee4:	f7f9 fb90 	bl	8000608 <__aeabi_dmul>
 8006ee8:	ec41 0b18 	vmov	d8, r0, r1
 8006eec:	3501      	adds	r5, #1
 8006eee:	107f      	asrs	r7, r7, #1
 8006ef0:	3608      	adds	r6, #8
 8006ef2:	e7e5      	b.n	8006ec0 <_dtoa_r+0x370>
 8006ef4:	f000 80a6 	beq.w	8007044 <_dtoa_r+0x4f4>
 8006ef8:	f1ca 0600 	rsb	r6, sl, #0
 8006efc:	4ba5      	ldr	r3, [pc, #660]	; (8007194 <_dtoa_r+0x644>)
 8006efe:	4fa6      	ldr	r7, [pc, #664]	; (8007198 <_dtoa_r+0x648>)
 8006f00:	f006 020f 	and.w	r2, r6, #15
 8006f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f10:	f7f9 fb7a 	bl	8000608 <__aeabi_dmul>
 8006f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f18:	1136      	asrs	r6, r6, #4
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2502      	movs	r5, #2
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	f040 8085 	bne.w	800702e <_dtoa_r+0x4de>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1d2      	bne.n	8006ece <_dtoa_r+0x37e>
 8006f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 808c 	beq.w	8007048 <_dtoa_r+0x4f8>
 8006f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f34:	4b99      	ldr	r3, [pc, #612]	; (800719c <_dtoa_r+0x64c>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	f7f9 fdd6 	bl	8000aec <__aeabi_dcmplt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f000 8081 	beq.w	8007048 <_dtoa_r+0x4f8>
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d07d      	beq.n	8007048 <_dtoa_r+0x4f8>
 8006f4c:	f1b9 0f00 	cmp.w	r9, #0
 8006f50:	dd3c      	ble.n	8006fcc <_dtoa_r+0x47c>
 8006f52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4b91      	ldr	r3, [pc, #580]	; (80071a0 <_dtoa_r+0x650>)
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 fb52 	bl	8000608 <__aeabi_dmul>
 8006f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f68:	3501      	adds	r5, #1
 8006f6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006f6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f72:	4628      	mov	r0, r5
 8006f74:	f7f9 fade 	bl	8000534 <__aeabi_i2d>
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	f7f9 fb44 	bl	8000608 <__aeabi_dmul>
 8006f80:	4b88      	ldr	r3, [pc, #544]	; (80071a4 <_dtoa_r+0x654>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	f7f9 f98a 	bl	800029c <__adddf3>
 8006f88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d15c      	bne.n	8007052 <_dtoa_r+0x502>
 8006f98:	4b83      	ldr	r3, [pc, #524]	; (80071a8 <_dtoa_r+0x658>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 f97a 	bl	8000298 <__aeabi_dsub>
 8006fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	f7f9 fdbc 	bl	8000b28 <__aeabi_dcmpgt>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f040 8296 	bne.w	80074e2 <_dtoa_r+0x992>
 8006fb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	f7f9 fd93 	bl	8000aec <__aeabi_dcmplt>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f040 8288 	bne.w	80074dc <_dtoa_r+0x98c>
 8006fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f2c0 8158 	blt.w	800728c <_dtoa_r+0x73c>
 8006fdc:	f1ba 0f0e 	cmp.w	sl, #14
 8006fe0:	f300 8154 	bgt.w	800728c <_dtoa_r+0x73c>
 8006fe4:	4b6b      	ldr	r3, [pc, #428]	; (8007194 <_dtoa_r+0x644>)
 8006fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006fea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f280 80e3 	bge.w	80071bc <_dtoa_r+0x66c>
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f300 80df 	bgt.w	80071bc <_dtoa_r+0x66c>
 8006ffe:	f040 826d 	bne.w	80074dc <_dtoa_r+0x98c>
 8007002:	4b69      	ldr	r3, [pc, #420]	; (80071a8 <_dtoa_r+0x658>)
 8007004:	2200      	movs	r2, #0
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 fafd 	bl	8000608 <__aeabi_dmul>
 800700e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007012:	f7f9 fd7f 	bl	8000b14 <__aeabi_dcmpge>
 8007016:	9e01      	ldr	r6, [sp, #4]
 8007018:	4637      	mov	r7, r6
 800701a:	2800      	cmp	r0, #0
 800701c:	f040 8243 	bne.w	80074a6 <_dtoa_r+0x956>
 8007020:	9d00      	ldr	r5, [sp, #0]
 8007022:	2331      	movs	r3, #49	; 0x31
 8007024:	f805 3b01 	strb.w	r3, [r5], #1
 8007028:	f10a 0a01 	add.w	sl, sl, #1
 800702c:	e23f      	b.n	80074ae <_dtoa_r+0x95e>
 800702e:	07f2      	lsls	r2, r6, #31
 8007030:	d505      	bpl.n	800703e <_dtoa_r+0x4ee>
 8007032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007036:	f7f9 fae7 	bl	8000608 <__aeabi_dmul>
 800703a:	3501      	adds	r5, #1
 800703c:	2301      	movs	r3, #1
 800703e:	1076      	asrs	r6, r6, #1
 8007040:	3708      	adds	r7, #8
 8007042:	e76c      	b.n	8006f1e <_dtoa_r+0x3ce>
 8007044:	2502      	movs	r5, #2
 8007046:	e76f      	b.n	8006f28 <_dtoa_r+0x3d8>
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	f8cd a01c 	str.w	sl, [sp, #28]
 800704e:	930c      	str	r3, [sp, #48]	; 0x30
 8007050:	e78d      	b.n	8006f6e <_dtoa_r+0x41e>
 8007052:	9900      	ldr	r1, [sp, #0]
 8007054:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007058:	4b4e      	ldr	r3, [pc, #312]	; (8007194 <_dtoa_r+0x644>)
 800705a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800705e:	4401      	add	r1, r0
 8007060:	9102      	str	r1, [sp, #8]
 8007062:	9908      	ldr	r1, [sp, #32]
 8007064:	eeb0 8a47 	vmov.f32	s16, s14
 8007068:	eef0 8a67 	vmov.f32	s17, s15
 800706c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007074:	2900      	cmp	r1, #0
 8007076:	d045      	beq.n	8007104 <_dtoa_r+0x5b4>
 8007078:	494c      	ldr	r1, [pc, #304]	; (80071ac <_dtoa_r+0x65c>)
 800707a:	2000      	movs	r0, #0
 800707c:	f7f9 fbee 	bl	800085c <__aeabi_ddiv>
 8007080:	ec53 2b18 	vmov	r2, r3, d8
 8007084:	f7f9 f908 	bl	8000298 <__aeabi_dsub>
 8007088:	9d00      	ldr	r5, [sp, #0]
 800708a:	ec41 0b18 	vmov	d8, r0, r1
 800708e:	4639      	mov	r1, r7
 8007090:	4630      	mov	r0, r6
 8007092:	f7f9 fd69 	bl	8000b68 <__aeabi_d2iz>
 8007096:	900c      	str	r0, [sp, #48]	; 0x30
 8007098:	f7f9 fa4c 	bl	8000534 <__aeabi_i2d>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4630      	mov	r0, r6
 80070a2:	4639      	mov	r1, r7
 80070a4:	f7f9 f8f8 	bl	8000298 <__aeabi_dsub>
 80070a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070aa:	3330      	adds	r3, #48	; 0x30
 80070ac:	f805 3b01 	strb.w	r3, [r5], #1
 80070b0:	ec53 2b18 	vmov	r2, r3, d8
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	f7f9 fd18 	bl	8000aec <__aeabi_dcmplt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d165      	bne.n	800718c <_dtoa_r+0x63c>
 80070c0:	4632      	mov	r2, r6
 80070c2:	463b      	mov	r3, r7
 80070c4:	4935      	ldr	r1, [pc, #212]	; (800719c <_dtoa_r+0x64c>)
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7f9 f8e6 	bl	8000298 <__aeabi_dsub>
 80070cc:	ec53 2b18 	vmov	r2, r3, d8
 80070d0:	f7f9 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	f040 80b9 	bne.w	800724c <_dtoa_r+0x6fc>
 80070da:	9b02      	ldr	r3, [sp, #8]
 80070dc:	429d      	cmp	r5, r3
 80070de:	f43f af75 	beq.w	8006fcc <_dtoa_r+0x47c>
 80070e2:	4b2f      	ldr	r3, [pc, #188]	; (80071a0 <_dtoa_r+0x650>)
 80070e4:	ec51 0b18 	vmov	r0, r1, d8
 80070e8:	2200      	movs	r2, #0
 80070ea:	f7f9 fa8d 	bl	8000608 <__aeabi_dmul>
 80070ee:	4b2c      	ldr	r3, [pc, #176]	; (80071a0 <_dtoa_r+0x650>)
 80070f0:	ec41 0b18 	vmov	d8, r0, r1
 80070f4:	2200      	movs	r2, #0
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 fa85 	bl	8000608 <__aeabi_dmul>
 80070fe:	4606      	mov	r6, r0
 8007100:	460f      	mov	r7, r1
 8007102:	e7c4      	b.n	800708e <_dtoa_r+0x53e>
 8007104:	ec51 0b17 	vmov	r0, r1, d7
 8007108:	f7f9 fa7e 	bl	8000608 <__aeabi_dmul>
 800710c:	9b02      	ldr	r3, [sp, #8]
 800710e:	9d00      	ldr	r5, [sp, #0]
 8007110:	930c      	str	r3, [sp, #48]	; 0x30
 8007112:	ec41 0b18 	vmov	d8, r0, r1
 8007116:	4639      	mov	r1, r7
 8007118:	4630      	mov	r0, r6
 800711a:	f7f9 fd25 	bl	8000b68 <__aeabi_d2iz>
 800711e:	9011      	str	r0, [sp, #68]	; 0x44
 8007120:	f7f9 fa08 	bl	8000534 <__aeabi_i2d>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 f8b4 	bl	8000298 <__aeabi_dsub>
 8007130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007132:	3330      	adds	r3, #48	; 0x30
 8007134:	f805 3b01 	strb.w	r3, [r5], #1
 8007138:	9b02      	ldr	r3, [sp, #8]
 800713a:	429d      	cmp	r5, r3
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	d134      	bne.n	80071b0 <_dtoa_r+0x660>
 8007146:	4b19      	ldr	r3, [pc, #100]	; (80071ac <_dtoa_r+0x65c>)
 8007148:	ec51 0b18 	vmov	r0, r1, d8
 800714c:	f7f9 f8a6 	bl	800029c <__adddf3>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 fce6 	bl	8000b28 <__aeabi_dcmpgt>
 800715c:	2800      	cmp	r0, #0
 800715e:	d175      	bne.n	800724c <_dtoa_r+0x6fc>
 8007160:	ec53 2b18 	vmov	r2, r3, d8
 8007164:	4911      	ldr	r1, [pc, #68]	; (80071ac <_dtoa_r+0x65c>)
 8007166:	2000      	movs	r0, #0
 8007168:	f7f9 f896 	bl	8000298 <__aeabi_dsub>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fcba 	bl	8000aec <__aeabi_dcmplt>
 8007178:	2800      	cmp	r0, #0
 800717a:	f43f af27 	beq.w	8006fcc <_dtoa_r+0x47c>
 800717e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007180:	1e6b      	subs	r3, r5, #1
 8007182:	930c      	str	r3, [sp, #48]	; 0x30
 8007184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d0f8      	beq.n	800717e <_dtoa_r+0x62e>
 800718c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007190:	e04a      	b.n	8007228 <_dtoa_r+0x6d8>
 8007192:	bf00      	nop
 8007194:	08009b28 	.word	0x08009b28
 8007198:	08009b00 	.word	0x08009b00
 800719c:	3ff00000 	.word	0x3ff00000
 80071a0:	40240000 	.word	0x40240000
 80071a4:	401c0000 	.word	0x401c0000
 80071a8:	40140000 	.word	0x40140000
 80071ac:	3fe00000 	.word	0x3fe00000
 80071b0:	4baf      	ldr	r3, [pc, #700]	; (8007470 <_dtoa_r+0x920>)
 80071b2:	f7f9 fa29 	bl	8000608 <__aeabi_dmul>
 80071b6:	4606      	mov	r6, r0
 80071b8:	460f      	mov	r7, r1
 80071ba:	e7ac      	b.n	8007116 <_dtoa_r+0x5c6>
 80071bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071c0:	9d00      	ldr	r5, [sp, #0]
 80071c2:	4642      	mov	r2, r8
 80071c4:	464b      	mov	r3, r9
 80071c6:	4630      	mov	r0, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 fb47 	bl	800085c <__aeabi_ddiv>
 80071ce:	f7f9 fccb 	bl	8000b68 <__aeabi_d2iz>
 80071d2:	9002      	str	r0, [sp, #8]
 80071d4:	f7f9 f9ae 	bl	8000534 <__aeabi_i2d>
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	f7f9 fa14 	bl	8000608 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 f856 	bl	8000298 <__aeabi_dsub>
 80071ec:	9e02      	ldr	r6, [sp, #8]
 80071ee:	9f01      	ldr	r7, [sp, #4]
 80071f0:	3630      	adds	r6, #48	; 0x30
 80071f2:	f805 6b01 	strb.w	r6, [r5], #1
 80071f6:	9e00      	ldr	r6, [sp, #0]
 80071f8:	1bae      	subs	r6, r5, r6
 80071fa:	42b7      	cmp	r7, r6
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	d137      	bne.n	8007272 <_dtoa_r+0x722>
 8007202:	f7f9 f84b 	bl	800029c <__adddf3>
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	f7f9 fc8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007212:	b9c8      	cbnz	r0, 8007248 <_dtoa_r+0x6f8>
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	4630      	mov	r0, r6
 800721a:	4639      	mov	r1, r7
 800721c:	f7f9 fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007220:	b110      	cbz	r0, 8007228 <_dtoa_r+0x6d8>
 8007222:	9b02      	ldr	r3, [sp, #8]
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	d40f      	bmi.n	8007248 <_dtoa_r+0x6f8>
 8007228:	4620      	mov	r0, r4
 800722a:	4659      	mov	r1, fp
 800722c:	f001 f876 	bl	800831c <_Bfree>
 8007230:	2300      	movs	r3, #0
 8007232:	702b      	strb	r3, [r5, #0]
 8007234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007236:	f10a 0001 	add.w	r0, sl, #1
 800723a:	6018      	str	r0, [r3, #0]
 800723c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800723e:	2b00      	cmp	r3, #0
 8007240:	f43f acd8 	beq.w	8006bf4 <_dtoa_r+0xa4>
 8007244:	601d      	str	r5, [r3, #0]
 8007246:	e4d5      	b.n	8006bf4 <_dtoa_r+0xa4>
 8007248:	f8cd a01c 	str.w	sl, [sp, #28]
 800724c:	462b      	mov	r3, r5
 800724e:	461d      	mov	r5, r3
 8007250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007254:	2a39      	cmp	r2, #57	; 0x39
 8007256:	d108      	bne.n	800726a <_dtoa_r+0x71a>
 8007258:	9a00      	ldr	r2, [sp, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d1f7      	bne.n	800724e <_dtoa_r+0x6fe>
 800725e:	9a07      	ldr	r2, [sp, #28]
 8007260:	9900      	ldr	r1, [sp, #0]
 8007262:	3201      	adds	r2, #1
 8007264:	9207      	str	r2, [sp, #28]
 8007266:	2230      	movs	r2, #48	; 0x30
 8007268:	700a      	strb	r2, [r1, #0]
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	3201      	adds	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	e78c      	b.n	800718c <_dtoa_r+0x63c>
 8007272:	4b7f      	ldr	r3, [pc, #508]	; (8007470 <_dtoa_r+0x920>)
 8007274:	2200      	movs	r2, #0
 8007276:	f7f9 f9c7 	bl	8000608 <__aeabi_dmul>
 800727a:	2200      	movs	r2, #0
 800727c:	2300      	movs	r3, #0
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	f7f9 fc29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007286:	2800      	cmp	r0, #0
 8007288:	d09b      	beq.n	80071c2 <_dtoa_r+0x672>
 800728a:	e7cd      	b.n	8007228 <_dtoa_r+0x6d8>
 800728c:	9a08      	ldr	r2, [sp, #32]
 800728e:	2a00      	cmp	r2, #0
 8007290:	f000 80c4 	beq.w	800741c <_dtoa_r+0x8cc>
 8007294:	9a05      	ldr	r2, [sp, #20]
 8007296:	2a01      	cmp	r2, #1
 8007298:	f300 80a8 	bgt.w	80073ec <_dtoa_r+0x89c>
 800729c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800729e:	2a00      	cmp	r2, #0
 80072a0:	f000 80a0 	beq.w	80073e4 <_dtoa_r+0x894>
 80072a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072a8:	9e06      	ldr	r6, [sp, #24]
 80072aa:	4645      	mov	r5, r8
 80072ac:	9a04      	ldr	r2, [sp, #16]
 80072ae:	2101      	movs	r1, #1
 80072b0:	441a      	add	r2, r3
 80072b2:	4620      	mov	r0, r4
 80072b4:	4498      	add	r8, r3
 80072b6:	9204      	str	r2, [sp, #16]
 80072b8:	f001 f936 	bl	8008528 <__i2b>
 80072bc:	4607      	mov	r7, r0
 80072be:	2d00      	cmp	r5, #0
 80072c0:	dd0b      	ble.n	80072da <_dtoa_r+0x78a>
 80072c2:	9b04      	ldr	r3, [sp, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd08      	ble.n	80072da <_dtoa_r+0x78a>
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	bfa8      	it	ge
 80072ce:	462b      	movge	r3, r5
 80072d0:	eba8 0803 	sub.w	r8, r8, r3
 80072d4:	1aed      	subs	r5, r5, r3
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9b06      	ldr	r3, [sp, #24]
 80072dc:	b1fb      	cbz	r3, 800731e <_dtoa_r+0x7ce>
 80072de:	9b08      	ldr	r3, [sp, #32]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 809f 	beq.w	8007424 <_dtoa_r+0x8d4>
 80072e6:	2e00      	cmp	r6, #0
 80072e8:	dd11      	ble.n	800730e <_dtoa_r+0x7be>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4632      	mov	r2, r6
 80072ee:	4620      	mov	r0, r4
 80072f0:	f001 f9d6 	bl	80086a0 <__pow5mult>
 80072f4:	465a      	mov	r2, fp
 80072f6:	4601      	mov	r1, r0
 80072f8:	4607      	mov	r7, r0
 80072fa:	4620      	mov	r0, r4
 80072fc:	f001 f92a 	bl	8008554 <__multiply>
 8007300:	4659      	mov	r1, fp
 8007302:	9007      	str	r0, [sp, #28]
 8007304:	4620      	mov	r0, r4
 8007306:	f001 f809 	bl	800831c <_Bfree>
 800730a:	9b07      	ldr	r3, [sp, #28]
 800730c:	469b      	mov	fp, r3
 800730e:	9b06      	ldr	r3, [sp, #24]
 8007310:	1b9a      	subs	r2, r3, r6
 8007312:	d004      	beq.n	800731e <_dtoa_r+0x7ce>
 8007314:	4659      	mov	r1, fp
 8007316:	4620      	mov	r0, r4
 8007318:	f001 f9c2 	bl	80086a0 <__pow5mult>
 800731c:	4683      	mov	fp, r0
 800731e:	2101      	movs	r1, #1
 8007320:	4620      	mov	r0, r4
 8007322:	f001 f901 	bl	8008528 <__i2b>
 8007326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007328:	2b00      	cmp	r3, #0
 800732a:	4606      	mov	r6, r0
 800732c:	dd7c      	ble.n	8007428 <_dtoa_r+0x8d8>
 800732e:	461a      	mov	r2, r3
 8007330:	4601      	mov	r1, r0
 8007332:	4620      	mov	r0, r4
 8007334:	f001 f9b4 	bl	80086a0 <__pow5mult>
 8007338:	9b05      	ldr	r3, [sp, #20]
 800733a:	2b01      	cmp	r3, #1
 800733c:	4606      	mov	r6, r0
 800733e:	dd76      	ble.n	800742e <_dtoa_r+0x8de>
 8007340:	2300      	movs	r3, #0
 8007342:	9306      	str	r3, [sp, #24]
 8007344:	6933      	ldr	r3, [r6, #16]
 8007346:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800734a:	6918      	ldr	r0, [r3, #16]
 800734c:	f001 f89c 	bl	8008488 <__hi0bits>
 8007350:	f1c0 0020 	rsb	r0, r0, #32
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	4418      	add	r0, r3
 8007358:	f010 001f 	ands.w	r0, r0, #31
 800735c:	f000 8086 	beq.w	800746c <_dtoa_r+0x91c>
 8007360:	f1c0 0320 	rsb	r3, r0, #32
 8007364:	2b04      	cmp	r3, #4
 8007366:	dd7f      	ble.n	8007468 <_dtoa_r+0x918>
 8007368:	f1c0 001c 	rsb	r0, r0, #28
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	4403      	add	r3, r0
 8007370:	4480      	add	r8, r0
 8007372:	4405      	add	r5, r0
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	f1b8 0f00 	cmp.w	r8, #0
 800737a:	dd05      	ble.n	8007388 <_dtoa_r+0x838>
 800737c:	4659      	mov	r1, fp
 800737e:	4642      	mov	r2, r8
 8007380:	4620      	mov	r0, r4
 8007382:	f001 f9e7 	bl	8008754 <__lshift>
 8007386:	4683      	mov	fp, r0
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	dd05      	ble.n	800739a <_dtoa_r+0x84a>
 800738e:	4631      	mov	r1, r6
 8007390:	461a      	mov	r2, r3
 8007392:	4620      	mov	r0, r4
 8007394:	f001 f9de 	bl	8008754 <__lshift>
 8007398:	4606      	mov	r6, r0
 800739a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d069      	beq.n	8007474 <_dtoa_r+0x924>
 80073a0:	4631      	mov	r1, r6
 80073a2:	4658      	mov	r0, fp
 80073a4:	f001 fa42 	bl	800882c <__mcmp>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	da63      	bge.n	8007474 <_dtoa_r+0x924>
 80073ac:	2300      	movs	r3, #0
 80073ae:	4659      	mov	r1, fp
 80073b0:	220a      	movs	r2, #10
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 ffd4 	bl	8008360 <__multadd>
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073be:	4683      	mov	fp, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 818f 	beq.w	80076e4 <_dtoa_r+0xb94>
 80073c6:	4639      	mov	r1, r7
 80073c8:	2300      	movs	r3, #0
 80073ca:	220a      	movs	r2, #10
 80073cc:	4620      	mov	r0, r4
 80073ce:	f000 ffc7 	bl	8008360 <__multadd>
 80073d2:	f1b9 0f00 	cmp.w	r9, #0
 80073d6:	4607      	mov	r7, r0
 80073d8:	f300 808e 	bgt.w	80074f8 <_dtoa_r+0x9a8>
 80073dc:	9b05      	ldr	r3, [sp, #20]
 80073de:	2b02      	cmp	r3, #2
 80073e0:	dc50      	bgt.n	8007484 <_dtoa_r+0x934>
 80073e2:	e089      	b.n	80074f8 <_dtoa_r+0x9a8>
 80073e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073ea:	e75d      	b.n	80072a8 <_dtoa_r+0x758>
 80073ec:	9b01      	ldr	r3, [sp, #4]
 80073ee:	1e5e      	subs	r6, r3, #1
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	42b3      	cmp	r3, r6
 80073f4:	bfbf      	itttt	lt
 80073f6:	9b06      	ldrlt	r3, [sp, #24]
 80073f8:	9606      	strlt	r6, [sp, #24]
 80073fa:	1af2      	sublt	r2, r6, r3
 80073fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80073fe:	bfb6      	itet	lt
 8007400:	189b      	addlt	r3, r3, r2
 8007402:	1b9e      	subge	r6, r3, r6
 8007404:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007406:	9b01      	ldr	r3, [sp, #4]
 8007408:	bfb8      	it	lt
 800740a:	2600      	movlt	r6, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfb5      	itete	lt
 8007410:	eba8 0503 	sublt.w	r5, r8, r3
 8007414:	9b01      	ldrge	r3, [sp, #4]
 8007416:	2300      	movlt	r3, #0
 8007418:	4645      	movge	r5, r8
 800741a:	e747      	b.n	80072ac <_dtoa_r+0x75c>
 800741c:	9e06      	ldr	r6, [sp, #24]
 800741e:	9f08      	ldr	r7, [sp, #32]
 8007420:	4645      	mov	r5, r8
 8007422:	e74c      	b.n	80072be <_dtoa_r+0x76e>
 8007424:	9a06      	ldr	r2, [sp, #24]
 8007426:	e775      	b.n	8007314 <_dtoa_r+0x7c4>
 8007428:	9b05      	ldr	r3, [sp, #20]
 800742a:	2b01      	cmp	r3, #1
 800742c:	dc18      	bgt.n	8007460 <_dtoa_r+0x910>
 800742e:	9b02      	ldr	r3, [sp, #8]
 8007430:	b9b3      	cbnz	r3, 8007460 <_dtoa_r+0x910>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007438:	b9a3      	cbnz	r3, 8007464 <_dtoa_r+0x914>
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007440:	0d1b      	lsrs	r3, r3, #20
 8007442:	051b      	lsls	r3, r3, #20
 8007444:	b12b      	cbz	r3, 8007452 <_dtoa_r+0x902>
 8007446:	9b04      	ldr	r3, [sp, #16]
 8007448:	3301      	adds	r3, #1
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	f108 0801 	add.w	r8, r8, #1
 8007450:	2301      	movs	r3, #1
 8007452:	9306      	str	r3, [sp, #24]
 8007454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007456:	2b00      	cmp	r3, #0
 8007458:	f47f af74 	bne.w	8007344 <_dtoa_r+0x7f4>
 800745c:	2001      	movs	r0, #1
 800745e:	e779      	b.n	8007354 <_dtoa_r+0x804>
 8007460:	2300      	movs	r3, #0
 8007462:	e7f6      	b.n	8007452 <_dtoa_r+0x902>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	e7f4      	b.n	8007452 <_dtoa_r+0x902>
 8007468:	d085      	beq.n	8007376 <_dtoa_r+0x826>
 800746a:	4618      	mov	r0, r3
 800746c:	301c      	adds	r0, #28
 800746e:	e77d      	b.n	800736c <_dtoa_r+0x81c>
 8007470:	40240000 	.word	0x40240000
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	dc38      	bgt.n	80074ec <_dtoa_r+0x99c>
 800747a:	9b05      	ldr	r3, [sp, #20]
 800747c:	2b02      	cmp	r3, #2
 800747e:	dd35      	ble.n	80074ec <_dtoa_r+0x99c>
 8007480:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007484:	f1b9 0f00 	cmp.w	r9, #0
 8007488:	d10d      	bne.n	80074a6 <_dtoa_r+0x956>
 800748a:	4631      	mov	r1, r6
 800748c:	464b      	mov	r3, r9
 800748e:	2205      	movs	r2, #5
 8007490:	4620      	mov	r0, r4
 8007492:	f000 ff65 	bl	8008360 <__multadd>
 8007496:	4601      	mov	r1, r0
 8007498:	4606      	mov	r6, r0
 800749a:	4658      	mov	r0, fp
 800749c:	f001 f9c6 	bl	800882c <__mcmp>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f73f adbd 	bgt.w	8007020 <_dtoa_r+0x4d0>
 80074a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a8:	9d00      	ldr	r5, [sp, #0]
 80074aa:	ea6f 0a03 	mvn.w	sl, r3
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	4631      	mov	r1, r6
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 ff31 	bl	800831c <_Bfree>
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	f43f aeb4 	beq.w	8007228 <_dtoa_r+0x6d8>
 80074c0:	f1b8 0f00 	cmp.w	r8, #0
 80074c4:	d005      	beq.n	80074d2 <_dtoa_r+0x982>
 80074c6:	45b8      	cmp	r8, r7
 80074c8:	d003      	beq.n	80074d2 <_dtoa_r+0x982>
 80074ca:	4641      	mov	r1, r8
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 ff25 	bl	800831c <_Bfree>
 80074d2:	4639      	mov	r1, r7
 80074d4:	4620      	mov	r0, r4
 80074d6:	f000 ff21 	bl	800831c <_Bfree>
 80074da:	e6a5      	b.n	8007228 <_dtoa_r+0x6d8>
 80074dc:	2600      	movs	r6, #0
 80074de:	4637      	mov	r7, r6
 80074e0:	e7e1      	b.n	80074a6 <_dtoa_r+0x956>
 80074e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80074e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074e8:	4637      	mov	r7, r6
 80074ea:	e599      	b.n	8007020 <_dtoa_r+0x4d0>
 80074ec:	9b08      	ldr	r3, [sp, #32]
 80074ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80fd 	beq.w	80076f2 <_dtoa_r+0xba2>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	dd05      	ble.n	8007508 <_dtoa_r+0x9b8>
 80074fc:	4639      	mov	r1, r7
 80074fe:	462a      	mov	r2, r5
 8007500:	4620      	mov	r0, r4
 8007502:	f001 f927 	bl	8008754 <__lshift>
 8007506:	4607      	mov	r7, r0
 8007508:	9b06      	ldr	r3, [sp, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d05c      	beq.n	80075c8 <_dtoa_r+0xa78>
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4620      	mov	r0, r4
 8007512:	f000 fec3 	bl	800829c <_Balloc>
 8007516:	4605      	mov	r5, r0
 8007518:	b928      	cbnz	r0, 8007526 <_dtoa_r+0x9d6>
 800751a:	4b80      	ldr	r3, [pc, #512]	; (800771c <_dtoa_r+0xbcc>)
 800751c:	4602      	mov	r2, r0
 800751e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007522:	f7ff bb2e 	b.w	8006b82 <_dtoa_r+0x32>
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	3202      	adds	r2, #2
 800752a:	0092      	lsls	r2, r2, #2
 800752c:	f107 010c 	add.w	r1, r7, #12
 8007530:	300c      	adds	r0, #12
 8007532:	f000 fea5 	bl	8008280 <memcpy>
 8007536:	2201      	movs	r2, #1
 8007538:	4629      	mov	r1, r5
 800753a:	4620      	mov	r0, r4
 800753c:	f001 f90a 	bl	8008754 <__lshift>
 8007540:	9b00      	ldr	r3, [sp, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	444b      	add	r3, r9
 800754a:	9307      	str	r3, [sp, #28]
 800754c:	9b02      	ldr	r3, [sp, #8]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	46b8      	mov	r8, r7
 8007554:	9306      	str	r3, [sp, #24]
 8007556:	4607      	mov	r7, r0
 8007558:	9b01      	ldr	r3, [sp, #4]
 800755a:	4631      	mov	r1, r6
 800755c:	3b01      	subs	r3, #1
 800755e:	4658      	mov	r0, fp
 8007560:	9302      	str	r3, [sp, #8]
 8007562:	f7ff fa67 	bl	8006a34 <quorem>
 8007566:	4603      	mov	r3, r0
 8007568:	3330      	adds	r3, #48	; 0x30
 800756a:	9004      	str	r0, [sp, #16]
 800756c:	4641      	mov	r1, r8
 800756e:	4658      	mov	r0, fp
 8007570:	9308      	str	r3, [sp, #32]
 8007572:	f001 f95b 	bl	800882c <__mcmp>
 8007576:	463a      	mov	r2, r7
 8007578:	4681      	mov	r9, r0
 800757a:	4631      	mov	r1, r6
 800757c:	4620      	mov	r0, r4
 800757e:	f001 f971 	bl	8008864 <__mdiff>
 8007582:	68c2      	ldr	r2, [r0, #12]
 8007584:	9b08      	ldr	r3, [sp, #32]
 8007586:	4605      	mov	r5, r0
 8007588:	bb02      	cbnz	r2, 80075cc <_dtoa_r+0xa7c>
 800758a:	4601      	mov	r1, r0
 800758c:	4658      	mov	r0, fp
 800758e:	f001 f94d 	bl	800882c <__mcmp>
 8007592:	9b08      	ldr	r3, [sp, #32]
 8007594:	4602      	mov	r2, r0
 8007596:	4629      	mov	r1, r5
 8007598:	4620      	mov	r0, r4
 800759a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800759e:	f000 febd 	bl	800831c <_Bfree>
 80075a2:	9b05      	ldr	r3, [sp, #20]
 80075a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a6:	9d01      	ldr	r5, [sp, #4]
 80075a8:	ea43 0102 	orr.w	r1, r3, r2
 80075ac:	9b06      	ldr	r3, [sp, #24]
 80075ae:	430b      	orrs	r3, r1
 80075b0:	9b08      	ldr	r3, [sp, #32]
 80075b2:	d10d      	bne.n	80075d0 <_dtoa_r+0xa80>
 80075b4:	2b39      	cmp	r3, #57	; 0x39
 80075b6:	d029      	beq.n	800760c <_dtoa_r+0xabc>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	dd01      	ble.n	80075c2 <_dtoa_r+0xa72>
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	3331      	adds	r3, #49	; 0x31
 80075c2:	9a02      	ldr	r2, [sp, #8]
 80075c4:	7013      	strb	r3, [r2, #0]
 80075c6:	e774      	b.n	80074b2 <_dtoa_r+0x962>
 80075c8:	4638      	mov	r0, r7
 80075ca:	e7b9      	b.n	8007540 <_dtoa_r+0x9f0>
 80075cc:	2201      	movs	r2, #1
 80075ce:	e7e2      	b.n	8007596 <_dtoa_r+0xa46>
 80075d0:	f1b9 0f00 	cmp.w	r9, #0
 80075d4:	db06      	blt.n	80075e4 <_dtoa_r+0xa94>
 80075d6:	9905      	ldr	r1, [sp, #20]
 80075d8:	ea41 0909 	orr.w	r9, r1, r9
 80075dc:	9906      	ldr	r1, [sp, #24]
 80075de:	ea59 0101 	orrs.w	r1, r9, r1
 80075e2:	d120      	bne.n	8007626 <_dtoa_r+0xad6>
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	ddec      	ble.n	80075c2 <_dtoa_r+0xa72>
 80075e8:	4659      	mov	r1, fp
 80075ea:	2201      	movs	r2, #1
 80075ec:	4620      	mov	r0, r4
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	f001 f8b0 	bl	8008754 <__lshift>
 80075f4:	4631      	mov	r1, r6
 80075f6:	4683      	mov	fp, r0
 80075f8:	f001 f918 	bl	800882c <__mcmp>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	dc02      	bgt.n	8007608 <_dtoa_r+0xab8>
 8007602:	d1de      	bne.n	80075c2 <_dtoa_r+0xa72>
 8007604:	07da      	lsls	r2, r3, #31
 8007606:	d5dc      	bpl.n	80075c2 <_dtoa_r+0xa72>
 8007608:	2b39      	cmp	r3, #57	; 0x39
 800760a:	d1d8      	bne.n	80075be <_dtoa_r+0xa6e>
 800760c:	9a02      	ldr	r2, [sp, #8]
 800760e:	2339      	movs	r3, #57	; 0x39
 8007610:	7013      	strb	r3, [r2, #0]
 8007612:	462b      	mov	r3, r5
 8007614:	461d      	mov	r5, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800761c:	2a39      	cmp	r2, #57	; 0x39
 800761e:	d050      	beq.n	80076c2 <_dtoa_r+0xb72>
 8007620:	3201      	adds	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e745      	b.n	80074b2 <_dtoa_r+0x962>
 8007626:	2a00      	cmp	r2, #0
 8007628:	dd03      	ble.n	8007632 <_dtoa_r+0xae2>
 800762a:	2b39      	cmp	r3, #57	; 0x39
 800762c:	d0ee      	beq.n	800760c <_dtoa_r+0xabc>
 800762e:	3301      	adds	r3, #1
 8007630:	e7c7      	b.n	80075c2 <_dtoa_r+0xa72>
 8007632:	9a01      	ldr	r2, [sp, #4]
 8007634:	9907      	ldr	r1, [sp, #28]
 8007636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800763a:	428a      	cmp	r2, r1
 800763c:	d02a      	beq.n	8007694 <_dtoa_r+0xb44>
 800763e:	4659      	mov	r1, fp
 8007640:	2300      	movs	r3, #0
 8007642:	220a      	movs	r2, #10
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fe8b 	bl	8008360 <__multadd>
 800764a:	45b8      	cmp	r8, r7
 800764c:	4683      	mov	fp, r0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	f04f 020a 	mov.w	r2, #10
 8007656:	4641      	mov	r1, r8
 8007658:	4620      	mov	r0, r4
 800765a:	d107      	bne.n	800766c <_dtoa_r+0xb1c>
 800765c:	f000 fe80 	bl	8008360 <__multadd>
 8007660:	4680      	mov	r8, r0
 8007662:	4607      	mov	r7, r0
 8007664:	9b01      	ldr	r3, [sp, #4]
 8007666:	3301      	adds	r3, #1
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	e775      	b.n	8007558 <_dtoa_r+0xa08>
 800766c:	f000 fe78 	bl	8008360 <__multadd>
 8007670:	4639      	mov	r1, r7
 8007672:	4680      	mov	r8, r0
 8007674:	2300      	movs	r3, #0
 8007676:	220a      	movs	r2, #10
 8007678:	4620      	mov	r0, r4
 800767a:	f000 fe71 	bl	8008360 <__multadd>
 800767e:	4607      	mov	r7, r0
 8007680:	e7f0      	b.n	8007664 <_dtoa_r+0xb14>
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	9a00      	ldr	r2, [sp, #0]
 8007688:	bfcc      	ite	gt
 800768a:	464d      	movgt	r5, r9
 800768c:	2501      	movle	r5, #1
 800768e:	4415      	add	r5, r2
 8007690:	f04f 0800 	mov.w	r8, #0
 8007694:	4659      	mov	r1, fp
 8007696:	2201      	movs	r2, #1
 8007698:	4620      	mov	r0, r4
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	f001 f85a 	bl	8008754 <__lshift>
 80076a0:	4631      	mov	r1, r6
 80076a2:	4683      	mov	fp, r0
 80076a4:	f001 f8c2 	bl	800882c <__mcmp>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	dcb2      	bgt.n	8007612 <_dtoa_r+0xac2>
 80076ac:	d102      	bne.n	80076b4 <_dtoa_r+0xb64>
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	07db      	lsls	r3, r3, #31
 80076b2:	d4ae      	bmi.n	8007612 <_dtoa_r+0xac2>
 80076b4:	462b      	mov	r3, r5
 80076b6:	461d      	mov	r5, r3
 80076b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076bc:	2a30      	cmp	r2, #48	; 0x30
 80076be:	d0fa      	beq.n	80076b6 <_dtoa_r+0xb66>
 80076c0:	e6f7      	b.n	80074b2 <_dtoa_r+0x962>
 80076c2:	9a00      	ldr	r2, [sp, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d1a5      	bne.n	8007614 <_dtoa_r+0xac4>
 80076c8:	f10a 0a01 	add.w	sl, sl, #1
 80076cc:	2331      	movs	r3, #49	; 0x31
 80076ce:	e779      	b.n	80075c4 <_dtoa_r+0xa74>
 80076d0:	4b13      	ldr	r3, [pc, #76]	; (8007720 <_dtoa_r+0xbd0>)
 80076d2:	f7ff baaf 	b.w	8006c34 <_dtoa_r+0xe4>
 80076d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f47f aa86 	bne.w	8006bea <_dtoa_r+0x9a>
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <_dtoa_r+0xbd4>)
 80076e0:	f7ff baa8 	b.w	8006c34 <_dtoa_r+0xe4>
 80076e4:	f1b9 0f00 	cmp.w	r9, #0
 80076e8:	dc03      	bgt.n	80076f2 <_dtoa_r+0xba2>
 80076ea:	9b05      	ldr	r3, [sp, #20]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	f73f aec9 	bgt.w	8007484 <_dtoa_r+0x934>
 80076f2:	9d00      	ldr	r5, [sp, #0]
 80076f4:	4631      	mov	r1, r6
 80076f6:	4658      	mov	r0, fp
 80076f8:	f7ff f99c 	bl	8006a34 <quorem>
 80076fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007700:	f805 3b01 	strb.w	r3, [r5], #1
 8007704:	9a00      	ldr	r2, [sp, #0]
 8007706:	1aaa      	subs	r2, r5, r2
 8007708:	4591      	cmp	r9, r2
 800770a:	ddba      	ble.n	8007682 <_dtoa_r+0xb32>
 800770c:	4659      	mov	r1, fp
 800770e:	2300      	movs	r3, #0
 8007710:	220a      	movs	r2, #10
 8007712:	4620      	mov	r0, r4
 8007714:	f000 fe24 	bl	8008360 <__multadd>
 8007718:	4683      	mov	fp, r0
 800771a:	e7eb      	b.n	80076f4 <_dtoa_r+0xba4>
 800771c:	080099ab 	.word	0x080099ab
 8007720:	080098b4 	.word	0x080098b4
 8007724:	08009928 	.word	0x08009928

08007728 <__sflush_r>:
 8007728:	898a      	ldrh	r2, [r1, #12]
 800772a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772e:	4605      	mov	r5, r0
 8007730:	0710      	lsls	r0, r2, #28
 8007732:	460c      	mov	r4, r1
 8007734:	d458      	bmi.n	80077e8 <__sflush_r+0xc0>
 8007736:	684b      	ldr	r3, [r1, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	dc05      	bgt.n	8007748 <__sflush_r+0x20>
 800773c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc02      	bgt.n	8007748 <__sflush_r+0x20>
 8007742:	2000      	movs	r0, #0
 8007744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800774a:	2e00      	cmp	r6, #0
 800774c:	d0f9      	beq.n	8007742 <__sflush_r+0x1a>
 800774e:	2300      	movs	r3, #0
 8007750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007754:	682f      	ldr	r7, [r5, #0]
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	d032      	beq.n	80077c0 <__sflush_r+0x98>
 800775a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	075a      	lsls	r2, r3, #29
 8007760:	d505      	bpl.n	800776e <__sflush_r+0x46>
 8007762:	6863      	ldr	r3, [r4, #4]
 8007764:	1ac0      	subs	r0, r0, r3
 8007766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007768:	b10b      	cbz	r3, 800776e <__sflush_r+0x46>
 800776a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800776c:	1ac0      	subs	r0, r0, r3
 800776e:	2300      	movs	r3, #0
 8007770:	4602      	mov	r2, r0
 8007772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007774:	6a21      	ldr	r1, [r4, #32]
 8007776:	4628      	mov	r0, r5
 8007778:	47b0      	blx	r6
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	d106      	bne.n	800778e <__sflush_r+0x66>
 8007780:	6829      	ldr	r1, [r5, #0]
 8007782:	291d      	cmp	r1, #29
 8007784:	d82c      	bhi.n	80077e0 <__sflush_r+0xb8>
 8007786:	4a2a      	ldr	r2, [pc, #168]	; (8007830 <__sflush_r+0x108>)
 8007788:	40ca      	lsrs	r2, r1
 800778a:	07d6      	lsls	r6, r2, #31
 800778c:	d528      	bpl.n	80077e0 <__sflush_r+0xb8>
 800778e:	2200      	movs	r2, #0
 8007790:	6062      	str	r2, [r4, #4]
 8007792:	04d9      	lsls	r1, r3, #19
 8007794:	6922      	ldr	r2, [r4, #16]
 8007796:	6022      	str	r2, [r4, #0]
 8007798:	d504      	bpl.n	80077a4 <__sflush_r+0x7c>
 800779a:	1c42      	adds	r2, r0, #1
 800779c:	d101      	bne.n	80077a2 <__sflush_r+0x7a>
 800779e:	682b      	ldr	r3, [r5, #0]
 80077a0:	b903      	cbnz	r3, 80077a4 <__sflush_r+0x7c>
 80077a2:	6560      	str	r0, [r4, #84]	; 0x54
 80077a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a6:	602f      	str	r7, [r5, #0]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	d0ca      	beq.n	8007742 <__sflush_r+0x1a>
 80077ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077b0:	4299      	cmp	r1, r3
 80077b2:	d002      	beq.n	80077ba <__sflush_r+0x92>
 80077b4:	4628      	mov	r0, r5
 80077b6:	f001 fa3b 	bl	8008c30 <_free_r>
 80077ba:	2000      	movs	r0, #0
 80077bc:	6360      	str	r0, [r4, #52]	; 0x34
 80077be:	e7c1      	b.n	8007744 <__sflush_r+0x1c>
 80077c0:	6a21      	ldr	r1, [r4, #32]
 80077c2:	2301      	movs	r3, #1
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b0      	blx	r6
 80077c8:	1c41      	adds	r1, r0, #1
 80077ca:	d1c7      	bne.n	800775c <__sflush_r+0x34>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0c4      	beq.n	800775c <__sflush_r+0x34>
 80077d2:	2b1d      	cmp	r3, #29
 80077d4:	d001      	beq.n	80077da <__sflush_r+0xb2>
 80077d6:	2b16      	cmp	r3, #22
 80077d8:	d101      	bne.n	80077de <__sflush_r+0xb6>
 80077da:	602f      	str	r7, [r5, #0]
 80077dc:	e7b1      	b.n	8007742 <__sflush_r+0x1a>
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e4:	81a3      	strh	r3, [r4, #12]
 80077e6:	e7ad      	b.n	8007744 <__sflush_r+0x1c>
 80077e8:	690f      	ldr	r7, [r1, #16]
 80077ea:	2f00      	cmp	r7, #0
 80077ec:	d0a9      	beq.n	8007742 <__sflush_r+0x1a>
 80077ee:	0793      	lsls	r3, r2, #30
 80077f0:	680e      	ldr	r6, [r1, #0]
 80077f2:	bf08      	it	eq
 80077f4:	694b      	ldreq	r3, [r1, #20]
 80077f6:	600f      	str	r7, [r1, #0]
 80077f8:	bf18      	it	ne
 80077fa:	2300      	movne	r3, #0
 80077fc:	eba6 0807 	sub.w	r8, r6, r7
 8007800:	608b      	str	r3, [r1, #8]
 8007802:	f1b8 0f00 	cmp.w	r8, #0
 8007806:	dd9c      	ble.n	8007742 <__sflush_r+0x1a>
 8007808:	6a21      	ldr	r1, [r4, #32]
 800780a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800780c:	4643      	mov	r3, r8
 800780e:	463a      	mov	r2, r7
 8007810:	4628      	mov	r0, r5
 8007812:	47b0      	blx	r6
 8007814:	2800      	cmp	r0, #0
 8007816:	dc06      	bgt.n	8007826 <__sflush_r+0xfe>
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	e78e      	b.n	8007744 <__sflush_r+0x1c>
 8007826:	4407      	add	r7, r0
 8007828:	eba8 0800 	sub.w	r8, r8, r0
 800782c:	e7e9      	b.n	8007802 <__sflush_r+0xda>
 800782e:	bf00      	nop
 8007830:	20400001 	.word	0x20400001

08007834 <_fflush_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	690b      	ldr	r3, [r1, #16]
 8007838:	4605      	mov	r5, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b913      	cbnz	r3, 8007844 <_fflush_r+0x10>
 800783e:	2500      	movs	r5, #0
 8007840:	4628      	mov	r0, r5
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	b118      	cbz	r0, 800784e <_fflush_r+0x1a>
 8007846:	6983      	ldr	r3, [r0, #24]
 8007848:	b90b      	cbnz	r3, 800784e <_fflush_r+0x1a>
 800784a:	f000 f887 	bl	800795c <__sinit>
 800784e:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <_fflush_r+0x6c>)
 8007850:	429c      	cmp	r4, r3
 8007852:	d11b      	bne.n	800788c <_fflush_r+0x58>
 8007854:	686c      	ldr	r4, [r5, #4]
 8007856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0ef      	beq.n	800783e <_fflush_r+0xa>
 800785e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007860:	07d0      	lsls	r0, r2, #31
 8007862:	d404      	bmi.n	800786e <_fflush_r+0x3a>
 8007864:	0599      	lsls	r1, r3, #22
 8007866:	d402      	bmi.n	800786e <_fflush_r+0x3a>
 8007868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800786a:	f000 fc88 	bl	800817e <__retarget_lock_acquire_recursive>
 800786e:	4628      	mov	r0, r5
 8007870:	4621      	mov	r1, r4
 8007872:	f7ff ff59 	bl	8007728 <__sflush_r>
 8007876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007878:	07da      	lsls	r2, r3, #31
 800787a:	4605      	mov	r5, r0
 800787c:	d4e0      	bmi.n	8007840 <_fflush_r+0xc>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d4dd      	bmi.n	8007840 <_fflush_r+0xc>
 8007884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007886:	f000 fc7b 	bl	8008180 <__retarget_lock_release_recursive>
 800788a:	e7d9      	b.n	8007840 <_fflush_r+0xc>
 800788c:	4b05      	ldr	r3, [pc, #20]	; (80078a4 <_fflush_r+0x70>)
 800788e:	429c      	cmp	r4, r3
 8007890:	d101      	bne.n	8007896 <_fflush_r+0x62>
 8007892:	68ac      	ldr	r4, [r5, #8]
 8007894:	e7df      	b.n	8007856 <_fflush_r+0x22>
 8007896:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <_fflush_r+0x74>)
 8007898:	429c      	cmp	r4, r3
 800789a:	bf08      	it	eq
 800789c:	68ec      	ldreq	r4, [r5, #12]
 800789e:	e7da      	b.n	8007856 <_fflush_r+0x22>
 80078a0:	080099dc 	.word	0x080099dc
 80078a4:	080099fc 	.word	0x080099fc
 80078a8:	080099bc 	.word	0x080099bc

080078ac <std>:
 80078ac:	2300      	movs	r3, #0
 80078ae:	b510      	push	{r4, lr}
 80078b0:	4604      	mov	r4, r0
 80078b2:	e9c0 3300 	strd	r3, r3, [r0]
 80078b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ba:	6083      	str	r3, [r0, #8]
 80078bc:	8181      	strh	r1, [r0, #12]
 80078be:	6643      	str	r3, [r0, #100]	; 0x64
 80078c0:	81c2      	strh	r2, [r0, #14]
 80078c2:	6183      	str	r3, [r0, #24]
 80078c4:	4619      	mov	r1, r3
 80078c6:	2208      	movs	r2, #8
 80078c8:	305c      	adds	r0, #92	; 0x5c
 80078ca:	f7fd fca7 	bl	800521c <memset>
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <std+0x38>)
 80078d0:	6263      	str	r3, [r4, #36]	; 0x24
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <std+0x3c>)
 80078d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <std+0x40>)
 80078d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078da:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <std+0x44>)
 80078dc:	6224      	str	r4, [r4, #32]
 80078de:	6323      	str	r3, [r4, #48]	; 0x30
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	bf00      	nop
 80078e4:	08009069 	.word	0x08009069
 80078e8:	0800908b 	.word	0x0800908b
 80078ec:	080090c3 	.word	0x080090c3
 80078f0:	080090e7 	.word	0x080090e7

080078f4 <_cleanup_r>:
 80078f4:	4901      	ldr	r1, [pc, #4]	; (80078fc <_cleanup_r+0x8>)
 80078f6:	f000 b8af 	b.w	8007a58 <_fwalk_reent>
 80078fa:	bf00      	nop
 80078fc:	08007835 	.word	0x08007835

08007900 <__sfmoreglue>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	1e4a      	subs	r2, r1, #1
 8007904:	2568      	movs	r5, #104	; 0x68
 8007906:	4355      	muls	r5, r2
 8007908:	460e      	mov	r6, r1
 800790a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800790e:	f001 f9df 	bl	8008cd0 <_malloc_r>
 8007912:	4604      	mov	r4, r0
 8007914:	b140      	cbz	r0, 8007928 <__sfmoreglue+0x28>
 8007916:	2100      	movs	r1, #0
 8007918:	e9c0 1600 	strd	r1, r6, [r0]
 800791c:	300c      	adds	r0, #12
 800791e:	60a0      	str	r0, [r4, #8]
 8007920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007924:	f7fd fc7a 	bl	800521c <memset>
 8007928:	4620      	mov	r0, r4
 800792a:	bd70      	pop	{r4, r5, r6, pc}

0800792c <__sfp_lock_acquire>:
 800792c:	4801      	ldr	r0, [pc, #4]	; (8007934 <__sfp_lock_acquire+0x8>)
 800792e:	f000 bc26 	b.w	800817e <__retarget_lock_acquire_recursive>
 8007932:	bf00      	nop
 8007934:	20000524 	.word	0x20000524

08007938 <__sfp_lock_release>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__sfp_lock_release+0x8>)
 800793a:	f000 bc21 	b.w	8008180 <__retarget_lock_release_recursive>
 800793e:	bf00      	nop
 8007940:	20000524 	.word	0x20000524

08007944 <__sinit_lock_acquire>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__sinit_lock_acquire+0x8>)
 8007946:	f000 bc1a 	b.w	800817e <__retarget_lock_acquire_recursive>
 800794a:	bf00      	nop
 800794c:	2000051f 	.word	0x2000051f

08007950 <__sinit_lock_release>:
 8007950:	4801      	ldr	r0, [pc, #4]	; (8007958 <__sinit_lock_release+0x8>)
 8007952:	f000 bc15 	b.w	8008180 <__retarget_lock_release_recursive>
 8007956:	bf00      	nop
 8007958:	2000051f 	.word	0x2000051f

0800795c <__sinit>:
 800795c:	b510      	push	{r4, lr}
 800795e:	4604      	mov	r4, r0
 8007960:	f7ff fff0 	bl	8007944 <__sinit_lock_acquire>
 8007964:	69a3      	ldr	r3, [r4, #24]
 8007966:	b11b      	cbz	r3, 8007970 <__sinit+0x14>
 8007968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796c:	f7ff bff0 	b.w	8007950 <__sinit_lock_release>
 8007970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007974:	6523      	str	r3, [r4, #80]	; 0x50
 8007976:	4b13      	ldr	r3, [pc, #76]	; (80079c4 <__sinit+0x68>)
 8007978:	4a13      	ldr	r2, [pc, #76]	; (80079c8 <__sinit+0x6c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	62a2      	str	r2, [r4, #40]	; 0x28
 800797e:	42a3      	cmp	r3, r4
 8007980:	bf04      	itt	eq
 8007982:	2301      	moveq	r3, #1
 8007984:	61a3      	streq	r3, [r4, #24]
 8007986:	4620      	mov	r0, r4
 8007988:	f000 f820 	bl	80079cc <__sfp>
 800798c:	6060      	str	r0, [r4, #4]
 800798e:	4620      	mov	r0, r4
 8007990:	f000 f81c 	bl	80079cc <__sfp>
 8007994:	60a0      	str	r0, [r4, #8]
 8007996:	4620      	mov	r0, r4
 8007998:	f000 f818 	bl	80079cc <__sfp>
 800799c:	2200      	movs	r2, #0
 800799e:	60e0      	str	r0, [r4, #12]
 80079a0:	2104      	movs	r1, #4
 80079a2:	6860      	ldr	r0, [r4, #4]
 80079a4:	f7ff ff82 	bl	80078ac <std>
 80079a8:	68a0      	ldr	r0, [r4, #8]
 80079aa:	2201      	movs	r2, #1
 80079ac:	2109      	movs	r1, #9
 80079ae:	f7ff ff7d 	bl	80078ac <std>
 80079b2:	68e0      	ldr	r0, [r4, #12]
 80079b4:	2202      	movs	r2, #2
 80079b6:	2112      	movs	r1, #18
 80079b8:	f7ff ff78 	bl	80078ac <std>
 80079bc:	2301      	movs	r3, #1
 80079be:	61a3      	str	r3, [r4, #24]
 80079c0:	e7d2      	b.n	8007968 <__sinit+0xc>
 80079c2:	bf00      	nop
 80079c4:	080098a0 	.word	0x080098a0
 80079c8:	080078f5 	.word	0x080078f5

080079cc <__sfp>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	4607      	mov	r7, r0
 80079d0:	f7ff ffac 	bl	800792c <__sfp_lock_acquire>
 80079d4:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <__sfp+0x84>)
 80079d6:	681e      	ldr	r6, [r3, #0]
 80079d8:	69b3      	ldr	r3, [r6, #24]
 80079da:	b913      	cbnz	r3, 80079e2 <__sfp+0x16>
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff ffbd 	bl	800795c <__sinit>
 80079e2:	3648      	adds	r6, #72	; 0x48
 80079e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	d503      	bpl.n	80079f4 <__sfp+0x28>
 80079ec:	6833      	ldr	r3, [r6, #0]
 80079ee:	b30b      	cbz	r3, 8007a34 <__sfp+0x68>
 80079f0:	6836      	ldr	r6, [r6, #0]
 80079f2:	e7f7      	b.n	80079e4 <__sfp+0x18>
 80079f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079f8:	b9d5      	cbnz	r5, 8007a30 <__sfp+0x64>
 80079fa:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <__sfp+0x88>)
 80079fc:	60e3      	str	r3, [r4, #12]
 80079fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a02:	6665      	str	r5, [r4, #100]	; 0x64
 8007a04:	f000 fbba 	bl	800817c <__retarget_lock_init_recursive>
 8007a08:	f7ff ff96 	bl	8007938 <__sfp_lock_release>
 8007a0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a14:	6025      	str	r5, [r4, #0]
 8007a16:	61a5      	str	r5, [r4, #24]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a20:	f7fd fbfc 	bl	800521c <memset>
 8007a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a30:	3468      	adds	r4, #104	; 0x68
 8007a32:	e7d9      	b.n	80079e8 <__sfp+0x1c>
 8007a34:	2104      	movs	r1, #4
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7ff ff62 	bl	8007900 <__sfmoreglue>
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	6030      	str	r0, [r6, #0]
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d1d5      	bne.n	80079f0 <__sfp+0x24>
 8007a44:	f7ff ff78 	bl	8007938 <__sfp_lock_release>
 8007a48:	230c      	movs	r3, #12
 8007a4a:	603b      	str	r3, [r7, #0]
 8007a4c:	e7ee      	b.n	8007a2c <__sfp+0x60>
 8007a4e:	bf00      	nop
 8007a50:	080098a0 	.word	0x080098a0
 8007a54:	ffff0001 	.word	0xffff0001

08007a58 <_fwalk_reent>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	4688      	mov	r8, r1
 8007a60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a64:	2700      	movs	r7, #0
 8007a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a6e:	d505      	bpl.n	8007a7c <_fwalk_reent+0x24>
 8007a70:	6824      	ldr	r4, [r4, #0]
 8007a72:	2c00      	cmp	r4, #0
 8007a74:	d1f7      	bne.n	8007a66 <_fwalk_reent+0xe>
 8007a76:	4638      	mov	r0, r7
 8007a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a7c:	89ab      	ldrh	r3, [r5, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d907      	bls.n	8007a92 <_fwalk_reent+0x3a>
 8007a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a86:	3301      	adds	r3, #1
 8007a88:	d003      	beq.n	8007a92 <_fwalk_reent+0x3a>
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	47c0      	blx	r8
 8007a90:	4307      	orrs	r7, r0
 8007a92:	3568      	adds	r5, #104	; 0x68
 8007a94:	e7e9      	b.n	8007a6a <_fwalk_reent+0x12>

08007a96 <rshift>:
 8007a96:	6903      	ldr	r3, [r0, #16]
 8007a98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007aa4:	f100 0414 	add.w	r4, r0, #20
 8007aa8:	dd45      	ble.n	8007b36 <rshift+0xa0>
 8007aaa:	f011 011f 	ands.w	r1, r1, #31
 8007aae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ab2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ab6:	d10c      	bne.n	8007ad2 <rshift+0x3c>
 8007ab8:	f100 0710 	add.w	r7, r0, #16
 8007abc:	4629      	mov	r1, r5
 8007abe:	42b1      	cmp	r1, r6
 8007ac0:	d334      	bcc.n	8007b2c <rshift+0x96>
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	1eea      	subs	r2, r5, #3
 8007ac8:	4296      	cmp	r6, r2
 8007aca:	bf38      	it	cc
 8007acc:	2300      	movcc	r3, #0
 8007ace:	4423      	add	r3, r4
 8007ad0:	e015      	b.n	8007afe <rshift+0x68>
 8007ad2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ad6:	f1c1 0820 	rsb	r8, r1, #32
 8007ada:	40cf      	lsrs	r7, r1
 8007adc:	f105 0e04 	add.w	lr, r5, #4
 8007ae0:	46a1      	mov	r9, r4
 8007ae2:	4576      	cmp	r6, lr
 8007ae4:	46f4      	mov	ip, lr
 8007ae6:	d815      	bhi.n	8007b14 <rshift+0x7e>
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	009a      	lsls	r2, r3, #2
 8007aec:	3a04      	subs	r2, #4
 8007aee:	3501      	adds	r5, #1
 8007af0:	42ae      	cmp	r6, r5
 8007af2:	bf38      	it	cc
 8007af4:	2200      	movcc	r2, #0
 8007af6:	18a3      	adds	r3, r4, r2
 8007af8:	50a7      	str	r7, [r4, r2]
 8007afa:	b107      	cbz	r7, 8007afe <rshift+0x68>
 8007afc:	3304      	adds	r3, #4
 8007afe:	1b1a      	subs	r2, r3, r4
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b06:	bf08      	it	eq
 8007b08:	2300      	moveq	r3, #0
 8007b0a:	6102      	str	r2, [r0, #16]
 8007b0c:	bf08      	it	eq
 8007b0e:	6143      	streq	r3, [r0, #20]
 8007b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b14:	f8dc c000 	ldr.w	ip, [ip]
 8007b18:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b1c:	ea4c 0707 	orr.w	r7, ip, r7
 8007b20:	f849 7b04 	str.w	r7, [r9], #4
 8007b24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b28:	40cf      	lsrs	r7, r1
 8007b2a:	e7da      	b.n	8007ae2 <rshift+0x4c>
 8007b2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b30:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b34:	e7c3      	b.n	8007abe <rshift+0x28>
 8007b36:	4623      	mov	r3, r4
 8007b38:	e7e1      	b.n	8007afe <rshift+0x68>

08007b3a <__hexdig_fun>:
 8007b3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d802      	bhi.n	8007b48 <__hexdig_fun+0xe>
 8007b42:	3820      	subs	r0, #32
 8007b44:	b2c0      	uxtb	r0, r0
 8007b46:	4770      	bx	lr
 8007b48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b4c:	2b05      	cmp	r3, #5
 8007b4e:	d801      	bhi.n	8007b54 <__hexdig_fun+0x1a>
 8007b50:	3847      	subs	r0, #71	; 0x47
 8007b52:	e7f7      	b.n	8007b44 <__hexdig_fun+0xa>
 8007b54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b58:	2b05      	cmp	r3, #5
 8007b5a:	d801      	bhi.n	8007b60 <__hexdig_fun+0x26>
 8007b5c:	3827      	subs	r0, #39	; 0x27
 8007b5e:	e7f1      	b.n	8007b44 <__hexdig_fun+0xa>
 8007b60:	2000      	movs	r0, #0
 8007b62:	4770      	bx	lr

08007b64 <__gethex>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	ed2d 8b02 	vpush	{d8}
 8007b6c:	b089      	sub	sp, #36	; 0x24
 8007b6e:	ee08 0a10 	vmov	s16, r0
 8007b72:	9304      	str	r3, [sp, #16]
 8007b74:	4bbc      	ldr	r3, [pc, #752]	; (8007e68 <__gethex+0x304>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	4690      	mov	r8, r2
 8007b80:	f7f8 fb2e 	bl	80001e0 <strlen>
 8007b84:	9b01      	ldr	r3, [sp, #4]
 8007b86:	f8db 2000 	ldr.w	r2, [fp]
 8007b8a:	4403      	add	r3, r0
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	1c93      	adds	r3, r2, #2
 8007b96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007b9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007b9e:	32fe      	adds	r2, #254	; 0xfe
 8007ba0:	18d1      	adds	r1, r2, r3
 8007ba2:	461f      	mov	r7, r3
 8007ba4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ba8:	9100      	str	r1, [sp, #0]
 8007baa:	2830      	cmp	r0, #48	; 0x30
 8007bac:	d0f8      	beq.n	8007ba0 <__gethex+0x3c>
 8007bae:	f7ff ffc4 	bl	8007b3a <__hexdig_fun>
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d13a      	bne.n	8007c2e <__gethex+0xca>
 8007bb8:	9901      	ldr	r1, [sp, #4]
 8007bba:	4652      	mov	r2, sl
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	f001 fa96 	bl	80090ee <strncmp>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d168      	bne.n	8007c9a <__gethex+0x136>
 8007bc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007bcc:	eb07 060a 	add.w	r6, r7, sl
 8007bd0:	f7ff ffb3 	bl	8007b3a <__hexdig_fun>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d062      	beq.n	8007c9e <__gethex+0x13a>
 8007bd8:	4633      	mov	r3, r6
 8007bda:	7818      	ldrb	r0, [r3, #0]
 8007bdc:	2830      	cmp	r0, #48	; 0x30
 8007bde:	461f      	mov	r7, r3
 8007be0:	f103 0301 	add.w	r3, r3, #1
 8007be4:	d0f9      	beq.n	8007bda <__gethex+0x76>
 8007be6:	f7ff ffa8 	bl	8007b3a <__hexdig_fun>
 8007bea:	2301      	movs	r3, #1
 8007bec:	fab0 f480 	clz	r4, r0
 8007bf0:	0964      	lsrs	r4, r4, #5
 8007bf2:	4635      	mov	r5, r6
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	463a      	mov	r2, r7
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	7830      	ldrb	r0, [r6, #0]
 8007bfe:	f7ff ff9c 	bl	8007b3a <__hexdig_fun>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d1f8      	bne.n	8007bf8 <__gethex+0x94>
 8007c06:	9901      	ldr	r1, [sp, #4]
 8007c08:	4652      	mov	r2, sl
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f001 fa6f 	bl	80090ee <strncmp>
 8007c10:	b980      	cbnz	r0, 8007c34 <__gethex+0xd0>
 8007c12:	b94d      	cbnz	r5, 8007c28 <__gethex+0xc4>
 8007c14:	eb06 050a 	add.w	r5, r6, sl
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4616      	mov	r6, r2
 8007c1c:	3201      	adds	r2, #1
 8007c1e:	7830      	ldrb	r0, [r6, #0]
 8007c20:	f7ff ff8b 	bl	8007b3a <__hexdig_fun>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d1f8      	bne.n	8007c1a <__gethex+0xb6>
 8007c28:	1bad      	subs	r5, r5, r6
 8007c2a:	00ad      	lsls	r5, r5, #2
 8007c2c:	e004      	b.n	8007c38 <__gethex+0xd4>
 8007c2e:	2400      	movs	r4, #0
 8007c30:	4625      	mov	r5, r4
 8007c32:	e7e0      	b.n	8007bf6 <__gethex+0x92>
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	d1f7      	bne.n	8007c28 <__gethex+0xc4>
 8007c38:	7833      	ldrb	r3, [r6, #0]
 8007c3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c3e:	2b50      	cmp	r3, #80	; 0x50
 8007c40:	d13b      	bne.n	8007cba <__gethex+0x156>
 8007c42:	7873      	ldrb	r3, [r6, #1]
 8007c44:	2b2b      	cmp	r3, #43	; 0x2b
 8007c46:	d02c      	beq.n	8007ca2 <__gethex+0x13e>
 8007c48:	2b2d      	cmp	r3, #45	; 0x2d
 8007c4a:	d02e      	beq.n	8007caa <__gethex+0x146>
 8007c4c:	1c71      	adds	r1, r6, #1
 8007c4e:	f04f 0900 	mov.w	r9, #0
 8007c52:	7808      	ldrb	r0, [r1, #0]
 8007c54:	f7ff ff71 	bl	8007b3a <__hexdig_fun>
 8007c58:	1e43      	subs	r3, r0, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b18      	cmp	r3, #24
 8007c5e:	d82c      	bhi.n	8007cba <__gethex+0x156>
 8007c60:	f1a0 0210 	sub.w	r2, r0, #16
 8007c64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c68:	f7ff ff67 	bl	8007b3a <__hexdig_fun>
 8007c6c:	1e43      	subs	r3, r0, #1
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b18      	cmp	r3, #24
 8007c72:	d91d      	bls.n	8007cb0 <__gethex+0x14c>
 8007c74:	f1b9 0f00 	cmp.w	r9, #0
 8007c78:	d000      	beq.n	8007c7c <__gethex+0x118>
 8007c7a:	4252      	negs	r2, r2
 8007c7c:	4415      	add	r5, r2
 8007c7e:	f8cb 1000 	str.w	r1, [fp]
 8007c82:	b1e4      	cbz	r4, 8007cbe <__gethex+0x15a>
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bf14      	ite	ne
 8007c8a:	2700      	movne	r7, #0
 8007c8c:	2706      	moveq	r7, #6
 8007c8e:	4638      	mov	r0, r7
 8007c90:	b009      	add	sp, #36	; 0x24
 8007c92:	ecbd 8b02 	vpop	{d8}
 8007c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9a:	463e      	mov	r6, r7
 8007c9c:	4625      	mov	r5, r4
 8007c9e:	2401      	movs	r4, #1
 8007ca0:	e7ca      	b.n	8007c38 <__gethex+0xd4>
 8007ca2:	f04f 0900 	mov.w	r9, #0
 8007ca6:	1cb1      	adds	r1, r6, #2
 8007ca8:	e7d3      	b.n	8007c52 <__gethex+0xee>
 8007caa:	f04f 0901 	mov.w	r9, #1
 8007cae:	e7fa      	b.n	8007ca6 <__gethex+0x142>
 8007cb0:	230a      	movs	r3, #10
 8007cb2:	fb03 0202 	mla	r2, r3, r2, r0
 8007cb6:	3a10      	subs	r2, #16
 8007cb8:	e7d4      	b.n	8007c64 <__gethex+0x100>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	e7df      	b.n	8007c7e <__gethex+0x11a>
 8007cbe:	1bf3      	subs	r3, r6, r7
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	2b07      	cmp	r3, #7
 8007cc6:	dc0b      	bgt.n	8007ce0 <__gethex+0x17c>
 8007cc8:	ee18 0a10 	vmov	r0, s16
 8007ccc:	f000 fae6 	bl	800829c <_Balloc>
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	b940      	cbnz	r0, 8007ce6 <__gethex+0x182>
 8007cd4:	4b65      	ldr	r3, [pc, #404]	; (8007e6c <__gethex+0x308>)
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	21de      	movs	r1, #222	; 0xde
 8007cda:	4865      	ldr	r0, [pc, #404]	; (8007e70 <__gethex+0x30c>)
 8007cdc:	f001 fa38 	bl	8009150 <__assert_func>
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	105b      	asrs	r3, r3, #1
 8007ce4:	e7ee      	b.n	8007cc4 <__gethex+0x160>
 8007ce6:	f100 0914 	add.w	r9, r0, #20
 8007cea:	f04f 0b00 	mov.w	fp, #0
 8007cee:	f1ca 0301 	rsb	r3, sl, #1
 8007cf2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007cf6:	f8cd b000 	str.w	fp, [sp]
 8007cfa:	9306      	str	r3, [sp, #24]
 8007cfc:	42b7      	cmp	r7, r6
 8007cfe:	d340      	bcc.n	8007d82 <__gethex+0x21e>
 8007d00:	9802      	ldr	r0, [sp, #8]
 8007d02:	9b00      	ldr	r3, [sp, #0]
 8007d04:	f840 3b04 	str.w	r3, [r0], #4
 8007d08:	eba0 0009 	sub.w	r0, r0, r9
 8007d0c:	1080      	asrs	r0, r0, #2
 8007d0e:	0146      	lsls	r6, r0, #5
 8007d10:	6120      	str	r0, [r4, #16]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fbb8 	bl	8008488 <__hi0bits>
 8007d18:	1a30      	subs	r0, r6, r0
 8007d1a:	f8d8 6000 	ldr.w	r6, [r8]
 8007d1e:	42b0      	cmp	r0, r6
 8007d20:	dd63      	ble.n	8007dea <__gethex+0x286>
 8007d22:	1b87      	subs	r7, r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 ff52 	bl	8008bd0 <__any_on>
 8007d2c:	4682      	mov	sl, r0
 8007d2e:	b1a8      	cbz	r0, 8007d5c <__gethex+0x1f8>
 8007d30:	1e7b      	subs	r3, r7, #1
 8007d32:	1159      	asrs	r1, r3, #5
 8007d34:	f003 021f 	and.w	r2, r3, #31
 8007d38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007d3c:	f04f 0a01 	mov.w	sl, #1
 8007d40:	fa0a f202 	lsl.w	r2, sl, r2
 8007d44:	420a      	tst	r2, r1
 8007d46:	d009      	beq.n	8007d5c <__gethex+0x1f8>
 8007d48:	4553      	cmp	r3, sl
 8007d4a:	dd05      	ble.n	8007d58 <__gethex+0x1f4>
 8007d4c:	1eb9      	subs	r1, r7, #2
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 ff3e 	bl	8008bd0 <__any_on>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d145      	bne.n	8007de4 <__gethex+0x280>
 8007d58:	f04f 0a02 	mov.w	sl, #2
 8007d5c:	4639      	mov	r1, r7
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f7ff fe99 	bl	8007a96 <rshift>
 8007d64:	443d      	add	r5, r7
 8007d66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d6a:	42ab      	cmp	r3, r5
 8007d6c:	da4c      	bge.n	8007e08 <__gethex+0x2a4>
 8007d6e:	ee18 0a10 	vmov	r0, s16
 8007d72:	4621      	mov	r1, r4
 8007d74:	f000 fad2 	bl	800831c <_Bfree>
 8007d78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	27a3      	movs	r7, #163	; 0xa3
 8007d80:	e785      	b.n	8007c8e <__gethex+0x12a>
 8007d82:	1e73      	subs	r3, r6, #1
 8007d84:	9a05      	ldr	r2, [sp, #20]
 8007d86:	9303      	str	r3, [sp, #12]
 8007d88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d019      	beq.n	8007dc4 <__gethex+0x260>
 8007d90:	f1bb 0f20 	cmp.w	fp, #32
 8007d94:	d107      	bne.n	8007da6 <__gethex+0x242>
 8007d96:	9b02      	ldr	r3, [sp, #8]
 8007d98:	9a00      	ldr	r2, [sp, #0]
 8007d9a:	f843 2b04 	str.w	r2, [r3], #4
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	2300      	movs	r3, #0
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	469b      	mov	fp, r3
 8007da6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007daa:	f7ff fec6 	bl	8007b3a <__hexdig_fun>
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	f000 000f 	and.w	r0, r0, #15
 8007db4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007db8:	4303      	orrs	r3, r0
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	f10b 0b04 	add.w	fp, fp, #4
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	e00d      	b.n	8007de0 <__gethex+0x27c>
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	9a06      	ldr	r2, [sp, #24]
 8007dc8:	4413      	add	r3, r2
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	d3e0      	bcc.n	8007d90 <__gethex+0x22c>
 8007dce:	4618      	mov	r0, r3
 8007dd0:	9901      	ldr	r1, [sp, #4]
 8007dd2:	9307      	str	r3, [sp, #28]
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	f001 f98a 	bl	80090ee <strncmp>
 8007dda:	9b07      	ldr	r3, [sp, #28]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d1d7      	bne.n	8007d90 <__gethex+0x22c>
 8007de0:	461e      	mov	r6, r3
 8007de2:	e78b      	b.n	8007cfc <__gethex+0x198>
 8007de4:	f04f 0a03 	mov.w	sl, #3
 8007de8:	e7b8      	b.n	8007d5c <__gethex+0x1f8>
 8007dea:	da0a      	bge.n	8007e02 <__gethex+0x29e>
 8007dec:	1a37      	subs	r7, r6, r0
 8007dee:	4621      	mov	r1, r4
 8007df0:	ee18 0a10 	vmov	r0, s16
 8007df4:	463a      	mov	r2, r7
 8007df6:	f000 fcad 	bl	8008754 <__lshift>
 8007dfa:	1bed      	subs	r5, r5, r7
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	f100 0914 	add.w	r9, r0, #20
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	e7ae      	b.n	8007d66 <__gethex+0x202>
 8007e08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e0c:	42a8      	cmp	r0, r5
 8007e0e:	dd72      	ble.n	8007ef6 <__gethex+0x392>
 8007e10:	1b45      	subs	r5, r0, r5
 8007e12:	42ae      	cmp	r6, r5
 8007e14:	dc36      	bgt.n	8007e84 <__gethex+0x320>
 8007e16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d02a      	beq.n	8007e74 <__gethex+0x310>
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d02c      	beq.n	8007e7c <__gethex+0x318>
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d115      	bne.n	8007e52 <__gethex+0x2ee>
 8007e26:	42ae      	cmp	r6, r5
 8007e28:	d113      	bne.n	8007e52 <__gethex+0x2ee>
 8007e2a:	2e01      	cmp	r6, #1
 8007e2c:	d10b      	bne.n	8007e46 <__gethex+0x2e2>
 8007e2e:	9a04      	ldr	r2, [sp, #16]
 8007e30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	2301      	movs	r3, #1
 8007e38:	6123      	str	r3, [r4, #16]
 8007e3a:	f8c9 3000 	str.w	r3, [r9]
 8007e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e40:	2762      	movs	r7, #98	; 0x62
 8007e42:	601c      	str	r4, [r3, #0]
 8007e44:	e723      	b.n	8007c8e <__gethex+0x12a>
 8007e46:	1e71      	subs	r1, r6, #1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fec1 	bl	8008bd0 <__any_on>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d1ed      	bne.n	8007e2e <__gethex+0x2ca>
 8007e52:	ee18 0a10 	vmov	r0, s16
 8007e56:	4621      	mov	r1, r4
 8007e58:	f000 fa60 	bl	800831c <_Bfree>
 8007e5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	2750      	movs	r7, #80	; 0x50
 8007e64:	e713      	b.n	8007c8e <__gethex+0x12a>
 8007e66:	bf00      	nop
 8007e68:	08009a88 	.word	0x08009a88
 8007e6c:	080099ab 	.word	0x080099ab
 8007e70:	08009a1c 	.word	0x08009a1c
 8007e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1eb      	bne.n	8007e52 <__gethex+0x2ee>
 8007e7a:	e7d8      	b.n	8007e2e <__gethex+0x2ca>
 8007e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1d5      	bne.n	8007e2e <__gethex+0x2ca>
 8007e82:	e7e6      	b.n	8007e52 <__gethex+0x2ee>
 8007e84:	1e6f      	subs	r7, r5, #1
 8007e86:	f1ba 0f00 	cmp.w	sl, #0
 8007e8a:	d131      	bne.n	8007ef0 <__gethex+0x38c>
 8007e8c:	b127      	cbz	r7, 8007e98 <__gethex+0x334>
 8007e8e:	4639      	mov	r1, r7
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 fe9d 	bl	8008bd0 <__any_on>
 8007e96:	4682      	mov	sl, r0
 8007e98:	117b      	asrs	r3, r7, #5
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007ea0:	f007 071f 	and.w	r7, r7, #31
 8007ea4:	fa01 f707 	lsl.w	r7, r1, r7
 8007ea8:	421f      	tst	r7, r3
 8007eaa:	4629      	mov	r1, r5
 8007eac:	4620      	mov	r0, r4
 8007eae:	bf18      	it	ne
 8007eb0:	f04a 0a02 	orrne.w	sl, sl, #2
 8007eb4:	1b76      	subs	r6, r6, r5
 8007eb6:	f7ff fdee 	bl	8007a96 <rshift>
 8007eba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ebe:	2702      	movs	r7, #2
 8007ec0:	f1ba 0f00 	cmp.w	sl, #0
 8007ec4:	d048      	beq.n	8007f58 <__gethex+0x3f4>
 8007ec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d015      	beq.n	8007efa <__gethex+0x396>
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d017      	beq.n	8007f02 <__gethex+0x39e>
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d109      	bne.n	8007eea <__gethex+0x386>
 8007ed6:	f01a 0f02 	tst.w	sl, #2
 8007eda:	d006      	beq.n	8007eea <__gethex+0x386>
 8007edc:	f8d9 0000 	ldr.w	r0, [r9]
 8007ee0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007ee4:	f01a 0f01 	tst.w	sl, #1
 8007ee8:	d10e      	bne.n	8007f08 <__gethex+0x3a4>
 8007eea:	f047 0710 	orr.w	r7, r7, #16
 8007eee:	e033      	b.n	8007f58 <__gethex+0x3f4>
 8007ef0:	f04f 0a01 	mov.w	sl, #1
 8007ef4:	e7d0      	b.n	8007e98 <__gethex+0x334>
 8007ef6:	2701      	movs	r7, #1
 8007ef8:	e7e2      	b.n	8007ec0 <__gethex+0x35c>
 8007efa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007efc:	f1c3 0301 	rsb	r3, r3, #1
 8007f00:	9315      	str	r3, [sp, #84]	; 0x54
 8007f02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <__gethex+0x386>
 8007f08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f0c:	f104 0314 	add.w	r3, r4, #20
 8007f10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f18:	f04f 0c00 	mov.w	ip, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f26:	d01c      	beq.n	8007f62 <__gethex+0x3fe>
 8007f28:	3201      	adds	r2, #1
 8007f2a:	6002      	str	r2, [r0, #0]
 8007f2c:	2f02      	cmp	r7, #2
 8007f2e:	f104 0314 	add.w	r3, r4, #20
 8007f32:	d13f      	bne.n	8007fb4 <__gethex+0x450>
 8007f34:	f8d8 2000 	ldr.w	r2, [r8]
 8007f38:	3a01      	subs	r2, #1
 8007f3a:	42b2      	cmp	r2, r6
 8007f3c:	d10a      	bne.n	8007f54 <__gethex+0x3f0>
 8007f3e:	1171      	asrs	r1, r6, #5
 8007f40:	2201      	movs	r2, #1
 8007f42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f46:	f006 061f 	and.w	r6, r6, #31
 8007f4a:	fa02 f606 	lsl.w	r6, r2, r6
 8007f4e:	421e      	tst	r6, r3
 8007f50:	bf18      	it	ne
 8007f52:	4617      	movne	r7, r2
 8007f54:	f047 0720 	orr.w	r7, r7, #32
 8007f58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f5a:	601c      	str	r4, [r3, #0]
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	601d      	str	r5, [r3, #0]
 8007f60:	e695      	b.n	8007c8e <__gethex+0x12a>
 8007f62:	4299      	cmp	r1, r3
 8007f64:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f68:	d8d8      	bhi.n	8007f1c <__gethex+0x3b8>
 8007f6a:	68a3      	ldr	r3, [r4, #8]
 8007f6c:	459b      	cmp	fp, r3
 8007f6e:	db19      	blt.n	8007fa4 <__gethex+0x440>
 8007f70:	6861      	ldr	r1, [r4, #4]
 8007f72:	ee18 0a10 	vmov	r0, s16
 8007f76:	3101      	adds	r1, #1
 8007f78:	f000 f990 	bl	800829c <_Balloc>
 8007f7c:	4681      	mov	r9, r0
 8007f7e:	b918      	cbnz	r0, 8007f88 <__gethex+0x424>
 8007f80:	4b1a      	ldr	r3, [pc, #104]	; (8007fec <__gethex+0x488>)
 8007f82:	4602      	mov	r2, r0
 8007f84:	2184      	movs	r1, #132	; 0x84
 8007f86:	e6a8      	b.n	8007cda <__gethex+0x176>
 8007f88:	6922      	ldr	r2, [r4, #16]
 8007f8a:	3202      	adds	r2, #2
 8007f8c:	f104 010c 	add.w	r1, r4, #12
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	300c      	adds	r0, #12
 8007f94:	f000 f974 	bl	8008280 <memcpy>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	ee18 0a10 	vmov	r0, s16
 8007f9e:	f000 f9bd 	bl	800831c <_Bfree>
 8007fa2:	464c      	mov	r4, r9
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fac:	6122      	str	r2, [r4, #16]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	615a      	str	r2, [r3, #20]
 8007fb2:	e7bb      	b.n	8007f2c <__gethex+0x3c8>
 8007fb4:	6922      	ldr	r2, [r4, #16]
 8007fb6:	455a      	cmp	r2, fp
 8007fb8:	dd0b      	ble.n	8007fd2 <__gethex+0x46e>
 8007fba:	2101      	movs	r1, #1
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f7ff fd6a 	bl	8007a96 <rshift>
 8007fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fc6:	3501      	adds	r5, #1
 8007fc8:	42ab      	cmp	r3, r5
 8007fca:	f6ff aed0 	blt.w	8007d6e <__gethex+0x20a>
 8007fce:	2701      	movs	r7, #1
 8007fd0:	e7c0      	b.n	8007f54 <__gethex+0x3f0>
 8007fd2:	f016 061f 	ands.w	r6, r6, #31
 8007fd6:	d0fa      	beq.n	8007fce <__gethex+0x46a>
 8007fd8:	449a      	add	sl, r3
 8007fda:	f1c6 0620 	rsb	r6, r6, #32
 8007fde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007fe2:	f000 fa51 	bl	8008488 <__hi0bits>
 8007fe6:	42b0      	cmp	r0, r6
 8007fe8:	dbe7      	blt.n	8007fba <__gethex+0x456>
 8007fea:	e7f0      	b.n	8007fce <__gethex+0x46a>
 8007fec:	080099ab 	.word	0x080099ab

08007ff0 <L_shift>:
 8007ff0:	f1c2 0208 	rsb	r2, r2, #8
 8007ff4:	0092      	lsls	r2, r2, #2
 8007ff6:	b570      	push	{r4, r5, r6, lr}
 8007ff8:	f1c2 0620 	rsb	r6, r2, #32
 8007ffc:	6843      	ldr	r3, [r0, #4]
 8007ffe:	6804      	ldr	r4, [r0, #0]
 8008000:	fa03 f506 	lsl.w	r5, r3, r6
 8008004:	432c      	orrs	r4, r5
 8008006:	40d3      	lsrs	r3, r2
 8008008:	6004      	str	r4, [r0, #0]
 800800a:	f840 3f04 	str.w	r3, [r0, #4]!
 800800e:	4288      	cmp	r0, r1
 8008010:	d3f4      	bcc.n	8007ffc <L_shift+0xc>
 8008012:	bd70      	pop	{r4, r5, r6, pc}

08008014 <__match>:
 8008014:	b530      	push	{r4, r5, lr}
 8008016:	6803      	ldr	r3, [r0, #0]
 8008018:	3301      	adds	r3, #1
 800801a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801e:	b914      	cbnz	r4, 8008026 <__match+0x12>
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	2001      	movs	r0, #1
 8008024:	bd30      	pop	{r4, r5, pc}
 8008026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800802a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800802e:	2d19      	cmp	r5, #25
 8008030:	bf98      	it	ls
 8008032:	3220      	addls	r2, #32
 8008034:	42a2      	cmp	r2, r4
 8008036:	d0f0      	beq.n	800801a <__match+0x6>
 8008038:	2000      	movs	r0, #0
 800803a:	e7f3      	b.n	8008024 <__match+0x10>

0800803c <__hexnan>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	680b      	ldr	r3, [r1, #0]
 8008042:	6801      	ldr	r1, [r0, #0]
 8008044:	115e      	asrs	r6, r3, #5
 8008046:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800804a:	f013 031f 	ands.w	r3, r3, #31
 800804e:	b087      	sub	sp, #28
 8008050:	bf18      	it	ne
 8008052:	3604      	addne	r6, #4
 8008054:	2500      	movs	r5, #0
 8008056:	1f37      	subs	r7, r6, #4
 8008058:	4682      	mov	sl, r0
 800805a:	4690      	mov	r8, r2
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008062:	46b9      	mov	r9, r7
 8008064:	463c      	mov	r4, r7
 8008066:	9502      	str	r5, [sp, #8]
 8008068:	46ab      	mov	fp, r5
 800806a:	784a      	ldrb	r2, [r1, #1]
 800806c:	1c4b      	adds	r3, r1, #1
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	b342      	cbz	r2, 80080c4 <__hexnan+0x88>
 8008072:	4610      	mov	r0, r2
 8008074:	9105      	str	r1, [sp, #20]
 8008076:	9204      	str	r2, [sp, #16]
 8008078:	f7ff fd5f 	bl	8007b3a <__hexdig_fun>
 800807c:	2800      	cmp	r0, #0
 800807e:	d14f      	bne.n	8008120 <__hexnan+0xe4>
 8008080:	9a04      	ldr	r2, [sp, #16]
 8008082:	9905      	ldr	r1, [sp, #20]
 8008084:	2a20      	cmp	r2, #32
 8008086:	d818      	bhi.n	80080ba <__hexnan+0x7e>
 8008088:	9b02      	ldr	r3, [sp, #8]
 800808a:	459b      	cmp	fp, r3
 800808c:	dd13      	ble.n	80080b6 <__hexnan+0x7a>
 800808e:	454c      	cmp	r4, r9
 8008090:	d206      	bcs.n	80080a0 <__hexnan+0x64>
 8008092:	2d07      	cmp	r5, #7
 8008094:	dc04      	bgt.n	80080a0 <__hexnan+0x64>
 8008096:	462a      	mov	r2, r5
 8008098:	4649      	mov	r1, r9
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff ffa8 	bl	8007ff0 <L_shift>
 80080a0:	4544      	cmp	r4, r8
 80080a2:	d950      	bls.n	8008146 <__hexnan+0x10a>
 80080a4:	2300      	movs	r3, #0
 80080a6:	f1a4 0904 	sub.w	r9, r4, #4
 80080aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80080ae:	f8cd b008 	str.w	fp, [sp, #8]
 80080b2:	464c      	mov	r4, r9
 80080b4:	461d      	mov	r5, r3
 80080b6:	9903      	ldr	r1, [sp, #12]
 80080b8:	e7d7      	b.n	800806a <__hexnan+0x2e>
 80080ba:	2a29      	cmp	r2, #41	; 0x29
 80080bc:	d156      	bne.n	800816c <__hexnan+0x130>
 80080be:	3102      	adds	r1, #2
 80080c0:	f8ca 1000 	str.w	r1, [sl]
 80080c4:	f1bb 0f00 	cmp.w	fp, #0
 80080c8:	d050      	beq.n	800816c <__hexnan+0x130>
 80080ca:	454c      	cmp	r4, r9
 80080cc:	d206      	bcs.n	80080dc <__hexnan+0xa0>
 80080ce:	2d07      	cmp	r5, #7
 80080d0:	dc04      	bgt.n	80080dc <__hexnan+0xa0>
 80080d2:	462a      	mov	r2, r5
 80080d4:	4649      	mov	r1, r9
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7ff ff8a 	bl	8007ff0 <L_shift>
 80080dc:	4544      	cmp	r4, r8
 80080de:	d934      	bls.n	800814a <__hexnan+0x10e>
 80080e0:	f1a8 0204 	sub.w	r2, r8, #4
 80080e4:	4623      	mov	r3, r4
 80080e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80080ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80080ee:	429f      	cmp	r7, r3
 80080f0:	d2f9      	bcs.n	80080e6 <__hexnan+0xaa>
 80080f2:	1b3b      	subs	r3, r7, r4
 80080f4:	f023 0303 	bic.w	r3, r3, #3
 80080f8:	3304      	adds	r3, #4
 80080fa:	3401      	adds	r4, #1
 80080fc:	3e03      	subs	r6, #3
 80080fe:	42b4      	cmp	r4, r6
 8008100:	bf88      	it	hi
 8008102:	2304      	movhi	r3, #4
 8008104:	4443      	add	r3, r8
 8008106:	2200      	movs	r2, #0
 8008108:	f843 2b04 	str.w	r2, [r3], #4
 800810c:	429f      	cmp	r7, r3
 800810e:	d2fb      	bcs.n	8008108 <__hexnan+0xcc>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	b91b      	cbnz	r3, 800811c <__hexnan+0xe0>
 8008114:	4547      	cmp	r7, r8
 8008116:	d127      	bne.n	8008168 <__hexnan+0x12c>
 8008118:	2301      	movs	r3, #1
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	2005      	movs	r0, #5
 800811e:	e026      	b.n	800816e <__hexnan+0x132>
 8008120:	3501      	adds	r5, #1
 8008122:	2d08      	cmp	r5, #8
 8008124:	f10b 0b01 	add.w	fp, fp, #1
 8008128:	dd06      	ble.n	8008138 <__hexnan+0xfc>
 800812a:	4544      	cmp	r4, r8
 800812c:	d9c3      	bls.n	80080b6 <__hexnan+0x7a>
 800812e:	2300      	movs	r3, #0
 8008130:	f844 3c04 	str.w	r3, [r4, #-4]
 8008134:	2501      	movs	r5, #1
 8008136:	3c04      	subs	r4, #4
 8008138:	6822      	ldr	r2, [r4, #0]
 800813a:	f000 000f 	and.w	r0, r0, #15
 800813e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008142:	6022      	str	r2, [r4, #0]
 8008144:	e7b7      	b.n	80080b6 <__hexnan+0x7a>
 8008146:	2508      	movs	r5, #8
 8008148:	e7b5      	b.n	80080b6 <__hexnan+0x7a>
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0df      	beq.n	8008110 <__hexnan+0xd4>
 8008150:	f04f 32ff 	mov.w	r2, #4294967295
 8008154:	f1c3 0320 	rsb	r3, r3, #32
 8008158:	fa22 f303 	lsr.w	r3, r2, r3
 800815c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008160:	401a      	ands	r2, r3
 8008162:	f846 2c04 	str.w	r2, [r6, #-4]
 8008166:	e7d3      	b.n	8008110 <__hexnan+0xd4>
 8008168:	3f04      	subs	r7, #4
 800816a:	e7d1      	b.n	8008110 <__hexnan+0xd4>
 800816c:	2004      	movs	r0, #4
 800816e:	b007      	add	sp, #28
 8008170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008174 <_localeconv_r>:
 8008174:	4800      	ldr	r0, [pc, #0]	; (8008178 <_localeconv_r+0x4>)
 8008176:	4770      	bx	lr
 8008178:	2000016c 	.word	0x2000016c

0800817c <__retarget_lock_init_recursive>:
 800817c:	4770      	bx	lr

0800817e <__retarget_lock_acquire_recursive>:
 800817e:	4770      	bx	lr

08008180 <__retarget_lock_release_recursive>:
 8008180:	4770      	bx	lr

08008182 <__swhatbuf_r>:
 8008182:	b570      	push	{r4, r5, r6, lr}
 8008184:	460e      	mov	r6, r1
 8008186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818a:	2900      	cmp	r1, #0
 800818c:	b096      	sub	sp, #88	; 0x58
 800818e:	4614      	mov	r4, r2
 8008190:	461d      	mov	r5, r3
 8008192:	da07      	bge.n	80081a4 <__swhatbuf_r+0x22>
 8008194:	2300      	movs	r3, #0
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	89b3      	ldrh	r3, [r6, #12]
 800819a:	061a      	lsls	r2, r3, #24
 800819c:	d410      	bmi.n	80081c0 <__swhatbuf_r+0x3e>
 800819e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081a2:	e00e      	b.n	80081c2 <__swhatbuf_r+0x40>
 80081a4:	466a      	mov	r2, sp
 80081a6:	f001 f813 	bl	80091d0 <_fstat_r>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	dbf2      	blt.n	8008194 <__swhatbuf_r+0x12>
 80081ae:	9a01      	ldr	r2, [sp, #4]
 80081b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081b8:	425a      	negs	r2, r3
 80081ba:	415a      	adcs	r2, r3
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	e7ee      	b.n	800819e <__swhatbuf_r+0x1c>
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	2000      	movs	r0, #0
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	b016      	add	sp, #88	; 0x58
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080081cc <__smakebuf_r>:
 80081cc:	898b      	ldrh	r3, [r1, #12]
 80081ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d0:	079d      	lsls	r5, r3, #30
 80081d2:	4606      	mov	r6, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	d507      	bpl.n	80081e8 <__smakebuf_r+0x1c>
 80081d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	2301      	movs	r3, #1
 80081e2:	6163      	str	r3, [r4, #20]
 80081e4:	b002      	add	sp, #8
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	ab01      	add	r3, sp, #4
 80081ea:	466a      	mov	r2, sp
 80081ec:	f7ff ffc9 	bl	8008182 <__swhatbuf_r>
 80081f0:	9900      	ldr	r1, [sp, #0]
 80081f2:	4605      	mov	r5, r0
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 fd6b 	bl	8008cd0 <_malloc_r>
 80081fa:	b948      	cbnz	r0, 8008210 <__smakebuf_r+0x44>
 80081fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008200:	059a      	lsls	r2, r3, #22
 8008202:	d4ef      	bmi.n	80081e4 <__smakebuf_r+0x18>
 8008204:	f023 0303 	bic.w	r3, r3, #3
 8008208:	f043 0302 	orr.w	r3, r3, #2
 800820c:	81a3      	strh	r3, [r4, #12]
 800820e:	e7e3      	b.n	80081d8 <__smakebuf_r+0xc>
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <__smakebuf_r+0x7c>)
 8008212:	62b3      	str	r3, [r6, #40]	; 0x28
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	6020      	str	r0, [r4, #0]
 8008218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	6163      	str	r3, [r4, #20]
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	6120      	str	r0, [r4, #16]
 8008226:	b15b      	cbz	r3, 8008240 <__smakebuf_r+0x74>
 8008228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822c:	4630      	mov	r0, r6
 800822e:	f000 ffe1 	bl	80091f4 <_isatty_r>
 8008232:	b128      	cbz	r0, 8008240 <__smakebuf_r+0x74>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	89a0      	ldrh	r0, [r4, #12]
 8008242:	4305      	orrs	r5, r0
 8008244:	81a5      	strh	r5, [r4, #12]
 8008246:	e7cd      	b.n	80081e4 <__smakebuf_r+0x18>
 8008248:	080078f5 	.word	0x080078f5

0800824c <malloc>:
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <malloc+0xc>)
 800824e:	4601      	mov	r1, r0
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f000 bd3d 	b.w	8008cd0 <_malloc_r>
 8008256:	bf00      	nop
 8008258:	20000014 	.word	0x20000014

0800825c <__ascii_mbtowc>:
 800825c:	b082      	sub	sp, #8
 800825e:	b901      	cbnz	r1, 8008262 <__ascii_mbtowc+0x6>
 8008260:	a901      	add	r1, sp, #4
 8008262:	b142      	cbz	r2, 8008276 <__ascii_mbtowc+0x1a>
 8008264:	b14b      	cbz	r3, 800827a <__ascii_mbtowc+0x1e>
 8008266:	7813      	ldrb	r3, [r2, #0]
 8008268:	600b      	str	r3, [r1, #0]
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	1e10      	subs	r0, r2, #0
 800826e:	bf18      	it	ne
 8008270:	2001      	movne	r0, #1
 8008272:	b002      	add	sp, #8
 8008274:	4770      	bx	lr
 8008276:	4610      	mov	r0, r2
 8008278:	e7fb      	b.n	8008272 <__ascii_mbtowc+0x16>
 800827a:	f06f 0001 	mvn.w	r0, #1
 800827e:	e7f8      	b.n	8008272 <__ascii_mbtowc+0x16>

08008280 <memcpy>:
 8008280:	440a      	add	r2, r1
 8008282:	4291      	cmp	r1, r2
 8008284:	f100 33ff 	add.w	r3, r0, #4294967295
 8008288:	d100      	bne.n	800828c <memcpy+0xc>
 800828a:	4770      	bx	lr
 800828c:	b510      	push	{r4, lr}
 800828e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008296:	4291      	cmp	r1, r2
 8008298:	d1f9      	bne.n	800828e <memcpy+0xe>
 800829a:	bd10      	pop	{r4, pc}

0800829c <_Balloc>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082a0:	4604      	mov	r4, r0
 80082a2:	460d      	mov	r5, r1
 80082a4:	b976      	cbnz	r6, 80082c4 <_Balloc+0x28>
 80082a6:	2010      	movs	r0, #16
 80082a8:	f7ff ffd0 	bl	800824c <malloc>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6260      	str	r0, [r4, #36]	; 0x24
 80082b0:	b920      	cbnz	r0, 80082bc <_Balloc+0x20>
 80082b2:	4b18      	ldr	r3, [pc, #96]	; (8008314 <_Balloc+0x78>)
 80082b4:	4818      	ldr	r0, [pc, #96]	; (8008318 <_Balloc+0x7c>)
 80082b6:	2166      	movs	r1, #102	; 0x66
 80082b8:	f000 ff4a 	bl	8009150 <__assert_func>
 80082bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082c0:	6006      	str	r6, [r0, #0]
 80082c2:	60c6      	str	r6, [r0, #12]
 80082c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082c6:	68f3      	ldr	r3, [r6, #12]
 80082c8:	b183      	cbz	r3, 80082ec <_Balloc+0x50>
 80082ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082d2:	b9b8      	cbnz	r0, 8008304 <_Balloc+0x68>
 80082d4:	2101      	movs	r1, #1
 80082d6:	fa01 f605 	lsl.w	r6, r1, r5
 80082da:	1d72      	adds	r2, r6, #5
 80082dc:	0092      	lsls	r2, r2, #2
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 fc97 	bl	8008c12 <_calloc_r>
 80082e4:	b160      	cbz	r0, 8008300 <_Balloc+0x64>
 80082e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082ea:	e00e      	b.n	800830a <_Balloc+0x6e>
 80082ec:	2221      	movs	r2, #33	; 0x21
 80082ee:	2104      	movs	r1, #4
 80082f0:	4620      	mov	r0, r4
 80082f2:	f000 fc8e 	bl	8008c12 <_calloc_r>
 80082f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f8:	60f0      	str	r0, [r6, #12]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e4      	bne.n	80082ca <_Balloc+0x2e>
 8008300:	2000      	movs	r0, #0
 8008302:	bd70      	pop	{r4, r5, r6, pc}
 8008304:	6802      	ldr	r2, [r0, #0]
 8008306:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800830a:	2300      	movs	r3, #0
 800830c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008310:	e7f7      	b.n	8008302 <_Balloc+0x66>
 8008312:	bf00      	nop
 8008314:	08009935 	.word	0x08009935
 8008318:	08009a9c 	.word	0x08009a9c

0800831c <_Bfree>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008320:	4605      	mov	r5, r0
 8008322:	460c      	mov	r4, r1
 8008324:	b976      	cbnz	r6, 8008344 <_Bfree+0x28>
 8008326:	2010      	movs	r0, #16
 8008328:	f7ff ff90 	bl	800824c <malloc>
 800832c:	4602      	mov	r2, r0
 800832e:	6268      	str	r0, [r5, #36]	; 0x24
 8008330:	b920      	cbnz	r0, 800833c <_Bfree+0x20>
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <_Bfree+0x3c>)
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <_Bfree+0x40>)
 8008336:	218a      	movs	r1, #138	; 0x8a
 8008338:	f000 ff0a 	bl	8009150 <__assert_func>
 800833c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008340:	6006      	str	r6, [r0, #0]
 8008342:	60c6      	str	r6, [r0, #12]
 8008344:	b13c      	cbz	r4, 8008356 <_Bfree+0x3a>
 8008346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008348:	6862      	ldr	r2, [r4, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008350:	6021      	str	r1, [r4, #0]
 8008352:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	08009935 	.word	0x08009935
 800835c:	08009a9c 	.word	0x08009a9c

08008360 <__multadd>:
 8008360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008364:	690e      	ldr	r6, [r1, #16]
 8008366:	4607      	mov	r7, r0
 8008368:	4698      	mov	r8, r3
 800836a:	460c      	mov	r4, r1
 800836c:	f101 0014 	add.w	r0, r1, #20
 8008370:	2300      	movs	r3, #0
 8008372:	6805      	ldr	r5, [r0, #0]
 8008374:	b2a9      	uxth	r1, r5
 8008376:	fb02 8101 	mla	r1, r2, r1, r8
 800837a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800837e:	0c2d      	lsrs	r5, r5, #16
 8008380:	fb02 c505 	mla	r5, r2, r5, ip
 8008384:	b289      	uxth	r1, r1
 8008386:	3301      	adds	r3, #1
 8008388:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800838c:	429e      	cmp	r6, r3
 800838e:	f840 1b04 	str.w	r1, [r0], #4
 8008392:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008396:	dcec      	bgt.n	8008372 <__multadd+0x12>
 8008398:	f1b8 0f00 	cmp.w	r8, #0
 800839c:	d022      	beq.n	80083e4 <__multadd+0x84>
 800839e:	68a3      	ldr	r3, [r4, #8]
 80083a0:	42b3      	cmp	r3, r6
 80083a2:	dc19      	bgt.n	80083d8 <__multadd+0x78>
 80083a4:	6861      	ldr	r1, [r4, #4]
 80083a6:	4638      	mov	r0, r7
 80083a8:	3101      	adds	r1, #1
 80083aa:	f7ff ff77 	bl	800829c <_Balloc>
 80083ae:	4605      	mov	r5, r0
 80083b0:	b928      	cbnz	r0, 80083be <__multadd+0x5e>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <__multadd+0x8c>)
 80083b6:	480e      	ldr	r0, [pc, #56]	; (80083f0 <__multadd+0x90>)
 80083b8:	21b5      	movs	r1, #181	; 0xb5
 80083ba:	f000 fec9 	bl	8009150 <__assert_func>
 80083be:	6922      	ldr	r2, [r4, #16]
 80083c0:	3202      	adds	r2, #2
 80083c2:	f104 010c 	add.w	r1, r4, #12
 80083c6:	0092      	lsls	r2, r2, #2
 80083c8:	300c      	adds	r0, #12
 80083ca:	f7ff ff59 	bl	8008280 <memcpy>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4638      	mov	r0, r7
 80083d2:	f7ff ffa3 	bl	800831c <_Bfree>
 80083d6:	462c      	mov	r4, r5
 80083d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80083dc:	3601      	adds	r6, #1
 80083de:	f8c3 8014 	str.w	r8, [r3, #20]
 80083e2:	6126      	str	r6, [r4, #16]
 80083e4:	4620      	mov	r0, r4
 80083e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083ea:	bf00      	nop
 80083ec:	080099ab 	.word	0x080099ab
 80083f0:	08009a9c 	.word	0x08009a9c

080083f4 <__s2b>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	460c      	mov	r4, r1
 80083fa:	4615      	mov	r5, r2
 80083fc:	461f      	mov	r7, r3
 80083fe:	2209      	movs	r2, #9
 8008400:	3308      	adds	r3, #8
 8008402:	4606      	mov	r6, r0
 8008404:	fb93 f3f2 	sdiv	r3, r3, r2
 8008408:	2100      	movs	r1, #0
 800840a:	2201      	movs	r2, #1
 800840c:	429a      	cmp	r2, r3
 800840e:	db09      	blt.n	8008424 <__s2b+0x30>
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff ff43 	bl	800829c <_Balloc>
 8008416:	b940      	cbnz	r0, 800842a <__s2b+0x36>
 8008418:	4602      	mov	r2, r0
 800841a:	4b19      	ldr	r3, [pc, #100]	; (8008480 <__s2b+0x8c>)
 800841c:	4819      	ldr	r0, [pc, #100]	; (8008484 <__s2b+0x90>)
 800841e:	21ce      	movs	r1, #206	; 0xce
 8008420:	f000 fe96 	bl	8009150 <__assert_func>
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	3101      	adds	r1, #1
 8008428:	e7f0      	b.n	800840c <__s2b+0x18>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	6143      	str	r3, [r0, #20]
 800842e:	2d09      	cmp	r5, #9
 8008430:	f04f 0301 	mov.w	r3, #1
 8008434:	6103      	str	r3, [r0, #16]
 8008436:	dd16      	ble.n	8008466 <__s2b+0x72>
 8008438:	f104 0909 	add.w	r9, r4, #9
 800843c:	46c8      	mov	r8, r9
 800843e:	442c      	add	r4, r5
 8008440:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008444:	4601      	mov	r1, r0
 8008446:	3b30      	subs	r3, #48	; 0x30
 8008448:	220a      	movs	r2, #10
 800844a:	4630      	mov	r0, r6
 800844c:	f7ff ff88 	bl	8008360 <__multadd>
 8008450:	45a0      	cmp	r8, r4
 8008452:	d1f5      	bne.n	8008440 <__s2b+0x4c>
 8008454:	f1a5 0408 	sub.w	r4, r5, #8
 8008458:	444c      	add	r4, r9
 800845a:	1b2d      	subs	r5, r5, r4
 800845c:	1963      	adds	r3, r4, r5
 800845e:	42bb      	cmp	r3, r7
 8008460:	db04      	blt.n	800846c <__s2b+0x78>
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	340a      	adds	r4, #10
 8008468:	2509      	movs	r5, #9
 800846a:	e7f6      	b.n	800845a <__s2b+0x66>
 800846c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008470:	4601      	mov	r1, r0
 8008472:	3b30      	subs	r3, #48	; 0x30
 8008474:	220a      	movs	r2, #10
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ff72 	bl	8008360 <__multadd>
 800847c:	e7ee      	b.n	800845c <__s2b+0x68>
 800847e:	bf00      	nop
 8008480:	080099ab 	.word	0x080099ab
 8008484:	08009a9c 	.word	0x08009a9c

08008488 <__hi0bits>:
 8008488:	0c03      	lsrs	r3, r0, #16
 800848a:	041b      	lsls	r3, r3, #16
 800848c:	b9d3      	cbnz	r3, 80084c4 <__hi0bits+0x3c>
 800848e:	0400      	lsls	r0, r0, #16
 8008490:	2310      	movs	r3, #16
 8008492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008496:	bf04      	itt	eq
 8008498:	0200      	lsleq	r0, r0, #8
 800849a:	3308      	addeq	r3, #8
 800849c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084a0:	bf04      	itt	eq
 80084a2:	0100      	lsleq	r0, r0, #4
 80084a4:	3304      	addeq	r3, #4
 80084a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084aa:	bf04      	itt	eq
 80084ac:	0080      	lsleq	r0, r0, #2
 80084ae:	3302      	addeq	r3, #2
 80084b0:	2800      	cmp	r0, #0
 80084b2:	db05      	blt.n	80084c0 <__hi0bits+0x38>
 80084b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084b8:	f103 0301 	add.w	r3, r3, #1
 80084bc:	bf08      	it	eq
 80084be:	2320      	moveq	r3, #32
 80084c0:	4618      	mov	r0, r3
 80084c2:	4770      	bx	lr
 80084c4:	2300      	movs	r3, #0
 80084c6:	e7e4      	b.n	8008492 <__hi0bits+0xa>

080084c8 <__lo0bits>:
 80084c8:	6803      	ldr	r3, [r0, #0]
 80084ca:	f013 0207 	ands.w	r2, r3, #7
 80084ce:	4601      	mov	r1, r0
 80084d0:	d00b      	beq.n	80084ea <__lo0bits+0x22>
 80084d2:	07da      	lsls	r2, r3, #31
 80084d4:	d424      	bmi.n	8008520 <__lo0bits+0x58>
 80084d6:	0798      	lsls	r0, r3, #30
 80084d8:	bf49      	itett	mi
 80084da:	085b      	lsrmi	r3, r3, #1
 80084dc:	089b      	lsrpl	r3, r3, #2
 80084de:	2001      	movmi	r0, #1
 80084e0:	600b      	strmi	r3, [r1, #0]
 80084e2:	bf5c      	itt	pl
 80084e4:	600b      	strpl	r3, [r1, #0]
 80084e6:	2002      	movpl	r0, #2
 80084e8:	4770      	bx	lr
 80084ea:	b298      	uxth	r0, r3
 80084ec:	b9b0      	cbnz	r0, 800851c <__lo0bits+0x54>
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	2010      	movs	r0, #16
 80084f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084f6:	bf04      	itt	eq
 80084f8:	0a1b      	lsreq	r3, r3, #8
 80084fa:	3008      	addeq	r0, #8
 80084fc:	071a      	lsls	r2, r3, #28
 80084fe:	bf04      	itt	eq
 8008500:	091b      	lsreq	r3, r3, #4
 8008502:	3004      	addeq	r0, #4
 8008504:	079a      	lsls	r2, r3, #30
 8008506:	bf04      	itt	eq
 8008508:	089b      	lsreq	r3, r3, #2
 800850a:	3002      	addeq	r0, #2
 800850c:	07da      	lsls	r2, r3, #31
 800850e:	d403      	bmi.n	8008518 <__lo0bits+0x50>
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	f100 0001 	add.w	r0, r0, #1
 8008516:	d005      	beq.n	8008524 <__lo0bits+0x5c>
 8008518:	600b      	str	r3, [r1, #0]
 800851a:	4770      	bx	lr
 800851c:	4610      	mov	r0, r2
 800851e:	e7e8      	b.n	80084f2 <__lo0bits+0x2a>
 8008520:	2000      	movs	r0, #0
 8008522:	4770      	bx	lr
 8008524:	2020      	movs	r0, #32
 8008526:	4770      	bx	lr

08008528 <__i2b>:
 8008528:	b510      	push	{r4, lr}
 800852a:	460c      	mov	r4, r1
 800852c:	2101      	movs	r1, #1
 800852e:	f7ff feb5 	bl	800829c <_Balloc>
 8008532:	4602      	mov	r2, r0
 8008534:	b928      	cbnz	r0, 8008542 <__i2b+0x1a>
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <__i2b+0x24>)
 8008538:	4805      	ldr	r0, [pc, #20]	; (8008550 <__i2b+0x28>)
 800853a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800853e:	f000 fe07 	bl	8009150 <__assert_func>
 8008542:	2301      	movs	r3, #1
 8008544:	6144      	str	r4, [r0, #20]
 8008546:	6103      	str	r3, [r0, #16]
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	080099ab 	.word	0x080099ab
 8008550:	08009a9c 	.word	0x08009a9c

08008554 <__multiply>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	4614      	mov	r4, r2
 800855a:	690a      	ldr	r2, [r1, #16]
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	429a      	cmp	r2, r3
 8008560:	bfb8      	it	lt
 8008562:	460b      	movlt	r3, r1
 8008564:	460d      	mov	r5, r1
 8008566:	bfbc      	itt	lt
 8008568:	4625      	movlt	r5, r4
 800856a:	461c      	movlt	r4, r3
 800856c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008570:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008574:	68ab      	ldr	r3, [r5, #8]
 8008576:	6869      	ldr	r1, [r5, #4]
 8008578:	eb0a 0709 	add.w	r7, sl, r9
 800857c:	42bb      	cmp	r3, r7
 800857e:	b085      	sub	sp, #20
 8008580:	bfb8      	it	lt
 8008582:	3101      	addlt	r1, #1
 8008584:	f7ff fe8a 	bl	800829c <_Balloc>
 8008588:	b930      	cbnz	r0, 8008598 <__multiply+0x44>
 800858a:	4602      	mov	r2, r0
 800858c:	4b42      	ldr	r3, [pc, #264]	; (8008698 <__multiply+0x144>)
 800858e:	4843      	ldr	r0, [pc, #268]	; (800869c <__multiply+0x148>)
 8008590:	f240 115d 	movw	r1, #349	; 0x15d
 8008594:	f000 fddc 	bl	8009150 <__assert_func>
 8008598:	f100 0614 	add.w	r6, r0, #20
 800859c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80085a0:	4633      	mov	r3, r6
 80085a2:	2200      	movs	r2, #0
 80085a4:	4543      	cmp	r3, r8
 80085a6:	d31e      	bcc.n	80085e6 <__multiply+0x92>
 80085a8:	f105 0c14 	add.w	ip, r5, #20
 80085ac:	f104 0314 	add.w	r3, r4, #20
 80085b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80085b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80085b8:	9202      	str	r2, [sp, #8]
 80085ba:	ebac 0205 	sub.w	r2, ip, r5
 80085be:	3a15      	subs	r2, #21
 80085c0:	f022 0203 	bic.w	r2, r2, #3
 80085c4:	3204      	adds	r2, #4
 80085c6:	f105 0115 	add.w	r1, r5, #21
 80085ca:	458c      	cmp	ip, r1
 80085cc:	bf38      	it	cc
 80085ce:	2204      	movcc	r2, #4
 80085d0:	9201      	str	r2, [sp, #4]
 80085d2:	9a02      	ldr	r2, [sp, #8]
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d808      	bhi.n	80085ec <__multiply+0x98>
 80085da:	2f00      	cmp	r7, #0
 80085dc:	dc55      	bgt.n	800868a <__multiply+0x136>
 80085de:	6107      	str	r7, [r0, #16]
 80085e0:	b005      	add	sp, #20
 80085e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e6:	f843 2b04 	str.w	r2, [r3], #4
 80085ea:	e7db      	b.n	80085a4 <__multiply+0x50>
 80085ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80085f0:	f1ba 0f00 	cmp.w	sl, #0
 80085f4:	d020      	beq.n	8008638 <__multiply+0xe4>
 80085f6:	f105 0e14 	add.w	lr, r5, #20
 80085fa:	46b1      	mov	r9, r6
 80085fc:	2200      	movs	r2, #0
 80085fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008602:	f8d9 b000 	ldr.w	fp, [r9]
 8008606:	b2a1      	uxth	r1, r4
 8008608:	fa1f fb8b 	uxth.w	fp, fp
 800860c:	fb0a b101 	mla	r1, sl, r1, fp
 8008610:	4411      	add	r1, r2
 8008612:	f8d9 2000 	ldr.w	r2, [r9]
 8008616:	0c24      	lsrs	r4, r4, #16
 8008618:	0c12      	lsrs	r2, r2, #16
 800861a:	fb0a 2404 	mla	r4, sl, r4, r2
 800861e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008622:	b289      	uxth	r1, r1
 8008624:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008628:	45f4      	cmp	ip, lr
 800862a:	f849 1b04 	str.w	r1, [r9], #4
 800862e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008632:	d8e4      	bhi.n	80085fe <__multiply+0xaa>
 8008634:	9901      	ldr	r1, [sp, #4]
 8008636:	5072      	str	r2, [r6, r1]
 8008638:	9a03      	ldr	r2, [sp, #12]
 800863a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800863e:	3304      	adds	r3, #4
 8008640:	f1b9 0f00 	cmp.w	r9, #0
 8008644:	d01f      	beq.n	8008686 <__multiply+0x132>
 8008646:	6834      	ldr	r4, [r6, #0]
 8008648:	f105 0114 	add.w	r1, r5, #20
 800864c:	46b6      	mov	lr, r6
 800864e:	f04f 0a00 	mov.w	sl, #0
 8008652:	880a      	ldrh	r2, [r1, #0]
 8008654:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008658:	fb09 b202 	mla	r2, r9, r2, fp
 800865c:	4492      	add	sl, r2
 800865e:	b2a4      	uxth	r4, r4
 8008660:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008664:	f84e 4b04 	str.w	r4, [lr], #4
 8008668:	f851 4b04 	ldr.w	r4, [r1], #4
 800866c:	f8be 2000 	ldrh.w	r2, [lr]
 8008670:	0c24      	lsrs	r4, r4, #16
 8008672:	fb09 2404 	mla	r4, r9, r4, r2
 8008676:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800867a:	458c      	cmp	ip, r1
 800867c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008680:	d8e7      	bhi.n	8008652 <__multiply+0xfe>
 8008682:	9a01      	ldr	r2, [sp, #4]
 8008684:	50b4      	str	r4, [r6, r2]
 8008686:	3604      	adds	r6, #4
 8008688:	e7a3      	b.n	80085d2 <__multiply+0x7e>
 800868a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1a5      	bne.n	80085de <__multiply+0x8a>
 8008692:	3f01      	subs	r7, #1
 8008694:	e7a1      	b.n	80085da <__multiply+0x86>
 8008696:	bf00      	nop
 8008698:	080099ab 	.word	0x080099ab
 800869c:	08009a9c 	.word	0x08009a9c

080086a0 <__pow5mult>:
 80086a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086a4:	4615      	mov	r5, r2
 80086a6:	f012 0203 	ands.w	r2, r2, #3
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	d007      	beq.n	80086c0 <__pow5mult+0x20>
 80086b0:	4c25      	ldr	r4, [pc, #148]	; (8008748 <__pow5mult+0xa8>)
 80086b2:	3a01      	subs	r2, #1
 80086b4:	2300      	movs	r3, #0
 80086b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086ba:	f7ff fe51 	bl	8008360 <__multadd>
 80086be:	4607      	mov	r7, r0
 80086c0:	10ad      	asrs	r5, r5, #2
 80086c2:	d03d      	beq.n	8008740 <__pow5mult+0xa0>
 80086c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80086c6:	b97c      	cbnz	r4, 80086e8 <__pow5mult+0x48>
 80086c8:	2010      	movs	r0, #16
 80086ca:	f7ff fdbf 	bl	800824c <malloc>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6270      	str	r0, [r6, #36]	; 0x24
 80086d2:	b928      	cbnz	r0, 80086e0 <__pow5mult+0x40>
 80086d4:	4b1d      	ldr	r3, [pc, #116]	; (800874c <__pow5mult+0xac>)
 80086d6:	481e      	ldr	r0, [pc, #120]	; (8008750 <__pow5mult+0xb0>)
 80086d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80086dc:	f000 fd38 	bl	8009150 <__assert_func>
 80086e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086e4:	6004      	str	r4, [r0, #0]
 80086e6:	60c4      	str	r4, [r0, #12]
 80086e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80086ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086f0:	b94c      	cbnz	r4, 8008706 <__pow5mult+0x66>
 80086f2:	f240 2171 	movw	r1, #625	; 0x271
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff ff16 	bl	8008528 <__i2b>
 80086fc:	2300      	movs	r3, #0
 80086fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008702:	4604      	mov	r4, r0
 8008704:	6003      	str	r3, [r0, #0]
 8008706:	f04f 0900 	mov.w	r9, #0
 800870a:	07eb      	lsls	r3, r5, #31
 800870c:	d50a      	bpl.n	8008724 <__pow5mult+0x84>
 800870e:	4639      	mov	r1, r7
 8008710:	4622      	mov	r2, r4
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ff1e 	bl	8008554 <__multiply>
 8008718:	4639      	mov	r1, r7
 800871a:	4680      	mov	r8, r0
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff fdfd 	bl	800831c <_Bfree>
 8008722:	4647      	mov	r7, r8
 8008724:	106d      	asrs	r5, r5, #1
 8008726:	d00b      	beq.n	8008740 <__pow5mult+0xa0>
 8008728:	6820      	ldr	r0, [r4, #0]
 800872a:	b938      	cbnz	r0, 800873c <__pow5mult+0x9c>
 800872c:	4622      	mov	r2, r4
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff ff0f 	bl	8008554 <__multiply>
 8008736:	6020      	str	r0, [r4, #0]
 8008738:	f8c0 9000 	str.w	r9, [r0]
 800873c:	4604      	mov	r4, r0
 800873e:	e7e4      	b.n	800870a <__pow5mult+0x6a>
 8008740:	4638      	mov	r0, r7
 8008742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008746:	bf00      	nop
 8008748:	08009bf0 	.word	0x08009bf0
 800874c:	08009935 	.word	0x08009935
 8008750:	08009a9c 	.word	0x08009a9c

08008754 <__lshift>:
 8008754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008758:	460c      	mov	r4, r1
 800875a:	6849      	ldr	r1, [r1, #4]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008762:	68a3      	ldr	r3, [r4, #8]
 8008764:	4607      	mov	r7, r0
 8008766:	4691      	mov	r9, r2
 8008768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800876c:	f108 0601 	add.w	r6, r8, #1
 8008770:	42b3      	cmp	r3, r6
 8008772:	db0b      	blt.n	800878c <__lshift+0x38>
 8008774:	4638      	mov	r0, r7
 8008776:	f7ff fd91 	bl	800829c <_Balloc>
 800877a:	4605      	mov	r5, r0
 800877c:	b948      	cbnz	r0, 8008792 <__lshift+0x3e>
 800877e:	4602      	mov	r2, r0
 8008780:	4b28      	ldr	r3, [pc, #160]	; (8008824 <__lshift+0xd0>)
 8008782:	4829      	ldr	r0, [pc, #164]	; (8008828 <__lshift+0xd4>)
 8008784:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008788:	f000 fce2 	bl	8009150 <__assert_func>
 800878c:	3101      	adds	r1, #1
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	e7ee      	b.n	8008770 <__lshift+0x1c>
 8008792:	2300      	movs	r3, #0
 8008794:	f100 0114 	add.w	r1, r0, #20
 8008798:	f100 0210 	add.w	r2, r0, #16
 800879c:	4618      	mov	r0, r3
 800879e:	4553      	cmp	r3, sl
 80087a0:	db33      	blt.n	800880a <__lshift+0xb6>
 80087a2:	6920      	ldr	r0, [r4, #16]
 80087a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087a8:	f104 0314 	add.w	r3, r4, #20
 80087ac:	f019 091f 	ands.w	r9, r9, #31
 80087b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087b8:	d02b      	beq.n	8008812 <__lshift+0xbe>
 80087ba:	f1c9 0e20 	rsb	lr, r9, #32
 80087be:	468a      	mov	sl, r1
 80087c0:	2200      	movs	r2, #0
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	fa00 f009 	lsl.w	r0, r0, r9
 80087c8:	4302      	orrs	r2, r0
 80087ca:	f84a 2b04 	str.w	r2, [sl], #4
 80087ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80087d2:	459c      	cmp	ip, r3
 80087d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80087d8:	d8f3      	bhi.n	80087c2 <__lshift+0x6e>
 80087da:	ebac 0304 	sub.w	r3, ip, r4
 80087de:	3b15      	subs	r3, #21
 80087e0:	f023 0303 	bic.w	r3, r3, #3
 80087e4:	3304      	adds	r3, #4
 80087e6:	f104 0015 	add.w	r0, r4, #21
 80087ea:	4584      	cmp	ip, r0
 80087ec:	bf38      	it	cc
 80087ee:	2304      	movcc	r3, #4
 80087f0:	50ca      	str	r2, [r1, r3]
 80087f2:	b10a      	cbz	r2, 80087f8 <__lshift+0xa4>
 80087f4:	f108 0602 	add.w	r6, r8, #2
 80087f8:	3e01      	subs	r6, #1
 80087fa:	4638      	mov	r0, r7
 80087fc:	612e      	str	r6, [r5, #16]
 80087fe:	4621      	mov	r1, r4
 8008800:	f7ff fd8c 	bl	800831c <_Bfree>
 8008804:	4628      	mov	r0, r5
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	f842 0f04 	str.w	r0, [r2, #4]!
 800880e:	3301      	adds	r3, #1
 8008810:	e7c5      	b.n	800879e <__lshift+0x4a>
 8008812:	3904      	subs	r1, #4
 8008814:	f853 2b04 	ldr.w	r2, [r3], #4
 8008818:	f841 2f04 	str.w	r2, [r1, #4]!
 800881c:	459c      	cmp	ip, r3
 800881e:	d8f9      	bhi.n	8008814 <__lshift+0xc0>
 8008820:	e7ea      	b.n	80087f8 <__lshift+0xa4>
 8008822:	bf00      	nop
 8008824:	080099ab 	.word	0x080099ab
 8008828:	08009a9c 	.word	0x08009a9c

0800882c <__mcmp>:
 800882c:	b530      	push	{r4, r5, lr}
 800882e:	6902      	ldr	r2, [r0, #16]
 8008830:	690c      	ldr	r4, [r1, #16]
 8008832:	1b12      	subs	r2, r2, r4
 8008834:	d10e      	bne.n	8008854 <__mcmp+0x28>
 8008836:	f100 0314 	add.w	r3, r0, #20
 800883a:	3114      	adds	r1, #20
 800883c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800884c:	42a5      	cmp	r5, r4
 800884e:	d003      	beq.n	8008858 <__mcmp+0x2c>
 8008850:	d305      	bcc.n	800885e <__mcmp+0x32>
 8008852:	2201      	movs	r2, #1
 8008854:	4610      	mov	r0, r2
 8008856:	bd30      	pop	{r4, r5, pc}
 8008858:	4283      	cmp	r3, r0
 800885a:	d3f3      	bcc.n	8008844 <__mcmp+0x18>
 800885c:	e7fa      	b.n	8008854 <__mcmp+0x28>
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	e7f7      	b.n	8008854 <__mcmp+0x28>

08008864 <__mdiff>:
 8008864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	4606      	mov	r6, r0
 800886c:	4611      	mov	r1, r2
 800886e:	4620      	mov	r0, r4
 8008870:	4617      	mov	r7, r2
 8008872:	f7ff ffdb 	bl	800882c <__mcmp>
 8008876:	1e05      	subs	r5, r0, #0
 8008878:	d110      	bne.n	800889c <__mdiff+0x38>
 800887a:	4629      	mov	r1, r5
 800887c:	4630      	mov	r0, r6
 800887e:	f7ff fd0d 	bl	800829c <_Balloc>
 8008882:	b930      	cbnz	r0, 8008892 <__mdiff+0x2e>
 8008884:	4b39      	ldr	r3, [pc, #228]	; (800896c <__mdiff+0x108>)
 8008886:	4602      	mov	r2, r0
 8008888:	f240 2132 	movw	r1, #562	; 0x232
 800888c:	4838      	ldr	r0, [pc, #224]	; (8008970 <__mdiff+0x10c>)
 800888e:	f000 fc5f 	bl	8009150 <__assert_func>
 8008892:	2301      	movs	r3, #1
 8008894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	bfa4      	itt	ge
 800889e:	463b      	movge	r3, r7
 80088a0:	4627      	movge	r7, r4
 80088a2:	4630      	mov	r0, r6
 80088a4:	6879      	ldr	r1, [r7, #4]
 80088a6:	bfa6      	itte	ge
 80088a8:	461c      	movge	r4, r3
 80088aa:	2500      	movge	r5, #0
 80088ac:	2501      	movlt	r5, #1
 80088ae:	f7ff fcf5 	bl	800829c <_Balloc>
 80088b2:	b920      	cbnz	r0, 80088be <__mdiff+0x5a>
 80088b4:	4b2d      	ldr	r3, [pc, #180]	; (800896c <__mdiff+0x108>)
 80088b6:	4602      	mov	r2, r0
 80088b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80088bc:	e7e6      	b.n	800888c <__mdiff+0x28>
 80088be:	693e      	ldr	r6, [r7, #16]
 80088c0:	60c5      	str	r5, [r0, #12]
 80088c2:	6925      	ldr	r5, [r4, #16]
 80088c4:	f107 0114 	add.w	r1, r7, #20
 80088c8:	f104 0914 	add.w	r9, r4, #20
 80088cc:	f100 0e14 	add.w	lr, r0, #20
 80088d0:	f107 0210 	add.w	r2, r7, #16
 80088d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80088d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80088dc:	46f2      	mov	sl, lr
 80088de:	2700      	movs	r7, #0
 80088e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80088e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088e8:	fa1f f883 	uxth.w	r8, r3
 80088ec:	fa17 f78b 	uxtah	r7, r7, fp
 80088f0:	0c1b      	lsrs	r3, r3, #16
 80088f2:	eba7 0808 	sub.w	r8, r7, r8
 80088f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088fe:	fa1f f888 	uxth.w	r8, r8
 8008902:	141f      	asrs	r7, r3, #16
 8008904:	454d      	cmp	r5, r9
 8008906:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800890a:	f84a 3b04 	str.w	r3, [sl], #4
 800890e:	d8e7      	bhi.n	80088e0 <__mdiff+0x7c>
 8008910:	1b2b      	subs	r3, r5, r4
 8008912:	3b15      	subs	r3, #21
 8008914:	f023 0303 	bic.w	r3, r3, #3
 8008918:	3304      	adds	r3, #4
 800891a:	3415      	adds	r4, #21
 800891c:	42a5      	cmp	r5, r4
 800891e:	bf38      	it	cc
 8008920:	2304      	movcc	r3, #4
 8008922:	4419      	add	r1, r3
 8008924:	4473      	add	r3, lr
 8008926:	469e      	mov	lr, r3
 8008928:	460d      	mov	r5, r1
 800892a:	4565      	cmp	r5, ip
 800892c:	d30e      	bcc.n	800894c <__mdiff+0xe8>
 800892e:	f10c 0203 	add.w	r2, ip, #3
 8008932:	1a52      	subs	r2, r2, r1
 8008934:	f022 0203 	bic.w	r2, r2, #3
 8008938:	3903      	subs	r1, #3
 800893a:	458c      	cmp	ip, r1
 800893c:	bf38      	it	cc
 800893e:	2200      	movcc	r2, #0
 8008940:	441a      	add	r2, r3
 8008942:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008946:	b17b      	cbz	r3, 8008968 <__mdiff+0x104>
 8008948:	6106      	str	r6, [r0, #16]
 800894a:	e7a5      	b.n	8008898 <__mdiff+0x34>
 800894c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008950:	fa17 f488 	uxtah	r4, r7, r8
 8008954:	1422      	asrs	r2, r4, #16
 8008956:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800895a:	b2a4      	uxth	r4, r4
 800895c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008960:	f84e 4b04 	str.w	r4, [lr], #4
 8008964:	1417      	asrs	r7, r2, #16
 8008966:	e7e0      	b.n	800892a <__mdiff+0xc6>
 8008968:	3e01      	subs	r6, #1
 800896a:	e7ea      	b.n	8008942 <__mdiff+0xde>
 800896c:	080099ab 	.word	0x080099ab
 8008970:	08009a9c 	.word	0x08009a9c

08008974 <__ulp>:
 8008974:	b082      	sub	sp, #8
 8008976:	ed8d 0b00 	vstr	d0, [sp]
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	4912      	ldr	r1, [pc, #72]	; (80089c8 <__ulp+0x54>)
 800897e:	4019      	ands	r1, r3
 8008980:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008984:	2900      	cmp	r1, #0
 8008986:	dd05      	ble.n	8008994 <__ulp+0x20>
 8008988:	2200      	movs	r2, #0
 800898a:	460b      	mov	r3, r1
 800898c:	ec43 2b10 	vmov	d0, r2, r3
 8008990:	b002      	add	sp, #8
 8008992:	4770      	bx	lr
 8008994:	4249      	negs	r1, r1
 8008996:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800899a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800899e:	f04f 0200 	mov.w	r2, #0
 80089a2:	f04f 0300 	mov.w	r3, #0
 80089a6:	da04      	bge.n	80089b2 <__ulp+0x3e>
 80089a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089ac:	fa41 f300 	asr.w	r3, r1, r0
 80089b0:	e7ec      	b.n	800898c <__ulp+0x18>
 80089b2:	f1a0 0114 	sub.w	r1, r0, #20
 80089b6:	291e      	cmp	r1, #30
 80089b8:	bfda      	itte	le
 80089ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80089be:	fa20 f101 	lsrle.w	r1, r0, r1
 80089c2:	2101      	movgt	r1, #1
 80089c4:	460a      	mov	r2, r1
 80089c6:	e7e1      	b.n	800898c <__ulp+0x18>
 80089c8:	7ff00000 	.word	0x7ff00000

080089cc <__b2d>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	6905      	ldr	r5, [r0, #16]
 80089d0:	f100 0714 	add.w	r7, r0, #20
 80089d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80089d8:	1f2e      	subs	r6, r5, #4
 80089da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fd52 	bl	8008488 <__hi0bits>
 80089e4:	f1c0 0320 	rsb	r3, r0, #32
 80089e8:	280a      	cmp	r0, #10
 80089ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008a68 <__b2d+0x9c>
 80089ee:	600b      	str	r3, [r1, #0]
 80089f0:	dc14      	bgt.n	8008a1c <__b2d+0x50>
 80089f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80089f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80089fa:	42b7      	cmp	r7, r6
 80089fc:	ea41 030c 	orr.w	r3, r1, ip
 8008a00:	bf34      	ite	cc
 8008a02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a06:	2100      	movcs	r1, #0
 8008a08:	3015      	adds	r0, #21
 8008a0a:	fa04 f000 	lsl.w	r0, r4, r0
 8008a0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008a12:	ea40 0201 	orr.w	r2, r0, r1
 8008a16:	ec43 2b10 	vmov	d0, r2, r3
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1c:	42b7      	cmp	r7, r6
 8008a1e:	bf3a      	itte	cc
 8008a20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008a24:	f1a5 0608 	subcc.w	r6, r5, #8
 8008a28:	2100      	movcs	r1, #0
 8008a2a:	380b      	subs	r0, #11
 8008a2c:	d017      	beq.n	8008a5e <__b2d+0x92>
 8008a2e:	f1c0 0c20 	rsb	ip, r0, #32
 8008a32:	fa04 f500 	lsl.w	r5, r4, r0
 8008a36:	42be      	cmp	r6, r7
 8008a38:	fa21 f40c 	lsr.w	r4, r1, ip
 8008a3c:	ea45 0504 	orr.w	r5, r5, r4
 8008a40:	bf8c      	ite	hi
 8008a42:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008a46:	2400      	movls	r4, #0
 8008a48:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008a4c:	fa01 f000 	lsl.w	r0, r1, r0
 8008a50:	fa24 f40c 	lsr.w	r4, r4, ip
 8008a54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a58:	ea40 0204 	orr.w	r2, r0, r4
 8008a5c:	e7db      	b.n	8008a16 <__b2d+0x4a>
 8008a5e:	ea44 030c 	orr.w	r3, r4, ip
 8008a62:	460a      	mov	r2, r1
 8008a64:	e7d7      	b.n	8008a16 <__b2d+0x4a>
 8008a66:	bf00      	nop
 8008a68:	3ff00000 	.word	0x3ff00000

08008a6c <__d2b>:
 8008a6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a70:	4689      	mov	r9, r1
 8008a72:	2101      	movs	r1, #1
 8008a74:	ec57 6b10 	vmov	r6, r7, d0
 8008a78:	4690      	mov	r8, r2
 8008a7a:	f7ff fc0f 	bl	800829c <_Balloc>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	b930      	cbnz	r0, 8008a90 <__d2b+0x24>
 8008a82:	4602      	mov	r2, r0
 8008a84:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <__d2b+0xb0>)
 8008a86:	4826      	ldr	r0, [pc, #152]	; (8008b20 <__d2b+0xb4>)
 8008a88:	f240 310a 	movw	r1, #778	; 0x30a
 8008a8c:	f000 fb60 	bl	8009150 <__assert_func>
 8008a90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a98:	bb35      	cbnz	r5, 8008ae8 <__d2b+0x7c>
 8008a9a:	2e00      	cmp	r6, #0
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	d028      	beq.n	8008af2 <__d2b+0x86>
 8008aa0:	4668      	mov	r0, sp
 8008aa2:	9600      	str	r6, [sp, #0]
 8008aa4:	f7ff fd10 	bl	80084c8 <__lo0bits>
 8008aa8:	9900      	ldr	r1, [sp, #0]
 8008aaa:	b300      	cbz	r0, 8008aee <__d2b+0x82>
 8008aac:	9a01      	ldr	r2, [sp, #4]
 8008aae:	f1c0 0320 	rsb	r3, r0, #32
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	430b      	orrs	r3, r1
 8008ab8:	40c2      	lsrs	r2, r0
 8008aba:	6163      	str	r3, [r4, #20]
 8008abc:	9201      	str	r2, [sp, #4]
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	61a3      	str	r3, [r4, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	bf14      	ite	ne
 8008ac6:	2202      	movne	r2, #2
 8008ac8:	2201      	moveq	r2, #1
 8008aca:	6122      	str	r2, [r4, #16]
 8008acc:	b1d5      	cbz	r5, 8008b04 <__d2b+0x98>
 8008ace:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ad2:	4405      	add	r5, r0
 8008ad4:	f8c9 5000 	str.w	r5, [r9]
 8008ad8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008adc:	f8c8 0000 	str.w	r0, [r8]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	b003      	add	sp, #12
 8008ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aec:	e7d5      	b.n	8008a9a <__d2b+0x2e>
 8008aee:	6161      	str	r1, [r4, #20]
 8008af0:	e7e5      	b.n	8008abe <__d2b+0x52>
 8008af2:	a801      	add	r0, sp, #4
 8008af4:	f7ff fce8 	bl	80084c8 <__lo0bits>
 8008af8:	9b01      	ldr	r3, [sp, #4]
 8008afa:	6163      	str	r3, [r4, #20]
 8008afc:	2201      	movs	r2, #1
 8008afe:	6122      	str	r2, [r4, #16]
 8008b00:	3020      	adds	r0, #32
 8008b02:	e7e3      	b.n	8008acc <__d2b+0x60>
 8008b04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b0c:	f8c9 0000 	str.w	r0, [r9]
 8008b10:	6918      	ldr	r0, [r3, #16]
 8008b12:	f7ff fcb9 	bl	8008488 <__hi0bits>
 8008b16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b1a:	e7df      	b.n	8008adc <__d2b+0x70>
 8008b1c:	080099ab 	.word	0x080099ab
 8008b20:	08009a9c 	.word	0x08009a9c

08008b24 <__ratio>:
 8008b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	4688      	mov	r8, r1
 8008b2a:	4669      	mov	r1, sp
 8008b2c:	4681      	mov	r9, r0
 8008b2e:	f7ff ff4d 	bl	80089cc <__b2d>
 8008b32:	a901      	add	r1, sp, #4
 8008b34:	4640      	mov	r0, r8
 8008b36:	ec55 4b10 	vmov	r4, r5, d0
 8008b3a:	f7ff ff47 	bl	80089cc <__b2d>
 8008b3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b46:	eba3 0c02 	sub.w	ip, r3, r2
 8008b4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b4e:	1a9b      	subs	r3, r3, r2
 8008b50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b54:	ec51 0b10 	vmov	r0, r1, d0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfd6      	itet	le
 8008b5c:	460a      	movle	r2, r1
 8008b5e:	462a      	movgt	r2, r5
 8008b60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b64:	468b      	mov	fp, r1
 8008b66:	462f      	mov	r7, r5
 8008b68:	bfd4      	ite	le
 8008b6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b72:	4620      	mov	r0, r4
 8008b74:	ee10 2a10 	vmov	r2, s0
 8008b78:	465b      	mov	r3, fp
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fe6e 	bl	800085c <__aeabi_ddiv>
 8008b80:	ec41 0b10 	vmov	d0, r0, r1
 8008b84:	b003      	add	sp, #12
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b8a <__copybits>:
 8008b8a:	3901      	subs	r1, #1
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	1149      	asrs	r1, r1, #5
 8008b90:	6914      	ldr	r4, [r2, #16]
 8008b92:	3101      	adds	r1, #1
 8008b94:	f102 0314 	add.w	r3, r2, #20
 8008b98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ba0:	1f05      	subs	r5, r0, #4
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	d30c      	bcc.n	8008bc0 <__copybits+0x36>
 8008ba6:	1aa3      	subs	r3, r4, r2
 8008ba8:	3b11      	subs	r3, #17
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	3211      	adds	r2, #17
 8008bb0:	42a2      	cmp	r2, r4
 8008bb2:	bf88      	it	hi
 8008bb4:	2300      	movhi	r3, #0
 8008bb6:	4418      	add	r0, r3
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4288      	cmp	r0, r1
 8008bbc:	d305      	bcc.n	8008bca <__copybits+0x40>
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	f853 6b04 	ldr.w	r6, [r3], #4
 8008bc4:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bc8:	e7eb      	b.n	8008ba2 <__copybits+0x18>
 8008bca:	f840 3b04 	str.w	r3, [r0], #4
 8008bce:	e7f4      	b.n	8008bba <__copybits+0x30>

08008bd0 <__any_on>:
 8008bd0:	f100 0214 	add.w	r2, r0, #20
 8008bd4:	6900      	ldr	r0, [r0, #16]
 8008bd6:	114b      	asrs	r3, r1, #5
 8008bd8:	4298      	cmp	r0, r3
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	db11      	blt.n	8008c02 <__any_on+0x32>
 8008bde:	dd0a      	ble.n	8008bf6 <__any_on+0x26>
 8008be0:	f011 011f 	ands.w	r1, r1, #31
 8008be4:	d007      	beq.n	8008bf6 <__any_on+0x26>
 8008be6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bea:	fa24 f001 	lsr.w	r0, r4, r1
 8008bee:	fa00 f101 	lsl.w	r1, r0, r1
 8008bf2:	428c      	cmp	r4, r1
 8008bf4:	d10b      	bne.n	8008c0e <__any_on+0x3e>
 8008bf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d803      	bhi.n	8008c06 <__any_on+0x36>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	4603      	mov	r3, r0
 8008c04:	e7f7      	b.n	8008bf6 <__any_on+0x26>
 8008c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c0a:	2900      	cmp	r1, #0
 8008c0c:	d0f5      	beq.n	8008bfa <__any_on+0x2a>
 8008c0e:	2001      	movs	r0, #1
 8008c10:	e7f6      	b.n	8008c00 <__any_on+0x30>

08008c12 <_calloc_r>:
 8008c12:	b513      	push	{r0, r1, r4, lr}
 8008c14:	434a      	muls	r2, r1
 8008c16:	4611      	mov	r1, r2
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	f000 f859 	bl	8008cd0 <_malloc_r>
 8008c1e:	4604      	mov	r4, r0
 8008c20:	b118      	cbz	r0, 8008c2a <_calloc_r+0x18>
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	2100      	movs	r1, #0
 8008c26:	f7fc faf9 	bl	800521c <memset>
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd10      	pop	{r4, pc}

08008c30 <_free_r>:
 8008c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c32:	2900      	cmp	r1, #0
 8008c34:	d048      	beq.n	8008cc8 <_free_r+0x98>
 8008c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c3a:	9001      	str	r0, [sp, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008c42:	bfb8      	it	lt
 8008c44:	18e4      	addlt	r4, r4, r3
 8008c46:	f000 faf7 	bl	8009238 <__malloc_lock>
 8008c4a:	4a20      	ldr	r2, [pc, #128]	; (8008ccc <_free_r+0x9c>)
 8008c4c:	9801      	ldr	r0, [sp, #4]
 8008c4e:	6813      	ldr	r3, [r2, #0]
 8008c50:	4615      	mov	r5, r2
 8008c52:	b933      	cbnz	r3, 8008c62 <_free_r+0x32>
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6014      	str	r4, [r2, #0]
 8008c58:	b003      	add	sp, #12
 8008c5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c5e:	f000 baf1 	b.w	8009244 <__malloc_unlock>
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	d90b      	bls.n	8008c7e <_free_r+0x4e>
 8008c66:	6821      	ldr	r1, [r4, #0]
 8008c68:	1862      	adds	r2, r4, r1
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bf04      	itt	eq
 8008c6e:	681a      	ldreq	r2, [r3, #0]
 8008c70:	685b      	ldreq	r3, [r3, #4]
 8008c72:	6063      	str	r3, [r4, #4]
 8008c74:	bf04      	itt	eq
 8008c76:	1852      	addeq	r2, r2, r1
 8008c78:	6022      	streq	r2, [r4, #0]
 8008c7a:	602c      	str	r4, [r5, #0]
 8008c7c:	e7ec      	b.n	8008c58 <_free_r+0x28>
 8008c7e:	461a      	mov	r2, r3
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	b10b      	cbz	r3, 8008c88 <_free_r+0x58>
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	d9fa      	bls.n	8008c7e <_free_r+0x4e>
 8008c88:	6811      	ldr	r1, [r2, #0]
 8008c8a:	1855      	adds	r5, r2, r1
 8008c8c:	42a5      	cmp	r5, r4
 8008c8e:	d10b      	bne.n	8008ca8 <_free_r+0x78>
 8008c90:	6824      	ldr	r4, [r4, #0]
 8008c92:	4421      	add	r1, r4
 8008c94:	1854      	adds	r4, r2, r1
 8008c96:	42a3      	cmp	r3, r4
 8008c98:	6011      	str	r1, [r2, #0]
 8008c9a:	d1dd      	bne.n	8008c58 <_free_r+0x28>
 8008c9c:	681c      	ldr	r4, [r3, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	6053      	str	r3, [r2, #4]
 8008ca2:	4421      	add	r1, r4
 8008ca4:	6011      	str	r1, [r2, #0]
 8008ca6:	e7d7      	b.n	8008c58 <_free_r+0x28>
 8008ca8:	d902      	bls.n	8008cb0 <_free_r+0x80>
 8008caa:	230c      	movs	r3, #12
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	e7d3      	b.n	8008c58 <_free_r+0x28>
 8008cb0:	6825      	ldr	r5, [r4, #0]
 8008cb2:	1961      	adds	r1, r4, r5
 8008cb4:	428b      	cmp	r3, r1
 8008cb6:	bf04      	itt	eq
 8008cb8:	6819      	ldreq	r1, [r3, #0]
 8008cba:	685b      	ldreq	r3, [r3, #4]
 8008cbc:	6063      	str	r3, [r4, #4]
 8008cbe:	bf04      	itt	eq
 8008cc0:	1949      	addeq	r1, r1, r5
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	6054      	str	r4, [r2, #4]
 8008cc6:	e7c7      	b.n	8008c58 <_free_r+0x28>
 8008cc8:	b003      	add	sp, #12
 8008cca:	bd30      	pop	{r4, r5, pc}
 8008ccc:	20000210 	.word	0x20000210

08008cd0 <_malloc_r>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	1ccd      	adds	r5, r1, #3
 8008cd4:	f025 0503 	bic.w	r5, r5, #3
 8008cd8:	3508      	adds	r5, #8
 8008cda:	2d0c      	cmp	r5, #12
 8008cdc:	bf38      	it	cc
 8008cde:	250c      	movcc	r5, #12
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	db01      	blt.n	8008cea <_malloc_r+0x1a>
 8008ce6:	42a9      	cmp	r1, r5
 8008ce8:	d903      	bls.n	8008cf2 <_malloc_r+0x22>
 8008cea:	230c      	movs	r3, #12
 8008cec:	6033      	str	r3, [r6, #0]
 8008cee:	2000      	movs	r0, #0
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf2:	f000 faa1 	bl	8009238 <__malloc_lock>
 8008cf6:	4921      	ldr	r1, [pc, #132]	; (8008d7c <_malloc_r+0xac>)
 8008cf8:	680a      	ldr	r2, [r1, #0]
 8008cfa:	4614      	mov	r4, r2
 8008cfc:	b99c      	cbnz	r4, 8008d26 <_malloc_r+0x56>
 8008cfe:	4f20      	ldr	r7, [pc, #128]	; (8008d80 <_malloc_r+0xb0>)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	b923      	cbnz	r3, 8008d0e <_malloc_r+0x3e>
 8008d04:	4621      	mov	r1, r4
 8008d06:	4630      	mov	r0, r6
 8008d08:	f000 f99e 	bl	8009048 <_sbrk_r>
 8008d0c:	6038      	str	r0, [r7, #0]
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 f999 	bl	8009048 <_sbrk_r>
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	d123      	bne.n	8008d62 <_malloc_r+0x92>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	6033      	str	r3, [r6, #0]
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f000 fa90 	bl	8009244 <__malloc_unlock>
 8008d24:	e7e3      	b.n	8008cee <_malloc_r+0x1e>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	1b5b      	subs	r3, r3, r5
 8008d2a:	d417      	bmi.n	8008d5c <_malloc_r+0x8c>
 8008d2c:	2b0b      	cmp	r3, #11
 8008d2e:	d903      	bls.n	8008d38 <_malloc_r+0x68>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	441c      	add	r4, r3
 8008d34:	6025      	str	r5, [r4, #0]
 8008d36:	e004      	b.n	8008d42 <_malloc_r+0x72>
 8008d38:	6863      	ldr	r3, [r4, #4]
 8008d3a:	42a2      	cmp	r2, r4
 8008d3c:	bf0c      	ite	eq
 8008d3e:	600b      	streq	r3, [r1, #0]
 8008d40:	6053      	strne	r3, [r2, #4]
 8008d42:	4630      	mov	r0, r6
 8008d44:	f000 fa7e 	bl	8009244 <__malloc_unlock>
 8008d48:	f104 000b 	add.w	r0, r4, #11
 8008d4c:	1d23      	adds	r3, r4, #4
 8008d4e:	f020 0007 	bic.w	r0, r0, #7
 8008d52:	1ac2      	subs	r2, r0, r3
 8008d54:	d0cc      	beq.n	8008cf0 <_malloc_r+0x20>
 8008d56:	1a1b      	subs	r3, r3, r0
 8008d58:	50a3      	str	r3, [r4, r2]
 8008d5a:	e7c9      	b.n	8008cf0 <_malloc_r+0x20>
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	6864      	ldr	r4, [r4, #4]
 8008d60:	e7cc      	b.n	8008cfc <_malloc_r+0x2c>
 8008d62:	1cc4      	adds	r4, r0, #3
 8008d64:	f024 0403 	bic.w	r4, r4, #3
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d0e3      	beq.n	8008d34 <_malloc_r+0x64>
 8008d6c:	1a21      	subs	r1, r4, r0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 f96a 	bl	8009048 <_sbrk_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d1dd      	bne.n	8008d34 <_malloc_r+0x64>
 8008d78:	e7cf      	b.n	8008d1a <_malloc_r+0x4a>
 8008d7a:	bf00      	nop
 8008d7c:	20000210 	.word	0x20000210
 8008d80:	20000214 	.word	0x20000214

08008d84 <__sfputc_r>:
 8008d84:	6893      	ldr	r3, [r2, #8]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	b410      	push	{r4}
 8008d8c:	6093      	str	r3, [r2, #8]
 8008d8e:	da08      	bge.n	8008da2 <__sfputc_r+0x1e>
 8008d90:	6994      	ldr	r4, [r2, #24]
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	db01      	blt.n	8008d9a <__sfputc_r+0x16>
 8008d96:	290a      	cmp	r1, #10
 8008d98:	d103      	bne.n	8008da2 <__sfputc_r+0x1e>
 8008d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9e:	f7fd bd89 	b.w	80068b4 <__swbuf_r>
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	1c58      	adds	r0, r3, #1
 8008da6:	6010      	str	r0, [r2, #0]
 8008da8:	7019      	strb	r1, [r3, #0]
 8008daa:	4608      	mov	r0, r1
 8008dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <__sfputs_r>:
 8008db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	18d5      	adds	r5, r2, r3
 8008dbc:	42ac      	cmp	r4, r5
 8008dbe:	d101      	bne.n	8008dc4 <__sfputs_r+0x12>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e007      	b.n	8008dd4 <__sfputs_r+0x22>
 8008dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc8:	463a      	mov	r2, r7
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ffda 	bl	8008d84 <__sfputc_r>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d1f3      	bne.n	8008dbc <__sfputs_r+0xa>
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd8 <_vfiprintf_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	460d      	mov	r5, r1
 8008dde:	b09d      	sub	sp, #116	; 0x74
 8008de0:	4614      	mov	r4, r2
 8008de2:	4698      	mov	r8, r3
 8008de4:	4606      	mov	r6, r0
 8008de6:	b118      	cbz	r0, 8008df0 <_vfiprintf_r+0x18>
 8008de8:	6983      	ldr	r3, [r0, #24]
 8008dea:	b90b      	cbnz	r3, 8008df0 <_vfiprintf_r+0x18>
 8008dec:	f7fe fdb6 	bl	800795c <__sinit>
 8008df0:	4b89      	ldr	r3, [pc, #548]	; (8009018 <_vfiprintf_r+0x240>)
 8008df2:	429d      	cmp	r5, r3
 8008df4:	d11b      	bne.n	8008e2e <_vfiprintf_r+0x56>
 8008df6:	6875      	ldr	r5, [r6, #4]
 8008df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dfa:	07d9      	lsls	r1, r3, #31
 8008dfc:	d405      	bmi.n	8008e0a <_vfiprintf_r+0x32>
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	059a      	lsls	r2, r3, #22
 8008e02:	d402      	bmi.n	8008e0a <_vfiprintf_r+0x32>
 8008e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e06:	f7ff f9ba 	bl	800817e <__retarget_lock_acquire_recursive>
 8008e0a:	89ab      	ldrh	r3, [r5, #12]
 8008e0c:	071b      	lsls	r3, r3, #28
 8008e0e:	d501      	bpl.n	8008e14 <_vfiprintf_r+0x3c>
 8008e10:	692b      	ldr	r3, [r5, #16]
 8008e12:	b9eb      	cbnz	r3, 8008e50 <_vfiprintf_r+0x78>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4630      	mov	r0, r6
 8008e18:	f7fd fd9e 	bl	8006958 <__swsetup_r>
 8008e1c:	b1c0      	cbz	r0, 8008e50 <_vfiprintf_r+0x78>
 8008e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e20:	07dc      	lsls	r4, r3, #31
 8008e22:	d50e      	bpl.n	8008e42 <_vfiprintf_r+0x6a>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	b01d      	add	sp, #116	; 0x74
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	4b7b      	ldr	r3, [pc, #492]	; (800901c <_vfiprintf_r+0x244>)
 8008e30:	429d      	cmp	r5, r3
 8008e32:	d101      	bne.n	8008e38 <_vfiprintf_r+0x60>
 8008e34:	68b5      	ldr	r5, [r6, #8]
 8008e36:	e7df      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008e38:	4b79      	ldr	r3, [pc, #484]	; (8009020 <_vfiprintf_r+0x248>)
 8008e3a:	429d      	cmp	r5, r3
 8008e3c:	bf08      	it	eq
 8008e3e:	68f5      	ldreq	r5, [r6, #12]
 8008e40:	e7da      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008e42:	89ab      	ldrh	r3, [r5, #12]
 8008e44:	0598      	lsls	r0, r3, #22
 8008e46:	d4ed      	bmi.n	8008e24 <_vfiprintf_r+0x4c>
 8008e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e4a:	f7ff f999 	bl	8008180 <__retarget_lock_release_recursive>
 8008e4e:	e7e9      	b.n	8008e24 <_vfiprintf_r+0x4c>
 8008e50:	2300      	movs	r3, #0
 8008e52:	9309      	str	r3, [sp, #36]	; 0x24
 8008e54:	2320      	movs	r3, #32
 8008e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e5e:	2330      	movs	r3, #48	; 0x30
 8008e60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009024 <_vfiprintf_r+0x24c>
 8008e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e68:	f04f 0901 	mov.w	r9, #1
 8008e6c:	4623      	mov	r3, r4
 8008e6e:	469a      	mov	sl, r3
 8008e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e74:	b10a      	cbz	r2, 8008e7a <_vfiprintf_r+0xa2>
 8008e76:	2a25      	cmp	r2, #37	; 0x25
 8008e78:	d1f9      	bne.n	8008e6e <_vfiprintf_r+0x96>
 8008e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e7e:	d00b      	beq.n	8008e98 <_vfiprintf_r+0xc0>
 8008e80:	465b      	mov	r3, fp
 8008e82:	4622      	mov	r2, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ff93 	bl	8008db2 <__sfputs_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f000 80aa 	beq.w	8008fe6 <_vfiprintf_r+0x20e>
 8008e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e94:	445a      	add	r2, fp
 8008e96:	9209      	str	r2, [sp, #36]	; 0x24
 8008e98:	f89a 3000 	ldrb.w	r3, [sl]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 80a2 	beq.w	8008fe6 <_vfiprintf_r+0x20e>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eac:	f10a 0a01 	add.w	sl, sl, #1
 8008eb0:	9304      	str	r3, [sp, #16]
 8008eb2:	9307      	str	r3, [sp, #28]
 8008eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8008eba:	4654      	mov	r4, sl
 8008ebc:	2205      	movs	r2, #5
 8008ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec2:	4858      	ldr	r0, [pc, #352]	; (8009024 <_vfiprintf_r+0x24c>)
 8008ec4:	f7f7 f994 	bl	80001f0 <memchr>
 8008ec8:	9a04      	ldr	r2, [sp, #16]
 8008eca:	b9d8      	cbnz	r0, 8008f04 <_vfiprintf_r+0x12c>
 8008ecc:	06d1      	lsls	r1, r2, #27
 8008ece:	bf44      	itt	mi
 8008ed0:	2320      	movmi	r3, #32
 8008ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ed6:	0713      	lsls	r3, r2, #28
 8008ed8:	bf44      	itt	mi
 8008eda:	232b      	movmi	r3, #43	; 0x2b
 8008edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ee6:	d015      	beq.n	8008f14 <_vfiprintf_r+0x13c>
 8008ee8:	9a07      	ldr	r2, [sp, #28]
 8008eea:	4654      	mov	r4, sl
 8008eec:	2000      	movs	r0, #0
 8008eee:	f04f 0c0a 	mov.w	ip, #10
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ef8:	3b30      	subs	r3, #48	; 0x30
 8008efa:	2b09      	cmp	r3, #9
 8008efc:	d94e      	bls.n	8008f9c <_vfiprintf_r+0x1c4>
 8008efe:	b1b0      	cbz	r0, 8008f2e <_vfiprintf_r+0x156>
 8008f00:	9207      	str	r2, [sp, #28]
 8008f02:	e014      	b.n	8008f2e <_vfiprintf_r+0x156>
 8008f04:	eba0 0308 	sub.w	r3, r0, r8
 8008f08:	fa09 f303 	lsl.w	r3, r9, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	9304      	str	r3, [sp, #16]
 8008f10:	46a2      	mov	sl, r4
 8008f12:	e7d2      	b.n	8008eba <_vfiprintf_r+0xe2>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	1d19      	adds	r1, r3, #4
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	9103      	str	r1, [sp, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bfbb      	ittet	lt
 8008f20:	425b      	neglt	r3, r3
 8008f22:	f042 0202 	orrlt.w	r2, r2, #2
 8008f26:	9307      	strge	r3, [sp, #28]
 8008f28:	9307      	strlt	r3, [sp, #28]
 8008f2a:	bfb8      	it	lt
 8008f2c:	9204      	strlt	r2, [sp, #16]
 8008f2e:	7823      	ldrb	r3, [r4, #0]
 8008f30:	2b2e      	cmp	r3, #46	; 0x2e
 8008f32:	d10c      	bne.n	8008f4e <_vfiprintf_r+0x176>
 8008f34:	7863      	ldrb	r3, [r4, #1]
 8008f36:	2b2a      	cmp	r3, #42	; 0x2a
 8008f38:	d135      	bne.n	8008fa6 <_vfiprintf_r+0x1ce>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	1d1a      	adds	r2, r3, #4
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	9203      	str	r2, [sp, #12]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	bfb8      	it	lt
 8008f46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f4a:	3402      	adds	r4, #2
 8008f4c:	9305      	str	r3, [sp, #20]
 8008f4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009034 <_vfiprintf_r+0x25c>
 8008f52:	7821      	ldrb	r1, [r4, #0]
 8008f54:	2203      	movs	r2, #3
 8008f56:	4650      	mov	r0, sl
 8008f58:	f7f7 f94a 	bl	80001f0 <memchr>
 8008f5c:	b140      	cbz	r0, 8008f70 <_vfiprintf_r+0x198>
 8008f5e:	2340      	movs	r3, #64	; 0x40
 8008f60:	eba0 000a 	sub.w	r0, r0, sl
 8008f64:	fa03 f000 	lsl.w	r0, r3, r0
 8008f68:	9b04      	ldr	r3, [sp, #16]
 8008f6a:	4303      	orrs	r3, r0
 8008f6c:	3401      	adds	r4, #1
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f74:	482c      	ldr	r0, [pc, #176]	; (8009028 <_vfiprintf_r+0x250>)
 8008f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f7a:	2206      	movs	r2, #6
 8008f7c:	f7f7 f938 	bl	80001f0 <memchr>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d03f      	beq.n	8009004 <_vfiprintf_r+0x22c>
 8008f84:	4b29      	ldr	r3, [pc, #164]	; (800902c <_vfiprintf_r+0x254>)
 8008f86:	bb1b      	cbnz	r3, 8008fd0 <_vfiprintf_r+0x1f8>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	3307      	adds	r3, #7
 8008f8c:	f023 0307 	bic.w	r3, r3, #7
 8008f90:	3308      	adds	r3, #8
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f96:	443b      	add	r3, r7
 8008f98:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9a:	e767      	b.n	8008e6c <_vfiprintf_r+0x94>
 8008f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	e7a5      	b.n	8008ef2 <_vfiprintf_r+0x11a>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	3401      	adds	r4, #1
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	4619      	mov	r1, r3
 8008fae:	f04f 0c0a 	mov.w	ip, #10
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fb8:	3a30      	subs	r2, #48	; 0x30
 8008fba:	2a09      	cmp	r2, #9
 8008fbc:	d903      	bls.n	8008fc6 <_vfiprintf_r+0x1ee>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0c5      	beq.n	8008f4e <_vfiprintf_r+0x176>
 8008fc2:	9105      	str	r1, [sp, #20]
 8008fc4:	e7c3      	b.n	8008f4e <_vfiprintf_r+0x176>
 8008fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fca:	4604      	mov	r4, r0
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e7f0      	b.n	8008fb2 <_vfiprintf_r+0x1da>
 8008fd0:	ab03      	add	r3, sp, #12
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	4b16      	ldr	r3, [pc, #88]	; (8009030 <_vfiprintf_r+0x258>)
 8008fd8:	a904      	add	r1, sp, #16
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7fc f9c6 	bl	800536c <_printf_float>
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	1c78      	adds	r0, r7, #1
 8008fe4:	d1d6      	bne.n	8008f94 <_vfiprintf_r+0x1bc>
 8008fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe8:	07d9      	lsls	r1, r3, #31
 8008fea:	d405      	bmi.n	8008ff8 <_vfiprintf_r+0x220>
 8008fec:	89ab      	ldrh	r3, [r5, #12]
 8008fee:	059a      	lsls	r2, r3, #22
 8008ff0:	d402      	bmi.n	8008ff8 <_vfiprintf_r+0x220>
 8008ff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ff4:	f7ff f8c4 	bl	8008180 <__retarget_lock_release_recursive>
 8008ff8:	89ab      	ldrh	r3, [r5, #12]
 8008ffa:	065b      	lsls	r3, r3, #25
 8008ffc:	f53f af12 	bmi.w	8008e24 <_vfiprintf_r+0x4c>
 8009000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009002:	e711      	b.n	8008e28 <_vfiprintf_r+0x50>
 8009004:	ab03      	add	r3, sp, #12
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	462a      	mov	r2, r5
 800900a:	4b09      	ldr	r3, [pc, #36]	; (8009030 <_vfiprintf_r+0x258>)
 800900c:	a904      	add	r1, sp, #16
 800900e:	4630      	mov	r0, r6
 8009010:	f7fc fc50 	bl	80058b4 <_printf_i>
 8009014:	e7e4      	b.n	8008fe0 <_vfiprintf_r+0x208>
 8009016:	bf00      	nop
 8009018:	080099dc 	.word	0x080099dc
 800901c:	080099fc 	.word	0x080099fc
 8009020:	080099bc 	.word	0x080099bc
 8009024:	08009bfc 	.word	0x08009bfc
 8009028:	08009c06 	.word	0x08009c06
 800902c:	0800536d 	.word	0x0800536d
 8009030:	08008db3 	.word	0x08008db3
 8009034:	08009c02 	.word	0x08009c02

08009038 <nan>:
 8009038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009040 <nan+0x8>
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	00000000 	.word	0x00000000
 8009044:	7ff80000 	.word	0x7ff80000

08009048 <_sbrk_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d06      	ldr	r5, [pc, #24]	; (8009064 <_sbrk_r+0x1c>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7f8 fba6 	bl	80017a4 <_sbrk>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_sbrk_r+0x1a>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_sbrk_r+0x1a>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20000528 	.word	0x20000528

08009068 <__sread>:
 8009068:	b510      	push	{r4, lr}
 800906a:	460c      	mov	r4, r1
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	f000 f8ee 	bl	8009250 <_read_r>
 8009074:	2800      	cmp	r0, #0
 8009076:	bfab      	itete	ge
 8009078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800907a:	89a3      	ldrhlt	r3, [r4, #12]
 800907c:	181b      	addge	r3, r3, r0
 800907e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009082:	bfac      	ite	ge
 8009084:	6563      	strge	r3, [r4, #84]	; 0x54
 8009086:	81a3      	strhlt	r3, [r4, #12]
 8009088:	bd10      	pop	{r4, pc}

0800908a <__swrite>:
 800908a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908e:	461f      	mov	r7, r3
 8009090:	898b      	ldrh	r3, [r1, #12]
 8009092:	05db      	lsls	r3, r3, #23
 8009094:	4605      	mov	r5, r0
 8009096:	460c      	mov	r4, r1
 8009098:	4616      	mov	r6, r2
 800909a:	d505      	bpl.n	80090a8 <__swrite+0x1e>
 800909c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a0:	2302      	movs	r3, #2
 80090a2:	2200      	movs	r2, #0
 80090a4:	f000 f8b6 	bl	8009214 <_lseek_r>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090b2:	81a3      	strh	r3, [r4, #12]
 80090b4:	4632      	mov	r2, r6
 80090b6:	463b      	mov	r3, r7
 80090b8:	4628      	mov	r0, r5
 80090ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090be:	f000 b835 	b.w	800912c <_write_r>

080090c2 <__sseek>:
 80090c2:	b510      	push	{r4, lr}
 80090c4:	460c      	mov	r4, r1
 80090c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ca:	f000 f8a3 	bl	8009214 <_lseek_r>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	bf15      	itete	ne
 80090d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090de:	81a3      	strheq	r3, [r4, #12]
 80090e0:	bf18      	it	ne
 80090e2:	81a3      	strhne	r3, [r4, #12]
 80090e4:	bd10      	pop	{r4, pc}

080090e6 <__sclose>:
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 b84f 	b.w	800918c <_close_r>

080090ee <strncmp>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	b16a      	cbz	r2, 800910e <strncmp+0x20>
 80090f2:	3901      	subs	r1, #1
 80090f4:	1884      	adds	r4, r0, r2
 80090f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80090fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090fe:	4293      	cmp	r3, r2
 8009100:	d103      	bne.n	800910a <strncmp+0x1c>
 8009102:	42a0      	cmp	r0, r4
 8009104:	d001      	beq.n	800910a <strncmp+0x1c>
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f5      	bne.n	80090f6 <strncmp+0x8>
 800910a:	1a98      	subs	r0, r3, r2
 800910c:	bd10      	pop	{r4, pc}
 800910e:	4610      	mov	r0, r2
 8009110:	e7fc      	b.n	800910c <strncmp+0x1e>

08009112 <__ascii_wctomb>:
 8009112:	b149      	cbz	r1, 8009128 <__ascii_wctomb+0x16>
 8009114:	2aff      	cmp	r2, #255	; 0xff
 8009116:	bf85      	ittet	hi
 8009118:	238a      	movhi	r3, #138	; 0x8a
 800911a:	6003      	strhi	r3, [r0, #0]
 800911c:	700a      	strbls	r2, [r1, #0]
 800911e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009122:	bf98      	it	ls
 8009124:	2001      	movls	r0, #1
 8009126:	4770      	bx	lr
 8009128:	4608      	mov	r0, r1
 800912a:	4770      	bx	lr

0800912c <_write_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	; (800914c <_write_r+0x20>)
 8009130:	4604      	mov	r4, r0
 8009132:	4608      	mov	r0, r1
 8009134:	4611      	mov	r1, r2
 8009136:	2200      	movs	r2, #0
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f7f8 fae1 	bl	8001702 <_write>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_write_r+0x1e>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_write_r+0x1e>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20000528 	.word	0x20000528

08009150 <__assert_func>:
 8009150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009152:	4614      	mov	r4, r2
 8009154:	461a      	mov	r2, r3
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <__assert_func+0x2c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4605      	mov	r5, r0
 800915c:	68d8      	ldr	r0, [r3, #12]
 800915e:	b14c      	cbz	r4, 8009174 <__assert_func+0x24>
 8009160:	4b07      	ldr	r3, [pc, #28]	; (8009180 <__assert_func+0x30>)
 8009162:	9100      	str	r1, [sp, #0]
 8009164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009168:	4906      	ldr	r1, [pc, #24]	; (8009184 <__assert_func+0x34>)
 800916a:	462b      	mov	r3, r5
 800916c:	f000 f81e 	bl	80091ac <fiprintf>
 8009170:	f000 f880 	bl	8009274 <abort>
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <__assert_func+0x38>)
 8009176:	461c      	mov	r4, r3
 8009178:	e7f3      	b.n	8009162 <__assert_func+0x12>
 800917a:	bf00      	nop
 800917c:	20000014 	.word	0x20000014
 8009180:	08009c0d 	.word	0x08009c0d
 8009184:	08009c1a 	.word	0x08009c1a
 8009188:	08009c48 	.word	0x08009c48

0800918c <_close_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_close_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f8 facf 	bl	800173a <_close>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_close_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_close_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000528 	.word	0x20000528

080091ac <fiprintf>:
 80091ac:	b40e      	push	{r1, r2, r3}
 80091ae:	b503      	push	{r0, r1, lr}
 80091b0:	4601      	mov	r1, r0
 80091b2:	ab03      	add	r3, sp, #12
 80091b4:	4805      	ldr	r0, [pc, #20]	; (80091cc <fiprintf+0x20>)
 80091b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ba:	6800      	ldr	r0, [r0, #0]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	f7ff fe0b 	bl	8008dd8 <_vfiprintf_r>
 80091c2:	b002      	add	sp, #8
 80091c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c8:	b003      	add	sp, #12
 80091ca:	4770      	bx	lr
 80091cc:	20000014 	.word	0x20000014

080091d0 <_fstat_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	4d07      	ldr	r5, [pc, #28]	; (80091f0 <_fstat_r+0x20>)
 80091d4:	2300      	movs	r3, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	f7f8 fab8 	bl	8001752 <_fstat>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d102      	bne.n	80091ec <_fstat_r+0x1c>
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	b103      	cbz	r3, 80091ec <_fstat_r+0x1c>
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	bf00      	nop
 80091f0:	20000528 	.word	0x20000528

080091f4 <_isatty_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_isatty_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f8 fab7 	bl	8001772 <_isatty>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_isatty_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_isatty_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20000528 	.word	0x20000528

08009214 <_lseek_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4d07      	ldr	r5, [pc, #28]	; (8009234 <_lseek_r+0x20>)
 8009218:	4604      	mov	r4, r0
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	2200      	movs	r2, #0
 8009220:	602a      	str	r2, [r5, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f7f8 fab0 	bl	8001788 <_lseek>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_lseek_r+0x1e>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_lseek_r+0x1e>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20000528 	.word	0x20000528

08009238 <__malloc_lock>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__malloc_lock+0x8>)
 800923a:	f7fe bfa0 	b.w	800817e <__retarget_lock_acquire_recursive>
 800923e:	bf00      	nop
 8009240:	20000520 	.word	0x20000520

08009244 <__malloc_unlock>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__malloc_unlock+0x8>)
 8009246:	f7fe bf9b 	b.w	8008180 <__retarget_lock_release_recursive>
 800924a:	bf00      	nop
 800924c:	20000520 	.word	0x20000520

08009250 <_read_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d07      	ldr	r5, [pc, #28]	; (8009270 <_read_r+0x20>)
 8009254:	4604      	mov	r4, r0
 8009256:	4608      	mov	r0, r1
 8009258:	4611      	mov	r1, r2
 800925a:	2200      	movs	r2, #0
 800925c:	602a      	str	r2, [r5, #0]
 800925e:	461a      	mov	r2, r3
 8009260:	f7f8 fa32 	bl	80016c8 <_read>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_read_r+0x1e>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	b103      	cbz	r3, 800926e <_read_r+0x1e>
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	20000528 	.word	0x20000528

08009274 <abort>:
 8009274:	b508      	push	{r3, lr}
 8009276:	2006      	movs	r0, #6
 8009278:	f000 f82c 	bl	80092d4 <raise>
 800927c:	2001      	movs	r0, #1
 800927e:	f7f8 fa19 	bl	80016b4 <_exit>

08009282 <_raise_r>:
 8009282:	291f      	cmp	r1, #31
 8009284:	b538      	push	{r3, r4, r5, lr}
 8009286:	4604      	mov	r4, r0
 8009288:	460d      	mov	r5, r1
 800928a:	d904      	bls.n	8009296 <_raise_r+0x14>
 800928c:	2316      	movs	r3, #22
 800928e:	6003      	str	r3, [r0, #0]
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	bd38      	pop	{r3, r4, r5, pc}
 8009296:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009298:	b112      	cbz	r2, 80092a0 <_raise_r+0x1e>
 800929a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800929e:	b94b      	cbnz	r3, 80092b4 <_raise_r+0x32>
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 f831 	bl	8009308 <_getpid_r>
 80092a6:	462a      	mov	r2, r5
 80092a8:	4601      	mov	r1, r0
 80092aa:	4620      	mov	r0, r4
 80092ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b0:	f000 b818 	b.w	80092e4 <_kill_r>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d00a      	beq.n	80092ce <_raise_r+0x4c>
 80092b8:	1c59      	adds	r1, r3, #1
 80092ba:	d103      	bne.n	80092c4 <_raise_r+0x42>
 80092bc:	2316      	movs	r3, #22
 80092be:	6003      	str	r3, [r0, #0]
 80092c0:	2001      	movs	r0, #1
 80092c2:	e7e7      	b.n	8009294 <_raise_r+0x12>
 80092c4:	2400      	movs	r4, #0
 80092c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092ca:	4628      	mov	r0, r5
 80092cc:	4798      	blx	r3
 80092ce:	2000      	movs	r0, #0
 80092d0:	e7e0      	b.n	8009294 <_raise_r+0x12>
	...

080092d4 <raise>:
 80092d4:	4b02      	ldr	r3, [pc, #8]	; (80092e0 <raise+0xc>)
 80092d6:	4601      	mov	r1, r0
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	f7ff bfd2 	b.w	8009282 <_raise_r>
 80092de:	bf00      	nop
 80092e0:	20000014 	.word	0x20000014

080092e4 <_kill_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4d07      	ldr	r5, [pc, #28]	; (8009304 <_kill_r+0x20>)
 80092e8:	2300      	movs	r3, #0
 80092ea:	4604      	mov	r4, r0
 80092ec:	4608      	mov	r0, r1
 80092ee:	4611      	mov	r1, r2
 80092f0:	602b      	str	r3, [r5, #0]
 80092f2:	f7f8 f9cf 	bl	8001694 <_kill>
 80092f6:	1c43      	adds	r3, r0, #1
 80092f8:	d102      	bne.n	8009300 <_kill_r+0x1c>
 80092fa:	682b      	ldr	r3, [r5, #0]
 80092fc:	b103      	cbz	r3, 8009300 <_kill_r+0x1c>
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	bd38      	pop	{r3, r4, r5, pc}
 8009302:	bf00      	nop
 8009304:	20000528 	.word	0x20000528

08009308 <_getpid_r>:
 8009308:	f7f8 b9bc 	b.w	8001684 <_getpid>

0800930c <_init>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr

08009318 <_fini>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr
